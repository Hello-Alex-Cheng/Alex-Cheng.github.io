{"meta":{"title":"Hello_AlexCc","subtitle":"No pains, no gains.","description":"Technology Blog","author":"Hello_AlexCc","url":"http://yoursite.com","root":"/"},"pages":[{"title":"About ME","date":"2022-03-30T02:53:37.000Z","updated":"2024-06-11T08:52:17.362Z","comments":false,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"StoryA long time ago … A cat is sleeping，very very deep sleeping… Suddently, He find a mouse … God damn it, a so cute mouse! He don’t want to eat he, play with he."},{"title":"","date":"2024-06-11T08:52:17.491Z","updated":"2024-06-11T08:52:17.491Z","comments":false,"path":"demo/PubSubMode.html","permalink":"http://yoursite.com/demo/PubSubMode.html","excerpt":"","text":"发布订阅者模式 ul { background-color: antiquewhite; } li { background-color: aqua; margin-top: 12px; } 面包屑 1 2 3 const PubSub = { message: {}, // 将事件存储数组，改成对象，key 表示事件类型，value 表示订阅的事件数组 publist(type, text) { if (!this.message[type]) return this.message[type].forEach(cb => { cb(text) }) }, subscribe(type, cb) { if (!this.message[type]) { this.message[type] = [cb] // 如果事件 type 不存在，我们就创建一个事件类型数组 } else { this.message[type].push(cb) } }, unsubscribe(type, cb) { // 取消订阅 if (!this.message[type]) return if (!cb) { // 取消所有订阅的事件 this.message[type] = [] } else { this.message[type] = this.message[type].filter(i => i !== cb) } } } PubSub.subscribe('updateBread', function (text) { const breadEle = document.querySelector('.bread') breadEle.innerHTML = text }) let oLi = document.querySelectorAll('.left li') for (let i = 0; i < oLi.length; i++) { oLi[i].onclick = function () { PubSub.publist('updateBread', this.innerHTML) } }"},{"title":"","date":"2024-06-11T08:52:17.490Z","updated":"2024-06-11T08:52:17.490Z","comments":false,"path":"demo/ObserverMode.html","permalink":"http://yoursite.com/demo/ObserverMode.html","excerpt":"","text":"观察者模式 ul { background-color: antiquewhite; } li { background-color: aqua; margin-top: 12px; } 面包屑 1 2 3 // 目标 class Subject { constructor() { this.observers = [] } add(ob) { this.observers.push(ob) } notify(text) { this.observers.forEach(o => { o.update(text) }) } } // 观察者 class Observer { constructor(name) { this.ele = document.querySelector(name) } update(text) { this.ele.innerHTML = text } } const s = new Subject() const o1 = new Observer('.bread') s.add(o1) let oLi = document.querySelectorAll('.left li') for (let i = 0; i < oLi.length; i++) { oLi[i].onclick = function () { s.notify(this.innerHTML) } }"},{"title":"","date":"2024-06-11T08:52:17.491Z","updated":"2024-06-11T08:52:17.491Z","comments":false,"path":"demo/Vue3Reactive.html","permalink":"http://yoursite.com/demo/Vue3Reactive.html","excerpt":"","text":"Vue3 响应式原理 // 定义一个存储副作用函数的集合，每次设置对象时，我们就会取出集合里面的副作用函数，并执行 const bucket = new Set() const data = { text: 'helloworld' } const obj = new Proxy(data, { get(target, key) { // 添加副作用函数 // 每一次触发 get 方法，都会向 集合 中添加一次 effect 方法 // 但是集合是不会存储相同的值的（包括相同的内存地址） // 所以这里每一次执行 bucket.add 方法，因为 effect 地址没变，所以里面一直只会有一个副作用函数。 bucket.add(effect) return target[key] }, set(target, key, val) { target[key] = val // 批量执行副作用函数 bucket.forEach(fn => fn()) return true } }) // 执行副作用函数，会触发代理对象的 get 方法，从而收集到副作用函数 const effect = () => { document.body.innerHTML = obj.text } effect() // 一秒钟后，我们执行 代理对象的 set 操作，出发 set 方法 setTimeout(() => { obj.text = 'update obj text' console.log('??',bucket) }, 1000);"},{"title":"","date":"2024-06-11T08:52:17.491Z","updated":"2024-06-11T08:52:17.491Z","comments":false,"path":"demo/Vue3Reactive1.html","permalink":"http://yoursite.com/demo/Vue3Reactive1.html","excerpt":"","text":"Document let activeEffect = undefined const data = { text: 'hello world @.@' } function effect(fn) { activeEffect = fn fn() } const bucket = new WeakMap() // target => Map const obj = new Proxy(data, { get(target, key) { if (!activeEffect) return target[key] let depsMap = bucket.get(target) if (!depsMap) { // 关联 target 和 Map bucket.set(target, depsMap = new Map()) } let deps = depsMap.get(key) if (!deps) { // 依赖集合 depsMap.set(key, deps = new Set()) } deps.add(activeEffect) return target[key] }, set(target, key, val) { target[key] = val const depsMap = bucket.get(target) console.log('depsMap ', depsMap) if (!depsMap) return let effects = depsMap.get(key) effects && effects.forEach(fn => fn()) } }) // 注册副作用函数 effect(() => { console.log('text effect') document.body.innerHTML = obj.text // 读取 }) // effect(() => { // console.log('title effect') // obj.title = '标题123' // // document.title = obj.title // 读取 // }) setTimeout(() => { obj.notExist = 'hello vue3' }, 1000)"},{"title":"","date":"2024-06-11T08:52:17.491Z","updated":"2024-06-11T08:52:17.491Z","comments":false,"path":"demo/Vue3Reactive2.html","permalink":"http://yoursite.com/demo/Vue3Reactive2.html","excerpt":"","text":"收集 key 的依赖 // 存储被注册的副作用函数 let activeEffect; const data = { ok: true, text: 'hello world' } const bucket = new WeakMap() // target => Map const obj = new Proxy(data, { get(target, key) { // 追踪依赖 track(target, key) return target[key] }, set(target, key, value) { target[key] = value // 触发依赖 trigger(target, key) } }) function track(target, key) { if (!activeEffect) return target[key] let depsMap = bucket.get(target) if (!depsMap) { bucket.set(target, depsMap = new Map()) } let deps = depsMap.get(key) if (!deps) { depsMap.set(key, deps = new Set()) } // 添加副作用函数 deps.add(activeEffect) // deps 存储与该副作用函数相关联的依赖集合 // 将来在 cleanup 中通过 activeEffect.deps[i] delete effectFn 时，其实，就是将 deps 中的副作用函数删除了 activeEffect.deps.push(deps) } function trigger(target, key) { const depsMap = bucket.get(target) if (!depsMap) return const effects = depsMap.get(key) const effectsToRun = new Set(effects) // effects && effects.forEach(fn => fn()) effectsToRun && effectsToRun.forEach(fn => fn()) } function effect(fn) { function effectFn() { activeEffect = effectFn cleanup(effectFn) fn() } effectFn.deps = [] // 存储所有包含当前副作用函数的依赖 集合，在 get 拦截函数中处理 deps effectFn() } function cleanup(effectFn) { console.log('effectFn ', effectFn.deps) // 我们删除 effectFn.deps[i] 中的 effectFn，其实就是删除了 'xxx'(key) 中对应的依赖集合的副作用函数 // effectFn.deps[i] 中，存放的依赖集合，和 Map key 对应的依赖集合，是同一个集合，删除某一项，自然会影响到另一个 // 当我们在 trigger 中执行 effects 时，就是执行副作用函数 // 这个时候，会执行 cleanup，删除所有的 key 对应的副作用函数，最后执行 fn，重新走 属性的读取逻辑，触发 get 方法，重新收集依赖 // 当我们设置 obj.ok = false 后，不会再读取 obj.text 了，从而不会对其 key 收集依赖。 for(let i = 0; i < effectFn.deps.length; i++) { const deps = effectFn.deps[i] deps.delete(effectFn) } effectFn.deps.length = 0 } effect(() => { console.log(' obj.ok', obj.ok) // obj.ok = true 会触发 obj 的 get拦截方法，并且通过 track 函数收集到了副作用函数，并且将其存储在 deps 中 document.body.innerHTML = obj.ok ? obj.text : 'ok not' }) setTimeout(() => { // obj.text = 'Vue3 Reactive' obj.ok = false console.log('bucket ', bucket) }, 1000) // setTimeout(() => { // console.log('执行了') // obj.text = 'Vue3 Reactive' // }, 3000)"},{"title":"","date":"2024-06-11T08:52:17.491Z","updated":"2024-06-11T08:52:17.491Z","comments":false,"path":"demo/Vue3Reactive3.html","permalink":"http://yoursite.com/demo/Vue3Reactive3.html","excerpt":"","text":"收集 key 的依赖 reactive let temp1, temp2; effect(function effect1() { console.log('effect1 执行') effect(function effect2() { console.log('effect2 执行') temp2 = obj.bar }) temp1 = obj.foo }) console.log('???', bucket) obj.foo = false // obj.bar = false"},{"title":"","date":"2024-06-11T08:52:17.492Z","updated":"2024-06-11T08:52:17.492Z","comments":false,"path":"demo/Vue3Reactive4.html","permalink":"http://yoursite.com/demo/Vue3Reactive4.html","excerpt":"","text":"收集 key 的依赖 reactive const data = { foo: 1 } const obj = handleProxy(data) // 控制次数 const jobQueue = new Set() const p = Promise.resolve() let isFlushing = false function flushJob() { if (isFlushing) return isFlushing = true p.then(() => { jobQueue.forEach(job => job()) }).finally(() => { isFlushing = false }) } effect(() => { console.log(obj.foo) }, { scheduler(fn) { // 调度 // setTimeout(fn) // 控制次数 // fn() // 会依次从 1 打印到 6，而我不在过程，只需要结果 6 // 由于 Set 集合的特殊性，多次添加同一个 fn，最终都只会有个 fn 在 set 中 jobQueue.add(fn) flushJob() } }) obj.foo++ obj.foo++ obj.foo++ obj.foo++ obj.foo++ console.log('结束了')"},{"title":"","date":"2024-06-11T08:52:17.494Z","updated":"2024-06-11T08:52:17.494Z","comments":false,"path":"demo/reactive.js","permalink":"http://yoursite.com/demo/reactive.js","excerpt":"","text":"// 存储被注册的副作用函数 let activeEffect; // 副作用函数栈，用来存储当前执行的副作用函数，当副作用函数发生嵌套时，避免函数错误的使用 const effectStack = [] const bucket = new WeakMap() // target => Map const handleProxy = data => { return new Proxy(data, { get(target, key) { // 追踪依赖 track(target, key) return target[key] }, set(target, key, value) { target[key] = value // 触发依赖 trigger(target, key) } }) } function track(target, key) { if (!activeEffect) return target[key] let depsMap = bucket.get(target) if (!depsMap) { bucket.set(target, depsMap = new Map()) } let deps = depsMap.get(key) if (!deps) { depsMap.set(key, deps = new Set()) } deps.add(activeEffect) activeEffect.deps.push(deps) } function trigger(target, key) { const depsMap = bucket.get(target) if (!depsMap) return const effects = depsMap.get(key) // 避免无限循环 // const effectsToRun = new Set(effects) const effectsToRun = new Set() effects && effects.forEach(effectFn => { if (effectFn !== activeEffect) { effectsToRun.add(effectFn) } }) effectsToRun && effectsToRun.forEach(fn => { if (fn.options.scheduler) { fn.options.scheduler(fn) } else { fn() } }) } function effect(fn, options = {}) { function effectFn() { activeEffect = effectFn cleanup(effectFn) effectStack.push(effectFn) // 执行副作用函数 fn() effectStack.pop() activeEffect = effectStack[effectStack.length - 1] } effectFn.options = options effectFn.deps = [] // 开始执行 effectFn() } function cleanup(effectFn) { for(let i = 0; i < effectFn.deps.length; i++) { const deps = effectFn.deps[i] deps.delete(effectFn) } effectFn.deps.length = 0 }"},{"title":"","date":"2024-06-11T08:52:17.494Z","updated":"2024-06-11T08:52:17.494Z","comments":false,"path":"demo/replace$1.html","permalink":"http://yoursite.com/demo/replace$1.html","excerpt":"","text":"Document const name = \"Doe, John\"; name.replace(/(\\w+)\\s*, \\s*(\\w+)/, \"$2 $1\") // John, Doe console.log('\"a\", \"b\"'.replace(/\"([^\"]*)\"/g, \"'$1'\"))"},{"title":"","date":"2024-06-11T08:52:17.494Z","updated":"2024-06-11T08:52:17.494Z","comments":false,"path":"demo/resizeObserver.html","permalink":"http://yoursite.com/demo/resizeObserver.html","excerpt":"","text":"Resize observer text test html { height: 100%; font-family: 'helvetica neue', arial, sans-serif; } body { height: inherit; margin: 0; display: flex; justify-content: center; align-items: center; } body>div { background-color: #eee; border: 1px solid #ccc; padding: 20px; width: 50%; min-width: 320px; } h1 { margin: 0; } p { line-height: 1.5; } form { width: 100%; } form>div { display: flex; } form label { flex: 2; } form input { flex: 3; } input[type=\"checkbox\"] { height: 2rem; } So what happened? https://developer.mozilla.org/zh-CN/docs/Web/API/ResizeObserver 记住，不要做任何影响任何事情的事情，除非事实证明你应该这么做，那样的话，看在上帝的份上，不要不做！我的灵魂！我不想被救。你们不是圣诞老人！你们都不是机器人。我得想办法逃离年轻时可怕的摧残。突然间，我每三个小时就要上一次厕所。社保局的那些混蛋也不再给我寄支票了。现在我得付钱给他们！ Observer enabled: Adjust width: if (window.ResizeObserver) { const h1Elem = document.querySelector('h1'); const pElem = document.querySelector('p'); const divElem = document.querySelector('body > div'); const slider = document.querySelector('input[type=\"range\"]'); const checkbox = document.querySelector('input[type=\"checkbox\"]'); divElem.style.width = '600px'; slider.addEventListener('input', () => { divElem.style.width = slider.value + 'px'; }) const resizeObserver = new ResizeObserver(entries => { console.log('entries', entries) for (let entry of entries) { if (entry.contentBoxSize) { // The standard makes contentBoxSize an array... if (entry.contentBoxSize[0]) { h1Elem.style.fontSize = Math.max(1.5, entry.contentBoxSize[0].inlineSize / 200) + 'rem'; pElem.style.fontSize = Math.max(1, entry.contentBoxSize[0].inlineSize / 600) + 'rem'; } else { // ...but old versions of Firefox treat it as a single item h1Elem.style.fontSize = Math.max(1.5, entry.contentBoxSize.inlineSize / 200) + 'rem'; pElem.style.fontSize = Math.max(1, entry.contentBoxSize.inlineSize / 600) + 'rem'; } } else { h1Elem.style.fontSize = Math.max(1.5, entry.contentRect.width / 200) + 'rem'; pElem.style.fontSize = Math.max(1, entry.contentRect.width / 600) + 'rem'; } } console.log('Size changed'); }); resizeObserver.observe(divElem); checkbox.addEventListener('change', () => { if (checkbox.checked) { resizeObserver.observe(divElem); } else { resizeObserver.unobserve(divElem); } }); } else { console.log('Resize observer not supported!'); }"},{"title":"","date":"2024-06-21T02:04:31.416Z","updated":"2024-06-21T02:04:31.416Z","comments":false,"path":"demo/timeFragment.html","permalink":"http://yoursite.com/demo/timeFragment.html","excerpt":"","text":"时间分片 // 记录任务开始时间 let now = Date.now(); // 插入十万条数据 const total = 100000; // 获取容器 let ul = document.getElementById('container'); // 将数据插入容器中 for (let i = 0; i < total; i++) { let li = document.createElement('li'); li.innerText = i ul.appendChild(li); } console.log('JS运行时间：', Date.now() - now); setTimeout(() => { console.log('总运行时间：', Date.now() - now); }, 0) // // --------- 分批渲染 --------- // //需要插入的容器 // let ul = document.getElementById('container'); // // 插入十万条数据 // let total = 100000; // // 一次插入 20 条 // let once = 20; // //总页数 // let page = total / once // //每条记录的索引 // let index = 0; // //循环加载数据 // function loop(curTotal, curIndex) { // if (curTotal { // for (let i = 0; i < pageCount; i++) { // let li = document.createElement('li'); // li.innerText = curIndex + i + ' : ' + ~~(Math.random() * total) // ul.appendChild(li) // } // loop(curTotal - pageCount, curIndex + pageCount) // }, 0) // } // loop(total, index);"},{"title":"","date":"2024-06-11T08:52:17.364Z","updated":"2024-06-11T08:52:17.364Z","comments":false,"path":"demo/2023面试准备/JavaScript语言精粹与编程实战.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/JavaScript%E8%AF%AD%E8%A8%80%E7%B2%BE%E7%B2%B9%E4%B8%8E%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98.html","excerpt":"","text":"你还需要更多的耐心与时间！"},{"title":"","date":"2024-06-11T08:52:17.365Z","updated":"2024-06-11T08:52:17.365Z","comments":false,"path":"demo/2023面试准备/JavaScript高级编程.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/JavaScript%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B.html","excerpt":"","text":"List of ECMAScript engineshttps://en.wikipedia.org/wiki/List_of_ECMAScript_engines"},{"title":"","date":"2024-06-11T08:52:17.365Z","updated":"2024-06-11T08:52:17.365Z","comments":false,"path":"demo/2023面试准备/Vue2&Vue3原理.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/Vue2&Vue3%E5%8E%9F%E7%90%86.html","excerpt":"","text":"如何理解 MVVM Model–view–viewmodel 数据驱动视图。 修改 Model 的数据（plain objects），Vue 的 ViewModel 会帮我们处理数据、监听数据变化等，异步渲染、更新 DOM。避免了我们手动去操作 DOM。 如何理解 ViewModel ？ 在 Vue 中， ViewModel 代表 Vue 提供的底层能力，比如事件的处理、响应式系统等，它是作为 View 层和 Model 层的桥梁，View 和 Model 之间的同步工作，都是自动的。 MVVM与MVC有什么区别？MVC是Model-View-Contoller的简写，即模型-视图-控制器。 MVC是单向通信，也就是View和Model必须通过Controller来承上启下。 比如用户在页面上（View层）操作了一个按钮，事件被控制器接收处理，修改 Model 层的数据，然后将最新的数据同步到 View 层。当然，用户也可以直接操作控制器，通过控制器修改 Model 层的数据，将更新后的数据同步到 View 中。 MVVM实现了View和Model的自动同步，当Model的属性改变时，不再需要自己手动操作DOM元素，提高了页面渲染性能。 在MVVM架构下，View 和 Model 之间并没有直接的联系，而是通过ViewModel进行交互，Model 和 ViewModel 之间的交互是双向的。 View 可以通过 ViewModel 中事件绑定 的方式影响 Model，Model 可以通过 ViewModel 中 数据绑定 的方式去影响 View。 生命周期 Vue 三要素 响应式 Vue 如何监听到 data 的每个属性变化 1234567891011121314151617181920const obj = &#123;&#125;let name = &#x27;&#x27;Object.defineProperty(obj, &#x27;name&#x27;, &#123; get: function() &#123; console.log(&#x27;触发 get&#x27;) return name &#125;, set: function(value) &#123; console.log(&#x27;触发 set&#x27;) name = value &#125;&#125;)console.log(&#x27;打印： &#x27;, obj.name)obj.name = &#x27;你好，世界&#x27;console.log(&#x27;打印： &#x27;, obj.name) 模板引擎 本质：字符串。 包含事件、指令、js 数据。 模板如何解析、指令如何处理。 12345678910111213// 到 Vue 源码中，查找 code.renderwith(this)&#123; return _c( &#x27;div&#x27;, &#123; attrs:&#123;&quot;id&quot;:&quot;app&quot;&#125; &#125;, [ _c(&#x27;ul&#x27;,_l((list),function(item)&#123;return _c(&#x27;li&#x27;,[_v(&quot;姓名：&quot;+_s(item.name)+&quot;, 年龄：&quot;+_s(item.age))])&#125;),0) ] )&#125; render 渲染函数 将字符串模板转化为 js 语法（虚拟DOM），那么是渲染成 html？渲染过程是如何？ Vue 响应式系统 Object.defineProperty（缺点） 深度监听，需要递归给所有对象的属性进行监听，如果我们的数据对象嵌套太深，计算量大。 直接给数据对象新增属性、或者通过 delete 删除对象属性，Vue 监听不到。所以有了 Vue.$set 和 Vue.$delete defineProperty 本身不具备监听数组，需要对数组的方法特殊处理 Proxy（IE11不支持，兼容性不好，无法 polyfill） Vue2 如何深度监听数据1234567891011121314151617function observer(target) &#123; for(let i in target) &#123; defineReactive(target, i, target[i]) &#125;&#125;function defineReactive(target, key, value) &#123; Object.defineProperty(target, key, &#123; get: function() &#123; return value &#125;, set: function(newValue) &#123; value = newValue updateView() // 更新视图 &#125; &#125;)&#125; Vue2 如何监听数组重写数组方法 12345const arrayPrototype = Array.prototype// 创建新对象，原型链指向数组的原型对象 newArrayProto.__proto__ === Array.prototype// 再扩展方法就不会影响到 Array.prototype 了，并且我们还可以覆盖原有的数组方法const newArrayProto = Object.create(arrayPrototype) 扩展原有方法 12345678910111213141516171819202122const methodsToPatch = [ &#x27;push&#x27;, &#x27;pop&#x27;, &#x27;shift&#x27;, &#x27;unshift&#x27;, &#x27;splice&#x27;, &#x27;sort&#x27;, &#x27;reverse&#x27;]; methodsToPatch.forEach(function (method) &#123; // cache original method const original = arrayPrototype[method]; // 劫持数组方法 newArrayProto[method] = function() &#123; updateView() // 执行原数组 original.call(this, ...arguments) &#125; &#125;) Vue3 的 Proxy 来代理对象1234567891011121314151617181920212223242526const o = &#123; name: &#x27;对象&#x27;, age: 19, favor: [&#x27;sing&#x27;, &#x27;dance&#x27;]&#125;const proxy = new Proxy(o, &#123; get(target, key, receiver) &#123; console.log(&#x27;有人来获取属性啦：&#x27;, target, key) return target[key] &#125;, set(target, key, value) &#123; target[key] = value &#125;&#125;)console.log(proxy.name)proxy.name = &#x27;123&#x27;console.log(proxy.name)proxy.favor.push(&#x27;hahahahahah&#x27;)console.log(proxy.favor) 虚拟 DOM 和 Diff 算法为什么需要 vDom，又为什么说操作 DOM 耗性能？ 主要是在两个方面： DOM 的实现和 JS 的实现属于两个独立的模块，跨模块交互性能消耗挺高。 耗浏览器性能，当我们操作 DOM，通常会引起浏览器的重绘和回流。 Virtual DOM用 JavaScript 对象结构表示 DOM 树的结构；然后用这个树构建一个真正的 DOM 树 Diff 算法树的 diff 算法时间复杂度为 O（n^3），是如优化到 O(n)的？ 只比较同一层级，不跨层比较 tag 不相同，直接删掉重建，不再深度比较 tag 和 key 相同，则认为是相同节点，不再深入比较 参考视频百度网盘-我的资源-前端框架及项目面试（Vue&amp;React原理、Webpack&amp;Babel、项目设计&amp;项目流程） ↩"},{"title":"","date":"2024-06-11T08:52:17.488Z","updated":"2024-06-11T08:52:17.488Z","comments":false,"path":"demo/2023面试准备/redux.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/redux.html","excerpt":"","text":"ReduxRedux 是一个管理全局应用状态的库 Redux 通常与 React-Redux 库一起使用，把 Redux 和 React 集成在一起 Redux Toolkit 是编写 Redux 逻辑的推荐方式 单向数据流 state action reducer 整个应用只有一个单一的 reducer 函数：这个函数是传给 createStore 的第一个参数。 工作流 123用户操作页面 =&gt; dispatch action =&gt; reducer =&gt; subscribe =&gt; 更改 state新的 state =&gt; --- 更新DOM ---- ===&gt; view react-redux connect：连接容器组件和傻瓜组件 123456const VisibleTodoList = connect( mapStateToProps, mapDispatchToProps)(TodoList)export default VisibleTodoList Provider：提供包含store的context。 123&lt;Provider store=&#123;store&#125;&gt; &lt;App /&gt;&lt;/Provider&gt;, createStore 第一个参数是 reducer 第二个参数是初始化 store 的状态 第二个参数的应用场景：比如我们想保留用户的操作，可以将最新的 state 保存起来，刷新页面后，用户的操作不会丢失。 1234567const cacheState = localStorage.getItem(&#x27;cacheState&#x27;)const store = createStore(todoApp, cacheState ? JSON.parse(cacheState) : initialState)store.subscribe(() =&gt; &#123; localStorage.setItem(&#x27;cacheState&#x27;, JSON.stringify(store.getState()))&#125;) 极简版 Redux 实现Redux Store 必须包含的几个模块 state dispatch listeners subscribe getState 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455const createStore = function(reducer, initialState = &#123;&#125;) &#123; const store = &#123;&#125; store.state = initialState store.listeners = [] store.subscribe = function(listener) &#123; store.listeners.push(listener) &#125; store.dispatch = function(action) &#123; store.state = reducer(store.state, action) store.listeners.forEach(listener =&gt; listener()) &#125; store.getState = function() &#123; return store.state &#125; return store&#125;// reducerfunction counter(state = 0, action) &#123; switch (action.type) &#123; case &#x27;INCREMENT&#x27;: return state + 1 case &#x27;DECREMENT&#x27;: return state - 1 default: return state &#125;&#125;const store = createStore(counter, 0)store.subscribe(() =&gt; &#123; console.log(&#x27;监听 &#x27;, store.getState())&#125;)console.log(&#x27;初始 state&#x27;, store.getState())store.dispatch(&#123; type: &#x27;INCREMENT&#x27;,&#125;)store.dispatch(&#123; type: &#x27;INCREMENT&#x27;,&#125;)console.log(&#x27;get state&#x27;, store.getState())store.dispatch(&#123; type: &#x27;DECREMENT&#x27;,&#125;) redux-toolkit https://cn.redux.js.org/tutorials/quick-start 安装 npm install @reduxjs/toolkit react-redux 创建 store，自动配置了 Redux DevTools 扩展 12345import &#123; configureStore &#125; from &#x27;@reduxjs/toolkit&#x27;export default configureStore(&#123; reducer: &#123;&#125;&#125;) 为 React 提供 Redux Store 123456789import store from &#x27;./app/store&#x27;import &#123; Provider &#125; from &#x27;react-redux&#x27;ReactDOM.render( &lt;Provider store=&#123;store&#125;&gt; &lt;App /&gt; &lt;/Provider&gt;, document.getElementById(&#x27;root&#x27;)) 创建 Redux State Slice 创建 slice 需要一个字符串名称来标识切片、一个初始 state 以及一个或多个定义了该如何更新 state 的 reducer 函数。slice 创建后 ，我们可以导出 slice 中生成的 Redux action creators 和 reducer 函数。 不过 Redux Toolkit createSlice 和 createReducer 在内部使用 Immer 允许我们编写“可变”的更新逻辑，变成正确的不可变更新。 createSlice 的函数，它负责生成 action 类型字符串、action creator 函数和 action 对象的工作 123456789101112131415161718192021222324252627282930// counter/counterSlice.jsimport &#123; createSlice &#125; from &#x27;@reduxjs/toolkit&#x27;export const counterSlice = createSlice(&#123; name: &#x27;counter&#x27;, initialState: &#123; value: 0 &#125;, reducers: &#123; increment: state =&gt; &#123; // Redux Toolkit 允许我们在 reducers 写 &quot;可变&quot; 逻辑。它 // 并不是真正的改变状态值，因为它使用了 Immer 库 // 可以检测到“草稿状态“ 的变化并且基于这些变化生产全新的 // 不可变的状态 state.value += 1 &#125;, decrement: state =&gt; &#123; state.value -= 1 &#125;, incrementByAmount: (state, action) =&gt; &#123; state.value += action.payload &#125; &#125;&#125;)// 每个 case reducer 函数会生成对应的 Action creatorsexport const &#123; increment, decrement, incrementByAmount &#125; = counterSlice.actions// 导出生成的 reducerexport default counterSlice.reducer 这样我们就生成了 counter reducer，我们不需要手动去创建 actions，createSlice 自动帮我们生成 actions。也可以在 reducers 中直接处理 state 了，因为 createReducer 内部使用了 immer 库处理 state 接下来，就是将生成的 counter reducer 放到 configureStore 配置中 12345678import &#123; configureStore &#125; from &#x27;@reduxjs/toolkit&#x27;import counterReducer from &#x27;../features/counter/counterSlice&#x27;export default configureStore(&#123; reducer: &#123; counter: counterReducer &#125;&#125;) 最后，我们可以在 React 组件中去使用了 1234567891011121314151617181920212223242526272829import React from &#x27;react&#x27;import &#123; useSelector, useDispatch &#125; from &#x27;react-redux&#x27;import &#123; decrement, increment &#125; from &#x27;./counterSlice&#x27;import styles from &#x27;./Counter.module.css&#x27;export function Counter() &#123; const count = useSelector(state =&gt; state.counter.value) const dispatch = useDispatch() return ( &lt;div&gt; &lt;div&gt; &lt;button aria-label=&quot;Increment value&quot; onClick=&#123;() =&gt; dispatch(increment())&#125; &gt; Increment &lt;/button&gt; &lt;span&gt;&#123;count&#125;&lt;/span&gt; &lt;button aria-label=&quot;Decrement value&quot; onClick=&#123;() =&gt; dispatch(decrement())&#125; &gt; Decrement &lt;/button&gt; &lt;/div&gt; &lt;/div&gt; )&#125; 用 Thunk 编写异步逻辑thunk 是一种特定类型的 Redux 函数，可以包含异步逻辑。Thunk 是使用两个函数编写的： 一个内部 thunk 函数，它以 dispatch 和 getState 作为参数 外部创建者函数，它创建并返回 thunk 函数 在原 Redux 中使用 thunk 需要在创建时将 redux-thunk middleware（一种 Redux 插件）添加到 Redux store 中。 不过，Redux Toolkit 的 configureStore 函数已经自动为我们配置好了，所以我们可以继续在这里使用 thunk。 12345678910// thunk 函数export const incrementAsync = (amount) =&gt; (dispatch) =&gt; &#123; setTimeout(() =&gt; &#123; dispatch(incrementByAmount(amount)) &#125;, 1000)&#125;// 从 store 的 state 中取出特定的 state value// 比如我们想要取 counter 的值export const selectCount = (state) =&gt; state.counter.value 12345678910111213import &#123; useSelector, useDispatch &#125; from &#x27;react-redux&#x27;;const count = useSelector(selectCount);const dispatch = useDispatch();&lt;button className=&#123;styles.asyncButton&#125; onClick=&#123;() =&gt; dispatch(incrementAsync(10))&#125;&gt; Add Async&lt;/button&gt; react-redux 中的 hooksReact-Redux 库有一组自定义 hooks，允许你的 React 组件与Redux store交互。连接 使用 useSelector 提取数据 使用 useDispatch 来 dispatch action 这两个钩子能访问 redux store，前提是通过 Provider 组件包裹了根组件，并提供了 store 属性。 参考【1】新版Redux 中文官网 【2】极精简的 Redux Tutorial 教程 【3】老版 Redux"},{"title":"","date":"2024-06-11T08:52:17.489Z","updated":"2024-06-11T08:52:17.489Z","comments":false,"path":"demo/2023面试准备/深入理解 React.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%20React.html","excerpt":"","text":"源码阅读 https://react.jokcy.me/book/api/react-element.html react-class-source-code React.createElementComponent &amp; PureComponent1234567891011121314151617181920function Component(props, context, updater) &#123; this.props = props; this.context = context; // If a component has string refs, we will assign a different object later. this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the // renderer. this.updater = updater || ReactNoopUpdateQueue;&#125;Component.prototype.setState = function(partialState, callback) &#123; invariant( typeof partialState === &#x27;object&#x27; || typeof partialState === &#x27;function&#x27; || partialState == null, &#x27;setState(...): takes an object of state variables to update or a &#x27; + &#x27;function which returns an object of state variables.&#x27;, ); this.updater.enqueueSetState(this, partialState, callback, &#x27;setState&#x27;);&#125;; PureComponent 原型式继承。 123456789101112131415161718192021222324function ComponentDummy() &#123;&#125;ComponentDummy.prototype = Component.prototype;/** * Convenience component with default shallow equality check for sCU. */function PureComponent(props, context, updater) &#123; this.props = props; this.context = context; // If a component has string refs, we will assign a different object later. this.refs = emptyObject; this.updater = updater || ReactNoopUpdateQueue;&#125;const pureComponentPrototype = (PureComponent.prototype = new ComponentDummy());pureComponentPrototype.constructor = PureComponent;// Avoid an extra prototype jump for these methods.// 避免为这些方法进行额外的原型跳转。Object.assign(pureComponentPrototype, Component.prototype);// isPureReactComponent 标识当前组件是不是 pureComponentpureComponentPrototype.isPureReactComponent = true;export &#123;Component, PureComponent&#125;; ref 的三种使用方式 string this.refs.stringRef.textContent ref callback ref={ele =&gt; (this.methodRef = ele)} React.createRef() this.refs 已弃用。 1234567891011121314151617181920212223242526272829303132import React from &#x27;react&#x27;export default class RefDemo extends React.Component &#123; constructor() &#123; super() this.objRef = React.createRef() // &#123; current: null &#125; &#125; componentDidMount() &#123; // console.log(`span1: $&#123;this.refs.ref1.textContent&#125;`) // console.log(`span2: $&#123;this.ref2.textContent&#125;`) // console.log(`span3: $&#123;this.ref3.current.textContent&#125;`) setTimeout(() =&gt; &#123; this.refs.stringRef.textContent = &#x27;string ref got&#x27; this.methodRef.textContent = &#x27;method ref got&#x27; this.objRef.current.textContent = &#x27;obj ref got&#x27; &#125;, 1000) &#125; render() &#123; return ( &lt;&gt; &lt;p ref=&quot;stringRef&quot;&gt;span1&lt;/p&gt; &lt;p ref=&#123;ele =&gt; (this.methodRef = ele)&#125;&gt;span3&lt;/p&gt; &lt;p ref=&#123;this.objRef&#125;&gt;span3&lt;/p&gt; &lt;/&gt; ) &#125;&#125; createRef1234567export function createRef() &#123; const refObject = &#123; current: null, &#125;; return refObject;&#125; forwardRef https://zh-hans.legacy.reactjs.org/docs/react-api.html#reactforwardref React.forwardRef 会创建一个React组件，这个组件能够将其接受的 ref 属性转发到其组件树下的另一个组件中。 主要用途： 转发 refs 到 DOM 组件 比如我们想要在自定义React 组件上获取 ref，就需要这种方式。 在高阶组件中转发 refs 在自定义组件上定义 ref，如下代码没有使用 forwardRef，会报错，因为 this.ref 是 null 1234567891011121314151617181920import React from &#x27;react&#x27;const TargetComponent = (props, ref) =&gt; ( &lt;input type=&quot;text&quot; ref=&#123;ref&#125; /&gt;)export default class Comp extends React.Component &#123; constructor() &#123; super() this.ref = React.createRef() &#125; componentDidMount() &#123; this.ref.current.value = &#x27;ref get input&#x27; &#125; render() &#123; return &lt;TargetComponent ref=&#123;this.ref&#125; /&gt; &#125;&#125; 更正如下： 123const TargetComponent = React.forwardRef((props, ref) =&gt; ( &lt;input type=&quot;text&quot; ref=&#123;ref&#125; /&gt;))"},{"title":"","date":"2024-06-11T08:52:17.490Z","updated":"2024-06-11T08:52:17.490Z","comments":false,"path":"demo/2023面试准备/面试题.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/%E9%9D%A2%E8%AF%95%E9%A2%98.html","excerpt":"","text":"面试题视频https://space.bilibili.com/1272014143?plat_id=1&amp;share_from=space&amp;share_medium=iphone&amp;share_plat=ios&amp;share_session_id=E147AA0A-8DE8-4A22-B591-0232919AB727&amp;share_source=WEIXIN&amp;share_tag=s_i&amp;timestamp=1683894536&amp;unique_k=5otokAs 2023年100道前端面试题 | 每天3道题https://www.bilibili.com/video/BV1sr4y137wu/?p=8&amp;spm_id_from=pageDriver&amp;vd_source=a9f38e58a519cc0570c2dacd34ad7ebe 百度网盘-我的资源-前端框架及项目面试（Vue&amp;React原理、Webpack&amp;Babel、项目设计&amp;项目流程）百度网盘-我的资源-前端跳槽面试必备技巧 第二章：面试准备、技术栈准备 第三章：页面布局、css盒模型、DOM事件、原型链、面向对象 第四章：渲染机制、js运行机制、页面性能、错误监控 第五章：业务能力 第六章：职业竞争力、职业规划 前端面试指南（涵盖范围广）：https://interview.html5.wiki/ HTTP 状态码 缓存机制（强缓存，协商缓存） 三次握手、四次挥手（每个阶段状态很重要） 链接 Promise 是什么？ 状态 提供哪些 api 实现 all 方法 return new Promise() 遍历传入的 promises 通过 Promise.resolve 处理每个 promise 全部成功，就 resolve 成功的数组，一个失败，就直接 reject 这个错误 promise 实现链接 Promise.allSettled 跟 all 不同的是，这个函数会返回所有的 promise 结果，不管成功与否 实现 race 方法 12345678910Promise.race = (promises) =&gt; &#123; return new Promise((rs, rj) =&gt; &#123; promises.forEach((pro) =&gt; &#123; // 对 pro 进行一次包装，防止非Promise对象 // 并且对其进行监听，将我们自己返回的Promise的resolve，reject传递给pro // 哪个先改变状态，我们返回的Promise也将会是什么状态 Promise.resolve(pro).then(rs).catch(rj) &#125;) &#125;)&#125; async/await 是什么，原理是什么? 是 generator 函数的语法糖。 如何实现一个 sleep 方法 (Promise + setTimeout) Promise 实现细节 Webpack 原理 babel是什么， 原理 loader 和 plugin 区别 做过哪些优化，常见的插件有哪些 为什么 style-loader，css-loader, less-loader 要按顺序写。 DLL 是什么？ splitChunks是什么，怎么用的？ b站链接 常见的设计模式有哪些 单例模式 发布订阅模式 工厂模式 代理模式 算法刷题 链表 反转链表 数组 字符串 排序（冒泡、快排、选择、插入、归并） 上万条数据如何更好的渲染？（虚拟列表原理） Vue Vue2.x 和 Vue3.x 实现响应式数据的原理 生命周期（各个阶段做了什么） 双向数据绑定分别是什么，如何做到的 v-for 为什么不建议和 v-if 一起使用？哪个优先级高？ v-for 优先级更好！因为 v-for 会先创建出元素，再通过 v-if 去判断元素存不存在，这样会造成页面卡顿、闪烁之类的问题，而且引起不必要的回流，消耗性能。 vue-router 模式，原理 2023年最新Vue面试题剖析原理级讲解 JS 理清楚 this new的原理以及和Object.create 方法的区别 原型/原型链 继承 ES5中的构造函数和class 的区别是什么? 防抖/节流 箭头函数 （和 es5 普通函数有什么区别） 判断类型 typeof instanceof (基于原型链) 最佳实践：Object.prototype.toString.call(variable) return &quot;[Object xxx]&quot; 列举 ES6 常用特性 防抖/节流 1234567891011121314// 节流，规定时间内执行一次，到了下个规定事件，又执行一次。每达到一个 tick 就执行function throttle(fn, interval) &#123; let flag = true; return function(...args) &#123; let context = this; if (!flag) return; flag = false; setTimeout(() =&gt; &#123; fn.apply(context, args); flag = true; &#125;, interval); &#125;;&#125;; js 运行机制 node 事件循环和 js 的事件循环机制是否一样，区别是什么？ 链接 直面JavaScript中的30个疑难杂症 链接 HTML/CSS 相关 浏览器存储，介绍 localstorage 和 session storage，cookie 的区别 生命周期： cookie：可设置失效时间，没有设置的话，默认是关闭浏览器后失效（document.cookie = ‘xxx’） localStorage：除非被手动清除，否则将会永久保存。 sessionStorage： 仅在当前网页会话下有效，关闭页面或浏览器后就会被清除。 存储空间 cookie：4KB左右 localStorage和sessionStorage：可以保存 5MB 的信息。 http请求 cookie：每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题 localStorage和sessionStorage：仅在客户端（即浏览器）中保存，不参与和服务器的通信 浏览器原理 链接 什么是跨域？如何解决？链接 HTML5新特性有哪些？ BFC是什么，创建BFC的方式有哪些？ 浏览器灵魂拷问？ 链接 如何让子元素垂直水平居中（宽度不固定或固定） 定位（position），通过 50% - 子元素一半px flex 布局 transform: translate 设置偏移量（相对自身位置偏移） 重绘和回流（重排）是什么 ? 如何避免引起回流。回流一定重绘，重绘不一定回流。 还有一种情况，是直接合成。比如利用 CSS3 的transform、opacity、filter这些属性就可以实现合成的效果，也就是大家常说的GPU加速。 CSS加载会造成阻塞吗? 提升 前端 100 问 连接 前端提升路线 链接 前端系列文章（浏览器原理、http、ES6+、Promise、CSS） 链接 nodejs b站链接 准备工作 自我介绍 项目介绍 通用型的业务问题、项目经历（中台、rn webview） 面试题 字节跳动最爱考的 64 道算法题（JS版） 字节跳动最爱考的前端面试题：计算机网络基础 字节跳动最爱考的前端面试题：CSS 字节跳动最爱考的前端面试题：Javascript 面试题准备 1 计算机网络TCP的三次握手，UDP和TCP的区别。 知道的排序算法，以及复杂度。 二叉树层序遍历输出，每一层输出数组（手写算法）。 解决过那些问题,最难的是那些？如何定位？ HTTPS和HTTP区别？非对称加密有哪些缺点？ HTTP状态码，header XSS和CSRF攻击 有研究过哪些算法？ 平时都是怎么学习的？最近都在关注哪些技术？为什么？ 防抖、节流 实现图片懒加载 算法排序算法 算法复杂度 面试题"},{"title":"","date":"2024-06-11T08:52:17.492Z","updated":"2024-06-11T08:52:17.492Z","comments":false,"path":"demo/canvas/demo1.html","permalink":"http://yoursite.com/demo/canvas/demo1.html","excerpt":"","text":"山羊の前端小窝 body { margin: 0px; padding: 0px; position: fixed; /* 网页背景色 */ background: rgb(0, 0, 0); } // 定义requestAnimFrame函数 window.requestAnimFrame = function () { // 检查浏览器是否支持requestAnimFrame函数 return ( window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || // 如果所有这些选项都不可用，使用设置超时来调用回调函数 function (callback) { window.setTimeout(callback) } ) } // 初始化函数，用于获取canvas元素并返回相关信息 function init(elemid) { // 获取canvas元素 let canvas = document.getElementById(elemid) // 获取2d绘图上下文,这里d是小写的 c = canvas.getContext('2d') // 设置canvas的宽度为窗口内宽度，高度为窗口内高度 w = (canvas.width = window.innerWidth) h = (canvas.height = window.innerHeight) // 设置填充样式为半透明黑 c.fillStyle = \"rgba(30,30,30,1)\" // 使用填充样式填充整个canvas c.fillRect(0, 0, w, h) // 返回绘图上下文和canvas元素 return { c: c, canvas: canvas } } // 等待页面加载完成后执行函数 window.onload = function () { // 获取绘图上下文和canvas元素 let c = init(\"canvas\").c, canvas = init(\"canvas\").canvas, // 设置canvas的宽度为窗口内宽度，高度为窗口内高度 w = (canvas.width = window.innerWidth), h = (canvas.height = window.innerHeight), // 初始化鼠标对象 mouse = { x: false, y: false }, last_mouse = {} // 定义计算两点距离的函数 function dist(p1x, p1y, p2x, p2y) { return Math.sqrt(Math.pow(p2x - p1x, 2) + Math.pow(p2y - p1y, 2)) } // 定义 segment 类 class segment { // 构造函数，用于初始化 segment 对象 constructor(parent, l, a, first) { // 如果是第一条触手段，则位置坐标为触手顶部位置 // 否则位置坐标为上一个segment对象的nextPos坐标 this.first = first if (first) { this.pos = { x: parent.x, y: parent.y, } } else { this.pos = { x: parent.nextPos.x, y: parent.nextPos.y, } } // 设置segment的长度和角度 this.l = l this.ang = a // 计算下一个segment的坐标位置 this.nextPos = { x: this.pos.x + this.l * Math.cos(this.ang), y: this.pos.y + this.l * Math.sin(this.ang), } } // 更新segment位置的方法 update(t) { // 计算segment与目标点的角度 this.ang = Math.atan2(t.y - this.pos.y, t.x - this.pos.x) // 根据目标点和角度更新位置坐标 this.pos.x = t.x + this.l * Math.cos(this.ang - Math.PI) this.pos.y = t.y + this.l * Math.sin(this.ang - Math.PI) // 根据新的位置坐标更新nextPos坐标 this.nextPos.x = this.pos.x + this.l * Math.cos(this.ang) this.nextPos.y = this.pos.y + this.l * Math.sin(this.ang) } // 将 segment 回执回初始位置的方法 fallback(t) { // 将位置坐标设置为目标点坐标 this.pos.x = t.x this.pos.y = t.y this.nextPos.x = this.pos.x + this.l * Math.cos(this.ang) this.nextPos.y = this.pos.y + this.l * Math.sin(this.ang) } show() { c.lineTo(this.nextPos.x, this.nextPos.y) } } // 定义 tentacle 类 class tentacle { // 构造函数，用于初始化 tentacle 对象 constructor(x, y, l, n, a) { // 设置触手的顶部位置坐标 this.x = x this.y = y // 设置触手的长度 this.l = l // 设置触手的段数 this.n = n // 初始化触手的目标点对象 this.t = {} // 设置触手的随机移动参数 this.rand = Math.random() // 创建触手的第一条段 this.segments = [new segment(this, this.l / this.n, 0, true)] // 创建其他的段 for (let i = 1; i < this.n; i++) { this.segments.push( new segment(this.segments[i - 1], this.l / this.n, 0, false) ) } } // 移动触手到目标点的方法 move(last_target, target) { // 计算触手顶部与目标点的角度 this.angle = Math.atan2(target.y - this.y, target.x - this.x) // 计算触手的距离参数 this.dt = dist(last_target.x, last_target.y, target.x, target.y) // 计算触手的目标点坐标 this.t = { x: target.x - 0.8 * this.dt * Math.cos(this.angle), y: target.y - 0.8 * this.dt * Math.sin(this.angle) } // 如果计算出了目标点，则更新最后一个segment对象的位置坐标 // 否则，更新最后一个segment对象的位置坐标为目标点坐标 if (this.t.x) { this.segments[this.n - 1].update(this.t) } else { this.segments[this.n - 1].update(target) } // 遍历所有segment对象，更新它们的位置坐标 for (let i = this.n - 2; i >= 0; i--) { this.segments[i].update(this.segments[i + 1].pos) } if ( dist(this.x, this.y, target.x, target.y)"},{"title":"","date":"2024-06-11T08:52:17.493Z","updated":"2024-06-11T08:52:17.493Z","comments":false,"path":"demo/micro-app/SanpshotSandbox.js","permalink":"http://yoursite.com/demo/micro-app/SanpshotSandbox.js","excerpt":"","text":"class SanpshotSandbox { constructor() { this.proxy = window; //window属性 this.modifyPropsMap = {} //记录在window上的修改 this.active(); } // 激活沙箱 active() { this.windowSnapshot = {}; //拍照，将 window 的每个属性都记录到 windowSnapshot for (const prop in window) { if (window.hasOwnProperty(prop)) { this.windowSnapshot[prop] = window[prop]; } } // 将上次的修改进行一个应用 到 当前的window上 Object.keys(this.modifyPropsMap).forEach(p => { // 将上次修改过得赋到window上 window[p] = this.modifyPropsMap[p]; }) } // 丢弃沙箱 inactve() { for (const prop in window) { if (window.hasOwnProperty(prop)) { if (window[prop] !== this.windowSnapshot[prop]) { // 拿现在的和一年前的作比较 如果他俩不一样了 说明换这个属性有变化 有变化就把变化记录在变化表里 this.modifyPropsMap[prop] = window[prop] // 最后在将window变回一年前 window[prop] = this.windowSnapshot[prop] } } } } } let sandbox = new SanpshotSandbox(); //通过沙箱返回一个代理 ((window) => { window.a = 1; window.b = 2; console.log(window.a, window.b); // 1 2 sandbox.inactve(); //失去激活后 console.log(window.a, window.b); // undefined undefined sandbox.active(); //激活 console.log(window.a, window.b); // 1 2 })(sandbox.proxy); //sandbox.proxy就是window"},{"title":"","date":"2024-06-11T08:52:17.493Z","updated":"2024-06-11T08:52:17.493Z","comments":false,"path":"demo/micro-app/index.html","permalink":"http://yoursite.com/demo/micro-app/index.html","excerpt":"","text":"Document"},{"title":"","date":"2024-06-11T08:52:17.493Z","updated":"2024-06-11T08:52:17.493Z","comments":false,"path":"demo/micro-app/legacySandbox.js","permalink":"http://yoursite.com/demo/micro-app/legacySandbox.js","excerpt":"","text":"class LegacySandBox{ addedPropsMapInSandbox = new Map(); modifiedPropsOriginalValueMapInSandbox = new Map(); currentUpdatedPropsValueMap = new Map(); proxyWindow; setWindowProp(prop, value, toDelete = false){ if(value === undefined && toDelete){ delete window[prop]; }else{ window[prop] = value; } } active(){ this.currentUpdatedPropsValueMap.forEach((value, prop)=>this.setWindowProp(prop, value)); } inactive(){ this.modifiedPropsOriginalValueMapInSandbox.forEach((value, prop)=>this.setWindowProp(prop, value)); this.addedPropsMapInSandbox.forEach((_, prop)=>this.setWindowProp(prop, undefined, true)); } constructor(){ const fakeWindow = Object.create(null); this.proxyWindow = new Proxy(fakeWindow,{ set:(target, prop, value, receiver)=>{ const originalVal = window[prop]; if(!window.hasOwnProperty(prop)){ this.addedPropsMapInSandbox.set(prop, value); }else if(!this.modifiedPropsOriginalValueMapInSandbox.has(prop)){ this.modifiedPropsOriginalValueMapInSandbox.set(prop, originalVal); } this.currentUpdatedPropsValueMap.set(prop, value); window[prop] = value; }, get:(target, prop, receiver)=>{ return target[prop]; } }); } } // 验证： let legacySandBox = new LegacySandBox(); legacySandBox.active(); legacySandBox.proxyWindow.city = 'Beijing'; console.log('window.city-01:', window.city); legacySandBox.inactive(); console.log('window.city-02:', window.city); legacySandBox.active(); console.log('window.city-03:', window.city); legacySandBox.inactive();"},{"title":"","date":"2024-06-11T08:52:17.495Z","updated":"2024-06-11T08:52:17.495Z","comments":false,"path":"demo/theme/prefers-color-scheme.html","permalink":"http://yoursite.com/demo/theme/prefers-color-scheme.html","excerpt":"","text":"prefers-color-scheme .day { background: #eee; color: black; } .night { background: #333; color: white; } @media (prefers-color-scheme: dark) { .day.dark-scheme { background: #333; color: white; } .night.dark-scheme { background: black; color: red; } } @media (prefers-color-scheme: light) { .day.light-scheme { background: skyblue; color: #333; } .night.light-scheme { background: pink; color: #333; } } .day, .night { display: inline-block; padding: 1em; width: 7em; height: 7em; vertical-align: middle; } :root { --color: #333; --background-color: pink; } [data-theme=\"dark\"] { --color: #fff; --background-color: #000; } MDN: prefers-color-scheme CSS 媒体特性用于检测用户是否有将系统的主题色设置为亮色或者暗色。 Day (changes in light scheme) Day (changes in dark scheme) Night (changes in light scheme) Night (changes in dark scheme) dark mode window.onload = function() { // 如果匹配成功，scheme.matches === true // 也就是说，如果我们的系统是暗黑色，那么这个 matches 就是true，否则是 false const scheme = window.matchMedia('(prefers-color-scheme: dark)') scheme.addEventListener('change', e => { console.log(e) if (e.matches) { // 表示亮色模式 document.documentElement.setAttribute('data-theme', 'dark') } else { document.documentElement.setAttribute('data-theme', 'light') } }) const darkBtn = document.querySelector('.dark-btn') darkBtn.addEventListener('click', () => { // 设置主题色 document.documentElement.setAttribute('data-theme', 'dark') // document.documentElement.style.setProperty('--color', '#fff') // document.documentElement.style.setProperty('--background-color', '#000') }) }"},{"title":"","date":"2024-06-11T08:52:17.496Z","updated":"2024-06-11T08:52:17.496Z","comments":false,"path":"demo/webcomponent/README.html","permalink":"http://yoursite.com/demo/webcomponent/README.html","excerpt":"","text":"Web Components作为开发者，我们都知道尽可能多的重用代码是一个好主意。这对于自定义标记结构来说通常不是那么容易 — 想想复杂的 HTML（以及相关的样式和脚本），有时您不得不写代码来呈现自定义 UI 控件，并且如果您不小心的话，多次使用它们会使您的页面变得一团糟。 组成 Custom elements（自定义元素） Shadow DOM（影子 DOM） HTML templates（HTML 模板） Custom elements（自定义元素）Shadow DOM（影子 DOM）templates and slots复用结构，减少使用相同的标记结构。 组件通信 Lightning Web Component 在 LWC 中，可以通过实现 CustomEvent 接口进行自定义事件，通过 EventTarget.dispatchEvent() 来分配事件。 注意： 定义事件时，不需要在事件名前加 on，因为在使用的时候会默认在名称前使用 on，比如：当我们定义了 click 事件，在 HTML 代码中用 onclick 来调用它 父组件 123456789101112131415// parent compconnectedCallback() &#123; const child = this.shadowRoot.querySelector(&#x27;child-wc&#x27;) // 1. 通过 DOM 属性传参，会触发子组件的 attributeChangedCallback 钩子 child.setAttribute(&#x27;text&#x27;, &#x27;Parent changed the Text&#x27;) // 2. 通过组件实例直接修改内部数据（⚠️未获取到） // console.log(&#x27;??&#x27;, child) // 3. 监听子组件内部定义的事件 child.addEventListener(&#x27;custom-event&#x27;, (&#123; detail &#125;) =&gt; &#123; console.log(&#x27;事件触发 &#x27;, detail.value); &#125;) &#125; 子组件 12345678910111213141516// child compconnectedCallback() &#123; // 定义事件 const event = new CustomEvent(&#x27;custom-event&#x27;, &#123; detail: &#123; value: &#x27;child web component&#x27; &#125; &#125;) this.dispatchEvent(event) const btn = this.shadowRoot.querySelector(&#x27;button&#x27;) btn.addEventListener(&#x27;click&#x27;, () =&gt; &#123; // 获取父组件 this.getRootNode().host.sayHello(&#x27;Hello :&#x27;) &#125;)&#125; 子组件直接调用父组件实例上的方法123456789101112131415// parent compsayHello(msg) &#123; console.log(msg, this.data)&#125;// child compconnectedCallback() &#123; const btn = this.shadowRoot.querySelector(&#x27;button&#x27;) btn.addEventListener(&#x27;click&#x27;, () =&gt; &#123; // 获取父组件实例 this.getRootNode().host.sayHello(&#x27;Hello :&#x27;) &#125;)&#125; 监听组件上属性的变化1234567891011121314151617// parentconst child = this.shadowRoot.querySelector(&#x27;child-wc&#x27;)// 1. 通过 DOM 属性传参，会触发子组件的 attributeChangedCallback 钩子child.setAttribute(&#x27;text&#x27;, &#x27;Parent changed the Text&#x27;)// child// 监听属性变化，必须定静态的 observedAttributes 方法static get observedAttributes() &#123; return [&#x27;text&#x27;];&#125;attributeChangedCallback(name, oldValue, newValue) &#123; console.log(&#x27;name&#x27;, name) console.log(&#x27;oldValue&#x27;, oldValue) console.log(&#x27;newValue&#x27;, newValue)&#125; web component in ReactJSReact 和 Web Components 为了解决不同的问题而生。 Web Components 为可复用组件提供了强大的封装，而 React 则提供了声明式的解决方案，使 DOM 与数据保持同步。 两者旨在互补。作为开发人员，可以自由选择在 Web Components 中使用 React，或者在 React 中使用 Web Components，或者两者共存。 问题 “react”: “^16.12.0” 123456789101112131415161718192021222324252627282930class MyApp extends React.Component &#123; render() &#123; return &lt;span onClick=&#123;() =&gt; alert(&#x27;I have been clicked&#x27;)&#125;&gt;Click me&lt;/span&gt;; &#125;&#125;class ShadowElement extends HTMLElement &#123; constructor() &#123; super() &#125; connectedCallback() &#123; const mountPoint = document.createElement(&#x27;div&#x27;); const shadowRoot = this.attachShadow(&#123; mode: &#x27;open&#x27; &#125;); shadowRoot.appendChild(mountPoint); ReactDOM.render(&lt;MyApp /&gt;, mountPoint); &#125;&#125;customElements.define(&#x27;my-custom-element&#x27;, ShadowElement);// 使用&lt;div className=&quot;app-main&quot; onClick=&#123;()=&gt; console.log(&#x27;app main clicked&#x27;)&#125;&gt; &lt;my-custom-element&gt;&lt;/my-custom-element&gt;&lt;/div&gt; 效果图 “react”: “^17.0.2” 及以上版本，已解决此问题。 代码一致，效果图。 解决方案 Web Components 触发的事件可能无法通过 React 渲染树正确的传递。 你需要在 React 组件中手动添加事件处理器来处理这些事件。 Shadow DOM 重定向了 click 事件并将其封装在 shadow 中，将组件内部的所有内容封装在单独的作用域中，并隔离事件。React 并不支持这样的 Shadow DOM，因此事件委托失败，事件无法触发。 这意味着，如果您将带有 click 事件的 React 组件放在 Web 组件中，则点击事件可能不会冒泡到 React 组件中。这是因为事件在 Web 组件的 Shadow DOM 中触发，然后被封装在 Shadow DOM 中，而不会传播到外部组件。 如果您希望在使用 Web 组件时能够触发 React 事件，则可以使用上述方法之一，例如重新绑定事件到实际的 shadow 容器并使用 “__reactInternalInstances” 来调度正确的 React 事件。您还可以使用其他方法来解决此问题，例如使用自定义事件或使用事件代理。 https://stackoverflow.com/questions/37866237/click-event-not-firing-when-react-component-in-a-shadow-dom 相关文章：当 Shadow Dom 遇上 React event https://github.com/huruji/blog/issues/104 参考链接 MDN官方文档 WC官方示例 基于 Web Components 跨框架组件开发 Shadow :host 选择器"},{"title":"","date":"2024-06-11T08:52:17.374Z","updated":"2024-06-11T08:52:17.374Z","comments":false,"path":"demo/2023面试准备/demo/debounce.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/debounce.html","excerpt":"","text":"Document body { height: 2000px; } 防抖：用户触发事件频繁，只需要用户最后一次操作的结果 const input = document.querySelector('#input') input.oninput = debounce(function() { console.log('value: ', this.value) }, 800) function debounce(fn, delay = 500) { // 闭包 let timer = null // this ===> window return function() { // this ===> input if (timer !== null) { clearTimeout(timer) } timer = setTimeout(() => { fn.call(this) }, delay); } } let time = 0 window.onscroll = throttle(function() { console.log('hello world') }, 1000) function throttle(fn, delay) { let time = 0 return function() { let now = Date.now() if (now - time > delay) { fn.call(this) time = now } } }"},{"title":"","date":"2024-06-11T08:52:17.374Z","updated":"2024-06-11T08:52:17.374Z","comments":false,"path":"demo/2023面试准备/demo/demo.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/demo.js","excerpt":"","text":"// const cat = { // name: '喵喵喵', // sayName(params) { // console.log('params ', params) // setTimeout(() => { // console.log(this) // cat // console.log(this.name) // 喵喵喵 // }) // } // } // const dog = { // name: '汪汪汪' // } // cat.sayName.call(dog, 1,2,3) // setImmediate(() => { // console.log('setImmediate') // }) // process.nextTick(() => { // console.log(1) // }) // console.log(2) // setTimeout(() => { // console.log(3) // }, 0); // setImmediate(() => { // console.log('setImmediate') // }) // process.nextTick(() => { // console.log(1) // }) // console.log(2) // new Promise(r => { // console.log(7) // r() // }).then(() => { // console.log(8) // }) // setTimeout(() => { // console.log(3) // }, 0); // setTimeout(() => { // console.log(4) // }, 1000); // setTimeout(() => { // console.log(5) // }, 0); // console.log(6) // // 2 7 6 1 8 3 5 setImmediate 4 const obj = { name: 'is obj', girlfriend: { name: '小红' }, list: [1,2,3], u: undefined, n: null, f: function() { console.log('func') }, arrow: () => {}, error: new Error('错误啦') } // // 属于浅拷贝 // const o = Object.assign({}, obj) // obj.name = 'is o' // obj.girlfriend.name = '小花' // console.log(o) // // 深拷贝 // function deepClone(obj) { // const o = {} // for (const key in obj) { // if (Object.hasOwnProperty.call(obj, key)) { // if(typeof obj[key] === 'object') { // o[key] = deepClone(obj[key]) // } else { // o[key] = obj[key]; // } // } // } // return o // } // const o = deepClone(obj) // obj.girlfriend.name = '小花' // obj.list[1] = 99 // console.log('??', o) // console.log('??', obj) // // JSON.stringify实现深克隆 // // JSON.stringify存在的问题 // // 如果属性值是 undefined 或者是方法（含箭头函数），克隆出来后，undefined 和函数会丢失 // const o = JSON.stringify(obj) // console.log(o) // class User { // constructor(name) { // this.name = name // } // } // class Admin extends User { // constructor() { // // 子类继承父类，写了 constructor 函数，必须手动调用 super() // // super 指的是父类(User) // super() // this.age = 28 // } // } // const a = new Admin() // console.log(a) // // async 将函数包装成 Promise // // 相当于 function say() { return new Promise() } // async function say() { // return 'say hello' // } // const s = say() // s.then(value => { // console.log('value ', value) // }) // // 可缓存的纯函数 // function add(a, b) { // console.log('计算中...') // return a + b // } // const resolver = (...args) => JSON.stringify(args) // function memoize(func, resolver) { // const cache = {} // return function(...args) { // const key = resolver(...args) // \"[a, b]\" // if (cache[key]) { // return cache[key] // } else { // return cache[key] = func(...args) // } // } // } // const memoized = memoize(add, resolver) // console.log(memoized(9, 9)) // console.log(memoized(9, 9)) // console.log(memoized(9, 9)) // // 函数柯里化 // function curry(func) { // const curried = function(...args) { // // 函数的length 表示它有几个参数 // if (args.length < func.length) { // // 累加参数 // return (...rest) => curried(...args, ...rest) // } else { // // 传入的参数和方法接收的参数相同，直接执行 func 函数 // return func(...args) // } // } // return curried // } // function add(a, b, c) { // return a + b + c // } // const curried = curry(add) // const fn = curried(1) // console.log(fn(2)(3)) // const str = 'hello - ' // function add1(str) { // return str + 'wor' // } // function add2(str) { // return str + 'l' // } // function add3(str) { // return str + 'd' // } // // console.log(add3(add2(add1(str)))) // function flow(...fns) { // if (fns.length === 1) { // return fns[0] // } // return fns.reduceRight((a, b) => { // // 从右往左 // // 第一步 a === add3, b === add2 // // 第二步 a === (...args) => add3(add2(...args)), b === add1 // // 第二步的 a 显示为 (...args) => a(b(...args)) // // 返回 a(add1(...args)) // // 当我们最后调用 f 时，会先计算 add1(...args)，拿到结果后，执行 a \"add3(add2(add1(...args)))\" // return (...args) => a(b(...args)) // }) // } // const f = flow(add1, add2, add3) // function Person(name) { // this.name = name // this.colors = ['red', 'blue'] // } // Person.prototype.sayName = function() { // console.log(this.name) // } // function User() { // Person.call(this, 'xiaoming') // this.age = 19 // } // User.prototype = new Person() // User.prototype.constructor = User // const u = new User() // console.log(u instanceof User) // console.log(u instanceof Person) // console.log(User.prototype.isPrototypeOf(u)) // console.log(Person.prototype.isPrototypeOf(u)) // let person = { // name: \"Nicholas\", // friends: [\"Shelby\", \"Court\", \"Van\"] // }; // let anotherPerson = object(person); // anotherPerson.name = \"Greg\"; // anotherPerson.friends.push(\"Rob\"); // let yetAnotherPerson = object(person); // yetAnotherPerson.name = \"Linda\"; // yetAnotherPerson.friends.push(\"Barbie\"); // console.log(person.friends); // \"Shelby, Court, Van, Rob, Barbie\" // const proxy = new Proxy({ // name: 'hello' // }, { // get(target, property) { // console.log(target, property) // return 11 // } // }) // console.log(proxy.name) // function timeout(ms) { // return new Promise(resolve => { // setTimeout(resolve, ms, 'done') // 第三个参数，是传递给 resolve 方法的 // }) // } // console.log(1) // timeout(1000).then(res => { // console.log(res) // }) // console.log(2) // const p1 = new Promise((r, reject) => { // setTimeout(() => { // reject(new Error('fail')) // }, 3000); // }) // const p2 = new Promise((r, reject) => { // r(p1) // }) // p2.then(result => { // console.log('result ', result) // }, error => { // console.log('error ', error) // }) // new Promise(r => { // r(x + 2) // }).then(res => { // console.log('结果 ', res) // }).catch(err => { // console.log('错误 ', err) // }).then(() => { // console.log('随便打印') // }).finally(() => { // console.log('最后打印') // }) // const p3 = function() { // return new Promise(r => { // setTimeout(() => { // r('p3 success') // }, 3000); // }) // } // const allP = Promise.all([1, 2, p3()]) // allP.then(r => { // console.log(r) // }) // console.log(Promise.resolve('helo') instanceof Promise) // const sleep = function(ms) { // return new Promise(r => { // console.log(xxxxx + 3) // setTimeout(() => { // r() // }, ms) // }) // } // async function sayName() { // console.log(1) // try { // await sleep(3000) // } catch (error) { // console.log(' - - - ', error) // } // console.log(2) // return 'name' // } // sayName().then(res => console.log(res)) // const m = new Map() // const o = { // name: '1' // } // m.set(o, '这是一个对象') // m.set('hello world', '这是字符串') // console.log(m.size) // console.log(m.has(o)) // console.log(m.get(o)) // var resolvedPromisesArray = [Promise.resolve(33), Promise.resolve(44)]; // var p = Promise.race(resolvedPromisesArray); // // immediately logging the value of p // console.log(p) // // p.then(res => { // // console.log(res) // // }) // setTimeout(function(){ // console.log('the stack is now empty') // console.log(p) // }); class PromiseQueue { constructor(concurrency) { this.concurrency = concurrency; // 并发执行的数量 this.running = 0; // 当前正在执行的 Promise 数量 this.queue = []; // 存储待执行的 Promise 的队列 } add(promiseFn) { return new Promise((resolve, reject) => { // 创建一个包装过的 Promise，用于处理执行结果 const wrapperFn = () => promiseFn().then(resolve).catch(reject); // 将包装过的 Promise 加入队列 this.queue.push(wrapperFn); // 如果当前正在执行的 Promise 数量小于并发执行的数量，开始执行队列中的下一个 Promise if (this.running < this.concurrency) { this.runNext(); } }); } runNext() { if (this.queue.length > 0 && this.running < this.concurrency) { const promiseFn = this.queue.shift(); this.running++; promiseFn() .then(() => { // Promise 执行完成后，继续执行队列中的下一个 Promise this.running--; this.runNext(); }) .catch(() => { this.running--; this.runNext(); }); } } } // 创建一个最多并发执行 2 个 Promise 的队列 const queue = new PromiseQueue(2); // 添加多个 Promise 到队列中 queue.add(() => { return new Promise((resolve) => { setTimeout(() => { console.log('Promise 1'); resolve(); }, 1000); }); }); queue.add(() => { return new Promise((resolve) => { setTimeout(() => { console.log('Promise 2'); resolve(); }, 500); }); }); queue.add(() => { return new Promise((resolve) => { setTimeout(() => { console.log('Promise 3'); resolve(); }, 300); }); }); queue.add(() => { return new Promise((resolve) => { setTimeout(() => { console.log('Promise 4'); resolve(); }, 400); }); }); queue.runNext()"},{"title":"","date":"2024-06-11T08:52:17.396Z","updated":"2024-06-11T08:52:17.396Z","comments":false,"path":"demo/2023面试准备/demo/redux.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/redux.js","excerpt":"","text":"const createStore = function(reducer, initialState = {}) { const store = {} store.state = initialState store.listeners = [] store.subscribe = function(listener) { store.listeners.push(listener) } store.dispatch = function(action) { // 改变状态 store.state = reducer(store.state, action) // 触发监听器 store.listeners.forEach(listener => listener()) } store.getState = function() { return store.state } return store } // reducer function counter(state = 0, action) { switch (action.type) { case 'INCREMENT': return state + 1 case 'DECREMENT': return state - 1 default: return state } } const store = createStore(counter, 0) store.subscribe(() => { console.log('监听 ', store.getState()) }) console.log('初始 state', store.getState()) store.dispatch({ type: 'INCREMENT', }) store.dispatch({ type: 'INCREMENT', }) console.log('get state', store.getState()) store.dispatch({ type: 'DECREMENT', })"},{"title":"","date":"2024-06-11T08:52:17.396Z","updated":"2024-06-11T08:52:17.396Z","comments":false,"path":"demo/2023面试准备/demo/test.css","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/test.css","excerpt":"","text":"h1 { color: red; }"},{"title":"","date":"2024-06-11T08:52:17.396Z","updated":"2024-06-11T08:52:17.396Z","comments":false,"path":"demo/2023面试准备/demo/test.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/test.html","excerpt":"","text":"css阻塞 * { margin: 0; padding: 0; } html, body { width: 100%; height: 100%; } .box { width: 100px; height: 100px; background-color: red; position: absolute; left: 50%; transform: translateX(-50%); /* animation: moveBox 1s infinite linear; */ } /* @keyframes moveBox { 0% { color: yellow; transform: translateX(-50%); } 50% { color: #000; transform: translateX(calc(100% - 50px)); } 100% { color: pink; transform: translateX(-50%); } } */ 你好啊 const box = document.querySelector('.box'); const viewportWidth = window.innerWidth; const boxWidth = box.offsetWidth; let direction = 10; // 移动方向，1表示向右，-1表示向左 function moveBox() { const boxLeft = box.offsetLeft; if (boxLeft = viewportWidth) { // 碰到最右边的边界，改变移动方向为向左 direction = -10; } box.style.left = `${boxLeft + direction}px`; requestAnimationFrame(moveBox); } // moveBox();"},{"title":"","date":"2024-06-11T08:52:17.396Z","updated":"2024-06-11T08:52:17.396Z","comments":false,"path":"demo/2023面试准备/demo/test.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/test.js","excerpt":"","text":"// alert('test.js: 文档开始解析了!'); const say = function(...args) { console.log(this.name, args) } // say.call({name: 'alex'}) Function.prototype.myCall = function(context, ...args) { // context 就是 call 第一个参数，上下文环境 context = context || window const s = Symbol('fn') context[s] = this // 将方法 say 赋值给 context 对象, const result = context[s](...args) delete context[s] return result } Function.prototype.myBind = function(context, ...args) { // context 就是 call 第一个参数，上下文环境 context = context || window const s = Symbol('fn') context[s] = this return function(..._args) { args = args.concat(_args) const r = context[s](...args) delete context[s] return r } } // say.myBind({name: 'alex'}, 1, 2, 3, 4)() function pipe(...fns) { return function(value) { return fns.reduce((pre, cur) => { return cur(pre) }, value) } } // addOne(double(square(value))) const square = v => v * v const double = v => v * 2 const addOne = v => v + 1 const res = pipe(square, double, addOne) // console.log(res(3)) // const froms = [{ age: 1}, {age: 2}] // const froms1 = Array.from(froms) // froms1.map(i => { // i.age = i.age + 1 // }) // console.log(froms) // console.log(froms1) // const arr = [1, [2, 3, [4, [ 5 ]]]] // function flatten(arr) { // const result = [] // for (let i = 0; i < arr.length; i++) { // if (Array.isArray(arr[i])) { // result.push(...flatten(arr[i])) // } else { // result.push(arr[i]) // } // } // return result // } // console.log(flatten(arr)) // 排序 const arr = [3, 1, 2, 6, 1, 99, 0, -1, 5] // 冒泡 function bubbleSort(arr) { let length = arr.length for (let i = 0; i < length; i++) { for (let j = 1; j < length - i; j++) { if (arr[j] < arr[j - 1]) { // const temp = arr[j] // arr[j] = arr[j - 1] // arr[j - 1] = temp [arr[j], arr[j - 1]] = [arr[j - 1], arr[j]] } } } return arr } // 选择排序: 找到最小的值，排到第一位，再找到最小的值，排到第二位 function selectSort(arr) { let minIndex for (let i = 0; i < arr.length; i++) { // 假设一个最小的值 minIndex = i // 让 j = i，表示前面已经排序了的，就不需要再排了 for (let j = i; j < arr.length; j ++) { // 一轮下来，肯定能找到一个最小值 index if (arr[j] < arr[minIndex]) { minIndex = j } } // 如果 minIndex !== i，表示存在比arr[minIndex]还小的值 arr[i]，和 i 进行交换 if (minIndex !== i) { [arr[minIndex], arr[i]] = [arr[i], arr[minIndex]] } } return arr } // 插入排序 // [3, 2, 1, 6, 1, 99, 0, -1, 5] function insertSort(arr) { // 1. 默认第一项是排序了的，所以遍历时从数组下标为 1 的位置开始 // 2. 用 for 循环将当前遍历的项存储起来，current，并记录当前项的下标currentIndex // 3. 通过 while 循环，current 前面的项 和 current 比较 // arr: [3, 2, 1, 6, 1, 99, 0, -1, 5] // 第一轮：current = 2, currentIndex = 1 // current 前一项`arr[currentIndex - 1] = 3`比 current = 2 大，那就让当前项 arr[currentIndex] 等于前一项，相当于大数字往后挪了一位，[3, 3, 1, 6 ...] // 然后 currentIndex-- = 0，currentIndex > 0 不成立，结束 while，此时前两项是 [3, 3] // 最后，currentIndex = 0，需要让当前项（小值）插入到正确✅的位置 // arr[currentIndex] = current，前两项就排好序了 [2,3] // arr: [2, 3, 1, 6, 1, 99, 0, -1, 5] // 第二轮：current = 1, currentIndex = 2 // current 的前一项 `arr[currentIndex - 1] = 3` 比 current = 1 大，需要将大的往后挪一位，arr[currentIndex: 2] = arr[currentIndex - 1]，[2, 3, 1] => [2, 3, 3] // 然后 currentIndex-- = 1，还要判断前面的项，是不是有比 current 大的数值，arr[currentIndex-1] > current （2 > 1）成立，所以将大的数值往后挪一位 [2, 3, 3] => [2, 2, 3] // currentIndex-- = 0，此时 currentIndex 等于 0，不符合 while 循环的条件了，退出 // 最后，我们需要将小的值插入到正确✅的位置：arr[currentIndex: 0] = current(1) => [1, 2, 3 ...] let current, currentIndex // 当前项, 当前项下标 for (let i = 1; i < arr.length; i++) { current = arr[i] currentIndex = i // 让当前项的前面的每一项和当前项 current 比较， while (currentIndex > 0 && arr[currentIndex - 1] > current) { arr[currentIndex] = arr[currentIndex - 1] currentIndex-- } // currentIndex = 0 arr[currentIndex] = current } return arr } // console.log(insertSort(arr)) class PromiseSchedule { constructor(max) { this.list = [] this.max = max // 并发数 this.workingNum = 0 // 当前正在执行的数量 } add(cb) { this.list.push(cb) } start() { for (let i = 0; i < this.max; i++) { this.doNext() } } doNext() { if (this.list.length > 0 && this.workingNum < this.max) { this.workingNum++ // 取出来执行 this.list.shift()().then(() => { this.workingNum-- this.doNext() }) } } } const timeout = (time, value) => new Promise(resolve => setTimeout(resolve, time, value)) const scheduler = new PromiseSchedule(2) const addTask = (time, value) => { scheduler.add(() => timeout(time, value).then(res => { console.log('打印: ', res) })) } addTask(1000, 1) addTask(300, 2) addTask(500, 3) addTask(400, 4) // scheduler.start() const linkList = { value: 1, next: { value: 2, next: { value: 3, next: { value: 4, next: { value: 5, next: null } } } } } // function reverse(head) { // let prev = null // let curr = head // while(curr) { // head = curr // curr = curr.next // head.next = prev // prev = head // } // return head // } // console.log(reverse(linkList)) // const timeMap = new Map() // class Cache { // constructor(timeout, limit) { // this.obj = {} // this.timeout = timeout // 过期时间 // this.limit = limit // 最多能存储多少个 // } // get(id) { // if (!this.obj[id]) return // // 处理自动过期 // const now = Date.now() // if (now - timeMap.get(id) > this.timeout) { // // 已过期 // return undefined // } // // 被访问了，刷新存储时间 // timeMap.set(id, Date.now()) // return this.obj[id] // } // set(id, value) { // if(Object.keys(this.obj).length === this.limit) { // // 是否等于当前限制，找到最久未使用的对象 // const now = Date.now() // // 遍历 map，找到 now - time 值最大的那个，就是最久未使用的对象 // let oldKey = 0 // let bigger = 0 // timeMap.forEach((v, key) => { // if (now - v > bigger) { // bigger = now - v // oldKey = key // } // }) // timeMap.delete(oldKey) // delete this.obj[oldKey] // this.obj[id] = value // } else { // this.obj[id] = value // timeMap.set(id, Date.now()) // } // } // } // const c = new Cache(5000, 3) // console.log(c) const versionsList = ['1.45.1', '1.5', '1.3.2', '6', '3.3.3.3']; // function compareVersions(version1, version2) { // const v1 = version1.split('.').map(Number) // const v2 = version2.split('.').map(Number) // for (let i = 0; i < Math.max(v1.length, v2.length); i++) { // const num1 = v1[i] || 0 // const num2 = v2[i] || 0 // if (num1 > num2) return 1 // if (num1 < num2) return -1 // } // return 0 // } // console.log(versionsList.sort(compareVersions)) // 冒泡实现 function compareMaxVersion(current, next) { const currentNumberList = current.split('.').map(Number) const nextNumberList = next.split('.').map(Number) for (let i = 0; i < Math.max(currentNumberList.length, nextNumberList.length); i++) { const number1 = currentNumberList[i] || 0 const number2 = nextNumberList[i] || 0 if (number1 > number2) return 1 if (number1 < number2) return -1 } return 0 } function sortVersions(versions) { const length = versions.length for (let i = 0; i < length; i++) { for (let j = 0; j < length - 1 - i; j++) { if (compareMaxVersion(versions[j], versions[j+1]) > 0) { [versions[j], versions[j+1]] = [versions[j+1], versions[j]] } } } return versions } console.log('版本排序：', sortVersions(versionsList))"},{"title":"","date":"2024-06-21T06:45:43.021Z","updated":"2024-06-21T06:45:43.021Z","comments":false,"path":"demo/2024面试准备/React进阶/02-lifecircle.html","permalink":"http://yoursite.com/demo/2024%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/React%E8%BF%9B%E9%98%B6/02-lifecircle.html","excerpt":"","text":"Document class Count extends React.Component { constructor() { // 使用 this 前必须调用 super() this.state = { count: 11 } console.log('child constructor') } componentWillMount(){ console.log('child componentWillMount') } componentDidMount(){ console.log('child componentDidMount ') } componentWillUpdate() { console.log('child componentWillUpdate ') } componentWillReceiveProps(nextProps) { console.log('child componentWillReceiveProps', nextProps) } handleClick = () => { console.log(this.state) this.setState({ count: this.state.count + 1 }) } render() { console.log('child render') return ( {this.state.count} add ) } } class App extends React.Component { constructor() { super() this.state = { count: 1 } console.log('app constructor') } componentWillMount(){ console.log('app componentWillMount') } componentDidMount(){ console.log('app componentDidMount ') setTimeout(() => { this.setState({ count: this.state.count + 1 }) }, 1000); } render() { console.log('app render') return ( ) } } ReactDOM.render(, document.querySelector('#app'))"},{"title":"","date":"2024-06-21T07:34:25.672Z","updated":"2024-06-21T07:34:25.672Z","comments":false,"path":"demo/2024面试准备/React进阶/01-jsx.html","permalink":"http://yoursite.com/demo/2024%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/React%E8%BF%9B%E9%98%B6/01-jsx.html","excerpt":"","text":"Document class Child extends React.Component { render() { return ( Child ) } } class App extends React.Component { render() { return } } ReactDOM.render(, document.querySelector('#app'))"},{"title":"","date":"2024-06-21T07:32:47.182Z","updated":"2024-06-21T07:18:25.214Z","comments":false,"path":"demo/2024面试准备/React进阶/03-eventEmitter.html","permalink":"http://yoursite.com/demo/2024%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/React%E8%BF%9B%E9%98%B6/03-eventEmitter.html","excerpt":"","text":"Document class EventEmitter { constructor() { this.eventMap = {} } // 注册事件, type 表示事件名, handler 表示事件函数 on(type, handler) { if (!(handler instanceof Function)) { throw new Error('请传递正确函数') } if (!this.eventMap[type]) { this.eventMap[type] = [] } this.eventMap[type].push(handler) } emit(type, params) { if (this.eventMap[type]) { this.eventMap[type].forEach((handler, index) => { handler(params) }) } } off(type, handler) { if (this.eventMap[type]) { const isIndex = this.eventMap[type].indexOf(handler) if (isIndex >= 0) { this.eventMap[type].splice(isIndex, 1) } } } } const myEvent = new EventEmitter() const sayHi = (what) => { console.log('hi', what) } myEvent.on('sayHi', sayHi) myEvent.emit('sayHi', 'alex.cc') console.log('myEvent', myEvent) myEvent.off('sayHi', sayHi) console.log('myEvent', myEvent)"},{"title":"","date":"2024-06-21T07:37:47.004Z","updated":"2024-06-21T07:37:47.004Z","comments":false,"path":"demo/2024面试准备/React进阶/04-communication.html","permalink":"http://yoursite.com/demo/2024%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/React%E8%BF%9B%E9%98%B6/04-communication.html","excerpt":"","text":"Document // 父组件通过 ref 拿到子组件实例,调用子组件内部方法 // 在自定义 Modal 组件时,很实用 class Child extends React.Component { say() { console.log('is child') } render() { return ( Child ) } } class App extends React.Component { componentDidMount(){ console.log(this.child.say()) } render() { return this.child = c } /> } } ReactDOM.render(, document.querySelector('#app'))"},{"title":"","date":"2024-06-25T06:12:19.414Z","updated":"2024-06-25T06:12:19.414Z","comments":false,"path":"demo/2024面试准备/React进阶/05-hooks.html","permalink":"http://yoursite.com/demo/2024%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/React%E8%BF%9B%E9%98%B6/05-hooks.html","excerpt":"","text":"Document const { useState, useEffect } = React const useSize = () => { const [size, setSize] = useState(null) const onResize = () => { setSize({ width: document.documentElement.clientWidth, height: document.documentElement.clientHeight, }) } console.log('size') useEffect(() => { window.addEventListener('resize', onResize) return () => { window.removeEventListener('resize', onResize) } }, []) return size } const Child = (props) => { const { count } = props const size = useSize() useEffect(() => { console.log('use effect') return () => { console.log('init and unmount') } }, [count]) return ( Child{count} {JSON.stringify(size, null, 2)} ) } const App = () => { const [count, setCount] = React.useState(0) return ( hooks {count} { setCount(count + 1) setCount(count + 1) setCount(count + 1) setCount(count + 1) console.log(count) }}>add {count > 3 ? null : } ) } ReactDOM.render(, document.querySelector('#app'))"},{"title":"","date":"2024-07-05T02:02:22.839Z","updated":"2024-07-05T02:02:22.839Z","comments":false,"path":"demo/2024面试准备/React进阶/06.useDefer.html","permalink":"http://yoursite.com/demo/2024%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/React%E8%BF%9B%E9%98%B6/06.useDefer.html","excerpt":"","text":"Document const { useState, useEffect } = React const useDefer = (maxCount = 100) => { const [frameCount, setFrameCount] = useState(0) let rafid; function updateFrameCount() { rafid = requestAnimationFrame(() => { setFrameCount(frameCount + 1) if (frameCount >= maxCount) { return } updateFrameCount() }) } updateFrameCount() useEffect(() => { return () => { cancelAnimationFrame(rafid) } }) return function defer(n) { return frameCount >= n } } const Child = (props) => { return ( Child { new Array(100).fill(100).map(i => { return ( { new Array(100).fill(100).map(i => { return {i} }) } ) }) } ) } const App = () => { const [count, setCount] = React.useState(0) const defer = useDefer() return ( 自定义hook useDefer { new Array(100).fill('????').map((i, idx) => { return defer(idx) && }) } ) } ReactDOM.render(, document.querySelector('#app'))"},{"title":"","date":"2024-06-25T06:02:00.276Z","updated":"2024-06-25T06:02:00.276Z","comments":false,"path":"demo/2024面试准备/my-promise/index.js","permalink":"http://yoursite.com/demo/2024%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/my-promise/index.js","excerpt":"","text":"const PENDING = 'pending'; const FULLFILLED = 'fullfilled'; const REJECTED = 'rejected'; class MyPromise { #state = 'pending' #result = null constructor(executor){ const resolve = (data) => { this.#changeState(FULLFILLED, data) } const reject = (reason) => { this.#changeState(REJECTED, reason) } try { executor(resolve, reject) } catch (error) { reject(error) } } #changeState(state, result) { if (this.#state !== PENDING) return this.#state = state this.#result = result } then(onFulfilled, onRejected) { return } } const m = new MyPromise((resolve, reject) => { throw 123 }) console.log(m)"},{"title":"","date":"2024-07-02T03:20:27.479Z","updated":"2024-07-02T03:20:27.479Z","comments":false,"path":"demo/2024面试准备/图片懒加载两种方案/index.html","permalink":"http://yoursite.com/demo/2024%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%A1%88/index.html","excerpt":"","text":"Document 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 文字文字 const imgs = document.getElementsByTagName('img') // const setImgSrc = () => { // [...imgs].forEach(img => { // const top = img.getBoundingClientRect().top; // console.log(top) // console.log(img) // if (top < window.innerHeight) { // const data_src = img.getAttribute('data-src') // img.setAttribute('src', data_src) // console.log('监听中...') // } // }) // } // const loadImgs = () => { // window.addEventListener('scroll', setImgSrc) // } // loadImgs() const loadImgs = () => { const cb = (entries) => { console.log(entries) entries.forEach(entry => { console.log(entry) if (entry.isIntersecting) { const img = entry.target const data_src = img.getAttribute('data-src') img.setAttribute('src', data_src) observer.unobserve(img) } }) } const observer = new IntersectionObserver(cb); [...imgs].forEach(img => { observer.observe(img) }) } loadImgs()"},{"title":"","date":"2024-07-02T01:44:10.789Z","updated":"2024-07-02T01:44:10.789Z","comments":false,"path":"demo/2024面试准备/算法/01-打印嵌套对象的属性和值.js","permalink":"http://yoursite.com/demo/2024%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/%E7%AE%97%E6%B3%95/01-%E6%89%93%E5%8D%B0%E5%B5%8C%E5%A5%97%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E5%92%8C%E5%80%BC.js","excerpt":"","text":"const input = { a: 1, b: [1, 2, { c: true, f: [99, {ff: 999}]}, [3]], d: { e: 2, f: 3 }, g: null } const fomatter = (obj, k = '') => { if (obj === null) return null let res = {} for (const key in obj) { const fattenKey = k+(Array.isArray(obj)? `[${key}]`: `${k? '.': ''}${key}`); if (obj[key] !== null) { if (typeof obj[key] === 'object') { Object.assign(res, fomatter(obj[key], key)) } else { if (k) { res[fattenKey] = obj[key] } else { res[fattenKey] = obj[key] } } } } return res } const result = fomatter(input) console.log(result) const arr = [3,4,5,6,7,8] const asyncSum = () => { const val = 0 }"},{"title":"","date":"2024-07-02T01:45:44.902Z","updated":"2024-07-02T01:45:44.902Z","comments":false,"path":"demo/2024面试准备/算法/02-并发控制.js","permalink":"http://yoursite.com/demo/2024%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/%E7%AE%97%E6%B3%95/02-%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6.js","excerpt":"","text":"const sleep = (timeout = 1000, name) => { return new Promise((resolve, reject) => { setTimeout(() => { resolve(name) }, timeout); }) } class ConcurrencyControl { constructor(max = 2) { this.max = max // 最大并发数量 this.task = [] // 任务队列 this.runningCount = 0 // 正在执行的任务 } add(task) { return new Promise((resolve, reject) => { this.task.push({ task: task, resolve, reject, }) this.run() }) } run() { // 用if 比 while 更好,省内存 if (this.runningCount < this.max && this.task.length > 0) { console.log(' - - ', this.runningCount) const { task, resolve, reject } = this.task.shift() this.runningCount++ task() .then(resolve, reject) .finally(() => { this.runningCount-- this.run() }) } } } const cc = new ConcurrencyControl() const addTask = (timeout, name) => { cc .add(() => sleep(timeout, name)) .then(res => { console.log(`任务 ${res} 完成`) }) } addTask(10000, 1) addTask(5000, 2) addTask(3000, 3) addTask(4000, 4) addTask(6000, 5) addTask(2000, 6) addTask(7000, 7)"},{"title":"","date":"2024-06-22T03:29:11.905Z","updated":"2024-06-22T03:29:11.905Z","comments":false,"path":"demo/2024面试准备/算法/03-二叉树前中后遍历.js","permalink":"http://yoursite.com/demo/2024%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/%E7%AE%97%E6%B3%95/03-%E4%BA%8C%E5%8F%89%E6%A0%91%E5%89%8D%E4%B8%AD%E5%90%8E%E9%81%8D%E5%8E%86.js","excerpt":"","text":"const tree = { val: 'f', left: { val: 'd', left: { val: \"b\", left: { val: 'a' }, right: { val: 'c' } }, right: { val: 'e' } }, right: { val: 'g', left: null, right: { val: 'i', left: { val: 'h' }, right: { val: 'j' } } } } /** @name 先中后指的是`根`节点 */ // https://www.bilibili.com/video/BV1tW4y1M7FC/?spm_id_from=333.788.top_right_bar_window_history.content.click&vd_source=a9f38e58a519cc0570c2dacd34ad7ebe /** 先序: 根 左 右 */ /** 中序: 左 根 右 */ /** 后序: 左 右 根 */ /** @name 先序遍历 */ const pre = (node) => { if (node?.val) { console.log(node.val) } if (node?.left) { pre(node.left) } if (node?.right) { pre(node.right) } } // pre(tree) /** @name 中序遍历 */ const middle = (node) => { if (node?.left) { middle(node.left) } if (node?.val) { console.log(node.val) } if (node?.right) { middle(node.right) } } // middle(tree) // d f g // b d e f g // a b c d e f g // a b c d e f g h i j /** @name 后序遍历 */ const back = (node) => { if (node?.left) { back(node.left) } if (node?.right) { back(node.right) } if (node?.val) { console.log(node.val) } } back(tree) // d g f // b e d g f // a c b e d g f // a c b e d i g f // a c b e d h j i g f"},{"title":"","date":"2024-06-24T01:30:28.444Z","updated":"2024-06-24T01:30:28.444Z","comments":false,"path":"demo/2024面试准备/算法/04-反转链表.js","permalink":"http://yoursite.com/demo/2024%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/%E7%AE%97%E6%B3%95/04-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8.js","excerpt":"","text":"const nodelist = { val: 1, next: { val: 2, next: { val: 3, next: { val: 4, next: { val: 5, next: null } } } } } const traverseNode = node => { if (!node.next) return node let prev = next = null let curr = node while(curr) { next = curr.next curr.next = prev prev = curr curr = next } return prev } console.log(JSON.stringify(traverseNode(nodelist), null, 2))"},{"title":"","date":"2024-06-24T01:34:35.916Z","updated":"2024-06-24T01:34:35.916Z","comments":false,"path":"demo/2024面试准备/算法/05-flattenArrray.js","permalink":"http://yoursite.com/demo/2024%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/%E7%AE%97%E6%B3%95/05-flattenArrray.js","excerpt":"","text":"const arr = [3, 2, [66, 32, [1, 2, 4]], 7, [9]] const flattenArray = list => { const res = [] for (let i = 0; i < list.length; i++) { if (Array.isArray(list[i])) { res.push(...flattenArray(list[i])) } else { res.push(list[i]) } } return res } console.log(flattenArray(arr))"},{"title":"","date":"2024-07-02T03:34:50.953Z","updated":"2024-07-02T03:34:50.953Z","comments":false,"path":"demo/2024面试准备/算法/06-快速排序.js","permalink":"http://yoursite.com/demo/2024%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/%E7%AE%97%E6%B3%95/06-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.js","excerpt":"","text":"const arr = [3, 1, 5, 11, 99, 4, 6, 1, 10] const quickSort = (list) => { if (list.length"},{"title":"","date":"2024-07-05T01:25:53.392Z","updated":"2024-07-05T01:25:53.392Z","comments":false,"path":"demo/2024面试准备/算法/07-浏览器存储Map对象.js","permalink":"http://yoursite.com/demo/2024%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/%E7%AE%97%E6%B3%95/07-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AD%98%E5%82%A8Map%E5%AF%B9%E8%B1%A1.js","excerpt":"","text":"const setLocalStorage = (key, value, type) => { if (typeof value === 'string') { localStorage.setItem(key, value) } else { localStorage.setItem(key, JSON.stringify(value)) } } const getLocalStorage = (key) => { return JSON.parse(localStorage.getItem(key)) } const onBtnClicked = () => { const map = new Map() const o = {} map.set('name', 'alex.cheng') map.set(o, { age: 18, sex: 'man', }) console.log(map.get(o)) /** * @name 将map实例转化成一个数组,然后序列化之后存储,取的时候parse完了之后再传递给Map构造器 */ const str = JSON.stringify(Array.from(map.entries())) const store = new Map(JSON.parse(str)) console.log(store) console.log(store.get('name')) console.log(store.get(o)) // 获取不到了 // setLocalStorage('myInfo', map) // setTimeout(() => { // console.log(getLocalStorage('myInfo')) // }, 2000); } window.onload = () => { const app = document.querySelector('#app') const button = document.createElement('button') button.textContent = '点击' button.addEventListener('click', onBtnClicked) app.appendChild(button) }"},{"title":"","date":"2024-07-05T02:42:23.889Z","updated":"2024-07-05T02:42:23.889Z","comments":false,"path":"demo/2024面试准备/算法/08-async&await.js","permalink":"http://yoursite.com/demo/2024%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/%E7%AE%97%E6%B3%95/08-async&await.js","excerpt":"","text":"const onBtnClicked = () => { const fn = async () => { const count = 100 return await count } fn().then(res => { console.log(res) }) } window.onload = () => { const app = document.querySelector('#app') const button = document.createElement('button') button.textContent = '点击' button.addEventListener('click', onBtnClicked) app.appendChild(button) }"},{"title":"","date":"2024-07-08T02:34:14.134Z","updated":"2024-07-08T02:34:14.134Z","comments":false,"path":"demo/2024面试准备/算法/09-min-max-随机数.js","permalink":"http://yoursite.com/demo/2024%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/%E7%AE%97%E6%B3%95/09-min-max-%E9%9A%8F%E6%9C%BA%E6%95%B0.js","excerpt":"","text":"const minValue = 3; const maxValue = 10; // 生成一个0到1之间的随机小数 const randomFraction = Math.random(); // 将随机小数映射到指定范围内 const randomNumber = Math.floor(randomFraction * (maxValue - minValue + 1)) + minValue; console.log(randomNumber);"},{"title":"","date":"2024-07-08T02:29:53.577Z","updated":"2024-07-08T02:29:53.577Z","comments":false,"path":"demo/2024面试准备/算法/index.html","permalink":"http://yoursite.com/demo/2024%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/%E7%AE%97%E6%B3%95/index.html","excerpt":"","text":"Document"},{"title":"","date":"2024-06-11T08:52:17.497Z","updated":"2024-06-11T08:52:17.497Z","comments":false,"path":"demo/webcomponent/composed-path/index.html","permalink":"http://yoursite.com/demo/webcomponent/composed-path/index.html","excerpt":"","text":"Document composed and composedPath demo"},{"title":"","date":"2024-06-11T08:52:17.498Z","updated":"2024-06-11T08:52:17.498Z","comments":false,"path":"demo/webcomponent/composed-path/main.js","permalink":"http://yoursite.com/demo/webcomponent/composed-path/main.js","excerpt":"","text":"customElements.define('open-shadow', class extends HTMLElement { constructor() { super(); } connectedCallback() { const pElem = document.createElement('p'); pElem.textContent = this.getAttribute('text'); const shadowRoot = this.attachShadow({mode: 'open'}); shadowRoot.appendChild(pElem); } } ); customElements.define('closed-shadow', class extends HTMLElement { constructor() { super(); } connectedCallback() { const pElem = document.createElement('p'); pElem.textContent = this.getAttribute('text'); const shadowRoot = this.attachShadow({mode: 'closed'}); shadowRoot.appendChild(pElem); } } ); document.querySelector('html').addEventListener('click', e => { console.log(e.composed); console.log(e.composedPath()); });"},{"title":"","date":"2024-06-11T08:52:17.498Z","updated":"2024-06-11T08:52:17.498Z","comments":false,"path":"demo/webcomponent/element-details-template/index.html","permalink":"http://yoursite.com/demo/webcomponent/element-details-template/index.html","excerpt":"","text":"Document element-details-template details {font-family: \"Open Sans Light\",Helvetica,Arial} .name {font-weight: bold; color: #217ac0; font-size: 120%} h4 { margin: 10px 0 -8px 0; } h4 span { background: #217ac0; padding: 2px 6px 2px 6px } h4 span { border: 1px solid #cee9f9; border-radius: 4px } h4 span { color: white } .attributes { margin-left: 22px; font-size: 90% } .attributes p { margin-left: 16px; font-style: italic } dl { margin-left: 6px; } dt { font-weight: bold; color: #217ac0; font-size: 110% } dt { font-family: Consolas, \"Liberation Mono\", Courier } dd { margin-left: 16px } &lt;NEED NAME&gt; NEED DESCRIPTION Attributes None Hello_AlexCc A mechanism for holding client- side content that is not to be rendered when a page is loaded but may subsequently be instantiated during runtime using JavaScript. name The name of the slot."},{"title":"","date":"2024-06-11T08:52:17.498Z","updated":"2024-06-11T08:52:17.498Z","comments":false,"path":"demo/webcomponent/element-details-template/main.js","permalink":"http://yoursite.com/demo/webcomponent/element-details-template/main.js","excerpt":"","text":"class DetailsElement extends HTMLElement { constructor() { super() const template = document.getElementById('element-details-template').content const shadowRoot = this.attachShadow({mode: 'open'}) shadowRoot.appendChild(template.cloneNode(true)) console.log('host ', shadowRoot.host === this) // ShadowRoot 附加的宿主 DOM 元素。 } } const a = customElements.define('details-element', DetailsElement) console.log('?? ', customElements.get('details-element')) console.log('?? a', a)"},{"title":"","date":"2024-06-11T08:52:17.499Z","updated":"2024-06-11T08:52:17.499Z","comments":false,"path":"demo/webcomponent/expanding-list/iframe.html","permalink":"http://yoursite.com/demo/webcomponent/expanding-list/iframe.html","excerpt":"","text":"iframe body { background-color: coral; } iframe body iframe page"},{"title":"","date":"2024-06-11T08:52:17.499Z","updated":"2024-06-11T08:52:17.499Z","comments":false,"path":"demo/webcomponent/expanding-list/index.html","permalink":"http://yoursite.com/demo/webcomponent/expanding-list/index.html","excerpt":"","text":"Life cycle callbacks test custom-square { margin: 20px; } .other { /* position: absolute; */ top: 20%; left: 50%; width: 200px; height: 200px; background-color: #808080; } Life cycle callbacks test Add custom-square to DOM Update attributes Remove custom-square from DOM Move custom-square to new Dom"},{"title":"","date":"2024-06-11T08:52:17.499Z","updated":"2024-06-11T08:52:17.499Z","comments":false,"path":"demo/webcomponent/expanding-list/main.js","permalink":"http://yoursite.com/demo/webcomponent/expanding-list/main.js","excerpt":"","text":"// Create a class for the element class Square extends HTMLElement { // Specify observed attributes so that // attributeChangedCallback will work static get observedAttributes() { return ['c', 'l']; } constructor() { // Always call super first in constructor super(); const shadow = this.attachShadow({mode: 'open'}); const div = document.createElement('div'); const style = document.createElement('style'); shadow.appendChild(style); shadow.appendChild(div); } connectedCallback() { console.log('connectedCallback 当 custom element 首次被插入文档 DOM 时，被调用。'); updateStyle(this); } disconnectedCallback() { console.log('Custom square element 从页面上被删除！'); } adoptedCallback() { console.log('Custom square element 移动到了一个新的页面？'); } attributeChangedCallback(name, oldValue, newValue) { console.log('Custom square element 属性发生了改变'); updateStyle(this); } } customElements.define('custom-square', Square); function updateStyle(elem) { const shadow = elem.shadowRoot; shadow.querySelector('style').textContent = ` div { width: ${elem.getAttribute('l')}px; height: ${elem.getAttribute('l')}px; background-color: ${elem.getAttribute('c')}; } `; } const add = document.querySelector('.add'); const update = document.querySelector('.update'); const remove = document.querySelector('.remove'); const move = document.querySelector('.move'); const other = document.querySelector('.other'); let square; update.disabled = true; remove.disabled = true; move.disabled = true; function random(min, max) { return Math.floor(Math.random() * (max - min + 1) + min); } add.onclick = function() { // Create a custom square element square = document.createElement('custom-square'); square.setAttribute('l', '100'); square.setAttribute('c', 'red'); document.body.appendChild(square); update.disabled = false; remove.disabled = false; move.disabled = false; add.disabled = true; }; update.onclick = function() { // Randomly update square's attributes square.setAttribute('l', random(50, 200)); square.setAttribute('c', `rgb(${random(0, 255)}, ${random(0, 255)}, ${random(0, 255)})`); }; remove.onclick = function() { // Remove the square document.body.removeChild(square); update.disabled = true; remove.disabled = true; add.disabled = false; }; move.onclick = function() { const square1 = document.querySelector('custom-square') // move，我以为的移动到新文档 other.appendChild(square1) /** * @result 生命周期执行顺序: disconnectedCallback > connectedCallback * @desc 很尴尬，这不叫移动到新的文档么？ */ // 那我们来试试 iframe setTimeout(() => { const iframe = document.querySelector('iframe') iframe.contentDocument.querySelector('body').appendChild(square1) move.disabled = true }, 1500); // 这下就对了，生命周期执行顺序 disconnectedCallback > adoptedCallback > connectedCallback };"},{"title":"","date":"2024-06-11T08:52:17.499Z","updated":"2024-06-11T08:52:17.499Z","comments":false,"path":"demo/webcomponent/parent-send-data-to-child/index.html","permalink":"http://yoursite.com/demo/webcomponent/parent-send-data-to-child/index.html","excerpt":"","text":"Life cycle callbacks test 00 Child Button parent template"},{"title":"","date":"2024-06-11T08:52:17.500Z","updated":"2024-06-11T08:52:17.500Z","comments":false,"path":"demo/webcomponent/parent-send-data-to-child/main.js","permalink":"http://yoursite.com/demo/webcomponent/parent-send-data-to-child/main.js","excerpt":"","text":"class ParentWc extends HTMLElement { constructor() { super() this.data = { value: 'Parent instance value' } const template = document.getElementById('parent').content const shadowRoot = this.attachShadow({mode: 'open'}) shadowRoot.appendChild(template.cloneNode(true)) } sayHello(msg) { console.log(msg, this.data) } connectedCallback() { const child = this.shadowRoot.querySelector('child-wc') // 1. 通过 DOM 属性传参 // child.setAttribute('text', 'Parent changed the Text') // 2. 通过组件实例直接修改内部数据（目前主流的形式） // console.log('??', child) // 3. 事件监听 child.addEventListener('custom-event', ({ detail }) => { console.log('事件触发 ', detail.value); }) } } window.customElements.define('parent-wc', ParentWc) // childWc class ChildWc extends HTMLElement { constructor() { super() this.data = { value: 'Child instance value' } Object.defineProperty(this.data, 'text', { set: value => { console.log('data text changed: ', value) } }) const template = document.getElementById('child').content const shadowRoot = this.attachShadow({mode: 'open'}) shadowRoot.appendChild(template.cloneNode(true)) } // 必须先申明需要监听的属性 static get observedAttributes() { return ['text']; } connectedCallback() { const event = new CustomEvent('custom-event', { detail: { value: 'child web component' } }) this.dispatchEvent(event) const btn = this.shadowRoot.querySelector('button') btn.addEventListener('click', () => { // 获取父组件 this.getRootNode().host.sayHello('Hello :') }) } attributeChangedCallback(name, oldValue, newValue) { console.log('name', name) console.log('oldValue', oldValue) console.log('newValue', newValue) } } window.customElements.define('child-wc', ChildWc);"},{"title":"","date":"2024-06-11T08:52:17.501Z","updated":"2024-06-11T08:52:17.501Z","comments":false,"path":"demo/webcomponent/popup-info-box/index.html","permalink":"http://yoursite.com/demo/webcomponent/popup-info-box/index.html","excerpt":"","text":"Document Pop-up info widget - web components Enter your CVC"},{"title":"","date":"2024-06-11T08:52:17.501Z","updated":"2024-06-11T08:52:17.501Z","comments":false,"path":"demo/webcomponent/popup-info-box/main.js","permalink":"http://yoursite.com/demo/webcomponent/popup-info-box/main.js","excerpt":"","text":"// Create a class for the element class PopUpInfo extends HTMLElement { constructor() { // Always call super first in constructor super(); } connectedCallback() { /** * @name connectedCallback函数 * @desc 当 custom element 首次被插入文档 DOM 时，被调用。 */ // Create a shadow root const shadow = this.attachShadow({mode: 'open'}); // Create spans const wrapper = document.createElement('span'); wrapper.setAttribute('class', 'wrapper'); const icon = document.createElement('span'); icon.setAttribute('class', 'icon'); icon.setAttribute('tabindex', 0); const info = document.createElement('span'); info.setAttribute('class', 'info'); /** * @name 🔥🔥🔥 我们想要获取元素上的属性，必须放在 connectedCallback 函数内去获取 * @desc 因为只有元素插入到了 dom 中，才能获取到 */ const text = this.getAttribute('data-text'); info.textContent = text; // Insert icon let imgUrl; if(this.hasAttribute('img')) { imgUrl = this.getAttribute('img'); } else { // imgUrl = './img/avatar.jpg'; } const img = document.createElement('img'); img.src = imgUrl; icon.appendChild(img); // Create some CSS to apply to the shadow dom const style = document.createElement('style'); console.log(style.isConnected); style.textContent = ` .wrapper { position: relative; } .info { font-size: 0.8rem; width: 200px; display: inline-block; border: 1px solid black; padding: 10px; background: white; border-radius: 10px; opacity: 0; transition: 0.6s all; position: absolute; bottom: 20px; left: 10px; z-index: 3; } img { width: 1.2rem; } .icon:hover + .info, .icon:focus + .info { opacity: 1; } `; // Attach the created elements to the shadow dom shadow.appendChild(style); // 一开始这个style.isConnected 为false，把他添加给shadow Root后 isConnected就为true了 console.log(style.isConnected); shadow.appendChild(wrapper); wrapper.appendChild(icon); wrapper.appendChild(info); } } // Define the new element customElements.define('popup-info', PopUpInfo);"},{"title":"","date":"2024-06-11T08:52:17.501Z","updated":"2024-06-11T08:52:17.501Z","comments":false,"path":"demo/webcomponent/quark-design/index.html","permalink":"http://yoursite.com/demo/webcomponent/quark-design/index.html","excerpt":"","text":"Document Quark Design 默认按钮 danger"},{"title":"","date":"2024-06-11T08:52:17.501Z","updated":"2024-06-11T08:52:17.501Z","comments":false,"path":"demo/webcomponent/template&slot/index.html","permalink":"http://yoursite.com/demo/webcomponent/template&slot/index.html","excerpt":"","text":"Document template & slot Default Title default slot My paragraph Slot title"},{"title":"","date":"2024-06-11T08:52:17.366Z","updated":"2024-06-11T08:52:17.366Z","comments":false,"path":"demo/2023面试准备/demo/Vue2/async.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/Vue2/async.js","excerpt":"","text":"export default { template: ` 我是局部注册的 异步组件 ` }"},{"title":"","date":"2024-06-11T08:52:17.367Z","updated":"2024-06-11T08:52:17.367Z","comments":false,"path":"demo/2023面试准备/demo/Vue2/index.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/Vue2/index.html","excerpt":"","text":"Document 姓名：, 年龄： import './main.js' import Vmodel from './vmodel.js' const app = new Vue({ el: '#app', components: { AsyncComponent: () => import('./async.js'), Vmodel, }, data() { return { student: { name: '', age: '', }, compValue: 'v-model comp value', list: [], showAsync: false, } }, methods: { add() { this.list.push(Object.assign({}, this.student)) }, toggle() { this.showAsync = !this.showAsync } } })"},{"title":"","date":"2024-06-11T08:52:17.367Z","updated":"2024-06-11T08:52:17.367Z","comments":false,"path":"demo/2023面试准备/demo/Vue2/main.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/Vue2/main.js","excerpt":"","text":"import mixins from \"./mixins.js\" // 定义全局组件 Vue.component('global-component') // 创建 Vue 子类 const MyCompnent = Vue.extend({ mixins: [mixins], template: ` mixin ` }) // new MyCompnent().$mount('#my-component')"},{"title":"","date":"2024-06-11T08:52:17.368Z","updated":"2024-06-11T08:52:17.368Z","comments":false,"path":"demo/2023面试准备/demo/Vue2/mixins.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/Vue2/mixins.js","excerpt":"","text":"export default { mounted() { this.sayHello() }, methods: { sayHello() { console.log('say hello from mixin!!!!') } } }"},{"title":"","date":"2024-06-11T08:52:17.368Z","updated":"2024-06-11T08:52:17.368Z","comments":false,"path":"demo/2023面试准备/demo/Vue2/vmodel.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/Vue2/vmodel.js","excerpt":"","text":"export default { template: ` comp input value `, model: { prop: 'compValue', event: 'change', }, props: { compValue: { text: String, default: '' } } }"},{"title":"","date":"2024-06-11T08:52:17.371Z","updated":"2024-06-11T08:52:17.371Z","comments":false,"path":"demo/2023面试准备/demo/Vue3/vue3-demo.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/Vue3/vue3-demo.html","excerpt":"","text":"Document"},{"title":"","date":"2024-06-11T08:52:17.502Z","updated":"2024-06-11T08:52:17.502Z","comments":false,"path":"demo/webcomponent/template&slot/main.js","permalink":"http://yoursite.com/demo/webcomponent/template&slot/main.js","excerpt":"","text":"// 单独使用 // window.onload = function() { // let template = document.getElementById('my-paragraph'); // let templateContent = template.content; // document.body.appendChild(templateContent); // } // 在 Web Components 中使用模板 class MyParagraph extends HTMLElement { constructor() { super() } connectedCallback() { let template = document.getElementById('my-paragraph'); let templateContent = template.content; this.attachShadow({ mode: 'open' }) .appendChild(templateContent.cloneNode(true)) } } customElements.define('my-paragraph', MyParagraph)"},{"title":"","date":"2024-06-11T08:52:17.371Z","updated":"2024-06-11T08:52:17.371Z","comments":false,"path":"demo/2023面试准备/demo/antv-g2/index.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/antv-g2/index.html","excerpt":"","text":"Document html, body { margin: 0; padding: 0; background-color: #ccc; } #container { width: 600px; height: 600px; } // 准备数据 const data = [ { genre: 'Sports', sold: 275 }, { genre: 'Strategy', sold: 115 }, { genre: 'Action', sold: 120 }, { genre: 'Shooter', sold: 350 }, { genre: 'Other', sold: 150 }, ]; // 初始化图表实例 const chart = new G2.Chart({ container: document.getElementById('container'), }); // 声明可视化 chart .interval() // 创建一个 Interval 标记 .data(data) // 绑定数据 .encode('x', 'genre') // 编码 x 通道 .encode('y', 'sold'); // 编码 y 通道 // 渲染可视化 chart.render();"},{"title":"","date":"2024-06-11T08:52:17.372Z","updated":"2024-06-11T08:52:17.372Z","comments":false,"path":"demo/2023面试准备/demo/css/index.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/css/index.html","excerpt":"","text":"Document const item2 = document.querySelector('.item2') const item3 = document.querySelector('.item3') console.log(item2.getBoundingClientRect().width) console.log(item3.getBoundingClientRect().width)"},{"title":"","date":"2024-06-11T08:52:17.372Z","updated":"2024-06-11T08:52:17.372Z","comments":false,"path":"demo/2023面试准备/demo/css/padding-bottom.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/css/padding-bottom.html","excerpt":"","text":"Document * { margin: 0; padding: 0; } html, body { width: 100%; height: 100%; } .outer { width: 50%; height: 100%; background: pink; margin: 0 auto; } .inner { width: 100%; padding-bottom: 50%; /* 定义基于父元素宽度的百分比下内边距 */ background: #ccc; position: relative; } .inner img { width: 100%; height: 100%; position: absolute; } 标题标题标题 我是内容区域"},{"title":"","date":"2024-06-11T08:52:17.372Z","updated":"2024-06-11T08:52:17.372Z","comments":false,"path":"demo/2023面试准备/demo/css/index.css","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/css/index.css","excerpt":"","text":"* { margin: 0; padding: 0; } html, body { width: 100%; height: 100%; background-color:cadetblue; } .container { /* width: 300px; */ height: 300px; background-color: pink; display: flex; } .item1 { flex: none; width: 50px; background-color:blue; } .item2 { flex: 1 1 100px; background-color:red; } .item3 { flex: 1 1 200px; background-color:yellow; }"},{"title":"","date":"2024-06-11T08:52:17.375Z","updated":"2024-06-11T08:52:17.375Z","comments":false,"path":"demo/2023面试准备/demo/h5/index.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/h5/index.html","excerpt":"","text":"Document * { margin: 0; padding: 0; } #app { width: 100%; height: 100vh; background-color: antiquewhite; font-size: 0.53rem; } .test { width: 50vw; height: 100vh; background-color: aqua; } 123 function setRootRem() { const root = document.documentElement; /** 以iPhone6为例：布局视口为375px，我们把它分成10份，则1rem = 37.5px， * 这时UI给定一个元素的宽为375px（设备独立像素）， * 我们只需要将它设置为375 / 37.5 = 10rem。 */ // console.log(window.innerWidth); console.log(window.screen.width); const scale = root.clientWidth / 10 root.style.fontSize = scale + 'px' } setRootRem() window.addEventListener('resize', setRootRem)"},{"title":"","date":"2024-06-11T08:52:17.381Z","updated":"2024-06-11T08:52:17.381Z","comments":false,"path":"demo/2023面试准备/demo/http/server2.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/http/server2.js","excerpt":"","text":"const http = require('http'); // 创建HTTP服务器 const server = http.createServer((req, res) => { res.writeHead(200, { 'Content-Type': 'text/json; charset=utf-8', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': '*', // 'Cache-Control': 'max-age=5, private', }) res.end('请求 server2 的资源成功'); // 发送响应数据 }); // 监听端口 const port = 9999; server.listen(port, () => { console.log(`Server running at http://localhost:${port}/`); });"},{"title":"","date":"2024-06-11T08:52:17.381Z","updated":"2024-06-11T08:52:17.381Z","comments":false,"path":"demo/2023面试准备/demo/http/index.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/http/index.html","excerpt":"","text":"Document Hello Http!你好啊 fetch('http://localhost:9999/', { method: 'get' }) .then(res => console.log('??? ', res)) .then(res => { console.log('res ', res) })"},{"title":"","date":"2024-06-11T08:52:17.381Z","updated":"2024-06-11T08:52:17.381Z","comments":false,"path":"demo/2023面试准备/demo/http/server.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/http/server.js","excerpt":"","text":"const http = require('http'); const fs = require('fs') const html = fs.readFileSync('./index.html', 'utf8') // 创建HTTP服务器 const server = http.createServer((req, res) => { if (req.url === '/') { // 设置响应头部字段 res.setHeader('Cache-Control', 'max-age=3600, public'); // 表示3600秒之后，就重新从服务器拉取资源，接着缓存起来，客户端又可以使用缓存资源了。以此循环... // 其他响应设置，响应头字段也可以在这设置 res.writeHead(200, { 'Content-Type': 'text/html' }); res.end(html); } if (req.url === '/script.js') { if (req.headers['if-none-match'] === '123456789' && req.headers['if-modified-since'] === '2023-05-27 21:30') { res.writeHead(304) // 这段代码不会生效了，因为浏览器会从缓存获取资源，控制台还是会打印 Javascript loaded!!! res.end('console.log(\"服务器验证完毕，同意客户端获取缓存资源!!\")') } else { res.writeHead(200, { 'Content-Type': 'text/javascript', 'Cache-Control': 'max-age=10, no-cache', // 'ETag': '123456789', // 'Last-Modified': '2023-05-27 21:30', 'Set-Cookie': ['age=18; max-age=5', 'name=alex.cheng'] }) res.end('console.log(\"Javascript loaded!!!\")') } } }); // 监听端口 const port = 8888; server.listen(port, () => { console.log(`Server running at http://localhost:${port}/`); });"},{"title":"","date":"2024-06-11T08:52:17.375Z","updated":"2024-06-11T08:52:17.375Z","comments":false,"path":"demo/2023面试准备/demo/http-connection/index.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/http-connection/index.html","excerpt":"","text":"Document img { width: 500px; } HTTP 长连接 connection keep-alive 发起请求 console.log('content security policy') const btn = document.querySelector('#btn') btn.addEventListener('click', () => { fetch('/test').then(res => { console.log('fetch res', res) return res.json() }).then(res => { console.log(res) }) })"},{"title":"","date":"2024-06-11T08:52:17.381Z","updated":"2024-06-11T08:52:17.381Z","comments":false,"path":"demo/2023面试准备/demo/input-placeholder/index.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/input-placeholder/index.html","excerpt":"","text":"Document * { padding: 0; margin: 0; } body { background-color:#fff; height: 100%; width: 100%; padding: 50px; } .input-group { position: relative; } .input { padding: 10px; background-color: #fff; border-radius: 3px; outline: none; color: #444; border: 1px solid blue; } .placeholder { position: absolute; top: 8px; left: 8px; font-size: 14px; padding: 0 5px; color: blue; transition: .3s; pointer-events: none; } input:focus + .placeholder, input:not(:placeholder-shown) + .placeholder { top: -10px; background-color: #fff; border-radius: 3px; } Username"},{"title":"","date":"2024-06-11T08:52:17.375Z","updated":"2024-06-11T08:52:17.375Z","comments":false,"path":"demo/2023面试准备/demo/http-connection/server.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/http-connection/server.js","excerpt":"","text":"const http = require('http') const fs = require('fs') let count = 1 const server = http.createServer((req, res) => { // if (req.url === '/') { // const html = fs.readFileSync('index.html') // res.writeHead(200, { // 'Content-Type': 'text/html', // 'Connection': 'close' // }) // res.end(html) // } else { // const img = fs.readFileSync('tcp-connect.jpg') // res.writeHead(200, { // 'Content-Type': 'iamge/jpg', // 'Connection': 'close' // }) // res.end(img) // } console.log(req.url) if (req.url === '/') { res.writeHead(200, { 'Content-Type': 'text/html', // 'Location': '/new', // 'Content-Security-Policy': \"default-src http: https:\" // 'Content-Security-Policy': \"default-src \\'self\\'; report-uri /report\" }) const html = fs.readFileSync('index.html') res.end(html) } else { res.writeHead(200, { 'Content-Type': 'application/json', 'Cache-Control': 'max-age=5, stale-while-revalidate=10' }) setTimeout(() => { res.end({ count }) console.log('count ---- ', count) count = count + 1 }, 2000); } if (req.url === '/new') { res.writeHead(200, { 'Content-Type': 'text/html', 'Content-Security-Policy': \"default-src http: https:\" }) res.end('HTTP Redirect!!!') } }) server.listen(8080, () => { console.log('server running at port 8888...') })"},{"title":"","date":"2024-06-11T08:52:17.382Z","updated":"2024-06-11T08:52:17.382Z","comments":false,"path":"demo/2023面试准备/demo/js/index.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/js/index.html","excerpt":"","text":"Document .container { width: 100%; height: 50vh; background-color: bisque; color:black; font-weight: bold; font-size: 26px; text-align: center; line-height: 50vh; } 0"},{"title":"","date":"2024-06-11T08:52:17.383Z","updated":"2024-06-11T08:52:17.383Z","comments":false,"path":"demo/2023面试准备/demo/js/index.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/js/index.js","excerpt":"","text":"const fn = (res = 0) => { return new Promise(r => { setTimeout(() => { console.log(1) r(11 + res) }, 1000) }) } function run(list) { // 递归 // const f = list.shift() // if (f) { // f().then(res => { // console.log(res) // run(list) // }) // } // 循环 // 首先创建一个初始值为 resolved 状态的 Promise 对象 promise， // 每次将当前 Promise 对象和下一个函数 fn 组合成一个新的 Promise 对象， // 并将其赋值给 promise。 // 这样，每次循环都会生成一个新的 Promise 对象 // 它的状态取决于上一个 Promise 对象和当前函数的执行结果。 // 最后返回的是最后一个 Promise 对象，它的状态取决于所有函数的执行结果。 // 这个函数的作用是实现 Promise 链式调用 // 可以方便地处理多个异步操作的依赖关系。 let promise = Promise.resolve(0) console.log(promise) for(const fn of list) { promise = promise.then(fn) } return promise } // run([fn, fn, fn, fn]) // let obj = {} // let obj1 = obj // const wm = new WeakMap() // wm.set(obj1, '123123') // obj = null // console.log(wm.get(obj1)) function asyncFn (timeout) { return new Promise(r => { setTimeout(r, timeout, timeout); }) } const tasks = [ () => asyncFn(1000), () => asyncFn(4000), () => asyncFn(2000), () => asyncFn(3000), ] // async function limitRequest(tasks, limit = 2) { // const taskPool = new Set() // for (const task of tasks) { // const promise = task() // taskPool.add(promise) // promise.then(res => { // console.log(res) // taskPool.delete(promise) // }) // if (taskPool.size >= limit) { // await Promise.race(taskPool) // } // } // } // limitRequest(tasks) // function * oneByOne(tasks) { // yield console.log(1) // for (let fn of tasks) { // yield fn().then(res => { // console.log(res) // }) // } // yield console.log(2) // } // const res = oneByOne(tasks) // console.log(res) // res.next() // res.next() // res.next() // res.next() // res.next() // const done = res.next() // console.log(done) function debounce(fn, timeout, immediate = false) { let timer = null let count = 0 let callnow = true let originImmediate = immediate return function(...args) { count++ if (timer) { clearTimeout(timer) } if (immediate) { if (callnow) { fn.apply(this, [count]) callnow = false immediate = false } } else { timer = setTimeout(() => { fn.apply(this, [count]) callnow = true immediate = originImmediate }, timeout); } } } function throttle(fn, delay) { let now = Date.now() return function(...args) { if (Date.now() - now > delay) { now = Date.now() fn.apply(this, args) } } } // const handleWindowResize = (...args) => { // console.log(this, args); // } // window.addEventListener('resize', debounce(handleWindowResize, 1000)) const container = document.querySelector('.container') container.onmousemove = debounce(function(value) { this.innerHTML = value }, 300, true)"},{"title":"","date":"2024-06-11T08:52:17.382Z","updated":"2024-06-11T08:52:17.382Z","comments":false,"path":"demo/2023面试准备/demo/js 沙箱机制/ProxySandbox.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/js%20%E6%B2%99%E7%AE%B1%E6%9C%BA%E5%88%B6/ProxySandbox.js","excerpt":"","text":"class ProxySandbox { constructor() { // 沙箱是否是激活状态 this.isRunning = false const fakeWindow = Object.create(null) const _this = this this.proxyWindow = new Proxy(fakeWindow, { set(target, prop, value) { // 只有激活状态下，才做处理 if (_this.isRunning) { target[prop] = value return true } }, get(target, prop, reciver) { // 如果fakeWindow里面有，就从fakeWindow里面取，否则，就从外部的window里面取 return prop in target ? target[prop] : window[prop] } }) } active() { this.isRunning = true } inactive() { this.isRunning = false } } window.city = '北京' const p1 = new ProxySandbox() const p2 = new ProxySandbox() p1.active() p2.active() p1.proxyWindow.city = '上海' p2.proxyWindow.city = '杭州' console.log(p1.proxyWindow.city) console.log(p2.proxyWindow.city) console.log(window.city) p1.inactive() p2.inactive() console.log(p1.proxyWindow.city) console.log(p2.proxyWindow.city) console.log(window.city)"},{"title":"","date":"2024-06-11T08:52:17.382Z","updated":"2024-06-11T08:52:17.382Z","comments":false,"path":"demo/2023面试准备/demo/js 沙箱机制/SnapshotSandbox.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/js%20%E6%B2%99%E7%AE%B1%E6%9C%BA%E5%88%B6/SnapshotSandbox.js","excerpt":"","text":"// class SnapshotSandbox { // constructor() { // // 记录激活之前的 window // this.windowSnapshot = {} // // 记录当前应用修改了的 window 属性 // this.modifyPropsMap = {} // } // active() { // // 激活时，记录window 快照 // // 再次激活了，还需要将之前修改了的属性还原回来 // for (let prop in window) { // if (window.hasOwnProperty(prop)) { // this.windowSnapshot[prop] = window[prop] // } // } // // 再次激活了，还原之前修改了的属性 // // 比如上一次 active 设置了 window.city = 'xxx'，再次 active 时，window.city 还是等于 'xxx' // Object.keys(this.modifyPropsMap).forEach(prop => { // window[prop] = this.modifyPropsMap[prop] // }) // } // inactive() { // // 记录当前应用修改了那些属性 // // 失活时，应该将 window 还原 // for (let prop in window) { // if (window.hasOwnProperty(prop)) { // if (window[prop] !== this.windowSnapshot[prop]) { // this.modifyPropsMap[prop] = window[prop] // 记录被修改的 prop // window[prop] = this.windowSnapshot[prop] // 还原 // } // } // } // } // } class SnapshotSandbox { constructor() { this.windowSnapshot = {} this.modifyPropsMap = {} } active() { // 1. 保存 window 的快照 for (let prop in window) { if (window.hasOwnProperty(prop)) { this.windowSnapshot[prop] = window[prop] } } // 2. 再次激活时，将 window 还原到上次 active 的状态，modifyPropsMap 存储了上次 active 时在 widow 上修改了哪些属性 Object.keys(this.modifyPropsMap).forEach(prop => { window[prop] = this.modifyPropsMap[prop] }) } inactive() { for(let prop in window) { if (window.hasOwnProperty(prop)) { // 两者不相同，表示修改了某个 prop 记录当前在 window 上修改了的 prop if (window[prop] !== this.windowSnapshot[prop]) { this.modifyPropsMap[prop] = window[prop] // 还原 window window[prop] = this.windowSnapshot[prop] } } } } } window.city = 'beijing' const ss = new SnapshotSandbox() ss.active() window.city = '上海' const ss1 = new SnapshotSandbox() ss1.active() window.city = 'hello' console.log(window.city)"},{"title":"","date":"2024-06-11T08:52:17.382Z","updated":"2024-06-11T08:52:17.382Z","comments":false,"path":"demo/2023面试准备/demo/js 沙箱机制/index.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/js%20%E6%B2%99%E7%AE%B1%E6%9C%BA%E5%88%B6/index.html","excerpt":"","text":".outer { background-color: pink; padding: 20px; } Outer Component const outerElement = document.querySelector('.outer'); const innerRoot = document.getElementById('inner-root'); // 创建 Shadow DOM const shadowRoot = innerRoot.attachShadow({ mode: 'open' }); // 在 Shadow DOM 中创建样式 const style = document.createElement('style'); style.textContent = ` .inner { background-color: aqua; padding: 10px; } `; shadowRoot.appendChild(style); // 在 Shadow DOM 中创建内容 const innerDiv = document.createElement('div'); innerDiv.className = 'inner'; innerDiv.textContent = 'Inner Component'; shadowRoot.appendChild(innerDiv);"},{"title":"","date":"2024-06-11T08:52:17.383Z","updated":"2024-06-11T08:52:17.383Z","comments":false,"path":"demo/2023面试准备/demo/module/babel.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/module/babel.js","excerpt":"","text":"async function async1 () { console.log('async1 start') // 2 await async2() console.log('async1 end') // 5 关键在这一步，它相当于放在 then callback 中，最后执行 } async function async2 () { console.log('async2') // 3 } console.log('script start') // 1 async1() console.log('script end') // 4"},{"title":"","date":"2024-06-11T08:52:17.383Z","updated":"2024-06-11T08:52:17.383Z","comments":false,"path":"demo/2023面试准备/demo/module/compiled.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/module/compiled.js","excerpt":"","text":"let cat = 'is caaat...';"},{"title":"","date":"2024-06-11T08:52:17.383Z","updated":"2024-06-11T08:52:17.383Z","comments":false,"path":"demo/2023面试准备/demo/module/index.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/module/index.html","excerpt":"","text":"Document"},{"title":"","date":"2024-06-11T08:52:17.383Z","updated":"2024-06-11T08:52:17.383Z","comments":false,"path":"demo/2023面试准备/demo/module/lib.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/module/lib.js","excerpt":"","text":"'use strict'; var async1 = function () { var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() { return regeneratorRuntime.wrap(function _callee$(_context) { while (1) { switch (_context.prev = _context.next) { case 0: console.log('async1 start'); // 2 _context.next = 3; return async2(); case 3: console.log('async1 end'); // 5 关键在这一步，它相当于放在 then callback 中，最后执行 case 4: case 'end': return _context.stop(); } } }, _callee, this); })); return function async1() { return _ref.apply(this, arguments); }; }(); var async2 = function () { var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() { return regeneratorRuntime.wrap(function _callee2$(_context2) { while (1) { switch (_context2.prev = _context2.next) { case 0: console.log('async2'); // 3 case 1: case 'end': return _context2.stop(); } } }, _callee2, this); })); return function async2() { return _ref2.apply(this, arguments); }; }(); function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; } console.log('script start'); // 1 async1(); console.log('script end'); // 4"},{"title":"","date":"2024-06-11T08:52:17.384Z","updated":"2024-06-11T08:52:17.384Z","comments":false,"path":"demo/2023面试准备/demo/module/main.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/module/main.js","excerpt":"","text":"// import { count, incCount } from './lib.js' // incCount() // console.log(count) const o = { // fn: function (params) { // 会报错 // console.log('is fn') // }, reg: /\\.js$/ig, // /\\.js$/gi date: new Date(), // Wed May 24 2023 11:23:31 GMT+0800 (中国标准时间) {} n: null, // null u: undefined, // undefined name: 'hello alexCc', // 'hello alexCc' s: new Set([1,1,2,2,3,3]), // Set(3) {1, 2, 3} m: new Map() // Map(0) {size: 0} } console.log(structuredClone(o))"},{"title":"","date":"2024-06-11T08:52:17.384Z","updated":"2024-06-11T08:52:17.384Z","comments":false,"path":"demo/2023面试准备/demo/module/myPlugin.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/module/myPlugin.js","excerpt":"","text":"module.exports = function(params) { console.log('params', params) return { visitor: {} } }"},{"title":"","date":"2024-06-11T08:52:17.385Z","updated":"2024-06-11T08:52:17.385Z","comments":false,"path":"demo/2023面试准备/demo/module/package.json","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/module/package.json","excerpt":"","text":"{\"name\":\"module\",\"version\":\"1.0.0\",\"description\":\"\",\"main\":\"main.js\",\"scripts\":{\"dev\":\"node main.js\",\"start:webpack\":\"nodemon ./webpack/index.js\"},\"keywords\":[],\"author\":\"\",\"license\":\"ISC\",\"devDependencies\":{\"babel-cli\":\"^6.26.0\",\"babel-core\":\"^6.26.3\",\"babel-plugin-transform-runtime\":\"^6.23.0\",\"babel-preset-env\":\"^1.7.0\",\"babel-runtime\":\"^6.26.0\"},\"dependencies\":{\"@babel/parser\":\"^7.22.5\"}}"},{"title":"","date":"2024-06-11T08:52:17.385Z","updated":"2024-06-11T08:52:17.385Z","comments":false,"path":"demo/2023面试准备/demo/module/plugin-test.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/module/plugin-test.js","excerpt":"","text":"const dog = 'is dog'"},{"title":"","date":"2024-06-11T08:52:17.385Z","updated":"2024-06-11T08:52:17.385Z","comments":false,"path":"demo/2023面试准备/demo/module/plugin.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/module/plugin.js","excerpt":"","text":"module.exports = function({ types: t }) { return { visitor: { Identifier(path, state) { // console.log('🔥', path.node) // console.log('🔥', path.parent) path.node.name = 'cat' }, VariableDeclaration(path, state) { // console.log('🔥', path.node) if (path.node.kind === 'const') { path.node.kind = 'let' } }, Literal(path, state) { console.log('🔥', state.opts) path.node.value = 'is caaat...' } } } }"},{"title":"","date":"2024-06-11T08:52:17.386Z","updated":"2024-06-11T08:52:17.386Z","comments":false,"path":"demo/2023面试准备/demo/node.js/README.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/node.js/README.html","excerpt":"","text":"node &gt; 14"},{"title":"","date":"2024-06-11T08:52:17.387Z","updated":"2024-06-11T08:52:17.387Z","comments":false,"path":"demo/2023面试准备/demo/node.js/db.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/node.js/db.js","excerpt":"","text":"const mongoose = require('mongoose') const db = mongoose.connection mongoose.connect('mongodb://localhost/my-test-db') db.on('error', console.error.bind(console, 'connection error!!')) db.once('open', function(cb) { console.log('connected!') })"},{"title":"","date":"2024-06-11T08:52:17.387Z","updated":"2024-06-11T08:52:17.387Z","comments":false,"path":"demo/2023面试准备/demo/node.js/index.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/node.js/index.html","excerpt":"","text":"Document Nodejs"},{"title":"","date":"2024-06-11T08:52:17.387Z","updated":"2024-06-11T08:52:17.387Z","comments":false,"path":"demo/2023面试准备/demo/node.js/index.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/node.js/index.js","excerpt":"","text":"const fs = require('fs') const http = require('http') const buf1 = Buffer.alloc(5) buf1.fill('123123123') console.log(buf1); // require(\"@babel/core\").transformSync(\"code\", { // plugins: [ // [\"@babel/plugin-proposal-decorators\", { version: \"2023-01\" }], // ] // }); // require('./test-module') // require('./test-module') // console.log('cache ', require.cache) // console.log('this ', this) // const timeStart = Date.now() // process.nextTick((args) => { // console.log('nextTick', args) // }, 123) // setTimeout(() => { // const delay = Date.now() - timeStart // console.log(`多久后才执行了呢？ ${delay}`) // 大于 1000ms // }, 100); // fs.readFile('./index.html',(err, data) => { // const startCallback = Date.now() // console.log('readFile callback', data) // while(Date.now() - startCallback < 1000) { // ; // do nothing // } // }) // function recurse(i, end) { // if (i > end) { // console.log('Done!') // } else { // console.log(`i: ${i}`) // setImmediate(recurse, i+1, end) // } // } // recurse(0, 99) // console.log('?????? 这里呢') // fs.readFile('./index.html', () => { // setTimeout(() => { // console.log('set timeout1') // }, 0); // setImmediate(() => { // console.log('setImmediate2!') // }) // }) // setTimeout(() => { // console.log('set timeout3') // }, 0); // setImmediate(() => { // console.log('setImmediate4!') // }) // fs.readFile('./index.html', (err, data) => { // console.log('data', data) // }) // console.log(Buffer.from('Hello world').toString('utf-8', 0, 3)) // fs.readFile('./doc.txt', (err, data) => { // if (err) return // console.log(data.toString()) // }) // const fileInfo = fs.stat('./doc.txt', (err, result) => { // if (err) return // console.log(result) // }) // fs.writeFile('./doc.txt', 'hello world', { // flag: 'w', // 默认 // encoding: 'utf-8' // }, err => { // if (err) { // console.log('write file err', err) // return // } // console.log('write file success ...') // const res = fs.readFileSync('./doc.txt', { encoding: 'utf-8' }) // console.log('--', res) // }) // fs.open('./doc.txt', 'a', (err, fd) => { // if (err) return // console.log(fd) // fs.fstat(fd, (err, data) => { // console.log(data) // }) // }) // fs.readdir(__dirname, (err, res) => { // console.log(res) // for(let subPath of res) { // // console.log(subPath) // // 同步 // const statObj = fs.statSync(`${__dirname}/${subPath}`) // if (statObj.isDirectory()) { // // 文件夹 // console.log(statObj.isFile()) // } else { // // 文件 // console.log(statObj.isFile()) // } // } // }) // const server = http.createServer((req, res) => { // if (req.url === '/') { // // 查看服务器目录信息 // res.setHeader('Content-Type', 'text/plain') // res.writeHead(200) // const fileInfo = fs.readdirSync(__dirname) // res.end(fileInfo.toString()) // } // if (req.url === '/getUser') { // res.end('hello world, this is http get method!') // } // if (req.url === '/api') { // console.log('api 接口') // console.log(req.method) // res.writeHead(200, { // 'Content-Type': 'text/json' // }) // const data = [] // res.on('data', (chunk) => { // data.push(chunk) // }) // res.on('end', () => { // // const buf = Buffer.concat(data) // console.log('????', Buffer.concat(data).toString()) // }) // res.end(JSON.stringify({ // code: 0, // msg: 'success', // data: { // id: 1, // age: 18, // name: 'alex.cheng' // } // })) // } // }) // server.on('connection', () => { // console.log('http connect') // }) // server.on('request', () => { // console.log('http request') // }) // server.listen(3000, () => { // console.log('server running at port 3000...') // }) // http.get('http://localhost:3000/getUser', res => { // if (res.statusCode === 200) { // let result = '' // res.on('data', chunk => { // result+= chunk // }) // res.on('end', () => { // console.log('get 数据', result) // }) // } // }) // const eventEmitter = require(\"events\") // const emitter = new eventEmitter() // emitter.on('login', (a, b) => { // console.log(a, b) // }) // emitter.emit('login', 1, 2) // console.log(process.env) // function timeoutFn() { // setTimeout(() => { // console.log('执行了') // console.log('打印：', a) // }, 1000); // } // async function fn() { // try { // const res = await timeoutFn() // } catch (error) { // console.log('捕获错误: ', error) // } // } // fn() // function test(target) { // target.isStatic = true // // 原型上添加方法 // target.prototype.sayName = function() { // console.log(this.name) // } // } // function readonly(target, name, descriptor) { // console.log(name, descriptor) // descriptor.writable = false // return descriptor // } // @test // class Person { // name = 1 // @readonly // sayName() { // console.log(this.name) // } // } // console.log('Person.isStatic', Person.isStatic) // const p = new Person() // p.sayName() // function privateDecorator(value, { kind, name }) { // if (kind === 'accessor') { // let { get, set } = value // return { // get() { // console.log('getting name ') // return get.call(this) // }, // set(val) { // console.log('??? ', val) // return set.call(this, val) // } // } // } // } // class Person { // @privateDecorator accessor name = 'alex.cheng' // static accessor age = 18 // } // const p = new Person() // p.name = 'hello world' // // console.log(Person.age) // const rs = fs.createReadStream('./doc.txt', { // flags: 'r', // readable, // encoding: null, // 如果是null，表示输出 buffer // start: 0, // 读取的起始位置 // // end: 3, // 结束位置 // highWaterMark: 2, // 每次取几个字符 // }) // const rs = fs.createReadStream('./doc.txt', { // highWaterMark: 4 // 一个汉字占 3 个字节，highWaterMark 设置为 4 的话，表示一次可以取一个汉字多一点 // }) // const ws = fs.createWriteStream('./copy-doc.txt', { // highWaterMark: 1 // }) // ws.write('1') // ws.write('2') // ws.write('3') // rs.pipe(ws) // let flag = true // rs.on('data', chunk => { // flag = ws.write(chunk, () => { // console.log('写完了'); // }) // if (!flag) { // rs.pause() // } // }) // ws.on('drain', () => { // rs.resume() // })"},{"title":"","date":"2024-06-11T08:52:17.387Z","updated":"2024-06-11T08:52:17.387Z","comments":false,"path":"demo/2023面试准备/demo/node.js/koa.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/node.js/koa.js","excerpt":"","text":"const Koa = require('koa') // const bodyParser = require('koa-bodyparser') const { koaBody } = require('koa-body') const router = require('./router') const staticServe = require('koa-static') // 静态文件服务 const log = require('./middlewares/querystring') const errHandler = require('./app/errHandle') // 连接数据库 require('./db') const app = new Koa() // log query middleware app.use(log) app.use(koaBody({ multipart: true, formidable: { uploadDir: __dirname + '/static', keepExtensions: true, onFileBegin(name, file) { console.log('formidable file', file) if (file && file.originalFilename && file.newFilename) { const originalFilename = file.originalFilename.split('.')[0] const newFilename = file.newFilename.split('.')[0] file.filepath = file.filepath.replace(newFilename, originalFilename) } }, onError(err) { console.log('上传失败~', err) } } })) // extensions 表示访问时，可以省略的后缀 app.use( staticServe( __dirname + '/static/', { extensions: ['html'], defer: true } ) ) // 路由 app.use(router.routes()) // 统一的错误处理 app.on('error', errHandler) app.listen(3000)"},{"title":"","date":"2024-06-11T08:52:17.389Z","updated":"2024-06-11T08:52:17.389Z","comments":false,"path":"demo/2023面试准备/demo/node.js/package.json","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/node.js/package.json","excerpt":"","text":"{\"name\":\"node.js\",\"version\":\"1.0.0\",\"description\":\"\",\"main\":\"index.js\",\"scripts\":{\"serve\":\"nodemon koa.js\",\"demo\":\"npx babel-node index.js\"},\"keywords\":[],\"author\":\"\",\"license\":\"ISC\",\"dependencies\":{\"jsonwebtoken\":\"^9.0.0\",\"koa\":\"^2.14.2\",\"koa-body\":\"^6.0.1\",\"koa-bodyparser\":\"^4.4.0\",\"koa-router\":\"^12.0.0\",\"koa-static\":\"^5.0.0\",\"mongoose\":\"^7.2.2\"},\"devDependencies\":{\"@babel/core\":\"^7.22.5\",\"@babel/node\":\"^7.22.5\",\"@babel/plugin-proposal-class-properties\":\"^7.18.6\",\"@babel/plugin-proposal-decorators\":\"^7.22.5\",\"@babel/preset-env\":\"^7.22.5\"}}"},{"title":"","date":"2024-06-11T08:52:17.395Z","updated":"2024-06-11T08:52:17.395Z","comments":false,"path":"demo/2023面试准备/demo/node.js/test-module.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/node.js/test-module.js","excerpt":"","text":"console.log('模块被加载了') let count = 1 count++ console.log(`count is ${count}`)"},{"title":"","date":"2024-06-11T08:52:17.395Z","updated":"2024-06-11T08:52:17.395Z","comments":false,"path":"demo/2023面试准备/demo/node.js/user-db.json","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/node.js/user-db.json","excerpt":"","text":"[{\"item\":\"canvas\",\"qty\":100,\"size\":{\"h\":28,\"w\":35.5,\"uom\":\"cm\"},\"status\":\"A\"},{\"item\":\"journal\",\"qty\":25,\"size\":{\"h\":14,\"w\":21,\"uom\":\"cm\"},\"status\":\"A\"},{\"item\":\"mat\",\"qty\":85,\"size\":{\"h\":27.9,\"w\":35.5,\"uom\":\"cm\"},\"status\":\"A\"},{\"item\":\"mousepad\",\"qty\":25,\"size\":{\"h\":19,\"w\":22.85,\"uom\":\"cm\"},\"status\":\"P\"},{\"item\":\"notebook\",\"qty\":50,\"size\":{\"h\":8.5,\"w\":11,\"uom\":\"in\"},\"status\":\"P\"},{\"item\":\"paper\",\"qty\":100,\"size\":{\"h\":8.5,\"w\":11,\"uom\":\"in\"},\"status\":\"D\"},{\"item\":\"planner\",\"qty\":75,\"size\":{\"h\":22.85,\"w\":30,\"uom\":\"cm\"},\"status\":\"D\"},{\"item\":\"postcard\",\"qty\":45,\"size\":{\"h\":10,\"w\":15.25,\"uom\":\"cm\"},\"status\":\"A\"},{\"item\":\"sketchbook\",\"qty\":80,\"size\":{\"h\":14,\"w\":21,\"uom\":\"cm\"},\"status\":\"A\"},{\"item\":\"sketch pad\",\"qty\":95,\"size\":{\"h\":22.85,\"w\":30.5,\"uom\":\"cm\"},\"status\":\"A\"}]"},{"title":"","date":"2024-06-11T08:52:17.396Z","updated":"2024-06-11T08:52:17.396Z","comments":false,"path":"demo/2023面试准备/demo/react/index.temp.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/react/index.temp.html","excerpt":"","text":"React Example // React默认写法 const e = React.createElement( 'h1', null, 'Hello React!' ) const Jsx = () => { const [n, setN] = React.useState(1) return 1 } ReactDOM.render( Hello React! , document.getElementById('app') )"},{"title":"","date":"2024-06-11T08:52:17.397Z","updated":"2024-06-11T08:52:17.397Z","comments":false,"path":"demo/2023面试准备/demo/ts/README.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/ts/README.html","excerpt":"","text":"tsctsc -v 查看版本 tsc index.ts 将 ts 文件转化为 js 文件 tsc -w 监视文件 初始化配置文件tsc –init vscode 终端：运行任务 前提是生成了 tsconfig.json 可以选择tsc 监视，也可以选择 tsc 构建 选择监视之后，每次改动文件，都能够实时的更新 .js 文件 调试通过 nodemon 启动 index.js 文件 每次修改了 .ts 文件，会生成新的 .js 文件，nodemon监视到了文件的改动，自动执行 .js 文件。"},{"title":"","date":"2024-06-11T08:52:17.397Z","updated":"2024-06-11T08:52:17.397Z","comments":false,"path":"demo/2023面试准备/demo/webpack-implement/README.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/webpack-implement/README.html","excerpt":"","text":"实现一个简易的 webpack webpack 原理 配置 entry，打包的入口模块 使用 fs.readFileSync 读取 entry 的文件内容 content 使用 @babel/parser 对 content 进行解析，生成 AST 由于内部使用 esmodule 导入的文件，所以需要给 @babel/parser 配置 sourceType 参数 sourceType: &#39;module&#39; 使用 @babel/traverse 遍历 AST，获取依赖模块 如果内部存在 import，意味着依赖了其它模块，就会触发 ImportDeclaration 方法，从而拿到依赖模块的 相对路径 使用 @babel/core 将 AST 转化为 ES5 的代码，并且可以配置预设 @babel/preset-evn，从而拿到 ast 转化过后的代码 123const &#123; code &#125; = babel.transformFromAst(AST, null, &#123; presets: [&#x27;@babel/preset-env&#x27;]&#125;) 到此，就拿到了当前入口文件的信息 filepath: entry dependencise: 入口文件依赖了哪些模块 code: 通过 babel/core 转化后的 es5 代码 根据 dependencise 继续上面的操作，又能拿到依赖模块的内容，以及以来模块的依赖，还有依赖模块转化后的 ES5 代码。"},{"title":"","date":"2024-06-11T08:52:17.397Z","updated":"2024-06-11T08:52:17.397Z","comments":false,"path":"demo/2023面试准备/demo/webpack-implement/index.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/webpack-implement/index.js","excerpt":"","text":"// const BabelParser = require('@babel/parser') const fs = require('fs') const path = require('path') const BabelParser = require('@babel/parser') const Traverse = require('@babel/traverse').default const text = fs.readFileSync('./src/index.js', { encoding: 'utf8' }) // 将文本转为 AST const ast = BabelParser.parse(text, { sourceType: 'module' }) // 使用 traverse 可以遍历 AST，然后查找AST 的依赖模块 const dependencies = {} Traverse(ast, { ImportDeclaration({ node }) { const relativePath = node.source.value const absolutePath = path.resolve(__dirname + '/src', relativePath) console.log('???', absolutePath) } })"},{"title":"","date":"2024-06-11T08:52:17.398Z","updated":"2024-06-11T08:52:17.398Z","comments":false,"path":"demo/2023面试准备/demo/webpack-implement/package.json","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/webpack-implement/package.json","excerpt":"","text":"{\"name\":\"webpack-implement\",\"version\":\"1.0.0\",\"description\":\"\",\"main\":\"index.js\",\"scripts\":{\"dev\":\"nodemon ./index.js\"},\"keywords\":[],\"author\":\"\",\"license\":\"ISC\",\"devDependencies\":{\"@babel/parser\":\"^7.22.5\",\"@babel/traverse\":\"^7.22.5\",\"nodemon\":\"^2.0.22\"}}"},{"title":"","date":"2024-06-11T08:52:17.398Z","updated":"2024-06-11T08:52:17.398Z","comments":false,"path":"demo/2023面试准备/demo/webpack5/README.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/webpack5/README.html","excerpt":"","text":"node: v14.16.0"},{"title":"","date":"2024-06-11T08:52:17.399Z","updated":"2024-06-11T08:52:17.399Z","comments":false,"path":"demo/2023面试准备/demo/webpack5/another-module.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/webpack5/another-module.js","excerpt":"","text":"import _ from 'lodash' import obj from './test1.js' obj.count++ console.log('another module lodash', _.join(['Another', 'module', 'loaded!'], ' ')); console.log('another obj', obj);"},{"title":"","date":"2024-06-11T08:52:17.399Z","updated":"2024-06-11T08:52:17.399Z","comments":false,"path":"demo/2023面试准备/demo/webpack5/hrm.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/webpack5/hrm.js","excerpt":"","text":"console.log('我是测试 HMR ~~~~~~ 🔥')"},{"title":"","date":"2024-06-11T08:52:17.399Z","updated":"2024-06-11T08:52:17.399Z","comments":false,"path":"demo/2023面试准备/demo/webpack5/index.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/webpack5/index.html","excerpt":"","text":"Document :root { --mainColor: red; } Webpack5"},{"title":"","date":"2024-06-11T08:52:17.399Z","updated":"2024-06-11T08:52:17.399Z","comments":false,"path":"demo/2023面试准备/demo/webpack5/index.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/webpack5/index.js","excerpt":"","text":"import './hrm.js' import './test.css' import('./test.scss') import imgSrc from '../../img/babel.jpg' import './another-module.js' import _ from 'lodash' import obj from './test1.js' import dotMeContent from './custom-file/say.me' console.log('🔥', dotMeContent) obj.count++ import(/* webpackChunkName: \"dynamic-test\" */ './test').then(module => { module.default() }) import sourceText from './test.txt' console.log('sourceText ', sourceText) window.onload = function() { const imgDom = `` const img = document.getElementById('img') console.log(document.getElementById('img')) img.innerHTML = imgDom } if (module.hot) { module.hot.accept() }"},{"title":"","date":"2024-06-11T08:52:17.401Z","updated":"2024-06-11T08:52:17.401Z","comments":false,"path":"demo/2023面试准备/demo/webpack5/package.json","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/webpack5/package.json","excerpt":"","text":"{\"name\":\"webpack5\",\"version\":\"1.0.0\",\"description\":\"\",\"main\":\"index.js\",\"scripts\":{\"start\":\"cross-env NODE_ENV=development webpack serve\",\"build\":\"cross-env NODE_ENV=production webpack\",\"analyz\":\"webpack-bundle-analyzer --port 8888 ./dist/stats.json\"},\"keywords\":[],\"author\":\"\",\"license\":\"ISC\",\"devDependencies\":{\"@swc/core\":\"^1.3.68\",\"autoprefixer\":\"^10.2.5\",\"clean-webpack-plugin\":\"^4.0.0\",\"cross-env\":\"^7.0.3\",\"css-loader\":\"^6.7.3\",\"css-minimizer-webpack-plugin\":\"^5.0.0\",\"file-loader\":\"^6.2.0\",\"html-webpack-plugin\":\"^5.5.1\",\"mini-css-extract-plugin\":\"^2.7.5\",\"postcss-loader\":\"^5.1.0\",\"sass\":\"^1.32.8\",\"sass-loader\":\"^11.0.1\",\"speed-measure-webpack-plugin\":\"^1.5.0\",\"style-loader\":\"^3.3.2\",\"webpack\":\"^5.82.1\",\"webpack-bundle-analyzer\":\"^4.9.0\",\"webpack-cli\":\"^5.1.1\",\"webpack-dev-server\":\"^4.15.0\"},\"dependencies\":{\"lodash\":\"^4.17.21\"},\"browserslist\":[\"chrome >= 18\"]}"},{"title":"","date":"2024-06-11T08:52:17.401Z","updated":"2024-06-11T08:52:17.401Z","comments":false,"path":"demo/2023面试准备/demo/webpack5/postcss.config.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/webpack5/postcss.config.js","excerpt":"","text":"const autoprefixer = require('autoprefixer') module.exports = { plugins: [ autoprefixer() ] }"},{"title":"","date":"2024-06-11T08:52:17.401Z","updated":"2024-06-11T08:52:17.401Z","comments":false,"path":"demo/2023面试准备/demo/webpack5/test.css","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/webpack5/test.css","excerpt":"","text":"#img img { width: 500px; border-radius: 50%; }"},{"title":"","date":"2024-06-11T08:52:17.402Z","updated":"2024-06-11T08:52:17.402Z","comments":false,"path":"demo/2023面试准备/demo/webpack5/test.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/webpack5/test.js","excerpt":"","text":"const myName = 'alex 来啦' const age = 18 const sayMe = function() { console.log(myName + age) } export default sayMe;"},{"title":"","date":"2024-06-11T08:52:17.402Z","updated":"2024-06-11T08:52:17.402Z","comments":false,"path":"demo/2023面试准备/demo/webpack5/test1.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/webpack5/test1.js","excerpt":"","text":"export default { count: 0 }"},{"title":"","date":"2024-06-11T08:52:17.402Z","updated":"2024-06-11T08:52:17.402Z","comments":false,"path":"demo/2023面试准备/demo/webpack5/webpack.config.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/webpack5/webpack.config.js","excerpt":"","text":"const path = require('path') const webpack = require('webpack') const { CleanWebpackPlugin } = require('clean-webpack-plugin') const HTMLWebpackPlugin = require('html-webpack-plugin') const MiniCssExtractPlugin = require('mini-css-extract-plugin') const TerserWebpackPlugin = require('terser-webpack-plugin') const CssMinimizerPlugin = require(\"css-minimizer-webpack-plugin\"); const WebpackCopyPlugin = require('./plugins/webpack-copy-plugin') // const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin // const SpeedMeasurePlugin = require(\"speed-measure-webpack-plugin\") // const smp = new SpeedMeasurePlugin() // console.log('环境变量 ', process.env) module.exports = { mode: 'none', devtool: 'eval-cheap-module-source-map', // devtool: 'source-map', cache: { type: 'filesystem' }, entry: { main: './index.js', another: './another-module.js' }, output: { path: path.resolve(__dirname, 'dist'), filename: '[name].js', // publicPath: './dist/', chunkFilename: '[name]-[chunkhash].js', }, devServer: { port: 8888, // open: true, hot: true }, optimization: { minimize: true, // 开发环境下启用 JS、CSS 优化 minimizer: [new TerserWebpackPlugin({ minify: TerserWebpackPlugin.swcMinify, // 使用 swc 压缩代码，需要安装 @swc/core 包 terserOptions: {} }), new CssMinimizerPlugin()], splitChunks: { cacheGroups: { styles: { name: \"styles\", type: \"css/mini-extract\", chunks: \"all\", enforce: true, }, }, chunks: 'all' }, }, module: { rules: [{ test: /\\.(scss|css)$/, // use: ['style-loader', 'css-loader'] use: [ MiniCssExtractPlugin.loader, 'css-loader', 'postcss-loader', 'sass-loader' ], exclude: /node_modules/, }, { test: /\\.(jpg|png|jpeg)$/, type: 'asset/resource' // use: { // loader: 'file-loader', // // options: { // // esModule: false // // }, // }, // type: 'javascript/auto' }, { test: /\\.txt/, type: 'asset/source' }, { test: /\\.me/, use: [ { loader: './loaders/log.js', options: { canLog: true } }, { loader: './loaders/transform-to-uppercase.js', options: { toUpperCase: true, } }, ] }] }, plugins: [ new CleanWebpackPlugin(), new HTMLWebpackPlugin({ template: './index.html' }), new webpack.DefinePlugin({ isMe: \"'YES'\", env: JSON.stringify('development'), }), new MiniCssExtractPlugin({ filename: '[name]-[contenthash:8].css', chunkFilename: '[id].css' }), // new BundleAnalyzerPlugin({ // analyzerMode: 'disabled', // 禁用模式 // generateStatsFile: false, // 设置为 true 来使用这个插件生成 Webpack Stats JSON 文件。 // }) new WebpackCopyPlugin({ copy: true }) ] }"},{"title":"","date":"2024-06-11T08:52:17.386Z","updated":"2024-06-11T08:52:17.386Z","comments":false,"path":"demo/2023面试准备/demo/node.js/app/errHandle.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/node.js/app/errHandle.js","excerpt":"","text":"async function onerror(err, ctx) { console.log('全局响应错误', err) ctx.status = err.status || 500 ctx.body = { code: 1, status: ctx.status, message: err.message } } module.exports = onerror"},{"title":"","date":"2024-06-11T08:52:17.387Z","updated":"2024-06-11T08:52:17.387Z","comments":false,"path":"demo/2023面试准备/demo/node.js/controller/upload.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/node.js/controller/upload.js","excerpt":"","text":"module.exports = { uploadImg: async (ctx, next) => { const { file } = ctx.request.files // 如果同时上传了多个文件，那么 file 是个数组 console.log('file', file) if (file) { ctx.body = { code: 0, message: '文件上传成功', data: file, file: { filepath: file.filepath } } } else { ctx.body = '上传失败或者文件无法解析???' } } }"},{"title":"","date":"2024-06-11T08:52:17.386Z","updated":"2024-06-11T08:52:17.386Z","comments":false,"path":"demo/2023面试准备/demo/node.js/controller/home.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/node.js/controller/home.js","excerpt":"","text":"const HomeService = require('../service/home') const Login = require('../models/login') module.exports = { updatePassword: async (ctx, next) => { const user = ctx.state.user const { newpassword } = ctx.request.body const hasUser = await Login.find({ username: user.username }) if (!hasUser.length) return ctx.body = '数据库未查询到当前用户' await Login.updateOne( { username: user.username }, { $set: { password: newpassword } } ) const currentUser = await Login.find({ username: user.username }) ctx.body = currentUser }, index: async (ctx, next) => { ctx.response.body = ` Index Name Password 文件上传 var iframe = document.getElementById('temp-iframe'); iframe.addEventListener('load',function () { var result = iframe.contentWindow.document.body.innerText; //接口数据转换为 JSON 对象 if (result) { var obj = JSON.parse(result); console.log(obj); if(obj && obj.file.filepath){ alert('上传成功'); } } }); ` }, home: async (ctx, next) => { console.log('accepts==== ', ctx.accepts('json', 'html', 'text/plain')) // ctx.status = 404 console.log(ctx.request.query) console.log(ctx.request.querystring) // ctx.response.body = ` // Home Page // JSON.stringify(query): ${JSON.stringify(ctx.request.query)} // querystring: ${ctx.request.querystring} // ` ctx.body = { query: ctx.request.query, querystring: ctx.request.querystring, a: { name: 1 } } }, homeParams: async (ctx, next) => { console.log('home params ', ctx.params) const { id, name } = ctx.params ctx.response.body = ` Home Params Page id: ${id} name: ${name} ` }, login: async (ctx, next) => { console.log('post 数据', ctx.request.body) const name = ctx.request.body.name || '' const password = ctx.request.body.password || '' const data = await HomeService.login(name, password) ctx.body = data }, }"},{"title":"","date":"2024-06-11T08:52:17.388Z","updated":"2024-06-11T08:52:17.388Z","comments":false,"path":"demo/2023面试准备/demo/node.js/middlewares/auth.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/node.js/middlewares/auth.js","excerpt":"","text":"const jwt = require('jsonwebtoken') const auth = async (ctx, next) => { try { // 1. 获取、解析token const { authorization } = ctx.request.header const token = authorization.replace('Bearer ', '') const user = jwt.verify(token, 'shhhh') // 2. 保存用户信息 ctx.state.user = user await next() } catch (err) { ctx.app.emit('error', err, ctx); } } const hasAdminPermission = async (ctx, next) => { // 1. 判断是否有管理员权限 const { isAdmin } = ctx.state.user setTimeout(() => { console.log('你好', aaaaa) }, 3000); if (!isAdmin) { return ctx.body = '没有管理员权限' } await next() } module.exports = { auth, hasAdminPermission }"},{"title":"","date":"2024-06-11T08:52:17.388Z","updated":"2024-06-11T08:52:17.388Z","comments":false,"path":"demo/2023面试准备/demo/node.js/middlewares/querystring.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/node.js/middlewares/querystring.js","excerpt":"","text":"const queryString = require('querystring') module.exports = async function(ctx, next) { console.log('---------- queryString start ---------------') const rawstring = ctx.request.querystring // queryString.escape(params) 编码 // queryString.unescape(escapeValue) 解码 // parse 将 raw string 解析成对象形式 // stringify 将对象形式的参数字符串化 console.log(queryString.parse(rawstring)) await next() }"},{"title":"","date":"2024-06-11T08:52:17.389Z","updated":"2024-06-11T08:52:17.389Z","comments":false,"path":"demo/2023面试准备/demo/node.js/router/home.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/node.js/router/home.js","excerpt":"","text":"const Router = require('koa-router') const HomeController = require('../controller/home') const { auth } = require('../middlewares/auth') const router = new Router() router.get('/', HomeController.index) router.patch('/', auth, HomeController.updatePassword) router.get('/home', HomeController.home) router.get('/home/:id/:name', HomeController.homeParams) router.post('/login', HomeController.login) module.exports = router"},{"title":"","date":"2024-06-11T08:52:17.389Z","updated":"2024-06-11T08:52:17.389Z","comments":false,"path":"demo/2023面试准备/demo/node.js/router/index.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/node.js/router/index.js","excerpt":"","text":"const fs = require('fs') const Router = require('koa-router') const router = new Router() fs.readdirSync(__dirname).forEach(filename => { if (filename !== 'index.js') { const currentRouter = require('./' + filename) router.use(currentRouter.routes()) } }) module.exports = router"},{"title":"","date":"2024-06-11T08:52:17.390Z","updated":"2024-06-11T08:52:17.390Z","comments":false,"path":"demo/2023面试准备/demo/node.js/router/upload.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/node.js/router/upload.js","excerpt":"","text":"const Router = require('koa-router') const UploadController = require('../controller/upload') const { auth, hasAdminPermission } = require('../middlewares/auth') const router = new Router({ prefix: '/upload' }) router.post('/img', auth, hasAdminPermission, UploadController.uploadImg) module.exports = router"},{"title":"","date":"2024-06-11T08:52:17.388Z","updated":"2024-06-11T08:52:17.388Z","comments":false,"path":"demo/2023面试准备/demo/node.js/models/login.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/node.js/models/login.js","excerpt":"","text":"const mongoose = require('mongoose'); const loginSchema = new mongoose.Schema({ username: { type: String, required: true, unique: true, }, password: { type: String, required: true, }, }); const Login = mongoose.model('Login', loginSchema, 'Login'); module.exports = Login;"},{"title":"","date":"2024-06-11T08:52:17.390Z","updated":"2024-06-11T08:52:17.390Z","comments":false,"path":"demo/2023面试准备/demo/node.js/static/README.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/node.js/static/README.html","excerpt":"","text":"环境 node: v12.14.0 hexo 1.1.9 启动 hexo s 创建文章 hexo new &lt;文章标题&gt; 表示要创建的类型，比如 post，draft, about 创建草稿文章 hexo new draft demo 查看草稿 hexo s –draft 生成静态资源 hexo g 发布 hexo d 其他用法https://blog.csdn.net/sinat_37781304/article/details/82729029 主题https://hexo.fluid-dev.com/docs/ 作者博客：https://zkqiang.cn/about/ 增加评论系统https://disqus.com/ 可以在管理后台看到评论数据https://hello-alexcc.disqus.com/admin/ 123456789101112131415step1: 进入网站，点击 getting start，点击登录step2: 点击 &#x27;I want to install Dsiqus on my site.&#x27; Website Name: 对应 yml 配置里面的 shortname，是唯一的，不要记错了。 种类随便填，选择中文。step3: 到 .yml 配置中，开启评论功能，文章开头增加 comment: boolean"},{"title":"","date":"2024-06-11T08:52:17.390Z","updated":"2024-06-11T08:52:17.390Z","comments":false,"path":"demo/2023面试准备/demo/node.js/service/home.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/node.js/service/home.js","excerpt":"","text":"const jwt = require('jsonwebtoken') const Login = require('../models/login') module.exports = { login: async (name,password ) => { // 聚合查询 // const pipeline = [ // { // $match: { // size: 'medium' // } // }, // { // $project: { // name: 1, // quantity: 1, // price: 1, // totalPrice: { // $multiply: [\"$quantity\", \"$price\"] // } // } // }, // { // $group: { // _id: '$name', // totalPrice: { // $sum: '$totalPrice', // }, // totalQuantity: { // $sum: '$quantity' // }, // } // }, // { // $sort: { // totalQuantity: -1 // } // } // ] // const result = await Login.aggregate(pipeline) // console.log(result) let responseData = '' if (name === 'alex.cheng' && password === '123456') { const query = await Login.find({ username: 'alex.cheng' }) if (query.length) { // 查询到了用户，我们通过 JWT 来生成签名（token） const userInfo = query[0] const token = jwt.sign({ id: userInfo.id, username: userInfo.username, isAdmin: true, password: userInfo.password }, 'shhhh', { expiresIn: '1h' }) responseData = { code: 0, message: '登录成功', data: { token: token } } // 解码 jwt.verify(token, 'shhhh', (err, decoded) => { if (err) throw new Error('verify token error') console.log('decoded token', decoded) }) // responseData = ` // Login success! // username: ${query[0].username}; password: ${query[0].password} // jwt token: ${token} // ` } else { responseData = '未查到对应用户，请先注册!' } } else { responseData = 'Some Error!' } return responseData } }"},{"title":"","date":"2024-06-11T08:52:17.392Z","updated":"2024-06-11T08:52:17.392Z","comments":false,"path":"demo/2023面试准备/demo/node.js/static/index.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/node.js/static/index.html","excerpt":"","text":"Document Index Name Password 文件上传"},{"title":"","date":"2024-06-11T08:52:17.398Z","updated":"2024-06-11T08:52:17.398Z","comments":false,"path":"demo/2023面试准备/demo/webpack-implement/src/const.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/webpack-implement/src/const.js","excerpt":"","text":"export const AppName = 'webpack 实现原理'"},{"title":"","date":"2024-06-11T08:52:17.398Z","updated":"2024-06-11T08:52:17.398Z","comments":false,"path":"demo/2023面试准备/demo/webpack-implement/src/info.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/webpack-implement/src/info.js","excerpt":"","text":"import { AppName } from './const.js' const sayAppName = () => { return `明天面试，今晚必须搞懂 ${AppName}` } export default sayAppName"},{"title":"","date":"2024-06-11T08:52:17.398Z","updated":"2024-06-11T08:52:17.398Z","comments":false,"path":"demo/2023面试准备/demo/webpack-implement/src/index.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/webpack-implement/src/index.js","excerpt":"","text":"import sayAppName from './info.js' console.log(1)"},{"title":"","date":"2024-06-11T08:52:17.400Z","updated":"2024-06-11T08:52:17.400Z","comments":false,"path":"demo/2023面试准备/demo/webpack5/loaders/log.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/webpack5/loaders/log.js","excerpt":"","text":"function logContent(source) { console.log('log source ', source) console.log('log source query', this.query) return `module.exports=${JSON.stringify(source)}` } module.exports = logContent module.exports.pitch = res => { console.log('log pitch ', res) }"},{"title":"","date":"2024-06-11T08:52:17.401Z","updated":"2024-06-11T08:52:17.401Z","comments":false,"path":"demo/2023面试准备/demo/webpack5/plugins/webpack-copy-plugin.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/webpack5/plugins/webpack-copy-plugin.js","excerpt":"","text":"class Copy { constructor(options) { console.log('options', options) } apply(compiler) { // compiler.hooks // hooks 上有许多 webpack 的生命钩子 // 1. done // 编译完成钩子 // 2. afterEmit // 打包完成钩子 // console.log('🔥', compiler.hooks) } } module.exports = Copy"},{"title":"","date":"2024-06-11T08:52:17.400Z","updated":"2024-06-11T08:52:17.400Z","comments":false,"path":"demo/2023面试准备/demo/webpack5/loaders/transform-to-uppercase.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/webpack5/loaders/transform-to-uppercase.js","excerpt":"","text":"function logContent(source) { const options = this.getOptions() let result = source if (options.toUpperCase) { result = result.toUpperCase() } console.log('🔥', options) return result } module.exports = logContent module.exports.pitch = res => { console.log('transform to pitch ', res) }"},{"title":"","date":"2024-06-11T08:52:17.365Z","updated":"2024-06-11T08:52:17.365Z","comments":false,"path":"demo/2023面试准备/css & html.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/css%20&%20html.html","excerpt":"","text":"css div 垂直水平居中，并完成 div 高度永远是宽度的一半（宽度可以不指定）考点：padding-bottom 的 百分比 使用 设置成百分比：定义基于父元素宽度的百分比下内边距。 具体来说，当元素设置 padding-bottom: 50% 时，表示元素的 高度 被设置为其父元素宽度的50%。这样做的效果是，.inner 元素的高度被限制在其父元素宽度的一半，同时保持宽高比为1:2（高度是宽度的一半）。 12345678910111213141516171819202122232425262728293031323334&lt;style&gt; * &#123; margin: 0; padding: 0; &#125; html, body &#123; width: 100%; height: 100%; &#125; .outer &#123; width: 600px; height: 100%; background: pink; margin: 0 auto; /* 元素水平居中 */ display: flex; align-items: center; /* 子元素垂直居中 */ &#125; .inner &#123; width: 100%; padding-bottom: 50%; /* 定义基于父元素宽度的百分比下内边距 */ background: #ccc; &#125;&lt;/style&gt;&lt;body&gt; &lt;div class=&quot;outer&quot;&gt; &lt;div class=&quot;inner&quot;&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt; 防止文本区域上下抖动（图片加载时），通过此方法占位。 12345678910111213141516171819.outer &#123; width: 50%; height: 100%; background: pink; margin: 0 auto;&#125;.inner &#123; width: 100%; padding-bottom: 50%; /* inner 的高度，永远是 outer 元素 width 的一半 */ background: #ccc; position: relative;&#125;.inner img &#123; width: 100%; height: 100%; position: absolute;&#125; 三栏布局 flex 布局 12345678910111213.container &#123; display: flex; justify-content: space-between;&#125;.left &#123; width: 200px;&#125;.right &#123; width: 200px;&#125;.center &#123; flex: 1;&#125; 浮动布局 + margin 12345678910111213141516.container &#123; overflow: hidden;&#125;.left &#123; float: left; width: 200px;&#125;.right &#123; float: right; width: 200px;&#125;.center &#123; overflow: hidden; margin: 0 200px; // 重点&#125; 因为 div 是块级元素，占据一行，所以 .right 右浮动时，你会发现它和其它两个元素不在一排，不过我们可以通过 inline-block 来修复这个问题。 浮动布局 + calc 1234567891011121314151617.left &#123; display: inline-block; width: 100px; background-color: red; float: left;&#125;.right &#123; width: 100px; display: inline-block; background-color: blue; float: right;&#125;.mid &#123; width: calc(100% - 200px); // 重点 background-color: yellow; display: inline-block;&#125; css 权重值 内联样式的权重：1000 ID 选择器的权重：100 类选择器、属性选择器和伪类选择器的权重：10 元素选择器和伪元素选择器的权重：1 通配符 0 盒模型盒模型是指在网页中，每个元素都被表示为一个矩形的盒子，这个盒子包含了元素的内容（content）、内边距（padding）、边框（border）和外边距（margin）。 CSS盒模型：标准模型(content-box) + IE模型(border-box) 标准盒模型： 盒子总宽度/高度 = width/height + padding + border + margin。（ 即 width/height 只是内容高度，不包含 padding 和 border 值 ） IE盒子模型： 盒子总宽度/高度 = width/height + margin = (内容区宽度/高度 + padding + border) + margin。（ 即 width/height 包含了 padding 和 border 值 ） JS如何获取盒模型的 宽和高12345678910.test &#123; box-sizing: border-box; border: 5px solid black; height: 200px; width: 200px; padding: 10px;&#125;&lt;div class=&quot;test&quot;&gt;&lt;/div&gt; 123456const test = document.querySelector(&#x27;.test&#x27;)console.log(test.style.width, test.style.height) // 只能获取到行内的样式console.log(window.getComputedStyle(test).width) // 200px，取到的是最终渲染后的宽和高console.log(test.getBoundingClientRect().width) // 200console.log(test.offsetWidth, test.offsetHeight) // 包括高度（宽度）、内边距和边框，不包括外边距 window.getComputedStyle(test).width 不管 box-sizing 为何值，都是你设置的 witdh/height box-sizing 为 content-box 时，test.getBoundingClientRect().width/height 和 test.offsetWidth, test.offsetHeight 是 宽/高 + 内边距 + 边框 box-sizing 为 border-box 时，test.getBoundingClientRect().width/height 和 test.offsetWidth, test.offsetHeight 是 宽/高，不包含 内边距、边框 dom.getBoundingClientRect()Element.getBoundingClientRect() 方法返回一个 DOMRect 对象，其提供了元素的大小及其相对于视口的位置。 该方法返回的 DOMRect 对象中的 width 和 height 属性是包含了 padding 和 border-width 的，而不仅仅是内容部分的宽度和高度。 在标准盒子模型中，这两个属性值分别与元素的 width/height + padding + border-width 相等。而如果是 box-sizing: border-box，两个属性则直接与元素的 width 或 height 相等。 注意 right 和 bottom。 计算父元素高度1234567891011.outer &#123; background-color: pink; /* overflow: hidden; */&#125;.inner &#123; width: 100%; height: 100px; background-color: aqua; margin-top: 10px;&#125; 1234567891011&lt;div class=&quot;outer&quot;&gt; &lt;div class=&quot;inner&quot;&gt; &lt;/div&gt;&lt;/div&gt;&lt;script&gt; const test = document.querySelector(&#x27;.outer&#x27;) console.log(test.getBoundingClientRect().height) console.log(test.offsetHeight)&lt;/script&gt; 在父元素没有设置 overflow: hidden 时，获取的高度都是 100px 在父元素设置 overflow: hidden 时，获取的高度都是 110px。 加了 overflow: hidden，给父元素创建了一个 BFC，父元素创建了一块独立的渲染区域，是一个环境，里面的元素不会影响到外部的元素 。 BFCBFC 是 CSS 布局的一个概念，是一块独立的渲染区域，是一个环境，里面的元素不会影响到外部的元素 。 BFC 渲染规则/原理 内部的 Box 会在垂直方向，从顶部开始一个接着一个地放置； Box 垂直方向的距离由 margin (外边距)决定，属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠； 每个元素的 margin Box 的左边， 与包含块 border Box 的左边相接触，（对于从左到右的格式化，否则相反）。即使存在浮动也是如此； BFC 在页面上是一个隔离的独立容器，外面的元素不会影响里面的元素，反之亦然。文字环绕效果，设置 float； BFC 的区域不会与 float Box 重叠（清浮动）; 计算 BFC 的高度时，浮动元素也参与计算。 CSS在什么情况下会创建出BFC（即脱离文档流） 根元素，即 HTML 元素（最大的一个 BFC） 浮动（ float 的值不为 none ） 绝对定位元素（ position 的值为 absolute 或 fixed ） 行内块（ display 为 inline-block ） 表格单元display: table、table-cell、table-caption、inline-block 等 display 为 flex 或 inline-flex 设置元素的overflow属性为除了visible以外的值，例如 auto、scroll、hidden等。 两个div上下排列，都设margin，有什么现象？外边距重叠现象 都正取大值 一正一负相加 12345678910111213141516171819202122.outer &#123; background-color: pink;&#125;.c1 &#123; width: 100%; height: 100px; background-color: aqua; margin-bottom: 10px; /* 小 margin 被 大 margin 吃掉了 */&#125;.c2 &#123; width: 100%; height: 100px; background-color: blue; margin-top: 30px; /* 大 margin */&#125;&lt;div class=&quot;outer&quot;&gt; &lt;div class=&quot;c1&quot;&gt;&lt;/div&gt; &lt;div class=&quot;c2&quot;&gt;&lt;/div&gt;&lt;/div&gt; 上面例子的结果是，c1 和 c2 之间只有 30px 的 margin 间距。 解决办法： 父元素使用 flex 布局，设置 flex-direction: column; 使用 padding 将 c1 和 c2 用一个容器包裹起来，然后让这个容器触发 BFC（如：overflow: hidden;） 子元素浮动后，父元素高度塌陷问题？123456789101112131415&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;cube&quot;&gt;&lt;/div&gt;&lt;/div&gt;.container &#123; border: 1px solid red;&#125;.cube &#123; width: 100px; height: 100px; background-color: blue; margin: 100px; float: left; // 浮动&#125; 子元素设置浮动后，由于脱离了正常的文档流，导致父元素高度塌陷（因为父元素没有设置高度） 解决办法是，让父元素触发 BFC （如：overflow: hidden;），相当于 BFC 清除浮动123456789101112131415&lt;div class=&quot;floatDiv&quot;&gt;&lt;/div&gt;&lt;div class=&quot;normalDiv&quot;&gt;&lt;/div&gt;.floatDiv &#123; width: 50px; height: 50px; background-color: blue; float: left;&#125;.normalDiv &#123; width: 100px; height: 100px; background-color: red;&#125; 我们设置 floatDiv 浮动后，floatDiv 覆盖在 normalDiv 之上，要想 normalDiv 不被覆盖，触发 normalDiv BFC 即可。 123456.normalDiv &#123; width: 100px; height: 100px; background-color: red; overflow: hidden;&#125; 瀑布流 multi-column 实现 12345678910111213141516171819.container &#123; column-count: 3; // 3列 column-gap: 10px; // 间隙 10px padding: 10px; .item &#123; break-inside: avoid; // 防止文字截断 border: 1px solid #999; margin-bottom: 10px; img &#123; width: 100%; vertical-align: middle; &#125; .title &#123; display: block; margin-left: 5px; &#125; &#125;&#125; 123456789101112131415161718192021import React from &#x27;react&#x27;import &#x27;./index.less&#x27;import dataList from &#x27;./data.json&#x27;const WaterFlow = () =&gt; &#123; return ( &lt;div className=&#x27;container&#x27;&gt; &#123; dataList.map(d =&gt; &#123; return ( &lt;div className=&quot;item&quot; key=&#123;d.id&#125;&gt; &lt;img src=&#123;d.img&#125; alt=&quot;&quot; /&gt; &lt;p className=&quot;title&quot;&gt;&#123;d.value&#125;&lt;/p&gt; &lt;/div&gt; ) &#125;) &#125; &lt;/div&gt; )&#125;export default WaterFlow flex 布局 将 container 设置 flex 布局，方向是水平的 将 column 也设置为 flex 布局，方向是垂直的 然后只需要定义 3 个集合，遍历这3个集合，就巧妙的实现了瀑布流。 1234567891011121314&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;column&quot;&gt; &lt;div class=&quot;item&quot;&gt;&lt;/div&gt; ... &lt;/div&gt; &lt;div class=&quot;column&quot;&gt; &lt;div class=&quot;item&quot;&gt;&lt;/div&gt; ... &lt;/div&gt; &lt;div class=&quot;column&quot;&gt; &lt;div class=&quot;item&quot;&gt;&lt;/div&gt; ... &lt;/div&gt;&lt;/div&gt; js 123456789while (i &lt; data.length) &#123; data1.push(data[i++]); if (i &lt; data.length) &#123; data2.push(data[i++]); &#125; if (i &lt; data.length) &#123; data3.push(data[i++]); &#125;&#125; 操作DOM优化（DocumentFragment）使用 DocumentFragment 创建并组成一个 DOM 子树，然后使用 Node 接口方法（如：appendChild() 或 insertBefore()）将其插入到 DOM 中。 这种情况下会插入片段的所有子节点，并留下一个空的 DocumentFragment。因为所有的节点会被一次插入到文档中，所以仅会发生一个重渲染的操作，而不是每个节点分别被插入到文档中从而发生多次重渲染的操作。 123456789101112const list = document.querySelector(&#x27;#list&#x27;)const fruits = [&#x27;Apple&#x27;, &#x27;Orange&#x27;, &#x27;Banana&#x27;, &#x27;Melon&#x27;]const fragment = new DocumentFragment()fruits.forEach((fruit) =&gt; &#123; const li = document.createElement(&#x27;li&#x27;) li.textContent = fruit fragment.appendChild(li)&#125;)list.appendChild(fragment) html5有哪些新特性 新增选择器 document.querySelector、document.querySelectorAll 拖拽释放(Drag and drop) API 媒体播放的 video 和 audio 本地存储 localStorage 和 sessionStorage 离线应用 manifest 语意化标签 article、footer、header、nav、section 多任务 webworker 全双工通信协议 websocket 历史管理 history 跨域资源共享(CORS) Access-Control-Allow-Origin 跨窗口通信 PostMessage Form Data 对象 绘画 canvas cookies，sessionStorage 和 localStorage 的区别cookie是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密） cookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递 sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存 存储大小： cookie数据大小不能超过4kb sessionStorage和localStorage虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大 有期时间： localStorage 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据 sessionStorage 数据在当前浏览器窗口关闭后自动删除 cookie 设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭 flex（flex-grow、flex-shrink、flex-basis） flex-grow 定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大 flex-shrink 定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小 flex-basis给上面两个属性分配多余空间之前, 计算项目是否有多余空间, 默认值为 auto, 即项目本身的大小 1234567891011&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;item1&quot;&gt; &lt;span&gt;item1&lt;/span&gt; &lt;/div&gt; &lt;div class=&quot;item2&quot;&gt; &lt;span&gt;item2&lt;/span&gt; &lt;/div&gt; &lt;div class=&quot;item3&quot;&gt; &lt;span&gt;item3&lt;/span&gt; &lt;/div&gt;&lt;/div&gt; 123456789101112131415161718192021222324.container &#123; width: 600px; height: 300px; background-color: pink; display: flex;&#125;.item1 &#123; flex: none; width: 50px; background-color:blue;&#125;.item2 &#123; width: 50px; flex: 1 1 50px; background-color:red;&#125;.item3 &#123; width: 50px; flex: 7 1 100px; background-color:yellow;&#125; 伸张(grow)计算公式123456789容器：width: 600px所有子项目item: width: 50pxitem1: flex: none; =======&gt; flex: 0, 0, auto;item2: flex: 1 1 50px;item3: flex: 7 1 100px; 注意 在空间充足情况下，flex-basis的优先级 高于 width 属性 当空间充足时，flex子项的宽度计算公式是： 自身的基础宽度 + 容器剩余宽度 *（自身伸张比例 / 所有子项伸张比例之和） 容器剩余宽度: 600 - 50 - 50 - 100 = 400（取 flex-basis 值） item1 最终 width 的计算结果 150 + 400*(0/(0+1+7)) // 50 item2 最终 width 的计算结果 150 + 400*(1/(0+1+7)) // 100 item3 最终 width 的计算结果 1100 + 400*(7/(0+1+7)) // 450 当我们设置 flex-basis 设置为 auto，计算公式又是如何？计算公式依然适用，只不过，我们需要明确知道元素的内容，特别是元素包含了文字的时候。 123456789101112.container &#123; width: 600px; height: 300px; background-color: pink; display: flex;&#125;.item1 &#123; flex: none; width: 50px; background-color:blue;&#125; 我们可以通过 getBoundingClientRect 拿到元素的基础宽度 width 12const item2 = document.querySelector(&#x27;.item2&#x27;)console.log(item2.getBoundingClientRect().width) // 41.9375 然后给元素添加 flex 样式 123456789.item2 &#123; flex: 1 1 auto; background-color:red;&#125;.item3 &#123; flex: 7 1 auto; background-color:yellow;&#125; 容器剩余宽度 600 - 50 - (41.94 * 2) = 466.12 这里的 41.94 就是item1 item2的基础宽度，保留两位小数。 123456789计算后的宽度item1: 50 + 466.12*(0/0+1+7) // 0item2: 41.94 + 466.12*(1/0+1+7) // 100.205item3: 41.94 + 466.12*(7/0+1+7) // 449.795 我们也可以把内部的 文字内容 去掉，那么计算 item2 item3 的时候，元素自身宽度就相当于 0 了。 12345容器剩余宽度 `600 - 50 = 550`item1: 550*(1/(0+1+7)) // 68.75item2: 550*(7/(0+1+7)) // 481.25 收缩(shrink)计算公式123456789101112131415161718192021.container &#123; width: 300px; height: 300px; background-color: pink; display: flex;&#125;.item1 &#123; width: 50px; background-color:blue;&#125;.item2 &#123; flex: 1 1 100px; background-color:red;&#125;.item3 &#123; flex: 1 1 200px; background-color:yellow;&#125; 当空间不充足时，flex子项的宽度计算公式是： 自身的基础宽度 - 超出宽度 *(自身宽度*收缩比例/总权重） 12345678// 自身基础宽度 * 收缩比例, item1 没有设置收缩比例，收缩比例为 0总权重：200*1 + 100*1 + 50*0 = 300超出宽度：(200 + 100 + 50) - 300 = 50item1: 50 - 50*(200*0/300) // 50item2: 100 - 50*(100*1/300) // 83.34item3: 200 - 50*(200*1/300) // 166.66 padding 和 margin 区别margin是指从自身边框到另一个容器边框之间的距离，就是容器外距离，即外边距。 padding是指自身边框到自身内部另一个容器边框之间的距离，就是容器内距离，即内边距。 vw 和 百分比父元素设置了width 50%，子元素 c1 设置width 50%，子元素宽度只有父元素的一般（百分比相对于父元素容器计算） c2 设置的 50vw，它是相对于视口的，所以宽度和父元素宽度一样，不会被父元素影响。 12345678910111213141516171819202122232425262728&lt;template&gt; &lt;div class=&quot;box&quot;&gt; &lt;div class=&quot;c1&quot;&gt; c1 &lt;/div&gt; &lt;div class=&quot;c2&quot;&gt; c2 &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;style scoped&gt; div &#123; width: 50%; background: blue; &#125; .c1 &#123; width: 50%; height: 100px; background: red; &#125; .c2 &#123; width: 50vw; height: 100px; background: yellow; &#125;&lt;/style&gt; rem em vw vh %vw、vh 是相对于视口的，比如说 50vh，就是占据屏幕一般的高度 rem 是根据根元素（html）的 font-size 来设置大小，而 em、%是根据父元素来设置大小 如何让 chrome 浏览器显示更小的字体（默认最小 12px） zoom: 0.5; 支持块级元素、行内元素 transform: scale(0.5) 支持块级元素，不支持行内元素 使用 rem 给根组件设置指定的 font-size，其他元素的单位使用 rem 作为单位 移动端适配：使用 rem 作为单位，如何自动将 px 转为 rem 单位?比如我们的跟标签设置了 font-size 为 16px（浏览器默认），那么 1rem 就是 16px。 假设我想给某一个元素设置 12px 大小的 font-size，我们可以通过 16 / 12 = 1.333，那么这个 font-size 就可以设置为 1.333rem。 但是问题来了，页面上有很多元素都要设置大小，它们的 px 大多都不一样，我们每次都要手动计算吗？ 这时，我们就可以使用 postcss 的一个插件 postcss-rem https://www.npmjs.com/package/postcss-rem 编写 css 时可以这样写： 1234567891011.demo &#123; font-size: rem(24px); /* Simple */ padding: rem(5px 10px); /* Multiple values */ margin: rem(10px 0.5rem); /* Existing rem */ border-bottom: rem(1px solid black); /* Multiple mixed values */ box-shadow: rem( 0 0 2px #ccc, inset 0 0 5px #eee ); /* Comma-separated values */ text-shadow: rem(1px 1px) #eee, rem(-1px) 0 #eee; /* Alternate use */&#125; postcss-rem 自动帮我们计算了，输出的结果是： 12345678.demo &#123; font-size: 1.5rem; /* Simple */ padding: 0.3125rem 0.625rem; /* Multiple values */ margin: 0.625rem 0.5rem; /* Existing rem */ border-bottom: 0.0625rem solid black; /* Multiple mixed values */ box-shadow: 0 0 0.125rem #ccc, inset 0 0 0.3125rem #eee; /* Comma-separated values */ text-shadow: 0.0625rem 0.0625rem #eee, -0.0625rem 0 #eee; /* Alternate use */&#125; 具体用法 安装 yarn add postcss-rem -D 配置 postcss，以 vite.config.js 为例 1234567891011import PostcssRem from &#x27;postcss-rem&#x27;export default defineConfig(&#123; ... css: &#123; postcss: &#123; plugins: [PostcssRem] &#125; &#125;&#125;) 配置完后，我们在写 css 时就可以直接使用 rem方法 自动将 px 转为 rem 了。 block、inline、inline-block 有什么区别 block元素为块级元素，独占一行，对其设置宽高属性会生效，如果不设置宽度，默认宽度为 100% 1div/form/header/ul/canvas/footer/video/audio inline 元素为行内元素，宽高由内容撑开，不会独占一行，多个 inline 元素排成一排，设置其宽高属性不会生效。 inline-block 为行内块级元素，可以设置宽高，还能和其它 inline 元素并排显示 position: sticky (粘性定位元素)position: sticky的使用方式和position: fixed类似，但是它的固定位置是相对于父容器而不是相对于视口。 粘性定位可以被认为是相对定位和固定定位的混合。 须指定 top, right, bottom 或 left 四个阈值其中之一，才可使粘性定位生效。否则其行为与相对定位相同。 使用场景: 用于定位字母列表的头部元素。 123456789101112131415161718192021222324252627282930&lt;div&gt; &lt;dl&gt; &lt;dt&gt;A&lt;/dt&gt; &lt;dd&gt;Andrew W.K.&lt;/dd&gt; &lt;dd&gt;Apparat&lt;/dd&gt; &lt;dd&gt;Arcade Fire&lt;/dd&gt; &lt;dd&gt;At The Drive-In&lt;/dd&gt; &lt;dd&gt;Aziz Ansari&lt;/dd&gt; &lt;/dl&gt; &lt;dl&gt; &lt;dt&gt;C&lt;/dt&gt; &lt;dd&gt;Chromeo&lt;/dd&gt; &lt;dd&gt;Common&lt;/dd&gt; &lt;dd&gt;Converge&lt;/dd&gt; &lt;dd&gt;Crystal Castles&lt;/dd&gt; &lt;dd&gt;Cursive&lt;/dd&gt; &lt;/dl&gt; &lt;dl&gt; &lt;dt&gt;E&lt;/dt&gt; &lt;dd&gt;Explosions In The Sky&lt;/dd&gt; &lt;/dl&gt; &lt;dl&gt; &lt;dt&gt;T&lt;/dt&gt; &lt;dd&gt;Ted Leo &amp; The Pharmacists&lt;/dd&gt; &lt;dd&gt;T-Pain&lt;/dd&gt; &lt;dd&gt;Thrice&lt;/dd&gt; &lt;dd&gt;TV On The Radio&lt;/dd&gt; &lt;dd&gt;Two Gallants&lt;/dd&gt; &lt;/dl&gt;&lt;/div&gt; css 1234567891011121314151617181920212223dt &#123; background: #B8C1C8; border-bottom: 1px solid #989EA4; border-top: 1px solid #717D85; color: #FFF; font: bold 18px/21px Helvetica, Arial, sans-serif; margin: 0; padding: 2px 0 0 12px; position: -webkit-sticky; position: sticky; top: -2px;&#125;dd &#123; font: bold 20px/45px Helvetica, Arial, sans-serif; margin: 0; padding: 0 0 0 12px; white-space: nowrap;&#125;dd + dd &#123; border-top: 1px solid #CCC&#125; window.scrollY &amp; window.pageYOffsetwindow.scrollY: 返回文档在垂直方向已滚动的像素值。 window.pageYOffset: 只读属性 pageYOffset 是 scrollY 属性的别名。为了跨浏览器兼容，请使用 window.pageYOffset 代替 window.scrollY。另外，旧版本 IE（&lt;9）两个属性都不支持 目标元素的位置信息 clientWidth：目标元素的width+padding(左右两侧) offsetWidth:目标元素的width+padding(左右两侧)+border(左右两侧) offsetHeight 是一个只读属性，它返回该元素的像素高度，高度包含该元素的垂直内边距和边框，且是一个整数。 clientLeft:目标元素左边框border的宽度 offsetLeft:目标元素左边框离其具有定位的父元素之间的距离 clientX：鼠标相对于浏览器窗口可视区域的X坐标（横向) offsetX：鼠标相对于绑定事件元素的X坐标 pageX：鼠标相对于文档的X坐标，会计算滚动距离；如果没有滚动距离，值与clientX一样 screenX：鼠标相对于显示器屏幕左侧的X坐标 getBoundingClientRect().left:目标元素左边框相对于浏览器可视区域的距离，可能为负值 介绍 不用 position sticky 如何实现吸顶效果?通过监听 scroll，动态设置需要吸顶元素的样式，通过 position: fixed; 将其固定在顶部。 12345&lt;header&gt; &lt;nav&gt; 导航栏内容 &lt;/nav&gt;&lt;/header&gt; css 1234567891011121314151617header &#123; height: 100px; /* header的高度 */&#125;nav &#123; height: 50px; /* 导航栏的高度 */ position: relative; /* 相对定位 */ z-index: 1; /* 显示在页面最上层 */ background-color: #69c;&#125;.sticky &#123; position: fixed; top: 0; left: 0; right: 0;&#125; 监听滚动条变化 123456789101112131415var header = document.querySelector(&#x27;header&#x27;);var nav = document.querySelector(&#x27;nav&#x27;);var navOffsetTop = nav.offsetTop; // 记录导航栏距离顶部的距离，一开始是 0window.addEventListener(&#x27;scroll&#x27;, () =&gt; &#123; if (window.pageYOffset &gt;= navOffsetTop) &#123; nav.classList.add(&#x27;sticky&#x27;) // 避免 nav 遮挡内容，否则在滚动页面时，内容出现明显的抖动。 header.style.paddingTop = nav.offsetHeight + &#x27;px&#x27;; &#125; else &#123; nav.classList.remove(&#x27;sticky&#x27;) header.style.paddingTop = 0; &#125;&#125;)"},{"title":"","date":"2024-06-11T08:52:17.487Z","updated":"2024-06-11T08:52:17.487Z","comments":false,"path":"demo/2023面试准备/mongodb.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/mongodb.html","excerpt":"","text":"数据库MySQL 为代表的关系型数据库 MongoDB 为非关系型（NoSQL）数据库。 安装 mongodb 官网链接 下载安装包，将其放入 /usr/local 目录下。打开访达，command + shift + g可以快速去到想去的目录 配置环境变量，打开命令行工具，open .zshrc，添加如下配置 1export PATH=$&#123;PATH&#125;:/usr/local/mongodb5.0.18/bin 保存关闭后，执行 source .zshrc 使其生效。 然后执行 mongod -version 就能查看 mongodb 的信息了。 1234567891011db version v5.0.18Build Info: &#123; &quot;version&quot;: &quot;5.0.18&quot;, &quot;gitVersion&quot;: &quot;796abe56bfdbca6968ff570311bf72d93632825b&quot;, &quot;modules&quot;: [], &quot;allocator&quot;: &quot;system&quot;, &quot;environment&quot;: &#123; &quot;distarch&quot;: &quot;x86_64&quot;, &quot;target_arch&quot;: &quot;x86_64&quot; &#125;&#125; 存储数据 和 日志 我们可以在 /usr/local/mongodb5.0.18 目录下创建 data 和 log 文件夹，当然也可以创建在任何地方。 使 data 和 log 都具有 读写 的权限，防止使用时出错 12sudu chown [用户名(电脑的)] /usr/local/mongodb5.0.18/datasudu chown [用户名(电脑的)] /usr/local/mongodb5.0.18/log 我们来启动 mongodb 1234// 路径：/usr/local/mongodb5.0.18mongod --fork --dbpath data --logpath log/mongo.log --logappend –fork 表示在后台运行 –dbpath 表示存储数据的路径（我们在/usr/local/mongodb5.0.18文件夹下，就直接指定 data 即可） –logpath 表示日志文件的路径 –logappend 表示每次都是追加日志，而不是重写日志 输出如下信息，就表示 mongodb 的服务在电脑上启动了 123about to fork child process, waiting until server is ready for connections.forked process: 10598child process started successfully, parent exiting 我们另外起一个命令行窗口，输入 mongo 1234567MongoDB shell version v5.0.18connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&amp;gssapiServiceName=mongodbImplicit session: session &#123; &quot;id&quot; : UUID(&quot;338bec0f-9330-46cc-ae47-0a17dc1f5f8b&quot;) &#125;MongoDB server version: 5.0.18================...省略... 当出现这样的信息，表示 mongodb 已经启动，并且控制台出现了小箭头 ‘&gt;’，我们输入 db 会输出 test，也可以操作 db 了。 也可以在浏览器输入 http://127.0.0.1:27017/ 查看是否可以访问。 关闭 mongodb 服务： 12345在小箭头的命令行窗口输入 `use admin`接着输入：db.shutdownServer(&#123;force: true&#125;)最后: Ctrl + C 退出即可。 命令行操作 db启动 mongo 之后，在终端输入 show dbs 即可查看所有的数据库 通过 use [db name] 可以切换到某个数据库 show collections 查看当前数据库下所有的 集合 然后我们就可以操作 db 了，比如要查询： 1db.Login.find(&#123;usename: &#x27;alex.cheng&#x27;&#125;) 安装 Compass(MongoDB GUI) https://www.mongodb.com/try/download/compass MongoDB CRUD Operations https://www.mongodb.com/docs/v5.0/crud/ 插入数据 插入一条数据 1db.Login.insertOne(&#123; username:&#x27;insert one&#x27;, age: 27 &#125;) 插入多条数据 1234db.Login.insertMany([ &#123; username: &#x27;many1&#x27;, age: 11 &#125;, &#123; username: &#x27;many2&#x27;, age: 22 &#125;]) 查询数据通过 find 方法进行查询，什么都不传，表示查询所有集合。(pretty 表示美化输出) 1db.Login.find().pretty() 比如要查询 age = 18 的数据: 1const conditionQuery = await Login.find(&#123; age: 18 &#125;) 带条件的查询 $ 表示操作符，比如要查询 年龄 大于等于20，小于等于25 的数据： 123456const conditionQuery = await Login.find(&#123; age: &#123; $gte: 20, // 大于等于： g 表示 greater, t 表示 than，e 表示 equal $lte: 25, // 小于等于 &#125;&#125;) $gte 大于等于 $gt 大于 $lte 小于等于 $lt 小于 $ne 不等于 $eq 等于 $in（存在并在指定数组中） 表示查询所有 age 等于 18 和 20 的数据 1db.collection.find(&#123; age: &#123; $in: [18, 20] &#125;&#125;) $nin（不存在或不在指定的数组中） $or 表示查询 age 小于 17 或者 age 大于 25 的数据 123456db.collection.find(&#123; $or: [ &#123; age: &#123; $lt: 17 &#125;&#125;, &#123; age: &#123; $gt: 25 &#125;&#125; ]&#125;) $and 查询 age 19 25 的数据 12345678910db.collection.find(&#123; $and: [ &#123; age: 19&#125;, &#123; age: 25&#125; ]&#125;)=== 等价 ===db.collection.find(&#123; ae&#125;) 以上条件查询可以随意组合，自由搭配使用。 查询含有数组的数据1234567db.collection.insertMany([ &#123; item: &quot;journal&quot;, qty: 25, tags: [&quot;blank&quot;, &quot;red&quot;], dim_cm: [ 14, 21 ] &#125;, &#123; item: &quot;notebook&quot;, qty: 50, tags: [&quot;red&quot;, &quot;blank&quot;], dim_cm: [ 14, 21 ] &#125;, &#123; item: &quot;paper&quot;, qty: 100, tags: [&quot;red&quot;, &quot;blank&quot;, &quot;plain&quot;], dim_cm: [ 14, 21 ] &#125;, &#123; item: &quot;planner&quot;, qty: 75, tags: [&quot;blank&quot;, &quot;red&quot;], dim_cm: [ 22.85, 30 ] &#125;, &#123; item: &quot;postcard&quot;, qty: 45, tags: [&quot;blue&quot;], dim_cm: [ 10, 15.25 ] &#125;]); 精准匹配 数据中 tags 值为 [‘red’] 的数据 1db.collection.find(&#123; tags: [&quot;red&quot;]&#125;) 范围匹配 查找所有 tags 中，包含 “red” 的数据 1db.collection.find(&#123; tags: &#123; $all: [&quot;red&quot;]&#125;&#125;) 至少一个满足条件 表示 dim_cm 中的元素，至少有一个满足条件，即可。 1db.collection.find(&#123; dim_cm: &#123; $elemMatch: &#123; $gt: 22, $lt: 30 &#125;&#125;&#125;) 根据数组的长度查询 查询 tags 数组长度为 4 的数据 1db.collection.find(&#123; tags: &#123; $size: 4 &#125;&#125;) 查询数组里面的对象符合匹配条件的 比如有如下文档 1234567db.collection.insertMany([ &#123; item: &quot;journal&quot;, instock: [ &#123; warehouse: &quot;A&quot;, qty: 5 &#125;, &#123; warehouse: &quot;C&quot;, qty: 15 &#125; ] &#125;, &#123; item: &quot;notebook&quot;, instock: [ &#123; warehouse: &quot;C&quot;, qty: 5 &#125; ] &#125;, &#123; item: &quot;paper&quot;, instock: [ &#123; warehouse: &quot;A&quot;, qty: 60 &#125;, &#123; warehouse: &quot;B&quot;, qty: 15 &#125; ] &#125;, &#123; item: &quot;planner&quot;, instock: [ &#123; warehouse: &quot;A&quot;, qty: 40 &#125;, &#123; warehouse: &quot;B&quot;, qty: 5 &#125; ] &#125;, &#123; item: &quot;postcard&quot;, instock: [ &#123; warehouse: &quot;B&quot;, qty: 15 &#125;, &#123; warehouse: &quot;C&quot;, qty: 35 &#125; ] &#125;]); 指定数组元素进行匹配 1db.collection.find(&#123; &quot;instock&quot;: &#123; warehouse: &quot;A&quot;, qty: 5 &#125; &#125;) // 顺序不能错，顺序错了匹配不到 指定数组元素的 key，并通过条件查询 1db.collection.find( &#123; &#x27;instock.qty&#x27;: &#123; $lte: 20 &#125; &#125; ) 查询子文档数据如下： 123456789101112&#123; &quot;name&quot;: &quot;apple&quot;, &quot;from&quot;: &#123; &quot;country&quot;: &quot;China&quot; &#125;&#125;,&#123; &quot;name&quot;: &quot;apple1&quot;, &quot;from&quot;: &#123; &quot;country&quot;: &quot;China1&quot; &#125;&#125; 查询 country 为 China1 的数据 1db.collection.find(&#123; &#x27;from.country&#x27;: &#x27;China1&#x27; &#125;) 更新数据 db.collection.updateOne(&lt;filter&gt;, &lt;update&gt;, &lt;options&gt;) db.collection.updateMany(&lt;filter&gt;, &lt;update&gt;, &lt;options&gt;) db.collection.replaceOne(&lt;filter&gt;, &lt;update&gt;, &lt;options&gt;) 数据 123456789101112db.inventory.insertMany( [ &#123; item: &quot;canvas&quot;, qty: 100, size: &#123; h: 28, w: 35.5, uom: &quot;cm&quot; &#125;, status: &quot;A&quot; &#125;, &#123; item: &quot;journal&quot;, qty: 25, size: &#123; h: 14, w: 21, uom: &quot;cm&quot; &#125;, status: &quot;A&quot; &#125;, &#123; item: &quot;mat&quot;, qty: 85, size: &#123; h: 27.9, w: 35.5, uom: &quot;cm&quot; &#125;, status: &quot;A&quot; &#125;, &#123; item: &quot;mousepad&quot;, qty: 25, size: &#123; h: 19, w: 22.85, uom: &quot;cm&quot; &#125;, status: &quot;P&quot; &#125;, &#123; item: &quot;notebook&quot;, qty: 50, size: &#123; h: 8.5, w: 11, uom: &quot;in&quot; &#125;, status: &quot;P&quot; &#125;, &#123; item: &quot;paper&quot;, qty: 100, size: &#123; h: 8.5, w: 11, uom: &quot;in&quot; &#125;, status: &quot;D&quot; &#125;, &#123; item: &quot;planner&quot;, qty: 75, size: &#123; h: 22.85, w: 30, uom: &quot;cm&quot; &#125;, status: &quot;D&quot; &#125;, &#123; item: &quot;postcard&quot;, qty: 45, size: &#123; h: 10, w: 15.25, uom: &quot;cm&quot; &#125;, status: &quot;A&quot; &#125;, &#123; item: &quot;sketchbook&quot;, qty: 80, size: &#123; h: 14, w: 21, uom: &quot;cm&quot; &#125;, status: &quot;A&quot; &#125;, &#123; item: &quot;sketch pad&quot;, qty: 95, size: &#123; h: 22.85, w: 30.5, uom: &quot;cm&quot; &#125;, status: &quot;A&quot; &#125;] ) 更新匹配到的数据，将匹配到的数据里面的 size.uom 修改为 in，status 修改为 p 1234567db.inventory.updateOne( &#123; item: &quot;paper&quot; &#125;, &#123; $set: &#123; &quot;size.uom&quot;: &quot;cm&quot;, status: &quot;P&quot; &#125;, $currentDate: &#123; lastModified: true &#125; &#125;) 批量更新 1234567db.inventory.updateMany( &#123; &quot;qty&quot;: &#123; $lt: 50 &#125; &#125;, // 将 qty 小于 50 的项都更新 &#123; $set: &#123; &quot;size.uom&quot;: &quot;in&quot;, status: &quot;P&quot; &#125;, $currentDate: &#123; lastModified: true &#125; &#125;) 替换更新 1234db.inventory.replaceOne( &#123; item: &quot;paper&quot; &#125;, &#123; item: &quot;paper&quot;, instock: [ &#123; warehouse: &quot;A&quot;, qty: 60 &#125;, &#123; warehouse: &quot;B&quot;, qty: 40 &#125; ] &#125;) mongodb 的 updateOne 和 replaceOne 有什么区别?updateOne 和 replaceOne 是 MongoDB 中的两种更新操作方法，它们有以下区别： 更新方式不同： updateOne：使用更新操作符（如 $set、$inc 等）来修改指定条件下的文档字段值。 replaceOne：替换匹配条件下的整个文档，使用提供的新文档完全替换匹配的文档。 字段更新： updateOne：可以选择性地更新指定字段，只修改指定字段的值，而其他字段保持不变。 replaceOne：替换整个文档，需要提供一个新文档作为替换。 文档结构： updateOne：保留原有文档结构，只修改指定字段的值。 replaceOne：完全替换匹配的文档，替换后的文档可以与原文档具有不同的结构。 性能差异： updateOne：更新操作仅修改需要更新的字段，相对较轻量，可以高效地执行。 replaceOne：替换操作需要替换整个文档，可能涉及更多的数据复制和写入操作，相对较重。 综上所述，updateOne 适用于部分字段的更新，保留原有文档结构；replaceOne 适用于整个文档的替换，可以更新文档结构。选择使用哪种方法取决于你的具体需求和数据模型设计。 删除数据 db.collection.deleteMany() db.collection.deleteOne() 数据 1234567db.inventory.insertMany( [ &#123; item: &quot;journal&quot;, qty: 25, size: &#123; h: 14, w: 21, uom: &quot;cm&quot; &#125;, status: &quot;A&quot; &#125;, &#123; item: &quot;notebook&quot;, qty: 50, size: &#123; h: 8.5, w: 11, uom: &quot;in&quot; &#125;, status: &quot;P&quot; &#125;, &#123; item: &quot;paper&quot;, qty: 100, size: &#123; h: 8.5, w: 11, uom: &quot;in&quot; &#125;, status: &quot;D&quot; &#125;, &#123; item: &quot;planner&quot;, qty: 75, size: &#123; h: 22.85, w: 30, uom: &quot;cm&quot; &#125;, status: &quot;D&quot; &#125;, &#123; item: &quot;postcard&quot;, qty: 45, size: &#123; h: 10, w: 15.25, uom: &quot;cm&quot; &#125;, status: &quot;A&quot; &#125;,]); 删除所有数据 1db.inventory.deleteMany(&#123;&#125;) 有条件删除 12// 删除所有 status 为 `A` 的数据db.inventory.deleteMany(&#123; status : &quot;A&quot; &#125;) 删除一条数据 1db.inventory.deleteOne( &#123; status: &quot;D&quot; &#125; ) 删除整个表1db.collection.drop() 批量写入操作（Bulk Write Operations）bulkWrite()方法 支持如下操作 插入一个 更新一个 更新很多 替换一个 删除一个 删除许多 数据如下 12345db.inventory.insertMany([ &#123; _id: 0, type: &quot;pepperoni&quot;, size: &quot;small&quot;, price: 4 &#125;, &#123; _id: 1, type: &quot;cheese&quot;, size: &quot;medium&quot;, price: 7 &#125;, &#123; _id: 2, type: &quot;vegan&quot;, size: &quot;large&quot;, price: 8 &#125;]) 我们来使用 bulkWrite 操作它，下面包含了如下几种操作 插入两条数据 跟新一条数据 删除一条数据 替换一条数据 1234567891011121314151617try &#123; db.inventory.bulkWrite( [ &#123; insertOne: &#123; document: &#123; _id: 3, type: &quot;beef&quot;, size: &quot;medium&quot;, price: 6 &#125; &#125; &#125;, &#123; insertOne: &#123; document: &#123; _id: 4, type: &quot;sausage&quot;, size: &quot;large&quot;, price: 10 &#125; &#125; &#125;, &#123; updateOne: &#123; filter: &#123; type: &quot;cheese&quot; &#125;, update: &#123; $set: &#123; price: 8 &#125; &#125; &#125; &#125;, &#123; deleteOne: &#123; filter: &#123; type: &quot;pepperoni&quot;&#125; &#125; &#125;, &#123; replaceOne: &#123; filter: &#123; type: &quot;vegan&quot; &#125;, replacement: &#123; type: &quot;tofu&quot;, size: &quot;small&quot;, price: 4 &#125; &#125; &#125; ] )&#125; catch( error ) &#123; print( error )&#125; buldWrite 和 insertMany，他俩有什么区别？bulkWrite 和 insertMany 是 MongoDB 中的两种批量写入操作方法，它们有以下区别： 写入方式不同： bulkWrite：使用批量写入操作符来执行多个写入操作，可以执行插入、更新、删除等操作。 insertMany：仅用于插入多个文档。 灵活性： bulkWrite：支持执行多种写入操作，可以在同一个请求中执行多个不同类型的操作，例如插入、更新、删除等。 insertMany：仅用于插入多个文档，不支持更新或删除操作。 性能差异： bulkWrite：由于可以在一个请求中执行多个操作，可以减少与数据库的通信次数，因此在执行多个写入操作时可能具有更好的性能。 insertMany：仅用于插入操作，对于大量数据的批量插入可能具有较好的性能。 综上所述，bulkWrite 适用于批量执行多种写入操作，提供更大的灵活性；insertMany 适用于批量插入多个文档。选择使用哪种方法取决于你的具体需求和数据操作类型。 聚合操作（聚合查询）Aggregation Operations https://www.mongodb.com/docs/v5.0/aggregation/ 当使用 MongoDB 进行复杂的数据查询和分析时，聚合查询是一种非常有用的工具。聚合查询允许你通过组合和处理数据来生成更有意义的结果。以下是 MongoDB 中聚合查询的一般流程和常用操作： 管道操作：聚合查询使用管道操作来按照特定顺序处理数据。管道操作是一系列的阶段，每个阶段执行特定的操作，并将结果传递给下一个阶段。常用的管道操作包括： $match：用于筛选文档，类似于查询中的 WHERE 条件。 $group：用于根据指定字段对文档进行分组聚合操作，可以进行计数、求和、平均值等操作。 $project：用于选择要返回的字段或计算新字段。投影 $sort：用于对结果进行排序。 $limit：用于限制结果集的数量。 $skip：用于跳过指定数量的文档。 聚合函数：聚合查询中可以使用各种内置的聚合函数来处理数据，例如： $sum：计算字段值的总和。 $avg：计算字段值的平均值。 $min：获取字段值的最小值。 $max：获取字段值的最大值。 $push：将字段值添加到数组中。 $addToSet：将字段值添加到集合中，去重。 示例：以下是一个简单的聚合查询示例，假设我们有一个名为 users 的集合，其中包含用户的姓名和年龄信息： 123456db.users.aggregate([ &#123; $match: &#123; age: &#123; $gte: 18 &#125; &#125; &#125;, // 筛选年龄大于等于18的用户 &#123; $group: &#123; _id: &quot;$age&quot;, count: &#123; $sum: 1 &#125; &#125; &#125;, // 按年龄分组并计算每个年龄的用户数 &#123; $sort: &#123; count: -1 &#125; &#125;, // 按用户数降序排序 &#123; $limit: 5 &#125; // 只返回前5个结果]) 以上聚合查询将返回年龄大于等于18的用户，并按用户数降序排列，最后只返回前5个结果。 聚合查询在 MongoDB 中提供了灵活和强大的数据处理能力，可以根据需求组合和定制不同的阶段和操作，以生成所需的结果。 使用该 db.collection.aggregate()方法运行的聚合管道不会修改集合中的文档，除非管道包含 $merge 或 $out 阶段。 假如有如下数据： 123456789101112131415161718db.orders.insertMany( [ &#123; _id: 0, name: &quot;Pepperoni&quot;, size: &quot;small&quot;, price: 19, quantity: 10, date: ISODate( &quot;2021-03-13T08:14:30Z&quot; ) &#125;, &#123; _id: 1, name: &quot;Pepperoni&quot;, size: &quot;medium&quot;, price: 20, quantity: 20, date : ISODate( &quot;2021-03-13T09:13:24Z&quot; ) &#125;, &#123; _id: 2, name: &quot;Pepperoni&quot;, size: &quot;large&quot;, price: 21, quantity: 30, date : ISODate( &quot;2021-03-17T09:22:12Z&quot; ) &#125;, &#123; _id: 3, name: &quot;Cheese&quot;, size: &quot;small&quot;, price: 12, quantity: 15, date : ISODate( &quot;2021-03-13T11:21:39.736Z&quot; ) &#125;, &#123; _id: 4, name: &quot;Cheese&quot;, size: &quot;medium&quot;, price: 13, quantity:50, date : ISODate( &quot;2022-01-12T21:23:13.331Z&quot; ) &#125;, &#123; _id: 5, name: &quot;Cheese&quot;, size: &quot;large&quot;, price: 14, quantity: 10, date : ISODate( &quot;2022-01-12T05:08:13Z&quot; ) &#125;, &#123; _id: 6, name: &quot;Vegan&quot;, size: &quot;small&quot;, price: 17, quantity: 10, date : ISODate( &quot;2021-01-13T05:08:13Z&quot; ) &#125;, &#123; _id: 7, name: &quot;Vegan&quot;, size: &quot;medium&quot;, price: 18, quantity: 10, date : ISODate( &quot;2021-01-13T05:10:13Z&quot; ) &#125;] ) 我们先匹配 size 为 medium 的文档，然后通过 $group 将对查找出的文档进行分组，$name 表示获取文档内 name 字段，$quantity 表示获取文档内 quantity 字段 聚合管道 Aggregation Pipeline 1234567891011db.orders.aggregate([ // Stage 1: Filter pizza order documents by pizza size &#123; $match: &#123; size: &quot;medium&quot; &#125; &#125;, // Stage 2: Group remaining documents by pizza name and calculate total quantity // 按 pizza 名称对剩余文档进行分组 并且 计算总数量 &#123; $group: &#123; _id: &quot;$name&quot;, totalQuantity: &#123; $sum: &quot;$quantity&quot; &#125; &#125; &#125;]) 最终我们查找出的结果是: 12345[ &#123; _id: &#x27;Cheese&#x27;, totalQuantity: 50 &#125;, &#123; _id: &#x27;Vegan&#x27;, totalQuantity: 10 &#125;, &#123; _id: &#x27;Pepperoni&#x27;, totalQuantity: 20 &#125;] 我们还可以添加 stage3 阶段，通过 $sort 对其进行排序，我们建立一个 pipeline 12345678910111213141516171819202122const pipeline = [ &#123; $match: &#123; size: &#x27;medium&#x27; &#125; &#125;, &#123; $group: &#123; _id: &#x27;$name&#x27;, totalQuantity: &#123; $sum: &#x27;$quantity&#x27; &#125; &#125; &#125;, &#123; $sort: &#123; totalQuantity: -1 // -1 表示倒序，1 表示正序 &#125; &#125;]db.collection.aggregate(pipeline) 我们还可以计算 单价 和 数量 的乘积，得到总价格 修改 pipeline 如下： 123456789101112131415161718192021&#123; $project: &#123; name: 1, quantity: 1, price: 1, totalPrice: &#123; $multiply: [&quot;$quantity&quot;, &quot;$price&quot;] &#125; &#125;&#125;,&#123; $group: &#123; _id: &#x27;$name&#x27;, totalPrice: &#123; $sum: &#x27;$totalPrice&#x27;, &#125;, totalQuantity: &#123; $sum: &#x27;$quantity&#x27; &#125;, &#125;&#125;, 通过 $project 投影映射出我们想要的字段，1 表示需要展示的字段，$multiply 表示我们要计算的乘积 数量 * 单价。 然后，通过 $group 对映射后的文档进行分组，最终结果如下： 12345[ &#123; _id: &#x27;Cheese&#x27;, totalPrice: 650, totalQuantity: 50 &#125;, &#123; _id: &#x27;Pepperoni&#x27;, totalPrice: 400, totalQuantity: 20 &#125;, &#123; _id: &#x27;Vegan&#x27;, totalPrice: 180, totalQuantity: 10 &#125;] Aggregations in Compass在 GUI compass 中使用 聚合查询，通过 Add Stage 添加 pipeline 每一个阶段，我们可以在 Compass 中很清楚的看到每一个 stage 的结果。 还可以将 pipeline 导出，并选择语言 复制集 https://www.mongodb.com/docs/v5.0/replication/ 索引 https://www.mongodb.com/docs/v5.0/indexes/"},{"title":"","date":"2024-06-11T08:52:17.488Z","updated":"2024-06-11T08:52:17.488Z","comments":false,"path":"demo/2023面试准备/react.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/react.html","excerpt":"","text":"React 老文档 https://zh-hans.legacy.reactjs.org/ 对组件化的理解组件将应用的 UI 拆分成独立的、可复用的模块。 组件化的核心，就是两点: 封装 共同的逻辑 复用 通过属性（props）的传递，展示不同的模板内容 定义组件的两种方式 class component 条件： class 继承自 React.Component(PureComponent) class 内部必须定义 render 方法。 如果自定义了 constructor 函数，必须调用 super(props) 方法。调用super实际上是调用了 React.Component 这个 class 的 construcor 方法，用来完成 React 组件的初始化工作。 function component 组件的生命周期单组件生命周期 componentDidMount在 componentDidMount 生命钩子中，组件已经挂在，真实 DOM 也已经渲染完成，是调用服务器 API 最安全的地方。 componentWillMount 也可以获取服务器 API，因为越早拿到数据，越能更快的返回组件并展示正确的组件。但是当组件在服务器端渲染时，componentWillMount 会被调用两次，一次是在服务器端，一次是在浏览器端。而 componentDidMount 能保证在任何情况下只会被调用一次。 componentWillReceivePropsprops 的更新，会触发子组件的 componentWillReceiveProps 生命周期方法。 如果需要用 props 中的某个属性和服务端交互，componentWillReceiveProps 就很合适。 父子组件生命周期执行顺序父子组件生命周期执行顺序和 Vue 的一样。 父子组件加载时： 123456789101112// console.log父组件 constructor父组件 render子组件 constructor子组件 render子组件 componentDidMount父组件 componentDidMount 父组件更新时 1234567父组件 render子组件 render子组件 componentDidUpdate父组件 componentDidUpdate 卸载子组件 12345父组件 render子组件 componentWillUnmount父组件 componentDidUpdate React 中 JSX 本质是什么？本质还是 JS。 JSX 是 JavaScript 语法扩展，可以让你在 JavaScript 文件中书写类似 HTML 的标签。 代码更简洁，更具有可读性，更贴近 HTML。 React 中 JSX 只是一种表现形式，可以让你以一种更方便的方式动态的创建组件。JSX 最终会被转化成 JS 代码。 JSX 语法对 React 来说只是 React.createElement 的语法糖。所有的 JSX 语法最终都会被转换成 React.createElement 函数的调用。 1234567891011// JSXconst element = &lt;div className=&quot;foo&quot;&gt;Hello, React&lt;/div&gt;// 转换后const element = React.createElement( &#x27;div&#x27;, &#123; className: &#x27;foo&#x27; &#125;, &#x27;Hello, React&#x27;) 这也就是为什么我们代码中有时候并未使用 React，但是必须导入的原因。 为什么多个 JSX 标签需要被一个父元素包裹？JSX 虽然看起来很像 HTML，但在底层其实被转化为了 JavaScript 对象，你不能在一个函数中返回多个对象，除非用一个数组把他们包装起来。 这就是为什么多个 JSX 标签必须要用一个父元素或者 Fragment 来包裹。 为什么操作 DOM 比操作 JS 要慢，且更耗性能？主要是在两个方面： 跨模块通信。DOM 的实现和 JS 的实现属于两个独立的模块，跨模块交互性能消耗挺高。 耗浏览器性能。当我们操作 DOM，通常会引起浏览器的重绘和回流。 JSX 和 vDom 的关系？JSX 需要转为成 html，必须先转化为 js，通过 vdom 来描述 html 关系，最终渲染为 html. React.createElement 和 h 函数，都生成 vNode. ReactDOM.render 和 setState 时，都需要 patch。 key 的作用React 中 key 属性是用来标记列表中的每个元素，当列表数据发生变化时，React 在做 diff 时就可以通过 key 知道哪些元素发生了变化，从而只重新渲染发生变化了的元素，提高渲染效率。 state 和 props 的区别是什么state 和 props 都和组件的 UI 渲染有关，它们的变化都会触发组件的重新渲染，但是 props 对于使用它的组件来说是只读的，是通过父组件传递过来，要想修改 props，只能通过父组件修改。而 state 是组件内部自己维护的状态，可变的。 setState 合适的时候合并更新setState 组件大部分情况下是异步的，调用后不会立即更新组件的 state，而是将 state 的更新加入到更新队列中，然后在合适的时候批量处理这些更新。 当你传入对象并调用了多次 setState，这几个对象会被合并，执行结果拿最后那个 setState。 12345count = 0this.setState(&#123; count: this.state.count + 1 &#125;)this.setState(&#123; count: this.state.count + 1 &#125;)this.setState(&#123; count: this.state.count + 1 &#125;) 类似于将三个 count 放到同一个对象上： 12345&#123; count: this.state.count + 1, count: this.state.count + 1, count: this.state.count + 1,&#125; 所以只剩下一个 count 了，只会累加一次，count = 1。 如果给 setState 传入一个函数，React 不会将多个更新合并为一个处理。 1234567891011this.setState(pre =&gt; &#123; return &#123; count: pre.count + 1 &#125;&#125;)this.setState(pre =&gt; &#123; return &#123; count: pre.count + 1 &#125;&#125;) 最终 count 是 2. setState是同步的还是异步的？ setState 大部分情况下是 异步 的 调用 setState 时，组件的 state 并不会立即改变，setState 只是把要修改的状态放入到一个队列中，React 会优化真正的执行动机。 并且出于性能考虑，可能会将多次 setState 的状态修改合并成一次状态修改。 在 setTimeout 中是同步的 自己定义的 DOM 事件中，setState 是同步的 123456789// count 初始值为1，每点击一次，增加 1。&lt;button onClick=&#123;() =&gt; &#123; console.log(&#x27;count &#x27;, this.state.count) // 1 this.setState(&#123; count: this.state.count + 1&#125;, () =&gt; &#123; console.log(this.state.count) // 2 &#125;) console.log(&#x27;cout &#x27;, this.state.count) // 1&#125;&#125;&gt;add&lt;/button&gt; 在 setTimeout 中是同步的 1234567setTimeout(() =&gt; &#123; this.setState(&#123; count: this.state.count + 1 &#125;) console.log(this.state.count) // 累加了：1&#125;, 0); 自己定义的 DOM 事件中，setState 是同步的 12345678910111213componentDidMount(): void &#123; document.body.addEventListener(&#x27;click&#x27;, this.bodyClicked.bind(this))&#125;bodyClicked() &#123; console.log(this.state.count) // 0 this.setState(&#123; count: this.state.count+1 &#125;) console.log(this.state.count) // 1&#125; 看道面试题：初始值 count = 0，查看打印结果。 12345678910111213141516171819202122232425262728293031componentDidMount(): void &#123; this.setState(&#123; count: this.state.count + 1 &#125;) console.log(this.state.count) // 0 this.setState(&#123; count: this.state.count + 1 &#125;) console.log(this.state.count) // 0 setTimeout(() =&gt; &#123; this.setState(&#123; count: this.state.count + 1 &#125;) // setState 传入了对象，合并处理后只有一个 count + 1 console.log(this.state.count) // 2 &#125;, 0); setTimeout(() =&gt; &#123; this.setState(&#123; count: this.state.count + 1 &#125;) console.log(this.state.count) // 3 &#125;, 0);&#125; 问题：为何需要异步？ setState 可以多次设置，如果设置成同步，每一次 setState 都触发更新渲染，会比较 消耗性能。设置成异步，可以将需要更新的数据集中起来，一次性渲染。 而且，js 是单线程的，执行 js 过程和 DOM 渲染是互斥的，也就是说 js 执行时，DOM 的渲染是被阻塞的，DOM渲染时拿到的结果就是 js 执行完毕的结果。 假设 setState 是同步的，我们想要将 count 累加到 10，设置了 10 次 setState，因为 DOM 渲染被阻塞了，只能等待 js 执行完毕才会渲染 DOM，所以用户是看不到 count 从 1 累加到 10 的这个过程，最终 js 执行完毕，DOM 会直接渲染出 10。 Vue 渲染 DOM 也是异步的，可以通过 $nextTick 可以获取最新的数据 state 与 不可变值React采用函数式编程的不可变数据特性。 而在React中不可变值的意思就是：始终保持state的原值不变。 不要直接修改state，遇到数组或者对象，采用copy一份出去做改变。 在做性能优化时很重要。 12345this.setState(&#123; obj1: Object.assign(&#123;&#125;, this.state.obj1, &#123;a: 100&#125;), obj2: &#123;...this.state.obj2, a: 100&#125;, arr: this.state.arr.slice(),&#125;) 不可变值的目的 性能优化 在生命周期 shouldComponentUpdate 根据返回值决定是否需要重新渲染。因为父组件只要 state 或 props 更新了就会重新渲染，从而子组件也会更着渲染。 React会对新旧state和props进行比较，如果直接修改state去用于其他变量的计算，而实际上state并不需要修改，则会导致怪异的更新以及没必要的更新，因此采用这种方式是非常巧妙，且效率非常的高。 可追踪修改痕迹，便于排错 使用this.setState的方式进行修改state的值，相当于开了一个改变值的口子，所有的修改都会走这样的口子，相比于直接修改，这样的控制力更强，能够有效地记录与追踪每个state的改变，对排查bug十分有帮助。 React 事件React 元素的事件处理和 DOM 元素的很相似，但是有一点语法上的不同： React 事件的命名采用小驼峰式（camelCase），而不是纯小写。&lt;button onClick=&#123;activateLasers&#125;&gt; 不能通过返回 false 的方式阻止默认行为。你必须显式地使用 preventDefault 所有事件挂在到 document 上 React并不是将click事件绑在该div的真实DOM上，而是在document处监听所有支持的事件，当事件发生并冒泡至document处时，React将事件内容封装并交由真正的处理函数运行。 event 对象（合成事件） React event 对象是 SyntheticBaseEvent，属于合成事件，模拟 DOM 事件的所有能力 可以通过 event.nativeEvent 获取到原生事件 123e.stopPropagation() 阻止触发绑定在外层标签上的事件处理函数。e.preventDefault() 阻止少数事件的默认浏览器行为，如表单提交。 为何需要合成事件机制？ 更好的兼容性和跨平台 挂在到 document，减少内存消耗，避免频繁的事件解绑 方便事件的统一管理 组件通信 props ref（父组件获取到子组件实例） 1234567// 渲染子组件&lt;Child ref=&#123;child =&gt; &#123; console.log(&#x27;拿到 child 实例 &#x27;, child) console.log(&#x27;调用 child 上的方法 &#x27;, child?.renderChild())&#125;&#125; /&gt; callback function（父组件传递方法给子组件） 利用事件冒泡机制 1234567891011121314151617class Parent extends React.Component &#123; render() &#123; return ( &lt;div onClick=&#123;this.handleClick&#125;&gt; &lt;Child /&gt; &lt;/div&gt; ); &#125; handleClick = () =&gt; &#123; console.log(&#x27;clicked&#x27;) &#125;&#125;function Child &#123; return ( &lt;button&gt;Click&lt;/button&gt; ); &#125; 兄弟组件通信（将数据提升到父组件中） context（深层次组件通信，避免 props 层层传递） 123456789101112131415161718192021222324252627282930313233// common.tsimport React from &quot;react&quot;;export const ThemeContext = React.createContext(&#x27;light&#x27;)// App.tsxclass App extends React.Component &#123; render() &#123; return ( &lt;ThemeContext.Provider value=&quot;dark&quot;&gt; &lt;Toolbar /&gt; &lt;/ThemeContext.Provider&gt; ); &#125;&#125;function Toolbar() &#123; return ( &lt;div&gt; &lt;ThemedButton /&gt; &lt;/div&gt; );&#125;// ThemedButtonimport &#123; ThemeContext &#125; from &#x27;./common.ts&#x27;class ThemedButton extends React.Component &#123; static contextType = ThemeContext; render() &#123; return &lt;Button theme=&#123;this.context&#125; /&gt;; &#125;&#125; 如果是函数组件，则无法使用 static contextType = ThemeContext; 这种形式，我们可以通过 ThemeContext.Consumer 将函数组件包裹起来。 123&lt;ThemeContext.Consumer&gt; &lt;Child /&gt;&lt;/ThemeContext.Consumer&gt; Redux 组件通信参考文章 受控组件和非受控组件参考文章 Portals（传送门）可以将子组件渲染到父组件以外的地方去。比如常见的全局的 Modal 弹窗、全局的Message提示。 12345678import ReactDOM from &quot;react-dom&quot;;render(): React.ReactNode &#123; return ReactDOM.createPortal( &lt;&gt;Child Component&lt;/&gt;, document.body )&#125; 异步组件 import() React.lazy React.Suspense 12345678910111213import React from &#x27;react&#x27;const AsyncDemo = React.lazy(() =&gt; import(&#x27;./AsyncDemo.tsx&#x27;))...render() &#123; return &lt;&gt; &lt;React.Suspense fallback=&#123;&lt;div&gt;Loading...&lt;/div&gt;&#125;&gt; &lt;AsyncDemo /&gt; &lt;/React.Suspense&gt; &lt;/&gt;&#125;... 将大组件进行异步加载，提高用户体验。并且异步加载的组件，会被重新打一个 js 包出来。 在 Vue 中引入组件时，直接使用 import 函数导入即可实现异步加载组件。 react-router 如何配置懒加载？结合异步组件的方法使用(lazy、suspense) 1234567891011const Home = React.lazy(() =&gt; import(&#x27;./Home.tsx&#x27;))const About = React.lazy(() =&gt; import(&#x27;./About.tsx&#x27;))const App = () =&gt; ( &lt;Router&gt; &lt;Suspense fallback=&#123;&lt;div&gt;loading&lt;/div&gt;&#125;&gt; &lt;Route exact path=&quot;/&quot; component=&#123;Home&#125;&gt;&lt;/Route&gt; &lt;Route path=&quot;/about&quot; component=&#123;About&#125;&gt;&lt;/Route&gt; &lt;/Suspense&gt; &lt;/Router&gt;) 性能优化 - SCU（shouldComponentUpdate）默认返回 true 1234567shouldComponentUpdate(nextProps, nextState) &#123; // 重新渲染 if (nextState.count !== this.state.count) return true return false // 不重新渲染&#125; 为什么不可变值对 SCU 这么重要？？？ 来看个错误的例子，下面这个例子会渲染 ul &gt; li (1, 2, 3)，我们在 onPushList 中，通过 push 方法直接修改了 state.list。 然后在 shouldComponentUpdate 中，判断当前组件是否需要重新渲染。 你会发现，组件没有更新！！！ 1234567891011121314151617181920212223242526272829303132333435363738394041424344import React from &quot;react&quot;;interface IState &#123; list: Array&lt;number&gt;&#125;export default class Child extends React.Component&lt;&#123;&#125;, IState&gt; &#123; constructor(props: &#123;&#125;) &#123; super(props) this.state = &#123; list: [1, 2, 3] &#125; &#125; shouldComponentUpdate(nextProps: Readonly&lt;&#123;&#125;&gt;, nextState: Readonly&lt;IState&gt;, nextContext: any): boolean &#123; if (nextState.list === this.state.list) &#123; return false &#125; return true &#125; onPushList() &#123; // 直接修改 list this.state.list.push(4) this.setState(&#123; list: this.state.list &#125;) &#125; render(): React.ReactNode &#123; return &lt;&gt; &lt;button onClick=&#123;this.onPushList.bind(this)&#125;&gt;push list&lt;/button&gt; &lt;ul&gt; &#123; this.state.list.map(i =&gt; &lt;li key=&#123;i&#125;&gt;&#123;i&#125;&lt;/li&gt;) &#125; &lt;/ul&gt; &lt;/&gt; &#125;&#125; 为什么呢？？ 这就是因为没有遵循数据的不可变原则的原因。 我们通过 push 方法直接对 list 增加了一个数值 4，此时 this.state.list = [1, 2, 3, 4]，但是 SCU 中判断逻辑也是用的 this.state.list，它和 nextState.list 是相同的，指向地址一样，数值一样，那么 SCU 返回了 false，组件不会重新渲染！ 正确写法： 12345onPushList() &#123; this.setState(&#123; list: this.state.list.concat(4) &#125;)&#125; 性能优化 - pureComponent继承自 pureComponent 的组件，相当于在 SCU 中实现了 浅比较。 性能优化 - React.memo优化函数组件。 React.memo 包裹一个函数组件，来对它的 props 进行浅比较。等效于 PureComponent，但它只比较 props。（也可以通过第二个参数指定一个自定义的比较函数来比较新旧 props。如果函数返回 true，就会跳过更新。） 公共逻辑复用 HOC &amp; render props组件公共逻辑的抽离 mixin12345678910111213141516171819import &#123; Component &#125; from &#x27;react&#x27;// mixinconst customMixin = &#123; componentDidMount() &#123; console.log(&#x27; --- mixin componentDidMount --- &#x27;) &#125;, sayName() &#123; console.log(this.state.name) &#125;&#125;function componentClassMixins(Component, mixin)&#123; /* 继承 */ for(let key in mixin)&#123; Component.prototype[key] = mixin[key] &#125;&#125; 调用 componentClassMixins 方法，第一个参数是我们的组件，第二个参数传我们编写的 mixin HOC 高阶组件是参数为组件，返回值为新组件的函数。 当多个组件都需要某个相同的功能， 使用高阶组件可以减少重复实现。 比如有很多组件都想要获取 当前鼠标位置 的功能。 1234567891011121314151617181920212223242526272829303132333435363738394041424344import React from &quot;react&quot;;interface IState &#123; mouse: &#123; x: number y: number &#125;&#125;const withMouse = function(Comp: React.FC&lt;IState&gt;) &#123; class MouseComponent extends React.Component&lt;&#123;&#125;, IState&gt; &#123; constructor(props: &#123;&#125;) &#123; super(props) this.state = &#123; mouse: &#123; x: 0, y: 0 &#125; &#125; &#125; onMouseMove(event: React.MouseEvent) &#123; this.setState(&#123; mouse: &#123; x: event.clientX, y: event.clientY, &#125; &#125;) &#125; render() &#123; return &lt;div onMouseMove=&#123;this.onMouseMove.bind(this)&#125;&gt; &lt;Comp &#123;...this.props&#125; mouse=&#123;this.state.mouse&#125;/&gt; &lt;/div&gt; &#125; &#125; return MouseComponent&#125;export default withMouse Vue 如何实现高阶组件 Vue 进阶必学之高阶组件 HOC render props 术语 “render prop” 是指一种在 React 组件之间使用一个值为函数的 prop 共享代码的简单技术 组件接收一个 值为函数 的 prop，动态 prop。 render props 函数返回一个组件 其实 render props 和 HOC 很相像，可以随意转换。 以 HOC 中 withMouse 为例，将其改为 render props 123456789101112131415161718192021222324252627// Mouseclass Mouse extends React.Component &#123; constructor(props) &#123; super(props) this.state = &#123; x: 0, y: 0 &#125; &#125; onMouseMove(event: React.MouseEvent) &#123; this.setState(&#123; x: event.clientX, y: event.clientY, &#125;) &#125; render() &#123; return &lt;div onMouseMove=&#123;this.onMouseMove.bind(this)&#125;&gt; &#123;/* 使用 `render`prop 动态决定要渲染的内容 */&#125; &#123;this.props.render(this.state)&#125; &lt;/div&gt; &#125;&#125; App 使用 Mouse 组件，App 组件内部就可以通过 props 实时获取到 mouse 的位置了。 1234567const withMouseApp = () =&gt; &#123; return ( &lt;Mouse render=&#123; state =&gt; &lt;App mouse=&#123;state&#125; /&gt; &#125; /&gt; )&#125;export default withMouseApp render prop 一个有趣的事情是你可以使用带有 render prop 的常规组件来实现大多数高阶组件 (HOC)。 例如，如果你更喜欢使用 withMouse HOC而不是 组件，你可以使用带有 render prop 的常规 轻松创建一个。 Diff 算法每次组件的状态或属性更新，组件的 render 方法都会返回一个新的虚拟DOM，用来描述新的 UI 结构。 正常情况下，比较两个树形结构差异的算法的时间复杂度是O(N^3)，这个效率显然是无法接受的。 React 提出了两个假设，优化了树形结构差异的算法时间复杂度，O(N)： 如果两个元素的类型不用，那么它们将生成两棵不同的树。 为列表中的元素设置 key 属性，标识对应的元素在多次 render 过程中是否发生变化。 React 比较两棵树是从树的根节点开始比较的，比较规则如下： 当根节点是不同类型时，React 会认为新的树和旧的树完全不同，不再比较，直接替换掉旧的树 当根节点是相同的 DOM 元素类型时，React 会保留根节点，而比较根节点的属性，然后只更新那些变化了的属性。 虚拟 DOM 的节点类型分两种： DOM元素类型：比如 div、p.. React 组件类型：比如自定义的 React 组件。 当根节点是相同的组件类型时，对应的组件实例不会被销毁，只会执行更新操作，同步变化的属性到虚拟 DOM 树上。 比较完根节点后，React 会已同样的原则继续递归比较子节点，每一个子节点相对于其层级以下的节点来说又是一个根节点。 key当一个节点有多个子节点时，默认情况下，React 只会按照顺序逐一比较两个树上对应的节点。 比较下面两棵树，两棵树前面的两个 li 都相同，最终只会插入一个新的节点。 123456789101112&lt;ul&gt; &lt;li&gt;first&lt;/li&gt; &lt;li&gt;second&lt;/li&gt;&lt;/ul&gt;// 仅仅只是插入了一个元素&lt;ul&gt; &lt;li&gt;first&lt;/li&gt; &lt;li&gt;second&lt;/li&gt; &lt;li&gt;third&lt;/li&gt;&lt;/ul&gt; 如果 &lt;li&gt;third&lt;/li&gt; 是被插入到子节点的第一个位置，那么按照顺序比较的话，差异就大了，导致每一个节点都被修改。 引入 key 来标识节点，React 会根据 key 来匹配子节点，只要子节点的 key 值没有变化，React 就会认为这是同一个节点。 12345678910&lt;ul&gt; &lt;li key=&quot;first&quot;&gt;first&lt;/li&gt; &lt;li key=&quot;second&quot;&gt;second&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt; &lt;li key=&quot;third&quot;&gt;third&lt;/li&gt; &lt;li key=&quot;first&quot;&gt;first&lt;/li&gt; &lt;li key=&quot;second&quot;&gt;second&lt;/li&gt;&lt;/ul&gt; 有了 key 做标识，React 就在 diff 时就会知道 first 和 second 这两个元素没有发生变化，所以只会在这两个元素前面插入 third 元素。 所以 key 的使用减少了 DOM 操作，提高了 DOM 的更新效率。"},{"title":"","date":"2024-06-11T08:52:17.488Z","updated":"2024-06-11T08:52:17.488Z","comments":false,"path":"demo/2023面试准备/模块化.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/%E6%A8%A1%E5%9D%97%E5%8C%96.html","excerpt":"","text":"Module在ES6之前，社区制定了一些模块加载方案，最主要的有CommonJS和AMD两种。前者用于服务器，后者用于浏览器。 ES6在语言规格的层面上实现了模块功能，而且实现得相当简单，完全可以取代现有的CommonJS和AMD规范，成为浏览器和服务器通用的模块解决方案。 stage1 文件划分方式，约定每一个 js 文件就是一个独立的模块 12345678910&lt;script src=&quot;./lib.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;./main.js&quot;&gt;&lt;/script&gt;&lt;script&gt; // 直接使用导入文件中的变量与方法 method1() // 模块成员可以被修改 count = 2&lt;/script&gt; 缺点： 污染全局作用域 命名冲突 无法管理模块间的依赖关系 模块成员可以在外部直接修改 stage2 命名空间，减少命名冲突 每个文件中，通过一个命名对象来包裹所有的变量和方法 123456789// module a 相关的数据和方法const moduleA = &#123; name: &#x27;module a&#x27;, count: 1, incCount() &#123; this.count ++ &#125;&#125; 缺点： 污染全局作用域 无法管理模块间的依赖关系 模块成员可以在外部直接修改 stage3 IIFE（立即执行函数） 1234567891011;(function($)&#123; const name = &#x27;moduleA&#x27; let count = 1 function incCount() &#123; count++ &#125; window.moduleA = &#123; incCount &#125;&#125;)(jQuery) 通过闭包的方式，模块内部的变量只能被模块内部修改，外部无法修改。 通过 IIFE 的传参，我们可以传递一些依赖包给模块使用。 模块化规范 CommonJS（NodeJS） 一个文件就是一个模块 每个模块都有单独的作用域 通过 module.exports 导出成员 通过 require 函数加载成员 以同步的方式加载模块，如果放在浏览器中，那么会出现大量的文件请求，有时候并不是立马就需要的文件也会被加载，从而造成性能问题，不适合在浏览器中使用。 AMD（Asyncronous module definition） 异步的模块定义 12345678910111213141516171819// 定义一个模块// 第二个参数表示当前模块的依赖项define(&#x27;module1&#x27;, [&#x27;lodash&#x27;, &#x27;./module2&#x27;], function(&#x27;lodash&#x27;, &#x27;module2&#x27;) &#123; // 导出成员，外部可以方法 start 方法 return &#123; start:function() &#123; // lodash module2() &#125; &#125;&#125;) // 加载模块 require(&#x27;./module1&#x27;, function(module1) &#123; module1.start() &#125;) CMD规范（类似 CommonJS） ES Modules（浏览器） ES6 模块化12345&lt;script src=&quot;./main.js&quot; type=&quot;module&quot;&gt;&lt;/script&gt;&lt;script type=&quot;module&quot;&gt; console.log(1)&lt;/script&gt; 特性： ES6的模块自动采用严格模式，不管有没有在模块头部加上＂use strict＂。 每个 ES Module 都运行在私有作用域中 ESM 是通过 CORS(跨域) 的方式去请求外部的 JS 资源的。（原 script 标签默认支持跨域） ESM 的 script 标签会延迟执行脚本（类似标签的 defer 属性），等待网页渲染完成后，再执行。123456789// 会比有 type=&quot;module&quot; 的script 先执行&lt;script&gt; alert(&#x27;hello&#x27;)&lt;/script&gt;// 延迟执行&lt;script type=&quot;module&quot;&gt; // 等同于加了 defer 属性 console.log(1)&lt;/script&gt; 严格模式主要有以下限制： 变量必须声明后再使用。 函数的参数不能有同名属性，否则报错。 不能使用with语句。 不能对只读属性赋值，否则报错。 不能使用前缀0表示八进制数，否则报错。 不能删除不可删除的属性，否则报错。 不能删除变量(delete prop)，会报错，只能删除属性(delete global[prop])。 eval不会在其外层作用域引入变量。 eval和arguments不能被重新赋值。 arguments不会自动反映函数参数的变化。 不能使用arguments.callee。 不能使用arguments.caller。 禁止this指向全局对象。 不能使用fn.caller和fn.arguments获取函数调用的堆栈。 增加了保留字（比如protected、static和interface）。 export &amp; import模块功能主要由两个命令构成：export和import。 export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能。一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。 如果希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量。 12345678910111213// test.jsexport const myName = &#x27;Hello_AlexCC&#x27;// 组合导出const myAge = 18const sayMe = function() &#123; console.log(`my name is $&#123;myName&#125;, and I&#x27;m $&#123;myAge&#125; years old!`)&#125;export &#123; myAge, sayMe&#125; 如果在一个模块中先输入后输出同一个模块，import语句可以与export语句写在一起。 123456export &#123; sayName as default&#125; from &#x27;./someModule&#x27;// 等价于import &#123; sayName &#125; from &#x27;./someModule&#x27;export default sayName 另外，ES7有一个提案(https://github.com/leebyron/ecmascript-more-export-from)，简化先输入后输出的写法，拿掉了输出时的大括号。 12345// 提案export v from &#x27;mod&#x27;// 现在export &#123; v &#125; from &#x27;mod&#x27; import语句会执行所加载的模块 1import &#x27;lodash&#x27; 模块整体加载1import * as myModule from &#x27;./myModule&#x27; module 命令module命令可以取代import语句，达到整体输入模块的作用。 123module myModule from &#x27;./myModule&#x27;myModule.sayName() 动态加载模块返回的是 Promise 123import(&#x27;./moduleA.js&#x27;).then(module =&gt; &#123; ...&#125;) ES6模块加载的实质ES6模块加载的机制与CommonJS模块完全不同。 CommonJS模块输出的是一个值的拷贝，而ES6模块输出的是 值的引用。 1234567891011121314// lib.jsexport let count = 1export function incCount() &#123; count++&#125;// main.jsimport &#123; count, incCount &#125; from &#x27;./lib.js&#x27;console.log(count) // 1incCount()console.log(count) // 2 注意加上 type=”module” 1&lt;script src=&quot;./main.js&quot; type=&quot;module&quot;&gt;&lt;/script&gt; ES Module in NodeJS如何在 Nodejs 中使用 ES module! 有两个步骤： .js 后缀都改为 .mjs 执行脚本时，加上 node --experimental-modules main.mjs 12345// node// main.mjsimport fs from &#x27;fs&#x27;import _ from &#x27;lodash&#x27; 注意事项： 在 node 环境中，我们可以使用 ES Module 导入 CommonJS 导出的成员 123456789// commonjs.jsmodule.exports = &#123; foo: &#x27;commonjs exports foo&#x27;&#125;// esmodule.jsimport mod from &#x27;./commonjs.js&#x27;console.log(mod.foo) 在 node 环境中，CommonJS 中不能导入 ES Module 导出的成员 1const mod = require(&#x27;./esmodule.js&#x27;) // 报错 CommonJS 与 ES Module 差异1234567891011// CommonJSrequire // 加载模块函数module // 模块对象exports // 导出对象别名 exports.name = &#x27;hello world&#x27;__filename // 当前文件的绝对路径__dirname // 当前文件所在目录 12345678910// ES Moduleimport.meta.url // 文件路径信息// 可以通过内置模块 url 和 path 处理，拿到 __filename 和 __dirnameimport &#123; fileURLToPath &#125; from &#x27;url&#x27;import &#123; dirname &#125; from &#x27;path&#x27;const __filename = fileURLToPath(import.meta.url)const __dirname = dirname(__filename) 高版本 NodeJS 已支持 ESM (Version &gt; 12.10.0)不需要再写 .mjs 结尾了，直接 .js 1234567// package.json&#123; &quot;type&quot;: &quot;module&quot;&#125;// 执行node --experimental-modules main.js 加上 type module 配置之后，如果我们还想用 CommonJS 规范，发现会报错了。因为我们已经使用了 ESM。 如果继续使用 CommonJS 规范，那么就需要将 .js 改为 .cjs。 ESM in NodeJS （babel 兼容方案） yarn add @babel/node @babel/preset-env –save-dev 12// 通过 babel-node 命令执行脚本yarn babel-node main.js 要注意的是，babel/core 并不会转换我们的代码，转换代码的工作交给 babel 内置的插件去实现的。也就是说，我们需要一个插件，去转换 ES6 中的一个新特性。 而 @bable/preset-env 是插件的集合，所以不需要每个插件都安装一遍。 12// 命令行使用yarn babel-node main.js --presets=@bable/preset-env 结合 babel 配置文件使用 123456// .babelrc&#123; &quot;presets&quot;: [&quot;@babel/presets-env&quot;]&#125;yarn babel-node main.js 既然 @babel/preset-env 是插件的集合，而我不想要那么多，只是想处理 ESM 怎么办呢？ 我们卸载掉 @babel/preset-env，安装 @babel/plugin-transform-modules-commonjs 123456// .babelrc&#123; &quot;presets&quot;: [&quot;@babel/plugin-transform-modules-commonjs&quot;]&#125;yarn babel-node main.js babel 编译器 主要用于将ES6版本的JS代码转换为ES5等向后兼容的JS代码，从而使代码可以运行在低版本浏览器或其他环境中。 npm install –save-dev babel-core babel-preset-es2015 babel-preset-latest –registry=https://registry.npm.taobao.org 配置文件 .babelrc（或者 babel.config.js || .babelrc.js） 1234&#123; &quot;presets&quot;: [&quot;es2015&quot;, &quot;latest&quot;], // 安装包的别名，用来处理最新的 ES6 语法 &quot;plugins&quot;: []&#125; 安装 babel-cli，命令行编译工具，依赖 babel/core 1npm install --save-dev babel-cli 查看 babel 版本（npx 是新版 NodeJS 附带的命令） 123npx babel --version // ===== node_modules/.bin/babel --version // ====&gt; 6.26.0 (babel-core 6.26.3) 到这里，我们就可以使用 babel 来编译js 文件了。创建一个 babel.js 文件，写入一些 es6 的语法。 1234567// babel.jsconst foo = () =&gt; &#123; return 3 * 3&#125;const count = 123 打开命令行工具： 1npx babel babel.js -o compiled.js // 等效 node_modules/.bin/babel babel.js -o compiled.js 转化后的结果： 1234567&quot;use strict&quot;;var foo = function foo() &#123; return 3 * 3;&#125;;var count = 123; PolyfillBabel默认只转换新的JS语法（syntax），而不转换新的API（Promise、Map）。如果只是做语法转换，Promise 是不会被降级的，在低版本的浏览器中可能无法使用。 引入 Polyfill，为当前环境提供一个“垫片”。所谓“垫片”，是指垫平不同浏览器之间差异的东西。polyfill提供了全局的ES6对象及通过修改原型链Array.prototype等来补充对实例的实现。 babel 版本Babel版本主要是Babel 6和Babel 7这两个版本。 提到Babel版本的时候，通常指的是@babel/core这个Babel核心包的版本。 Babel 7的npm包都存放在babel域下，即在安装npm包的时候，我们安装的是名称以@babel/开头的npm包，如@babel/cli、@babel/core等。而在Babel 6中，我们安装的包名是babel-cli、babel-core等以babel-开头的npm包。其实它们本质上是一样的，都是Babel官方提供的cli命令行工具和core核心包。在平时开发和学习的过程中，碰到@babel/和babel-时应该认识到它俩是作用相同、内容接近的包，只是版本不一样而已。 babel 配置文件 指定编译的规则。 1.babelrc || babel.config.js || .babelrc.js || package.json（配置 babel 属性，配置项都是 一样的） 123456789101112// package.json&#123; ... babel: &#123; &quot;presets&quot;: [&quot;es2015&quot;, &quot;react&quot;], &quot;plugin&quot;: [&quot;transform-class-properties&quot;] &#125;, ...&#125; 推荐使用后缀名是js的配置文件来进行配置，因为可以使用该文件做一些逻辑处理，适用性更强。 插件 &amp; 预设plugin代表插件，preset代表预设。通常每个插件或预设都是一个npm包。 Babel的插件实在太多了，假如只配置插件数组，那我们前端工程要把ES2015、ES2016、ES2017……下的所有插件都写到配置项里，这样的Babel配置文件会非常臃肿。 preset预设就是帮我们解决这个问题的。预设是一组Babel插件的集合，通俗的说法就是插件包，例如babel-preset-es2015就是所有处理ES2015的二十多个Babel插件的集合。这样我们就不用写一大堆插件配置项了，只需要用一个预设代替就可以。另外，预设也可以是插件和其他预设的集合。 Babel官方已经针对常用的环境做了如下这些preset包。 1）@babel/preset-env. 2）@babel/preset-react. 3）@babel/preset-typescript. 4）@babel/preset-stage-0. 5）@babel/preset-stage-1. 插件与预设的简称如果插件的npm包名称的前缀为babel-plugin-，则可以省略其前缀。 如果npm包名称的前缀带有npm作用域@，如@org/babel-plugin-xxx，则短名称可以写成@org/xxx。 123456789&#123; &quot;plugins&quot;: [&quot;babel-plugin-transform-decorators-legacy&quot;]&#125;// =====&#123; &quot;plugins&quot;: [&quot;transform-decorators-legacy&quot;]&#125; 预设的短名称规则与插件的类似，预设npm包名称的前缀为babel-preset-或作用域@xxx/babel-preset-xxx的可以省略掉babel-preset-。 插件和预设执行顺序plugins插件数组和presets预设数组是有顺序要求的。如果两个插件或预设都要处理同一个代码片段，那么会根据插件和预设的顺序来执行。规则如下: 1）插件比预设先执行。 2）插件执行顺序是插件数组元素从前向后依次执行。 3）预设执行顺序是预设数组元素从后向前依次执行。 预设的选择babel-preset-latest，在Babel 6时期，是所有年代preset的集合，在Babel 6最后一个版本中，它是babel-preset-es2015、babel-preset-es2016、babel-preset-es2017的集合。 @babel/preset-env包含了babel-preset-latest的功能，并对其进行了增强，现在@babel/preset-env完全可以替代babel-preset-latest。 Babel 6 中是babel-preset-env，Babel 7版本开始，@babel/preset-env。 123456789101112131415// babel 6npm install babel-preset-env --save-dev// .babelrc&#123; &quot;presets&quot;: [&quot;env&quot;]&#125;// babel 7npm install @babel/preset-env --save-dev// .babelrc&#123; &quot;presets&quot;: [&quot;@babel/env&quot;]&#125; 总结起来，Babel官方提供的预设，我们实际会用到的其实就只有四个。 1）@babel/preset-env. 2）@babel/preset-flow. 3）@babel/preset-react. 4）@babel/preset-typescript. 插件的选择Babel 7 官方有九十多个插件，不过其中大多数都已经整合在@babel/preset-env和@babel/preset-react等预设里了，我们在开发的时候直接使用预设就可以。 目前比较常用的插件只有@babel/plugin-transform-runtime。 browserslist在 package.json 中经常遇到这个配置项： 12345678// package.json&#123; &quot;browserslist&quot;: [ &quot;&gt; 1%&quot;, &quot;not ie &lt;= 8&quot; ]&#125; 上面配置的含义是，该项目工程的目标环境是市场份额大于1%的浏览器并且不考虑IE 8及以下的IE浏览器。 browserslist叫作目标环境配置表，除了写在package.json文件里，也可以单独写在工程目录下的.browserslistrc文件里。 我们写一个含有箭头函数的 js 文件，如果我们在browserslist里指定目标环境是Chrome 60浏览器，再来看一下转换结果: 1234// package.json&#123; &quot;browserslist&quot;: [&quot;chrome 60&quot;]&#125; 我们发现转换后的代码仍然是箭头函数，因为Chrome 60浏览器已经实现了箭头函数语法，所以不会转换成ES5的函数定义语法。 @babel/runtime我们写个 js 文件，里面包含 es6 的 class 语法: 12345class Person &#123; sayName() &#123; alert(this.name) &#125;&#125; 然后执行 babel 命令，查看转换后的结果 npx babel babel.js -o compiled.js 1234567891011121314151617181920&quot;use strict&quot;;var _createClass = function () &#123; function defineProperties(target, props) &#123; for (var i = 0; i &lt; props.length; i++) &#123; var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (&quot;value&quot; in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); &#125; &#125; return function (Constructor, protoProps, staticProps) &#123; if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; &#125;; &#125;();function _classCallCheck(instance, Constructor) &#123; if (!(instance instanceof Constructor)) &#123; throw new TypeError(&quot;Cannot call a class as a function&quot;); &#125; &#125;var Person = function () &#123; function Person() &#123; _classCallCheck(this, Person); &#125; _createClass(Person, [&#123; key: &quot;sayName&quot;, value: function sayName() &#123; alert(this.name); &#125; &#125;]); return Person;&#125;(); 可以看到，转换后的代码上部增加了好几个函数声明，这些函数是Babel转码时注入的，我们称之为辅助函数。@babel/preset-env在做语法转换的时候，注入了这些函数声明，以便语法转换后使用。 但这样做存在一个问题。在我们正常地进行前端工程开发的时候，少则有几十个JS文件，多则有上千个。如果每个文件里都使用了class类语法，那么会导致每个转换后的代码上部都会注入这些相同的函数声明。这会导致我们用构建工具打包出来的包体积非常大。 那么应该怎么办呢？一个思路就是，我们把这些函数声明都放在一个npm包里，需要使用的时候直接从这个包里引入我们的文件。这样即使有上千个文件，也会从相同的包里引入这些函数。使用Webpack这一类的构建工具进行打包时，我们只需要引入一次npm包里的函数，这样就做到了复用，减小了包的体积。 @babel/runtime 就是上面说的这个npm包，@babel/runtime把所有语法转换会用到的辅助函数都集中在了一起。 12345// babbel 6npm install babel-runtime --save-dev // /node_modules/babel-runtime/helpers/createClass.js// babel 7npm install @babel/runtime@7.12.5 --save-dev 然后到node_modules目录下看一下这个包的结构，找到 _classCallCheck、_defineProperties与_createClass这三个辅助函数的位置，我们直接引入即可。 这时，我们就可以替换转换后自动创建的方法，而是使用 @babel/runtime/helpers 中已有的方法。 不过，这么多辅助函数要一个个记住并手动引入，是很难做到的。这时Babel插件 @babel/plugin-transform-runtime 就可以用来帮我们解决这个问题。 @babel/plugin-transform-runtime辅助函数的自动引入。 @babel/plugin-transform-runtime有三大作用，其中之一就是自动移除语法转换后内联的辅助函数（inline Babel helpers），而是使用@babel/runtime/helpers里的辅助函数来替代，这样就减少了我们手动引入的麻烦。 12345// babel6npm install babel-plugin-transform-runtime --save-dev// babel 7npm install @babel/plugin-transform-runtime@7.12.10 --save-dev 123&#123; &quot;plugins&quot;: [&quot;@babel/plugin-transform-runtime&quot;] // babel 6: &quot;babel-plugin-transform-runtime&quot;&#125; 还是上面的例子，我们再看看转换后的结果，会发现插件已经自动帮我们处理了。 12345678910111213141516171819202122232425&quot;use strict&quot;;var _classCallCheck2 = require(&quot;babel-runtime/helpers/classCallCheck&quot;);var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);var _createClass2 = require(&quot;babel-runtime/helpers/createClass&quot;);var _createClass3 = _interopRequireDefault(_createClass2);function _interopRequireDefault(obj) &#123; return obj &amp;&amp; obj.__esModule ? obj : &#123; default: obj &#125;; &#125;var Person = function () &#123; function Person() &#123; (0, _classCallCheck3.default)(this, Person); &#125; (0, _createClass3.default)(Person, [&#123; key: &quot;sayName&quot;, value: function sayName() &#123; alert(this.name); &#125; &#125;]); return Person;&#125;(); 实际进行前端开发时，我们除了安装@babel/runtime包，基本也会安装@babel/plugin-transform-runtime这个Babel插件。 Babel 原理与插件开发Babel的转码过程主要由三个阶段组成：解析（parse）、转换（transform）和生成（generate）。这三个阶段分别由@babel/parser、@babel/core和@babel/generator来完成。 解析阶段 该阶段由Babel读取源码并生成抽象语法树（AST），该阶段由两部分组成：词法分析与语法分析。 词法分析会将字符串形式的代码转换成tokens流，语法分析会将tokens流转换成AST。 1const name = &quot;hello AlexCc&quot; AST 1234567891011121314-#1 type: VariableDeclaration declarations #1 type: VariableDeclarator id type: Identifier name: name init type: Literal value: hello AlexCc raw: &quot;hello AlexCc&quot; kind: const 转换阶段 完成了解析工作，生成了AST，AST是一个树状的JSON结构。接下来就可以通过Babel插件对该树状结构执行修改操作，修改完成后就得到了新的AST。 生成阶段 通过转换阶段的工作，我们得到了新的AST。在生成阶段，我们对AST的树状JSON结构进行还原操作，生成新的JS代码，通常这就是我们需要的ES5代码。 Babel 插件开发 babel-handbook https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md 开发Babel转码插件的重点是在第二阶段（转换阶段），在这一阶段我们要从AST上找出需要转换的节点，改成我们需要的形式，最后在生成阶段把AST变回JS代码。 插件模板结构: 123456module.exports = function(&#123; types: t &#125;) &#123; return &#123; name: &#x27;pluginName&#x27;, visitor: &#123;&#125; &#125;&#125; 假设我们有这样一段代码： 1const dog = &#x27;is dog&#x27; 现在我想将 dog 变成喵咪。 12345678910111213module.exports = function(&#123; types: t &#125;) &#123; return &#123; visitor: &#123; Identifier(path, state) &#123; if (path.node.name === &#x27;dog&#x27;) &#123; path.node.name = &#x27;cat&#x27; path.parent.init.value = &#x27;is cat&#x27; &#125; &#125;, var &#125; &#125;&#125; 转换后： 1const cat = &#x27;is cat&#x27;; 我们编写Babel插件的主要工作就是修改visitor对象，该对象是遍历AST各个节点的方法。 在上面的插件里，要把变量名dog修改为cat，于是我们修改了visitor.Identifier方法，那我们如何知道要修改的是Identifier方法呢？ Babel原理里讲过Babel转码的三个阶段：解析阶段、转换阶段和生成阶段，我们编写的Babel插件实际上是在执行第二个阶段（转换阶段）的工作，该工作需要前一个阶段解析工作先完成。在解析阶段，我们得到了转码前代码的AST树状结构信息，该AST上会有Identifier等节点信息，我们编写插件的时候参考该AST的信息即可。 接着看Identifier方法，可以看到它有两个参数path和state，visitor中的每个方法都接收这两个参数，path代表路径。最后我们判断path上节点信息name是不是dog，是的话把它修改为cat即可。 同理，我们也可以修改 const、value： 12345678910111213141516171819module.exports = function(&#123; types: t &#125;) &#123; return &#123; visitor: &#123; Identifier(path, state) &#123; path.node.name = &#x27;cat&#x27; path.parent.init.value = &#x27;is cat&#x27; &#125;, VariableDeclaration(path, state) &#123; if (path.node.kind === &#x27;const&#x27;) &#123; path.node.kind = &#x27;let&#x27; &#125; &#125;, Literal(path, state) &#123; // 修改 value path.node.value = &#x27;is caaat...&#x27; &#125; &#125; &#125;&#125; 插件传参给插件传递参数，注意第一个成员变成了数组，数组的第二项是参数 123456// .babelrc&#123; &quot;plugins&quot;: [[&quot;./plugin.js&quot;, &#123; &quot;ES5&quot;: false &#125;]]&#125; 在插件中，我们可以通过 state.opts 获取到参数： 123456789// plugin.js...VariableDeclaration(path, state) &#123; if (state.opts.ES5 === true &amp;&amp; [&#x27;let&#x27;, &#x27;const&#x27;].includes(path.node.kind)) &#123; path.node.kind = &#x27;var&#x27; &#125;&#125;,..."},{"title":"","date":"2024-06-11T08:52:17.489Z","updated":"2024-06-11T08:52:17.489Z","comments":false,"path":"demo/2023面试准备/浏览器底层原理.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86.html","excerpt":"","text":"世界上第一个浏览器是什么？世界上第一个浏览器是由蒂姆·伯纳斯-李（Tim Berners-Lee）在1990年开发的，它被称为WorldWideWeb（万维网）或简称为WWW。这个浏览器最初是为了在CERN（欧洲核子研究组织）内部共享和浏览文档而创建的。 WorldWideWeb浏览器是基于NeXTSTEP操作系统开发的，它提供了一种简单的方式来浏览和导航互联网上的超文本文档。它支持通过URL链接访问不同的文档，并使用超文本标记语言（HTML）来描述和呈现文档内容。 蒂姆·伯纳斯-李还发明了URL（统一资源定位符）、HTML（超文本标记语言）和HTTP（超文本传输协议），这些技术共同奠定了现代互联网的基础。 尽管WorldWideWeb浏览器在当时是一种先驱，但它为后来的浏览器发展奠定了基础，并成为了今天我们所熟知的互联网浏览器的起点。 浏览器发展史 1990：WorldWideWeb（万维网）或简称为WWW 1993：Mosaic 诞生，也就是后面大名鼎鼎的网景浏览器（Netscape） 1995：微软推出 IE（第一次浏览器大战正式打响） 2003 苹果公司推出 Safari，并于 2005年发起开源项目 Webkit 2004 年 Firefox 1.0 发布（网景公司主导开发），拉开了第二次浏览器大战的序幕 2008年 Google 公司以 webkit 作为内核，创建了一个新的项目 Chromium，在其基础上，发布了 Chrome 浏览器 （Chromium本身就是一个浏览器，而不是 Chrome 浏览器的内核，Chrome 浏览器一般选择 Chromium 的稳定版本作为它的基础） 浏览器核心组成 外壳（用户界面） 持久化存储器（磁盘，记忆功能） 浏览器引擎 js 引擎 css 引擎 c++ 绘制模块 网络 … 浏览器内核分类 浏览器内核。通常，它也被称为渲染引擎。 浏览器的渲染引擎就是能够将HTML/CSS/JavaScript文本及其相应的资源文件转换成图像结果的模块 IE: Trident Firefox: Gecko Chrome: webkit，现在是 blink 内核 Safari: webkit opera: webkit，现在是 blink 内核 WebKit：最初由苹果公司开发，用于Safari浏览器。它也被其他浏览器采用和修改，如Google Chrome（基于Blink）和Opera。 Blink：2013年，Google宣布了Blink内核，它其实是从WebKit复制出去的。渲染引擎 Blink 最初是基于WebKit，后来独立出来。目前主要用于Google Chrome、Opera和其他一些基于Chromium的浏览器。 Gecko：由Mozilla开发的渲染引擎，用于Firefox浏览器。 Trident：由Microsoft开发的渲染引擎，曾用于Internet Explorer浏览器。 EdgeHTML：由Microsoft开发的渲染引擎，用于旧版Microsoft Edge浏览器。然而，自2020年起，Microsoft Edge已经切换到基于Chromium的Blink引擎。 Presto：由Opera Software开发的渲染引擎，曾用于旧版Opera浏览器。 WebKit 是什么？WebKit是一个开源的浏览器引擎，最初由苹果公司开发，并用于其Safari浏览器。它是一个负责解析HTML、CSS和JavaScript的核心组件，实现了浏览器的渲染功能。 WebKit具有高度模块化的架构，包括多个子模块，如HTML解析器、CSS解析器、JavaScript引擎等。它负责将网页的原始代码转换为可视化的内容，以供用户在浏览器中查看和与之交互。 由于WebKit的开源性质，它不仅被苹果用于Safari浏览器，还被其他浏览器采用和修改。其中最著名的例子是Google Chrome浏览器，它使用了基于WebKit的渲染引擎Blink。 WebKit嵌入式接口 是指的狭义WebKit，它指的是在WebCore（包含HTML解释器、CSS解释器和布局等模块）和 JavaScript引擎 之上的一层绑定和嵌入式编程接口，可以被各种浏览器调用。(目前DOM和JavaScript引擎是分开的，这意味着JavaScript引擎访问DOM树需要较高的代价) 渲染引擎主要包含哪些功能模块？ html 解释器：将HTML文本解释成DOM（文档对象模型）树 css 解释器：级联样式表的解释器，它的作用是为DOM中的各个元素对象计算出样式信息 layout （布局）：在DOM Tree 和 CSSOM tree 创建之后，Webkit需要将其中的元素对象同样式信息结合起来，计算它们的大小位置等布局信息，形成一个能够表示这所有信息的内部表示模型。 计算布局的主要目的是确定页面中每个元素的几何属性，如大小、位置、边距等，并创建一个准确的布局流（Layout Flow）。计算布局是为了最终在屏幕上正确呈现和定位每个元素，以及保持它们之间的关系和相互作用。 js 引擎：JavaScript引擎能够解释JavaScript代码并通过DOM接口和CSSOM接口来修改网页内容和样式信息，从而改变渲染的结果 绘图：使用图形库将布局计算后的各个网页的节点绘制成图像结果 渲染引擎的功能模块如何协同工作的？url 请求到了网页内容 拿到 html 文本（字符串）后输入到HTML解释器，HTML解释器在解释它后构建成一棵 DOM树 这期间如果遇到JavaScript代码则交给JavaScript引擎去处理 如果网页中包含CSS，则交给CSS解释器去解释，形成 CSSOM Tree 当 DOM Tree 和 CSSOM Tree 都构建完后，渲染引擎调用 布局模块(layout) 计算模型内部各个元素的位置和大小信息，形成 render tree。（也称为回流（Reflow）或排版（Layout）过程。） 绘制模块 负责将渲染树中的每个元素转换为实际的像素。它会根据元素的样式属性，如颜色、背景、边框等，以及元素的几何属性，如位置、大小等，将元素绘制成位图或矢量图形。绘制过程包括填充像素颜色、边框描边、渐变填充、阴影效果等。 绘图这一环节是由计算机的图形处理单元（Graphics Processing Unit，GPU）完成的。 GPU 是与 CPU 并行工作的独立处理器，其主要设计目标是提供高效的图形渲染和处理能力。 合成模块负责将绘制好的图像元素按照正确的顺序合成到屏幕上。它将渲染树中的各个元素按照层叠关系进行合成，处理透明度、混合模式等效果，以及处理层级关系、裁剪等操作。 最终，合成模块将合成的图像发送给操作系统，以显示在屏幕上。 合并 render tree 的过程浏览器将 DOM 树和 CSSOM 树合并成渲染树（Render Tree）的过程是由渲染引擎中的布局（Layout）模块完成的，也称为回流（Reflow）或排版（Layout）过程。 渲染引擎中的布局模块负责确定页面上每个元素的大小、位置和几何属性。它会遍历渲染树，并计算每个元素在视口中的确切位置和大小，考虑盒模型、浮动、定位、文本流等因素，以及应用 CSS 属性对元素的影响。 在合并渲染树的过程中，布局模块会执行以下操作： 从根节点开始遍历（深度优先遍历）渲染树。 对每个可见的元素，根据其样式和盒模型属性计算其几何属性（如宽度、高度、位置等）。 考虑元素之间的关系（如浮动、定位、文本流等），计算它们在视口中的精确位置。 创建布局流（Layout Flow）来确保元素按正确的顺序绘制在屏幕上。 Webkit 渲染过程分为三个过程： 从网页的 URL 到构建 DOM 树 从DOM树到构建完WebKit的绘图上下文 从绘图上下文到生成最终的图像 js 代码的执行为什么会阻塞 DOM树和 CSSOM tree 的构建呢？JavaScript 代码执行会阻塞 DOM 树（文档对象模型）和 CSSOM 树（CSS 对象模型）的构建，这是因为浏览器的渲染引擎在解析 HTML、CSS 和执行 JavaScript 时是按顺序执行的。 当浏览器解析 HTML 代码时，遇到 &lt;script&gt; 标签时会立即加载并执行其中的 JavaScript 代码。如果 JavaScript 代码需要访问或修改 DOM 元素，它需要在构建完成的 DOM 树上进行操作。因此，浏览器会阻塞 DOM 树的构建，直到 JavaScript 代码执行完毕。 类似地，如果 JavaScript 代码需要访问或修改 CSS 样式信息，它需要在构建完成的 CSSOM 树上进行操作。因此，浏览器会阻塞 CSSOM 树的构建，直到 JavaScript 代码执行完毕。 这种阻塞行为会导致页面加载和渲染的延迟，特别是在 JavaScript 代码较大或执行时间较长时。因此，在开发过程中，我们需要注意优化 JavaScript 代码，以减少其对 DOM 和 CSSOM 构建的阻塞影响。 有几种方式可以减轻 JavaScript 对 DOM 和 CSSOM 构建的阻塞效应： 异步加载 JavaScript：将 JavaScript 代码放置在 &lt;script&gt; 标签中的 async 或 defer 属性中。这样可以使 JavaScript 代码异步加载，不会阻塞 DOM 和 CSSOM 的构建，从而提高页面加载性能。(当 &lt;script&gt; 标签添加了 defer 属性后，JavaScript 代码将在 HTML 解析完毕后执行，但在 DOMContentLoaded 事件之前执行。) 放置 JavaScript 代码的位置：将 JavaScript 代码放置在页面底部，或使用延迟加载，以使其在 DOM 和 CSSOM 构建完成后执行。 代码优化：优化 JavaScript 代码，减少不必要的计算和操作，以提高执行效率。可以使用工具进行代码压缩和合并，减小文件大小，从而减少下载和执行时间。 Web Workers：使用 Web Workers 可以将耗时的 JavaScript 代码放在后台线程中执行，以避免阻塞主线程，从而提高页面的响应性能。 需要注意的是，尽管 JavaScript 代码的执行会阻塞 DOM 树和 CSSOM 树的构建，但它不会阻塞其他资源的加载，如图片、样式表和字体文件等。浏览器会并行加载这些资源，以提高页面加载的效率。 异步任务不会阻塞 DOM 树和 CSSOM树的构建异步任务如 setTimeout 和 Promise 的回调函数会在构建完 DOM 树和 CSSOM 树之后执行。 当浏览器遇到 setTimeout 或 Promise 等异步操作时，它会将相应的回调函数添加到任务队列中，等待执行。这些回调函数属于宏任务或微任务，具体取决于异步操作的类型。 一旦浏览器完成构建 DOM 树和 CSSOM 树的过程，会检查是否存在微任务队列。如果存在微任务，浏览器会优先执行微任务队列中的任务，然后再执行宏任务队列中的任务。这样可以确保微任务优先于下一个渲染步骤执行，保证页面更新的即时性。 输入 URL 到显示整个页面当你在浏览器中输入一个 URL 并按下回车键后，会发生以下一系列步骤，以加载并显示整个页面： URL 解析：浏览器首先解析输入的 URL，提取出协议（如 HTTP、HTTPS）、主机名（如 www.example.com）和路径等信息。 DNS 解析：浏览器将主机名发送给 DNS（域名系统）服务器，以获取主机名对应的 IP 地址。这是为了建立与目标服务器的网络连接。 建立网络连接：使用获取到的 IP 地址，浏览器与目标服务器建立 TCP 连接。这是通过三次握手（SYN、SYN-ACK、ACK）实现的。 发送 HTTP 请求：一旦建立了 TCP 连接，浏览器会发送一个 HTTP 请求到目标服务器，该请求包括请求行、请求头和请求体。请求行中包含了请求的方法（如 GET、POST）、路径和 HTTP 版本。 服务器处理请求：目标服务器接收到浏览器发送的 HTTP 请求后，会进行相应的处理。这可能涉及到服务器端的应用程序、数据库查询等操作。 返回 HTTP 响应：服务器处理完请求后，会生成一个 HTTP 响应，包括响应行、响应头和响应体。响应行中包含了状态码（如 200 OK、404 Not Found）和 HTTP 版本。 接收响应：浏览器接收到服务器发送的 HTTP 响应后，开始接收响应的数据。 解析 HTML：一旦浏览器接收到响应的数据，它会根据响应头中的内容类型（通常为 text/html）确定响应主体中的数据是 HTML。然后，浏览器会解析 HTML，构建 DOM 树。 解析 CSS：在解析 HTML 的过程中，如果遇到外部 CSS 样式表或内联样式（&lt;style&gt; 标签），浏览器会同时解析 CSS，并构建 CSSOM 树。 渲染页面：基于构建好的 DOM 树和 CSSOM 树，浏览器开始渲染页面，并确定每个元素在屏幕上的位置和外观。 下载其他资源：在渲染页面的过程中，浏览器会发现页面中引用的其他资源，如图片、脚本文件、样式表等。它会并行下载这些资源，以便后续使用。 执行 JavaScript：如果页面中存在 JavaScript 代码（内联或外部脚本文件），浏览器会执行这些代码。执行过程中可能会产生异步任务，如定时器、事件回调等。 页面加载完成：当所有资源都被下载、解析和执行完毕，并且 DOM 树和 CSSOM 树构建完成后，页面加载完成。 HTML解释器 解释过程HTML解释器的工作就是将网络或者本地磁盘获取的HTML网页和资源从字节流解释成DOM树结构。 简单描述如下： 首先是字节流（资源管理器请求过来），经过解码之后是字符流，然后通过词法分析器会被解释成 词法单元(Tokens)，之后经过语法分析器构建成节点，最后这些节点被组建成一棵DOM树。 HTML解释器的解释过程可以分为以下几个步骤： 词法分析（Lexical Analysis）：HTML解释器首先进行词法分析，将HTML代码分解为一系列的词法单元（Tokens）。词法单元包括标签、属性、文本等，每个词法单元都具有特定的含义和类型。 语法分析（Syntax Analysis）：在语法分析阶段，解释器根据HTML的语法规则，将词法单元组织成一个语法树（Syntax Tree）。语法树反映了HTML文档的结构和层次关系，它由一系列的语法节点构成。 构建DOM树（DOM Construction）：在构建DOM树的过程中，解释器遍历语法树的节点，并根据节点的类型和属性信息，创建相应的DOM节点对象。DOM节点包括元素节点、文本节点、注释节点等。节点之间通过父子关系、兄弟关系等链接在一起，形成了完整的DOM树。 解析过程中的其他操作：在解析过程中，解释器还会进行其他操作，如处理样式表、执行脚本、处理特殊标记等。这些操作可能会触发CSS解析、脚本执行等相关的过程。 总体而言，HTML解释器通过词法分析、语法分析和DOM构建等步骤，将HTML代码解析为DOM树的结构。解析过程中，解释器会根据HTML的语法规则和标签嵌套关系，逐步构建DOM树的结构，使其能够准确地表示HTML文档的内容和结构。 12345678910&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Example&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1 class=&quot;heading&quot;&gt;Hello, world!&lt;/h1&gt; &lt;p&gt;This is a paragraph.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 经过词法分析转换后： 1234567891011121314151617Token: Doctype (&quot;&lt;!DOCTYPE html&gt;&quot;) // Doctype 代表文档类型声明Token: StartTag (&quot;&lt;html&gt;&quot;) // StartTag 开始标签Token: StartTag (&quot;&lt;head&gt;&quot;)Token: StartTag (&quot;&lt;title&gt;&quot;)Token: TextNode (&quot;Example&quot;) // TextNode 文本节点词法单元Token: EndTag (&quot;&lt;/title&gt;&quot;) // EndTag 结束标签Token: EndTag (&quot;&lt;/head&gt;&quot;)Token: StartTag (&quot;&lt;body&gt;&quot;)Token: StartTag (&quot;&lt;h1&gt;&quot;)Token: Attribute (&quot;class&quot;, &quot;heading&quot;) // Attribute 属性Token: TextNode (&quot;Hello, world!&quot;)Token: EndTag (&quot;&lt;/h1&gt;&quot;)Token: StartTag (&quot;&lt;p&gt;&quot;)Token: TextNode (&quot;This is a paragraph.&quot;)Token: EndTag (&quot;&lt;/p&gt;&quot;)Token: EndTag (&quot;&lt;/body&gt;&quot;)Token: EndTag (&quot;&lt;/html&gt;&quot;) 有了 Tokens，这个时候就需要 语法分析 将词法单元组织成一个 语法树: 12345678910DocumentNode└─ ElementNode (&quot;html&quot;) ├─ ElementNode (&quot;head&quot;) │ └─ ElementNode (&quot;title&quot;) │ └─ TextNode (&quot;Example&quot;) └─ ElementNode (&quot;body&quot;) ├─ ElementNode (&quot;h1&quot;) │ └─ TextNode (&quot;Hello, world!&quot;) └─ ElementNode (&quot;p&quot;) └─ TextNode (&quot;This is a paragraph.&quot;) 根节点是一个特殊的节点，通常称为DocumentNode，代表整个HTML文档。在它下面是ElementNode节点，代表HTML中的元素标签。而TextNode节点代表文本内容。 在语法树中，每个节点都代表一个语法单元，包括元素节点、文本节点等。节点之间通过父子关系、兄弟关系等链接在一起，反映了HTML文档的结构和层次关系。 DOM树12345678910&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Example&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Hello, world!&lt;/h1&gt; &lt;p&gt;This is a paragraph.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 通过 HTML Parser 转换后，形成 DOM Tree: 12345678910Document (root)└── html ├── head │ └── title │ └── TextNode: &quot;Example&quot; └── body ├── h1 │ └── TextNode: &quot;Hello, world!&quot; └── p └── TextNode: &quot;This is a paragraph.&quot; 解析过程： 解析器读取HTML代码，开始解析。 遇到&lt;!DOCTYPE html&gt;声明，确定文档类型为HTML。 遇到&lt;html&gt;标签，创建一个Document节点作为DOM树的根节点，并将其添加到DOM树中。 遇到&lt;head&gt;标签，创建一个head节点，并将其作为html节点的子节点。 遇到&lt;title&gt;标签，创建一个title节点，并将其作为head节点的子节点。 遇到&lt;body&gt;标签，创建一个body节点，并将其作为html节点的子节点。 遇到&lt;h1&gt;标签，创建一个h1节点，并将其作为body节点的子节点。 遇到文本节点”Hello, world!”，将其作为h1节点的子节点。 遇到&lt;p&gt;标签，创建一个p节点，并将其作为body节点的子节点。 遇到文本节点”This is a paragraph.”，将其作为p节点的子节点。 解析完毕，生成了一个完整的DOM树。 解析器会根据HTML的语法规则和标签嵌套关系，逐步构建DOM树的结构。每个标签会被解析成一个DOM节点，文本内容会被解析成文本节点。DOM树的结构反映了HTML文档的层次结构和标签之间的嵌套关系。 通过解析器解析HTML代码，浏览器可以理解和处理HTML文档，然后根据DOM树的结构进行进一步的处理，如样式计算、布局和渲染，最终将网页内容展示给用户。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&#123; &quot;nodeType&quot;: 9, &quot;nodeName&quot;: &quot;#document&quot;, &quot;childNodes&quot;: [ &#123; &quot;nodeType&quot;: 1, &quot;nodeName&quot;: &quot;html&quot;, &quot;childNodes&quot;: [ &#123; &quot;nodeType&quot;: 1, &quot;nodeName&quot;: &quot;head&quot;, &quot;childNodes&quot;: [ &#123; &quot;nodeType&quot;: 1, &quot;nodeName&quot;: &quot;title&quot;, &quot;childNodes&quot;: [ &#123; &quot;nodeType&quot;: 3, &quot;nodeName&quot;: &quot;#text&quot;, &quot;nodeValue&quot;: &quot;Example&quot; &#125; ] &#125; ] &#125;, &#123; &quot;nodeType&quot;: 1, &quot;nodeName&quot;: &quot;body&quot;, &quot;childNodes&quot;: [ &#123; &quot;nodeType&quot;: 1, &quot;nodeName&quot;: &quot;h1&quot;, &quot;childNodes&quot;: [ &#123; &quot;nodeType&quot;: 3, &quot;nodeName&quot;: &quot;#text&quot;, &quot;nodeValue&quot;: &quot;Hello, world!&quot; &#125; ] &#125;, &#123; &quot;nodeType&quot;: 1, &quot;nodeName&quot;: &quot;p&quot;, &quot;childNodes&quot;: [ &#123; &quot;nodeType&quot;: 3, &quot;nodeName&quot;: &quot;#text&quot;, &quot;nodeValue&quot;: &quot;This is a paragraph.&quot; &#125; ] &#125; ] &#125; ] &#125; ]&#125; 在这个对象表示中，每个节点都是一个JavaScript对象，具有相应的属性。常见的属性包括： nodeType：表示节点类型，使用数字表示，例如1表示元素节点，3表示文本节点。 nodeName：表示节点名称，对于元素节点是标签名，对于文本节点是”#text”。 nodeValue：表示节点的值，对于文本节点是文本内容。 childNodes：表示子节点的列表，是一个包含子节点对象的数组。 通过这样的对象表示，我们可以遍历和操作DOM树的各个节点，访问节点的属性和内容，进行节点的增删改查等操作。 html、css 和 JS 之间的阻塞问题外链 CSS 的加载是否会阻塞 JavaScript 执行？CSS资源还未下载完成，浏览器解析会根据标签的顺序来解析 如果JavaScript代码位于标签中，且位于link标签之前，会立即执行这段脚本 然后在CSS资源下载的过程中，浏览器会暂停HTML解析和后面的JavaScript执行，等待CSS资源下载完成后再继续。这是因为浏览器默认会按照标签的顺序进行解析和执行，确保代码的执行顺序正确。 12345678910111213141516171819&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;title&gt;css阻塞&lt;/title&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt; &lt;script&gt; alert(&#x27;文档开始解析了!&#x27;); &lt;/script&gt; &lt;link href=&quot;https://cdn.bootcss.com/bootstrap/4.0.0-alpha.6/css/bootstrap.css&quot; rel=&quot;stylesheet&quot;&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Hello World&lt;/h1&gt;&lt;script&gt; alert(&#x27;文档解析结束了!&#x27;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 先 alert 文档开始解析了!，随后加载 link 资源，等待加载完成后，才会执行 alert(&#39;文档解析结束了!&#39;);。这是由于 JS 可能会获取或者改变元素的样式，所以浏览器会按照顺序，等上面的 CSS 加载解析完成之后，再执行下面的 JS 。 DOM解析和 CSS解析会相互阻塞吗？DOM解析和CSS解析是可以并行进行的，它们之间不会相互阻塞。 当涉及到页面渲染时，DOM树和CSSOM树的合并会引起一定的阻塞。当DOM树和CSSOM树都构建完成后，浏览器会将它们合并成渲染树（Render Tree），用于计算布局和绘制页面。这个过程可能会阻塞渲染进程，因为它需要等待DOM树和CSSOM树的构建完成。 css 加载会阻塞 DOM树 的渲染以上面例子结果来看，只有当 css 资源加载完之后，页面上才显示 h1 标签，意味着 css 加载会阻塞 DOM树 的渲染! 严格来说，是 CSS会阻塞 render tree 的生成，进而会阻塞DOM的渲染。 总结 DOM解析和CSS解析是两个并行的进程，这也是为什么CSS加载不会阻塞DOM的解析。 由于Render Tree是依赖于DOM Tree和CSSOM Tree的，所以他必须等待到CSSOM Tree构建完成，也就是CSS资源加载完成(或者CSS资源加载失败)后，才能开始渲染。因此，CSS加载是会阻塞Dom的渲染的。 由于js可能会操作之前的Dom节点和css样式，因此浏览器会维持html中css和js的顺序。因此，css 的加载会在 后面的js执行前 先加载执行。所以css加载会阻塞后面js的执行。 script 的 async/deder 属性 async：异步 defer：推迟 async 异步加载，不确定何时会加载好；页面加载时，遇到带有 async 的脚本也同时加载，加载后会立即执行，如果有一些需要操作 DOM 的脚本加载比较慢时，这样会造成 DOM 还没有加载好，脚本就进行操作，会造成错误。 defer 页面加载时，带有 defer 的脚本也同时加载，加载后会等待 页面加载好后，才执行。 DOMContentLoaded当 &lt;script&gt; 标签添加了 defer 属性后，JavaScript 代码将在 HTML 解析完毕后执行，但在 DOMContentLoaded 事件之前执行。 DOMContentLoaded是一个DOM事件，当初始的HTML文档 被完全加载和解析完成，而无需等待样式表、图像和子框架的完成加载时触发。简单来说，它表示文档的初始DOM结构已经构建完成。 123document.addEventListener(&#x27;DOMContentLoaded&#x27;, function() &#123; // 在这里执行DOM相关的操作或初始化任务&#125;); 三次握手三次握手是建立 TCP 连接时使用的一种协议，用于确保双方的通信能够正常进行。下面是三次握手的详细步骤： 第一次握手（SYN）： 客户端（浏览器）向服务器发送一个 SYN（同步）标志的 TCP 数据包，该数据包中包含客户端选择的初始序列号（ISN）。 客户端进入 SYN_SENT 状态，等待服务器的响应。 第二次握手（SYN-ACK）： 服务器收到客户端发送的 SYN 数据包后，会确认收到，并发送一个带有 SYN 和 ACK（确认）标志的 TCP 数据包作为回应。 该数据包中包含服务器选择的初始序列号（ISN）和确认号（ACK），确认号为客户端的初始序列号加1。 服务器进入 SYN_RCVD 状态。 第三次握手（ACK）： 客户端收到服务器发送的 SYN-ACK 数据包后，会确认收到，并发送一个带有 ACK 标志的 TCP 数据包给服务器。 该数据包中的确认号为服务器的初始序列号加1。 服务器收到客户端发送的 ACK 数据包后，确认号也加1。 客户端和服务器都进入 ESTABLISHED 状态，TCP 连接建立成功。 通过三次握手，客户端和服务器都能够确认彼此的收发能力正常，可以开始进行数据的传输。在握手过程中，初始序列号（ISN）是为了保证每个连接都有唯一的序列号起始值，以增强连接的安全性。 需要注意的是，三次握手只是建立 TCP 连接的过程，并不代表数据的传输。数据的传输是在连接建立完成后进行的，双方可以通过已建立的连接进行数据的发送和接收。 在关闭 TCP 连接时，也需要进行类似的四次挥手（四次握手）过程，以保证双方都完成了数据传输并愿意关闭连接。 事件冒泡 &amp; 事件捕获事件冒泡（Event Bubbling）和事件捕获（Event Capturing）是指浏览器在处理页面中嵌套元素上发生的事件时，按照特定的顺序传播事件的过程。 事件冒泡（Event Bubbling）：在事件冒泡中，当一个元素上的事件被触发时，该事件会先被分派到最内层的元素，然后逐级向上传播，直到达到最外层的元素。换句话说，事件从最具体的元素（目标元素）冒泡到最不具体的元素（根元素或文档对象）。 事件捕获（Event Capturing）：在事件捕获中，当一个元素上的事件被触发时，该事件会先被分派到最外层的元素，然后逐级向下捕获，直到达到最内层的元素。换句话说，事件从最不具体的元素（根元素或文档对象）捕获到最具体的元素（目标元素）。 事件传播的过程包括以下三个阶段： 捕获阶段（Capture Phase）： 浏览器从最外层的元素开始，向下捕获事件。 在捕获阶段中，事件会依次触发父级元素的事件处理程序，直到达到事件的目标元素。 目标阶段（Target Phase）： 事件达到目标元素后，进入目标阶段。 在目标阶段中，事件处理程序会被调用。 冒泡阶段（Bubble Phase）： 事件处理程序执行完目标阶段后，事件开始冒泡向上传播。 在冒泡阶段中，事件会依次触发父级元素的事件处理程序，直到达到最外层的元素。 默认情况下，事件处理程序在冒泡阶段执行，即先触发目标元素的事件处理程序，然后逐级向上传播。但是，你也可以使用 addEventListener 方法的第三个参数来设置事件的传播方式，如： 12element.addEventListener(&#x27;click&#x27;, handler, true); // 使用捕获阶段处理事件element.addEventListener(&#x27;click&#x27;, handler, false); // 使用冒泡阶段处理事件（默认） 事件冒泡和事件捕获的选择取决于你的需求。通常情况下，使用冒泡阶段处理事件更为常见，因为它从具体的目标元素开始，逐级向上传播，更符合常规的处理方式。但在某些情况下，你可能需要使用捕获阶段来处理事件，特别是在事件处理程序需要在目标元素之前执行某些操作时。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; body &#123; width: 100%; height: 100vh; background-color: antiquewhite; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;app&quot;&gt; &lt;img src=&quot;../img/react-event.jpg&quot; alt=&quot;&quot; /&gt; &lt;/div&gt; &lt;script&gt; function onImg(event) &#123; // event.stopPropagation() // 阻止冒泡 console.log(&#x27;img clicked11&#x27;) &#125; function onBody(event) &#123; console.log(&#x27;onBody clicked&#x27;) &#125; function onDiv(event) &#123; console.log(&#x27;onDiv clicked&#x27;) &#125; window.onload = function() &#123; const img = document.querySelector(&#x27;img&#x27;) img.addEventListener(&#x27;click&#x27;, onImg, true) const div = document.getElementById(&#x27;app&#x27;, true) div.addEventListener(&#x27;click&#x27;, onDiv) const body = document.body body.addEventListener(&#x27;click&#x27;, onBody, true) // fasle 表示事件冒泡 &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; addEventListener 第三个参数不填（默认是 false 冒泡），点击图片打印结果如下： 12345img clickedonDiv clickedonBody clicked 如果我们给 body 的事件加上第三个参数 true，表示捕获阶段执行（从最外层 到 目标元素），打印结果如下： 12345onBody clicked //body 的事件程序最先触发img clickedonDiv clicked 参考文献 关于 JS 与 CSS 是否阻塞 DOM 的渲染和解析 css加载会造成阻塞吗？"},{"title":"","date":"2024-06-11T08:52:17.397Z","updated":"2024-06-11T08:52:17.397Z","comments":false,"path":"demo/2023面试准备/demo/webpack-implement/package-lock.json","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/webpack-implement/package-lock.json","excerpt":"","text":"{\"name\":\"webpack-implement\",\"version\":\"1.0.0\",\"lockfileVersion\":1,\"requires\":true,\"dependencies\":{\"@babel/code-frame\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/code-frame/-/code-frame-7.22.5.tgz\",\"integrity\":\"sha512-Xmwn266vad+6DAqEB2A6V/CcZVp62BbwVmcOJc2RPuwih1kw02TjQvWVWlcKGbBPd+8/0V5DEkOcizRGYsspYQ==\",\"dev\":true,\"requires\":{\"@babel/highlight\":\"^7.22.5\"}},\"@babel/generator\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/generator/-/generator-7.22.5.tgz\",\"integrity\":\"sha512-+lcUbnTRhd0jOewtFSedLyiPsD5tswKkbgcezOqqWFUVNEwoUTlpPOBmvhG7OXWLR4jMdv0czPGH5XbflnD1EA==\",\"dev\":true,\"requires\":{\"@babel/types\":\"^7.22.5\",\"@jridgewell/gen-mapping\":\"^0.3.2\",\"@jridgewell/trace-mapping\":\"^0.3.17\",\"jsesc\":\"^2.5.1\"}},\"@babel/helper-environment-visitor\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/helper-environment-visitor/-/helper-environment-visitor-7.22.5.tgz\",\"integrity\":\"sha512-XGmhECfVA/5sAt+H+xpSg0mfrHq6FzNr9Oxh7PSEBBRUb/mL7Kz3NICXb194rCqAEdxkhPT1a88teizAFyvk8Q==\",\"dev\":true},\"@babel/helper-function-name\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/helper-function-name/-/helper-function-name-7.22.5.tgz\",\"integrity\":\"sha512-wtHSq6jMRE3uF2otvfuD3DIvVhOsSNshQl0Qrd7qC9oQJzHvOL4qQXlQn2916+CXGywIjpGuIkoyZRRxHPiNQQ==\",\"dev\":true,\"requires\":{\"@babel/template\":\"^7.22.5\",\"@babel/types\":\"^7.22.5\"}},\"@babel/helper-hoist-variables\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/helper-hoist-variables/-/helper-hoist-variables-7.22.5.tgz\",\"integrity\":\"sha512-wGjk9QZVzvknA6yKIUURb8zY3grXCcOZt+/7Wcy8O2uctxhplmUPkOdlgoNhmdVee2c92JXbf1xpMtVNbfoxRw==\",\"dev\":true,\"requires\":{\"@babel/types\":\"^7.22.5\"}},\"@babel/helper-split-export-declaration\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/helper-split-export-declaration/-/helper-split-export-declaration-7.22.5.tgz\",\"integrity\":\"sha512-thqK5QFghPKWLhAV321lxF95yCg2K3Ob5yw+M3VHWfdia0IkPXUtoLH8x/6Fh486QUvzhb8YOWHChTVen2/PoQ==\",\"dev\":true,\"requires\":{\"@babel/types\":\"^7.22.5\"}},\"@babel/helper-string-parser\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/helper-string-parser/-/helper-string-parser-7.22.5.tgz\",\"integrity\":\"sha512-mM4COjgZox8U+JcXQwPijIZLElkgEpO5rsERVDJTc2qfCDfERyob6k5WegS14SX18IIjv+XD+GrqNumY5JRCDw==\",\"dev\":true},\"@babel/helper-validator-identifier\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/helper-validator-identifier/-/helper-validator-identifier-7.22.5.tgz\",\"integrity\":\"sha512-aJXu+6lErq8ltp+JhkJUfk1MTGyuA4v7f3pA+BJ5HLfNC6nAQ0Cpi9uOquUj8Hehg0aUiHzWQbOVJGao6ztBAQ==\",\"dev\":true},\"@babel/highlight\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/highlight/-/highlight-7.22.5.tgz\",\"integrity\":\"sha512-BSKlD1hgnedS5XRnGOljZawtag7H1yPfQp0tdNJCHoH6AZ+Pcm9VvkrK59/Yy593Ypg0zMxH2BxD1VPYUQ7UIw==\",\"dev\":true,\"requires\":{\"@babel/helper-validator-identifier\":\"^7.22.5\",\"chalk\":\"^2.0.0\",\"js-tokens\":\"^4.0.0\"}},\"@babel/parser\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/parser/-/parser-7.22.5.tgz\",\"integrity\":\"sha512-DFZMC9LJUG9PLOclRC32G63UXwzqS2koQC8dkx+PLdmt1xSePYpbT/NbsrJy8Q/muXz7o/h/d4A7Fuyixm559Q==\",\"dev\":true},\"@babel/template\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/template/-/template-7.22.5.tgz\",\"integrity\":\"sha512-X7yV7eiwAxdj9k94NEylvbVHLiVG1nvzCV2EAowhxLTwODV1jl9UzZ48leOC0sH7OnuHrIkllaBgneUykIcZaw==\",\"dev\":true,\"requires\":{\"@babel/code-frame\":\"^7.22.5\",\"@babel/parser\":\"^7.22.5\",\"@babel/types\":\"^7.22.5\"}},\"@babel/traverse\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/traverse/-/traverse-7.22.5.tgz\",\"integrity\":\"sha512-7DuIjPgERaNo6r+PZwItpjCZEa5vyw4eJGufeLxrPdBXBoLcCJCIasvK6pK/9DVNrLZTLFhUGqaC6X/PA007TQ==\",\"dev\":true,\"requires\":{\"@babel/code-frame\":\"^7.22.5\",\"@babel/generator\":\"^7.22.5\",\"@babel/helper-environment-visitor\":\"^7.22.5\",\"@babel/helper-function-name\":\"^7.22.5\",\"@babel/helper-hoist-variables\":\"^7.22.5\",\"@babel/helper-split-export-declaration\":\"^7.22.5\",\"@babel/parser\":\"^7.22.5\",\"@babel/types\":\"^7.22.5\",\"debug\":\"^4.1.0\",\"globals\":\"^11.1.0\"},\"dependencies\":{\"debug\":{\"version\":\"4.3.4\",\"resolved\":\"https://registry.npmmirror.com/debug/-/debug-4.3.4.tgz\",\"integrity\":\"sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==\",\"dev\":true,\"requires\":{\"ms\":\"2.1.2\"}},\"ms\":{\"version\":\"2.1.2\",\"resolved\":\"https://registry.npmmirror.com/ms/-/ms-2.1.2.tgz\",\"integrity\":\"sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==\",\"dev\":true}}},\"@babel/types\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/types/-/types-7.22.5.tgz\",\"integrity\":\"sha512-zo3MIHGOkPOfoRXitsgHLjEXmlDaD/5KU1Uzuc9GNiZPhSqVxVRtxuPaSBZDsYZ9qV88AjtMtWW7ww98loJ9KA==\",\"dev\":true,\"requires\":{\"@babel/helper-string-parser\":\"^7.22.5\",\"@babel/helper-validator-identifier\":\"^7.22.5\",\"to-fast-properties\":\"^2.0.0\"}},\"@jridgewell/gen-mapping\":{\"version\":\"0.3.3\",\"resolved\":\"https://registry.npmmirror.com/@jridgewell/gen-mapping/-/gen-mapping-0.3.3.tgz\",\"integrity\":\"sha512-HLhSWOLRi875zjjMG/r+Nv0oCW8umGb0BgEhyX3dDX3egwZtB8PqLnjz3yedt8R5StBrzcg4aBpnh8UA9D1BoQ==\",\"dev\":true,\"requires\":{\"@jridgewell/set-array\":\"^1.0.1\",\"@jridgewell/sourcemap-codec\":\"^1.4.10\",\"@jridgewell/trace-mapping\":\"^0.3.9\"}},\"@jridgewell/resolve-uri\":{\"version\":\"3.1.0\",\"resolved\":\"https://registry.npmmirror.com/@jridgewell/resolve-uri/-/resolve-uri-3.1.0.tgz\",\"integrity\":\"sha512-F2msla3tad+Mfht5cJq7LSXcdudKTWCVYUgw6pLFOOHSTtZlj6SWNYAp+AhuqLmWdBO2X5hPrLcu8cVP8fy28w==\",\"dev\":true},\"@jridgewell/set-array\":{\"version\":\"1.1.2\",\"resolved\":\"https://registry.npmmirror.com/@jridgewell/set-array/-/set-array-1.1.2.tgz\",\"integrity\":\"sha512-xnkseuNADM0gt2bs+BvhO0p78Mk762YnZdsuzFV018NoG1Sj1SCQvpSqa7XUaTam5vAGasABV9qXASMKnFMwMw==\",\"dev\":true},\"@jridgewell/sourcemap-codec\":{\"version\":\"1.4.15\",\"resolved\":\"https://registry.npmmirror.com/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.15.tgz\",\"integrity\":\"sha512-eF2rxCRulEKXHTRiDrDy6erMYWqNw4LPdQ8UQA4huuxaQsVeRPFl2oM8oDGxMFhJUWZf9McpLtJasDDZb/Bpeg==\",\"dev\":true},\"@jridgewell/trace-mapping\":{\"version\":\"0.3.18\",\"resolved\":\"https://registry.npmmirror.com/@jridgewell/trace-mapping/-/trace-mapping-0.3.18.tgz\",\"integrity\":\"sha512-w+niJYzMHdd7USdiH2U6869nqhD2nbfZXND5Yp93qIbEmnDNk7PD48o+YchRVpzMU7M6jVCbenTR7PA1FLQ9pA==\",\"dev\":true,\"requires\":{\"@jridgewell/resolve-uri\":\"3.1.0\",\"@jridgewell/sourcemap-codec\":\"1.4.14\"},\"dependencies\":{\"@jridgewell/sourcemap-codec\":{\"version\":\"1.4.14\",\"resolved\":\"https://registry.npmmirror.com/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.14.tgz\",\"integrity\":\"sha512-XPSJHWmi394fuUuzDnGz1wiKqWfo1yXecHQMRf2l6hztTO+nPru658AyDngaBe7isIxEkRsPR3FZh+s7iVa4Uw==\",\"dev\":true}}},\"abbrev\":{\"version\":\"1.1.1\",\"resolved\":\"https://registry.npmmirror.com/abbrev/-/abbrev-1.1.1.tgz\",\"integrity\":\"sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q==\",\"dev\":true},\"ansi-styles\":{\"version\":\"3.2.1\",\"resolved\":\"https://registry.npmmirror.com/ansi-styles/-/ansi-styles-3.2.1.tgz\",\"integrity\":\"sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==\",\"dev\":true,\"requires\":{\"color-convert\":\"^1.9.0\"}},\"anymatch\":{\"version\":\"3.1.3\",\"resolved\":\"https://registry.npmmirror.com/anymatch/-/anymatch-3.1.3.tgz\",\"integrity\":\"sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==\",\"dev\":true,\"requires\":{\"normalize-path\":\"^3.0.0\",\"picomatch\":\"^2.0.4\"}},\"balanced-match\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/balanced-match/-/balanced-match-1.0.2.tgz\",\"integrity\":\"sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==\",\"dev\":true},\"binary-extensions\":{\"version\":\"2.2.0\",\"resolved\":\"https://registry.npmmirror.com/binary-extensions/-/binary-extensions-2.2.0.tgz\",\"integrity\":\"sha512-jDctJ/IVQbZoJykoeHbhXpOlNBqGNcwXJKJog42E5HDPUwQTSdjCHdihjj0DlnheQ7blbT6dHOafNAiS8ooQKA==\",\"dev\":true},\"brace-expansion\":{\"version\":\"1.1.11\",\"resolved\":\"https://registry.npmmirror.com/brace-expansion/-/brace-expansion-1.1.11.tgz\",\"integrity\":\"sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==\",\"dev\":true,\"requires\":{\"balanced-match\":\"^1.0.0\",\"concat-map\":\"0.0.1\"}},\"braces\":{\"version\":\"3.0.2\",\"resolved\":\"https://registry.npmmirror.com/braces/-/braces-3.0.2.tgz\",\"integrity\":\"sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==\",\"dev\":true,\"requires\":{\"fill-range\":\"^7.0.1\"}},\"chalk\":{\"version\":\"2.4.2\",\"resolved\":\"https://registry.npmmirror.com/chalk/-/chalk-2.4.2.tgz\",\"integrity\":\"sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==\",\"dev\":true,\"requires\":{\"ansi-styles\":\"^3.2.1\",\"escape-string-regexp\":\"^1.0.5\",\"supports-color\":\"^5.3.0\"}},\"chokidar\":{\"version\":\"3.5.3\",\"resolved\":\"https://registry.npmmirror.com/chokidar/-/chokidar-3.5.3.tgz\",\"integrity\":\"sha512-Dr3sfKRP6oTcjf2JmUmFJfeVMvXBdegxB0iVQ5eb2V10uFJUCAS8OByZdVAyVb8xXNz3GjjTgj9kLWsZTqE6kw==\",\"dev\":true,\"requires\":{\"anymatch\":\"~3.1.2\",\"braces\":\"~3.0.2\",\"fsevents\":\"~2.3.2\",\"glob-parent\":\"~5.1.2\",\"is-binary-path\":\"~2.1.0\",\"is-glob\":\"~4.0.1\",\"normalize-path\":\"~3.0.0\",\"readdirp\":\"~3.6.0\"}},\"color-convert\":{\"version\":\"1.9.3\",\"resolved\":\"https://registry.npmmirror.com/color-convert/-/color-convert-1.9.3.tgz\",\"integrity\":\"sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==\",\"dev\":true,\"requires\":{\"color-name\":\"1.1.3\"}},\"color-name\":{\"version\":\"1.1.3\",\"resolved\":\"https://registry.npmmirror.com/color-name/-/color-name-1.1.3.tgz\",\"integrity\":\"sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==\",\"dev\":true},\"concat-map\":{\"version\":\"0.0.1\",\"resolved\":\"https://registry.npmmirror.com/concat-map/-/concat-map-0.0.1.tgz\",\"integrity\":\"sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==\",\"dev\":true},\"debug\":{\"version\":\"3.2.7\",\"resolved\":\"https://registry.npmmirror.com/debug/-/debug-3.2.7.tgz\",\"integrity\":\"sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==\",\"dev\":true,\"requires\":{\"ms\":\"^2.1.1\"}},\"escape-string-regexp\":{\"version\":\"1.0.5\",\"resolved\":\"https://registry.npmmirror.com/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz\",\"integrity\":\"sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==\",\"dev\":true},\"fill-range\":{\"version\":\"7.0.1\",\"resolved\":\"https://registry.npmmirror.com/fill-range/-/fill-range-7.0.1.tgz\",\"integrity\":\"sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==\",\"dev\":true,\"requires\":{\"to-regex-range\":\"^5.0.1\"}},\"fsevents\":{\"version\":\"2.3.2\",\"resolved\":\"https://registry.npmmirror.com/fsevents/-/fsevents-2.3.2.tgz\",\"integrity\":\"sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==\",\"dev\":true,\"optional\":true},\"glob-parent\":{\"version\":\"5.1.2\",\"resolved\":\"https://registry.npmmirror.com/glob-parent/-/glob-parent-5.1.2.tgz\",\"integrity\":\"sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==\",\"dev\":true,\"requires\":{\"is-glob\":\"^4.0.1\"}},\"globals\":{\"version\":\"11.12.0\",\"resolved\":\"https://registry.npmmirror.com/globals/-/globals-11.12.0.tgz\",\"integrity\":\"sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==\",\"dev\":true},\"has-flag\":{\"version\":\"3.0.0\",\"resolved\":\"https://registry.npmmirror.com/has-flag/-/has-flag-3.0.0.tgz\",\"integrity\":\"sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==\",\"dev\":true},\"ignore-by-default\":{\"version\":\"1.0.1\",\"resolved\":\"https://registry.npmmirror.com/ignore-by-default/-/ignore-by-default-1.0.1.tgz\",\"integrity\":\"sha512-Ius2VYcGNk7T90CppJqcIkS5ooHUZyIQK+ClZfMfMNFEF9VSE73Fq+906u/CWu92x4gzZMWOwfFYckPObzdEbA==\",\"dev\":true},\"is-binary-path\":{\"version\":\"2.1.0\",\"resolved\":\"https://registry.npmmirror.com/is-binary-path/-/is-binary-path-2.1.0.tgz\",\"integrity\":\"sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==\",\"dev\":true,\"requires\":{\"binary-extensions\":\"^2.0.0\"}},\"is-extglob\":{\"version\":\"2.1.1\",\"resolved\":\"https://registry.npmmirror.com/is-extglob/-/is-extglob-2.1.1.tgz\",\"integrity\":\"sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==\",\"dev\":true},\"is-glob\":{\"version\":\"4.0.3\",\"resolved\":\"https://registry.npmmirror.com/is-glob/-/is-glob-4.0.3.tgz\",\"integrity\":\"sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==\",\"dev\":true,\"requires\":{\"is-extglob\":\"^2.1.1\"}},\"is-number\":{\"version\":\"7.0.0\",\"resolved\":\"https://registry.npmmirror.com/is-number/-/is-number-7.0.0.tgz\",\"integrity\":\"sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==\",\"dev\":true},\"js-tokens\":{\"version\":\"4.0.0\",\"resolved\":\"https://registry.npmmirror.com/js-tokens/-/js-tokens-4.0.0.tgz\",\"integrity\":\"sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==\",\"dev\":true},\"jsesc\":{\"version\":\"2.5.2\",\"resolved\":\"https://registry.npmmirror.com/jsesc/-/jsesc-2.5.2.tgz\",\"integrity\":\"sha512-OYu7XEzjkCQ3C5Ps3QIZsQfNpqoJyZZA99wd9aWd05NCtC5pWOkShK2mkL6HXQR6/Cy2lbNdPlZBpuQHXE63gA==\",\"dev\":true},\"minimatch\":{\"version\":\"3.1.2\",\"resolved\":\"https://registry.npmmirror.com/minimatch/-/minimatch-3.1.2.tgz\",\"integrity\":\"sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==\",\"dev\":true,\"requires\":{\"brace-expansion\":\"^1.1.7\"}},\"ms\":{\"version\":\"2.1.3\",\"resolved\":\"https://registry.npmmirror.com/ms/-/ms-2.1.3.tgz\",\"integrity\":\"sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==\",\"dev\":true},\"nodemon\":{\"version\":\"2.0.22\",\"resolved\":\"https://registry.npmmirror.com/nodemon/-/nodemon-2.0.22.tgz\",\"integrity\":\"sha512-B8YqaKMmyuCO7BowF1Z1/mkPqLk6cs/l63Ojtd6otKjMx47Dq1utxfRxcavH1I7VSaL8n5BUaoutadnsX3AAVQ==\",\"dev\":true,\"requires\":{\"chokidar\":\"^3.5.2\",\"debug\":\"^3.2.7\",\"ignore-by-default\":\"^1.0.1\",\"minimatch\":\"^3.1.2\",\"pstree.remy\":\"^1.1.8\",\"semver\":\"^5.7.1\",\"simple-update-notifier\":\"^1.0.7\",\"supports-color\":\"^5.5.0\",\"touch\":\"^3.1.0\",\"undefsafe\":\"^2.0.5\"}},\"nopt\":{\"version\":\"1.0.10\",\"resolved\":\"https://registry.npmmirror.com/nopt/-/nopt-1.0.10.tgz\",\"integrity\":\"sha512-NWmpvLSqUrgrAC9HCuxEvb+PSloHpqVu+FqcO4eeF2h5qYRhA7ev6KvelyQAKtegUbC6RypJnlEOhd8vloNKYg==\",\"dev\":true,\"requires\":{\"abbrev\":\"1\"}},\"normalize-path\":{\"version\":\"3.0.0\",\"resolved\":\"https://registry.npmmirror.com/normalize-path/-/normalize-path-3.0.0.tgz\",\"integrity\":\"sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==\",\"dev\":true},\"picomatch\":{\"version\":\"2.3.1\",\"resolved\":\"https://registry.npmmirror.com/picomatch/-/picomatch-2.3.1.tgz\",\"integrity\":\"sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==\",\"dev\":true},\"pstree.remy\":{\"version\":\"1.1.8\",\"resolved\":\"https://registry.npmmirror.com/pstree.remy/-/pstree.remy-1.1.8.tgz\",\"integrity\":\"sha512-77DZwxQmxKnu3aR542U+X8FypNzbfJ+C5XQDk3uWjWxn6151aIMGthWYRXTqT1E5oJvg+ljaa2OJi+VfvCOQ8w==\",\"dev\":true},\"readdirp\":{\"version\":\"3.6.0\",\"resolved\":\"https://registry.npmmirror.com/readdirp/-/readdirp-3.6.0.tgz\",\"integrity\":\"sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==\",\"dev\":true,\"requires\":{\"picomatch\":\"^2.2.1\"}},\"semver\":{\"version\":\"5.7.1\",\"resolved\":\"https://registry.npmmirror.com/semver/-/semver-5.7.1.tgz\",\"integrity\":\"sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ==\",\"dev\":true},\"simple-update-notifier\":{\"version\":\"1.1.0\",\"resolved\":\"https://registry.npmmirror.com/simple-update-notifier/-/simple-update-notifier-1.1.0.tgz\",\"integrity\":\"sha512-VpsrsJSUcJEseSbMHkrsrAVSdvVS5I96Qo1QAQ4FxQ9wXFcB+pjj7FB7/us9+GcgfW4ziHtYMc1J0PLczb55mg==\",\"dev\":true,\"requires\":{\"semver\":\"~7.0.0\"},\"dependencies\":{\"semver\":{\"version\":\"7.0.0\",\"resolved\":\"https://registry.npmmirror.com/semver/-/semver-7.0.0.tgz\",\"integrity\":\"sha512-+GB6zVA9LWh6zovYQLALHwv5rb2PHGlJi3lfiqIHxR0uuwCgefcOJc59v9fv1w8GbStwxuuqqAjI9NMAOOgq1A==\",\"dev\":true}}},\"supports-color\":{\"version\":\"5.5.0\",\"resolved\":\"https://registry.npmmirror.com/supports-color/-/supports-color-5.5.0.tgz\",\"integrity\":\"sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==\",\"dev\":true,\"requires\":{\"has-flag\":\"^3.0.0\"}},\"to-fast-properties\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmmirror.com/to-fast-properties/-/to-fast-properties-2.0.0.tgz\",\"integrity\":\"sha512-/OaKK0xYrs3DmxRYqL/yDc+FxFUVYhDlXMhRmv3z915w2HF1tnN1omB354j8VUGO/hbRzyD6Y3sA7v7GS/ceog==\",\"dev\":true},\"to-regex-range\":{\"version\":\"5.0.1\",\"resolved\":\"https://registry.npmmirror.com/to-regex-range/-/to-regex-range-5.0.1.tgz\",\"integrity\":\"sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==\",\"dev\":true,\"requires\":{\"is-number\":\"^7.0.0\"}},\"touch\":{\"version\":\"3.1.0\",\"resolved\":\"https://registry.npmmirror.com/touch/-/touch-3.1.0.tgz\",\"integrity\":\"sha512-WBx8Uy5TLtOSRtIq+M03/sKDrXCLHxwDcquSP2c43Le03/9serjQBIztjRz6FkJez9D/hleyAXTBGLwwZUw9lA==\",\"dev\":true,\"requires\":{\"nopt\":\"~1.0.10\"}},\"undefsafe\":{\"version\":\"2.0.5\",\"resolved\":\"https://registry.npmmirror.com/undefsafe/-/undefsafe-2.0.5.tgz\",\"integrity\":\"sha512-WxONCrssBM8TSPRqN5EmsjVrsv4A8X12J4ArBiiayv3DyyG3ZlIg6yysuuSYdZsVz3TKcTg2fd//Ujd4CHV1iA==\",\"dev\":true}}}"},{"title":"","date":"2024-06-11T08:52:17.363Z","updated":"2024-06-11T08:52:17.363Z","comments":false,"path":"demo/2023面试准备/2023前端面试题汇总.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/2023%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB.html","excerpt":"","text":"0.1 + 0.2不等于0.3？ https://juejin.cn/post/6844903680362151950 JavaScript使用Number类型表示数字（整数和浮点数），遵循 IEEE754(二进制浮点数算术) 标准，通过64位来表示一个数字 本质是：二进制模拟十进制进行计算时 的精度问题 IEEE754 的存储位有限 在二进制的处理过程中有两次精度丢失问题，一次是 存储，一次是相加，最终导致 0.1 + 0.2 = 0.30000000000000004 十进制整数转二进制整数除2，取余数，没有余数取0 十进制小数如何转二进制？十进制小数转二进制，小数部分 乘 2 取整数部分，若乘之后的小数部分不为 0，继续乘以 2 直到小数部分为 0 ，将取出的整数正向排序。 0.1 转二进制： 123456789100.1 * 2 = 0.2 --------------- 取整数 0，小数 0.20.2 * 2 = 0.4 --------------- 取整数 0，小数 0.40.4 * 2 = 0.8 --------------- 取整数 0，小数 0.80.8 * 2 = 1.6 --------------- 取整数 1，小数 0.60.6 * 2 = 1.2 --------------- 取整数 1，小数 0.20.2 * 2 = 0.4 --------------- 取整数 0，小数 0.40.4 * 2 = 0.8 --------------- 取整数 0，小数 0.80.8 * 2 = 1.6 --------------- 取整数 1，小数 0.60.6 * 2 = 1.2 --------------- 取整数 1，小数 0.2... 最终 0.1 的二进制表示为 0.00110011… 后面将会 0011 无限循环，因此二进制无法精确的保存类似 0.1 这样的小数。任何使用二进制浮点数的编程语言都有这个问题 那这样无限循环也不是办法，又该保存多少位呢？ 遵循 IEEE 754 标准。IEEE 754 常用的两种浮点数值的表示方式为：单精确度（32位）、双精确度（64位）。例如， C 语言中的 float 通常是指 IEEE 单精确度，而 double 是指双精确度。 符号位（位数：1）决定了一个数的正负 指数位（位数：11）决定了数值的大小 小数位（位数：52）决定了数值的精度 JS 中的数字类型只有 Number 一种，而 Number 类型采用的是 IEEE 754 标准中的 双精度浮点数（64位） 来表示一个数字，不区分整数和浮点数。 所以，JS 中提供的有效位是 64 - 11 为 53 位。 将 0.1 或 0.2 转为二进制数时，会出现无限循环，而二进制存储结构中的小数部分，最多只能表示 53 位。为了能表示 0.1 这类小数，只能进行舍入（类似四舍五入这种），但是二进制只有 0 和 1，于是就变成了 0舍1入。 123// 0.10.0001100110011001100110011001100110011001100110011001101 // 舍0，1入，最后两位变成了 01 所以，在 0.1 和 0.2 进行二进制转换时，丢失了一次精度。 在二进制求和时，又丢失了一次精度，最终导致求和不准确 0.1 + 0.2 !== 0.3 JS中最大安全整数IEEE754规定位数第一位隐含为1，不写。 比如我们可以通过 Math.pow(2, 53) - 1 拿到最大的安全整数，它的值和 Number.Number.MAX_SAFE_INTEGER 一样 123Number.MAX_SAFE_INTEGER === Math.pow(2, 53) - 1Number.MIN_SAFE_INTEGER // 最小 JS 中最大的数是什么？Infinity 1typeof Infinity ===&gt; &#x27;number&#x27; 解决 可以先将其转化为整数，再除以转整数时的倍数 1const res = (10*0.1 + 10*0.2) / 10 // 0.3 使用 toFixed 1(0.1+0.2).toFixed(1) ===&gt; &#x27;0.3&#x27; 使用 Number.EPSILON 最小值比较大小 1const equal = Math.abs(0.1 + 0.2 - 0.3) &lt; Number.EPSILON // true 使用计算库来解决 math.js、decimal.js JS 数据类型基本类型（七中）：number, string, undefined, null, boolean, Symbol, bigint 引用类型：Object，对象子类型（array, function） 事件流事件流是网页元素接收事件的顺序，”DOM2级事件”规定的事件流包括三个阶段：事件捕获阶段、处于目标阶段、事件冒泡阶段。 1234567891011121314151617181920212223242526&lt;body&gt; &lt;p&gt; 父元素&lt;span&gt;子元素&lt;/span&gt; &lt;/p&gt; &lt;script&gt; const p = document.querySelector(&#x27;p&#x27;) const s = document.querySelector(&#x27;span&#x27;) s.addEventListener(&#x27;click&#x27;, () =&gt; &#123; console.log(&#x27;子 捕获&#x27;) &#125;, true) s.addEventListener(&#x27;click&#x27;, () =&gt; &#123; console.log(&#x27;子 冒泡&#x27;) &#125;, false) p.addEventListener(&#x27;click&#x27;, () =&gt; &#123; console.log(&#x27;父组件捕获&#x27;) &#125;, true) p.addEventListener(&#x27;click&#x27;, () =&gt; &#123; console.log(&#x27;父组件冒泡&#x27;) &#125;, false) &lt;/script&gt;&lt;/body&gt; 同时存在捕获和冒泡事件时，点击 span 元素，会打印如下，遵循事件流的执行顺序。 1234父组件捕获子 捕获子 冒泡父组件冒泡 什么是作用域作用域（Scope）是指在程序中定义变量的可访问范围。它规定了在哪些地方以及如何能够访问变量、函数和对象。 es5：全局作用域和函数作用域，es6 有了块级作用域 闭包闭包是一种特殊的对象，它由两部分组成：执行上下文（代号 A），以及在该执行上下文中创建的函数 （代号 B），当 B 执行时，如果访问了 A 中变量对象的值，那么闭包就会产生。 闭包是指有权访问另外一个函数作用域中的变量的函数 应用场景 封装私有变量 延迟执行：使用闭包可以实现延迟执行函数，即将一个函数作为返回值返回，并在后续的某个时刻执行该函数 模块化开发：通过闭包可以创建模块化的代码结构，将相关的函数和数据封装在一个闭包内部，提供对外暴露的接口，隐藏实现的细节。 循环中的问题：在使用循环时，闭包可以解决由于 JavaScript 作用域机制导致的变量共享问题。 防抖和节流：通过闭包可以实现防抖（debounce）和节流（throttle）等常见的函数优化技术，用于控制函数的触发频率。 实现高阶函数：闭包可以用于实现高阶函数，即函数作为参数或返回值的函数。通过闭包，可以捕获并记住外部函数的上下文和状态。 作用域链当访问一个变量时，编译器在执行这段代码时，会首先从当前的作用域中查找是否有这个标识符，如果没有找到，就会去父作用域查找，如果父作用域还没找到继续向上查找，直到全局作用域为止 this 的四条规则 默认绑定 没有其他修饰（bind、apply、call)，在非严格模式下定义指向全局对象，在严格模式下定义指向 undefined 隐式绑定 调用位置是否有上下文对象，或者是否被某个对象拥有或者包含，那么隐式绑定规则会把函数调用中的 this 绑定到这个上下文对象。 12345678910function foo() &#123; console.log(this.a);&#125;var obj = &#123; a: 2, foo: foo,&#125;obj.foo(); // 2 显示绑定：通过在函数上运行 call 和 apply ，来显示的绑定 this new 绑定 手写 call、apply、bindcall 12345678910111213Function.prototype.myCall = function(context, ...args) &#123; // context 就是 call 第一个参数，上下文环境 context = typeof context === &#x27;object&#x27; ? context || window : &#123;&#125;; const s = Symbol(&#x27;fn&#x27;) context[s] = this // 将方法 赋值给 context 对象, const result = context[s](...args) // 在目标对象上(context)调用方法，方法内部的 this 就指向 context 了 delete context[s] // 记得删除context 上定义的方法 return result&#125; apply 基本和 call 一样，只是参数不同，apply 接受一个数组作为参数。 bind 基本上和 call、apply 也很相似，只不过返回了一个函数，执行时机灵活多变。 123456789101112131415Function.prototype.myBind = function(context, ...args) &#123; context = context || window const s = Symbol(&#x27;fn&#x27;) context[s] = this return function(..._args) &#123; args = args.concat(_args) const r = context[s](...args) delete context[s] return r &#125;&#125; 实现一个 pipe 函数1234567const square = v =&gt; v * vconst double = v =&gt; v * 2const addOne = v =&gt; v + 1const res = pipe(square, double, addOne)console.log(res(3)) // 19; addOne(double(square(3))) pipe是可以接收任意个数的函数，并且返回的是一个新的函数 1234567891011function pipe(...fns) &#123; // value 就是传入进来的数字 return function(value) &#123; return fns.reduce((pre, cur) =&gt; &#123; return cur(pre) &#125;, value) &#125;&#125; 由于 value 作为 reduce 的初始值，所以，第一次循环的结果是 cur(value)，也就是 square(3) 第二次循环时，square(3) 就是 pre，cur(pre) 就是 double(square(3))，以此类推… 如何判断一个对象是不是空对象12Object.keys(obj).length === 0 JSON.stringify 不能用来判断是不是空对象，因为如果属性值是 function 或者 undefined，序列化出来之后会丢失这两个属性 扁平化一个数组1234567891011121314151617const arr = [1, [2, 3, [4, [ 5 ]]]]function flatten(arr) &#123; const result = [] for (let i = 0; i &lt; arr.length; i++) &#123; if (Array.isArray(arr[i])) &#123; result.push(...flatten(arr[i])) &#125; else &#123; result.push(arr[i]) &#125; &#125; return result&#125;console.log(flatten(arr)) 排序-冒泡 O(n^2)12345678910111213141516171819202122const arr = [3, 1, 2, 6, 1, 99, 0, -1, 5]// 冒泡function bubbleSort(arr) &#123; let length = arr.length for (let i = 0; i &lt; length; i++) &#123; for (let j = 1; j &lt; length - i; j++) &#123; if (arr[j] &lt; arr[j - 1]) &#123; // const temp = arr[j] // arr[j] = arr[j - 1] // arr[j - 1] = temp [arr[j], arr[j - 1]] = [arr[j - 1], arr[j]] &#125; &#125; &#125; return arr&#125;console.log(bubbleSort(arr)) 排序-选择排序 O(n^2)假设数组第一个元素就是最小的值，双循环遍历数组，找到可能存在最小的值，和假定的最小值交换位置 第二层循环 j = i，表示已经排序了的，不需要再遍历查找了 12345678910111213141516171819202122function selectSort(arr) &#123; let minIndex for (let i = 0; i &lt; arr.length; i++) &#123; // 假设一个最小的值 minIndex = i // 让 j = i，表示前面已经排序了的，就不需要再排了 for (let j = i; j &lt; arr.length; j ++) &#123; // 一轮下来，肯定能找到一个最小值 index if (arr[j] &lt; arr[minIndex]) &#123; minIndex = j &#125; &#125; // 如果 minIndex !== i，表示存在比arr[minIndex]还小的值 arr[i]，和 i 进行交换 if (minIndex !== i) &#123; [arr[minIndex], arr[i]] = [arr[i], arr[minIndex]] &#125; &#125; return arr&#125; 排序-插入排序arr = [3, 2, 1, 6, 1, 99, 0, -1, 5] 默认第一项是排序了的，所以遍历时从数组下标为 1 的位置开始 用 for 循环将当前遍历的项存储起来，current，并记录当前项的下标currentIndex 通过 while 循环，current 前面的项 和 current 比较 1234567891011121314151617181920function insertSort(arr) &#123; let current, currentIndex // 当前项, 当前项下标 for (let i = 1; i &lt; arr.length; i++) &#123; current = arr[i] currentIndex = i // 让当前项的前面的每一项和当前项 current 比较， while (currentIndex &gt; 0 &amp;&amp; arr[currentIndex - 1] &gt; current) &#123; arr[currentIndex] = arr[currentIndex - 1] currentIndex-- &#125; // currentIndex = 0 arr[currentIndex] = current &#125; return arr&#125; 第一轮： arr = [3, 2, 1, 6, 1, 99, 0, -1, 5] current = 2, currentIndex = 1 current 前一项arr[currentIndex - 1] = 3比 current = 2 大，那就让当前项 arr[currentIndex] 等于前一项，相当于大数字往后挪了一位，[3, 3, 1, 6 …] 然后 currentIndex– = 0，currentIndex &gt; 0 不成立，结束 while，此时前两项是 [3, 3] 最后，currentIndex = 0，需要让当前项（小值）插入到正确✅的位置 arr[currentIndex] = current，前两项就排好序了 [2,3] 第二轮 arr = [2, 3, 1, 6, 1, 99, 0, -1, 5] current = 1, currentIndex = 2 current 的前一项 arr[currentIndex - 1] = 3 比 current = 1 大，需要将大的往后挪一位，arr[currentIndex: 2] = arr[currentIndex - 1]，[2, 3, 1] =&gt; [2, 3, 3] 然后 currentIndex– = 1，还要判断前面的项，是不是有比 current 大的数值，arr[currentIndex-1] &gt; current （2 &gt; 1）成立，所以将大的数值往后挪一位 [2, 3, 3] =&gt; [2, 2, 3] currentIndex– = 0，此时 currentIndex 等于 0，不符合 while 循环的条件了，退出 最后，我们需要将小的值插入到正确✅的位置：arr[currentIndex: 0] = current(1) =&gt; [1, 2, 3 …] … 时间复杂度最好的情况是，arr 本来就是有序的，所以每一次循环，都只需要比较一次，并且不需要交换位置，时间复杂度是 O(n - 1) ====&gt; 去掉常量就是 O(n) 最坏的情况是，arr 是逆序的，每一次比较，都需要将前面的每一项都挪一下位置，并且将当前项插入到数组的头部，此时复杂度是 O(n^2) 空间复杂度是 O(1) meta 标签：自动刷新/跳转假设要实现一个类似 PPT 自动播放的效果，你很可能会想到使用 JavaScript 定时器控制页面跳转来实现。但其实有更加简洁的实现方法，比如通过 meta 标签来实现： 1&lt;meta http-equiv=&quot;Refresh&quot; content=&quot;5; URL=page2.html&quot;&gt; 上面的代码会在 5s 之后自动跳转到同域下的 page2.html 页面。我们要实现 PPT 自动播放的功能，只需要在每个页面的 meta 标签内设置好下一个页面的地址即可。 另一种场景，比如每隔一分钟就需要刷新页面的大屏幕监控，也可以通过 meta 标签来实现，只需去掉后面的 URL 即可： 跟跨域相关的几个请求头含义是什么？在跨域请求中，以下是几个常见的与跨域相关的请求头及其含义： Origin: 该请求头指示了请求的来源，包含了协议、域名和端口号。它通常由浏览器自动添加，并用于表示当前页面的域和协议。在跨域请求中，服务器可以通过检查该请求头来确定是否允许跨域访问。 Access-Control-Request-Method: 当浏览器发起跨域的 HTTP 预检请求（OPTIONS 请求）时，该头部用于指示实际请求所使用的方法（如 GET、POST、PUT 等）。服务器可以根据该头部来判断是否允许实际请求的方法。 Access-Control-Request-Headers: 当浏览器发起跨域的 HTTP 预检请求时，该头部用于指示实际请求所携带的自定义请求头。服务器可以根据该头部来判断是否允许实际请求携带这些自定义请求头。 Access-Control-Allow-Origin: 该响应头用于指示服务器是否允许来自特定源的跨域请求。当服务器接收到跨域请求时，可以通过设置该头部来告知浏览器是否允许访问。可以设置为具体的域名或 *（表示允许所有域名），以控制跨域访问的权限。 Access-Control-Allow-Methods: 该响应头用于指示服务器允许的跨域请求方法。服务器可以通过设置该头部来告知浏览器所允许的请求方法，以控制跨域请求的权限。 Access-Control-Allow-Headers: 该响应头用于指示服务器允许的跨域请求头。服务器可以通过设置该头部来告知浏览器所允许的请求头，以控制跨域请求携带自定义头部的权限。 这些请求头和响应头是跨域请求中常见的一些标准头部，用于在浏览器和服务器之间进行跨域访问的协商和控制。它们的作用是确保跨域请求的安全性和权限控制。 ES6 的 map 和 Object 有什么区别？ES6中的Map和Object都是用于存储和操作数据的集合，但它们有以下几个主要区别： 键的类型：Object的键只能是字符串或符号，而Map的键可以是任意数据类型，包括原始类型和引用类型。 键值对的顺序：Map会按照插入顺序维护键值对的顺序，而Object不会保留插入顺序，它是基于哈希表实现的。 大小获取：Map有size属性可以获取键值对的数量，而Object没有内置的属性或方法可以直接获取键值对的数量，需要手动计算。 迭代遍历：Map提供了迭代器（Iterator）可以用于遍历键值对，包括for…of循环、forEach方法等，而Object需要使用Object.keys()、Object.values()或者for…in循环来遍历属性和值。 作为键的唯一性：Map中可以使用引用类型作为键，并且它们的引用不同也会被视为不同的键，而Object中使用的键会被转换为字符串，如果键的类型不是字符串或符号，会自动转换为字符串形式。 内存占用：由于Map的实现方式不同于Object，它在处理大量键值对时通常比Object占用更多的内存。 基于上述区别，选择使用Map还是Object取决于具体的需求。如果需要保持插入顺序、需要使用非字符串键或需要更灵活的键值对操作，可以选择使用Map。如果只需要简单的键值对映射、不关心顺序，或者键是字符串类型，可以使用Object。 一个盒子（div）从中间开始，碰到最左边的边界后往右移动，碰到最右边的边界后往左移动，这个怎么实现呢？&lt;div class=&quot;box&quot;&gt;&lt;/div&gt; css 实现方式 123456789101112131415161718192021.box &#123; width: 100px; height: 100px; background-color: red; position: absolute; left: 50%; transform: translateX(-50%); animation: moveBox 1s infinite linear;&#125;@keyframes moveBox &#123; 0% &#123; transform: translateX(-50%); &#125; 50% &#123; transform: translateX(calc(100% - 50px)); &#125; 100% &#123; transform: translateX(-50%); &#125;&#125; js 实现方式 123456789101112131415161718192021222324const box = document.querySelector(&#x27;.box&#x27;);const viewportWidth = window.innerWidth; // 拿到窗口的宽度const boxWidth = box.offsetWidth; // 盒子宽度let direction = 10; // 移动方向，1表示向右，-1表示向左function moveBox() &#123; const boxLeft = box.offsetLeft; // 拿到盒子与左边界的距离 if (boxLeft &lt;= 0) &#123; // 碰到最左边的边界，改变移动方向为向右 direction = 10; &#125; else if (boxLeft + boxWidth &gt;= viewportWidth) &#123; // 碰到最右边的边界，改变移动方向为向左 direction = -10; &#125; // 当 direction 数值为 1，left 会不停的 +1，向右移动 box.style.left = `$&#123;boxLeft + direction&#125;px`; requestAnimationFrame(moveBox);&#125;moveBox(); requestAnimationFrame 和 setInterval 有什么区别?window.requestAnimationFrame() 告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。 该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行。 回调函数执行次数通常是每秒 60 次，但在大多数遵循 W3C 建议的浏览器中，回调函数执行次数通常与浏览器屏幕刷新次数相匹配。 返回值 一个 long 整数，请求 ID，是回调列表中唯一的标识。是个非零值，没有别的意义。你可以传这个值给 window.cancelAnimationFrame() 以取消回调函数请求。 和 setInterval 区别 调用频率：requestAnimationFrame会根据浏览器的刷新频率进行调用，通常为每秒60次（60fps）。而setInterval则是按照设定的时间间隔进行调用。 动画性能：requestAnimationFrame在动画效果中具有更好的性能表现。它能够在浏览器的重绘之前执行回调函数，保证在合适的时机更新动画，避免造成过度绘制或不连续的动画效果。而setInterval则可能在浏览器重绘之间执行回调，导致动画不稳定或出现抖动。 暂停和恢复：使用requestAnimationFrame可以方便地暂停和恢复动画。通过控制回调函数的执行与否，可以在需要时停止动画，在恢复时重新启动动画。而使用setInterval时，如果需要暂停动画，需要清除定时器，并在恢复时重新设置定时器。 节省资源：由于requestAnimationFrame的调用频率与浏览器的刷新频率相匹配，因此它比setInterval更有效地利用了系统资源。它能够避免不必要的计算和绘制，提高页面性能和电池寿命。 如果要实现动画效果，尤其是在性能要求较高的情况下，推荐使用requestAnimationFrame。而setInterval适用于一些简单的定时任务，不涉及精确的动画效果。 PromisePromise.allPromise.all() 方法接收一个 promise 的 iterable 类型（注：Array，Map，Set 都属于 ES6 的 iterable 类型）的输入，并且只返回一个Promise实例，那个输入的所有 promise 的 resolve 回调的结果是一个数组。 这个Promise的 resolve 回调执行是在所有输入的 promise 的 resolve 回调都结束，或者输入的 iterable 里没有 promise 了的时候。 它的 reject 回调执行时，只要任何一个输入的 promise 的 reject 回调执行或者输入不合法的 promise 就会立即抛出错误，并且 reject 的是第一个抛出的错误信息。 失败/拒绝（Rejection）： 如果传入的 promise 中有一个失败（rejected），Promise.all 异步地将失败的那个结果给失败状态的回调函数，而不管其他 promise 是否完成。 Promise.allSettledPromise.allSettled() 方法以 promise 组成的可迭代对象作为输入，并且返回一个 Promise 实例。当输入的所有 promise 都已敲定时（包括传递空的可迭代类型），返回的 promise 将兑现，并带有描述每个 promsie 结果的对象数组 12345678910111213const promise1 = Promise.resolve(333);const promise2 = new Promise((resolve, reject) =&gt; setTimeout(reject, 100, &#x27;foo&#x27;));const promises = [promise1, promise2, 3];Promise.allSettled(promises).then(res =&gt; &#123; res.forEach(r =&gt; console.log(r))&#125;)// =====&gt; 输出&gt; Object &#123; status: &quot;fulfilled&quot;, value: 333 &#125;&gt; Object &#123; status: &quot;rejected&quot;, reason: &quot;foo&quot; &#125;&gt; Object &#123; status: &quot;fulfilled&quot;, value: 3 &#125; 跟 all 的区别就是，即使有 promise reject，也会返回所有的 promise 集合。 Promise.race()Promise.race(iterable) 方法返回一个 promise，一旦迭代器中的某个 promise 解决或拒绝，返回的 promise 就会解决或拒绝。 123456789101112131415161718192021222324252627282930313233343536373839var p1 = new Promise(function(resolve, reject) &#123; setTimeout(resolve, 500, &quot;one&quot;);&#125;);var p2 = new Promise(function(resolve, reject) &#123; setTimeout(resolve, 100, &quot;two&quot;);&#125;);Promise.race([p1, p2]).then(function(value) &#123; console.log(value); // &quot;two&quot; // 两个都完成，但 p2 更快&#125;);var p3 = new Promise(function(resolve, reject) &#123; setTimeout(resolve, 100, &quot;three&quot;);&#125;);var p4 = new Promise(function(resolve, reject) &#123; setTimeout(reject, 500, &quot;four&quot;);&#125;);Promise.race([p3, p4]).then(function(value) &#123; console.log(value); // &quot;three&quot; // p3 更快，所以它完成了&#125;, function(reason) &#123; // 未被调用&#125;);var p5 = new Promise(function(resolve, reject) &#123; setTimeout(resolve, 500, &quot;five&quot;);&#125;);var p6 = new Promise(function(resolve, reject) &#123; setTimeout(reject, 100, &quot;six&quot;);&#125;);Promise.race([p5, p6]).then(function(value) &#123; // 未被调用&#125;, function(reason) &#123; console.log(reason); // &quot;six&quot; // p6 更快，所以它失败了&#125;); 如何实现一个最多能并发执行 n 个 promise 的队列？1234567891011121314151617181920212223242526272829303132333435363738394041424344454647class PromiseSchedule &#123; constructor(max) &#123; this.list = [] this.max = max // 并发数 this.workingNum = 0 // 当前正在执行的数量 &#125; add(cb) &#123; this.list.push(cb) &#125; start() &#123; for (let i = 0; i &lt; this.max; i++) &#123; this.doNext() &#125; &#125; doNext() &#123; if (this.list.length &gt; 0 &amp;&amp; this.workingNum &lt; this.max) &#123; this.workingNum++ // 取出来执行 this.list.shift()().then(() =&gt; &#123; this.workingNum-- this.doNext() &#125;) &#125; &#125;&#125;const timeout = (time, value) =&gt; new Promise(resolve =&gt; setTimeout(resolve, time, value))const scheduler = new PromiseSchedule(2)const addTask = (time, value) =&gt; &#123; scheduler.add(() =&gt; timeout(time, value).then(res =&gt; &#123; console.log(&#x27;打印: &#x27;, res) &#125;))&#125;addTask(1000, 1)addTask(300, 2)addTask(500, 3)addTask(400, 4)scheduler.start() 这里设置的 2 并发数量，一次只能执行两个任务。 第一次 [1(1000ms), 2(300ms)]入列，执行 300ms 输出 2，3(500ms) 入列 第二次 [1(1000ms), 3(500ms)]，到了800ms，执行输出 3，4(400ms)入列 第三次 [1(1000ms), 4(400ms)]，到了1000ms，执行输出 1，还剩 [4(400ms)] 最后 输出 4 介绍 使用 Promise.race 处理 1234567891011121314151617181920212223242526272829303132333435function asyncFn (timeout) &#123; return new Promise(r =&gt; &#123; setTimeout(r, timeout, timeout); &#125;)&#125;const tasks = [ () =&gt; asyncFn(1000), () =&gt; asyncFn(4000), () =&gt; asyncFn(2000), () =&gt; asyncFn(3000),]async function limitRequest(tasks, limit = 2) &#123; const taskPool = new Set() // 主要是为了使用集合的操作方法 delete for (const task of tasks) &#123; const promise = task() taskPool.add(promise) promise.then(res =&gt; &#123; console.log(&#x27;2&#x27;, res) taskPool.delete(promise) &#125;) if (taskPool.size &gt;= limit) &#123; console.log(1) await Promise.race(taskPool) &#125; &#125; // 让 limitRequest 的 .then 最后执行 return Promise.all(taskPool)&#125;limitRequest(tasks) 串行执行多个 promise123456789101112131415161718192021222324252627282930313233343536373839const fn = (res = 0) =&gt; &#123; return new Promise(r =&gt; &#123; setTimeout(() =&gt; &#123; console.log(1) r(11 + res) &#125;, 1000) &#125;)&#125;function run(list) &#123; // 递归 // const f = list.shift() // if (f) &#123; // f().then(res =&gt; &#123; // console.log(res) // run(list) // &#125;) // &#125; // 循环 // 首先创建一个初始值为 resolved 状态的 Promise 对象 promise， // 每次将当前 Promise 对象和下一个函数 fn 组合成一个新的 Promise 对象， // 并将其赋值给 promise。 // 这样，每次循环都会生成一个新的 Promise 对象 // 它的状态取决于上一个 Promise 对象和当前函数的执行结果。 // 最后返回的是最后一个 Promise 对象，它的状态取决于所有函数的执行结果。 // 这个函数的作用是实现 Promise 链式调用 // 可以方便地处理多个异步操作的依赖关系。 let promise = Promise.resolve(0) console.log(promise) for(const fn of list) &#123; promise = promise.then(fn) &#125; return promise&#125;run([fn, fn, fn, fn]) 翻转单链表12345678910111213141516// 定义两个变量const head = NodeListlet prev = null // 用来充当末尾节点let curr = head // 让 curr 指向 headwhile(curr) &#123; head = curr curr = curr.next // 移动 curr head.next = prev // 执行翻转 prev = head&#125; cache设计题目描述 设计一个对象cache，它支持下列两个基本操作：set(id, object)，根据 id 设置对象；get(id)：根据id得到一个对象 同时它有下面几个性质： x秒自动过期，如果cache内的对象，x秒内没有被get或者set过，则会自动过期 对象数限制，该cache可以设置一个n，表示cache最多能存储的对象数； LRU置换，当进行set操作时，如果此时 cache内对象数已经到达了n个，则cache自动将最久未被使用过的那个对象剔除，腾出空间放置新对象； 请你设计这样一个cache ！ 对版本号从小到大进行排序sort 的 compareFn(a, b) 返回值表示 排序顺序 123&gt; 0 a 在 b 后，如 [b, a]，升序排列&lt; 0 a 在 b 前，如 [a, b]=== 0 保持 a 和 b 原来的顺序 1234567891011121314151617181920212223242526const versions = [&#x27;1.45.1&#x27;, &#x27;1.5&#x27;, &#x27;1.3.2&#x27;, &#x27;3.3.3.3&#x27;, &#x27;6&#x27;];function compareVersions(version1, version2) &#123; console.log(version1, version2) const nums1 = version1.split(&#x27;.&#x27;).map(Number); const nums2 = version2.split(&#x27;.&#x27;).map(Number); const maxLength = Math.max(nums1.length, nums2.length); for (let i = 0; i &lt; maxLength; i++) &#123; const num1 = nums1[i] || 0; const num2 = nums2[i] || 0; if (num1 &lt; num2) &#123; return -1; &#125; else if (num1 &gt; num2) &#123; return 1; &#125; &#125; return 0;&#125;const sortedVersions = versions.sort(compareVersions);console.log(sortedVersions); 给定一个字符串 str = &#39;a.b.c&#39;，获取对象的值12345678910111213141516171819202122const obj = &#123; a: &#123; b: &#123; c: &#x27;hello world&#x27; &#125; &#125;&#125;const str = &#x27;a.b.c&#x27;function getValue(str) &#123; const keys = str.split(&#x27;.&#x27;) let curr = obj while (keys.length) &#123; curr = curr[keys.shift()] &#125; return curr&#125;console.log(getValue(str)) Vue2 里面的 .sync实现父子组件之间数据的双向绑定，与 v-model 类似，主要是为了简化操作流程 1234567&lt;base-checkbox key=&quot;1&quot; :msg.sync=&quot;msg&quot; :msg1.sync=&quot;msg1&quot; /&gt;// base-checkbox 组件内部&lt;input :value=&quot;msg&quot; @input=&quot;$emit(&#x27;update:msg&#x27;, $event.target.value)&quot;/&gt; 我们修改 input 的内容，能够实时反应到父组件的数据。 1234567891011121314151617181920212223242526272829303132333435&lt;body&gt; &lt;div id=&quot;editor&quot;&gt; &lt;!-- 实时更新 msg msg1 --&gt; &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt; &lt;p&gt;&#123;&#123;msg1&#125;&#125;&lt;/p&gt; &lt;base-checkbox key=&quot;1&quot; :msg.sync=&quot;msg&quot; :msg1.sync=&quot;msg1&quot; /&gt; &lt;/div&gt; &lt;script&gt; Vue.component(&quot;base-checkbox&quot;, &#123; props: &#123; msg: String, msg1: String &#125;, template: ` &lt;div&gt; &lt;input :value=&quot;msg&quot; @input=&quot;$emit(&#x27;update:msg&#x27;, $event.target.value)&quot; /&gt; &lt;input :value=&quot;msg1&quot; @input=&quot;$emit(&#x27;update:msg1&#x27;, $event.target.value)&quot; /&gt; &lt;/div&gt; ` &#125;); new Vue(&#123; el: &quot;#editor&quot;, data: &#123; msg: &quot;msg&quot;, msg1: &quot;msg1&quot; &#125; &#125;); &lt;/script&gt;&lt;/body&gt; Vue中 setTimout/dom渲染/$nextTick在created中更改数据不会触发 beforeUpdate 和 updated 钩子函数 created 钩子函数执行的时候，Vue 实例已经创建，data 数据已经挂载，但是 DOM 还没有生成。beforeUpdate 和 updated 钩子函数是在数据改变导致的虚拟 DOM 重新渲染和打补丁时被调用的，也就是说这两个钩子函数是在 DOM 生成之后才会被调用的。所以在 created 钩子函数中修改数据，DOM 还没有生成，自然就不会触发 beforeUpdate 和 updated 钩子函数了。 beforeUpdate/updated/nextTick都是微任务 更新过程是：微任务 -&gt; dom渲染（微任务） -&gt; 宏任务 dom渲染Vue 的 DOM 更新操作是微任务。Vue 使用了一个叫做异步队列的机制，当数据发生变化时，Vue 会开启一个异步队列，并将所有的数据改变都推入这个队列。然后在下一个事件循环 “tick” 中，Vue 刷新队列并执行实际（已去重的）工作。Vue 在内部对异步队列尝试使用原生的 Promise.then、MutationObserver 和 setImmediate，如果执行环境不支持，则会采用 setTimeout(fn, 0) 代替。 setTimout中修改数据并使用nextTick的问题在调用nextTick之前，修改数据，$nextTick能够拿到最新的 dom 当nextTick在 setTimout 内部的最前面使用，再修改数据，nextTick无法拿到最新的 dom 原因 在不加 setTimeout 包裹的情况下，无论 nextTick 和修改数据的顺序如何，nextTick都会拿到最新的 dom 内容 那么 setTimeout 包裹后，微任务的执行顺序和 代码中的顺序一致。 看如下代码: 12345678910111213141516171819202122232425262728293031323334353637&lt;template&gt; &lt;div ref=&quot;box&quot; class=&quot;box&quot;&gt; &#123;&#123;a&#125;&#125;,&#123;&#123;b&#125;&#125; &lt;/div&gt;&lt;/template&gt;&lt;style scoped&gt;&lt;/style&gt;&lt;script&gt;export default &#123; data() &#123; return &#123; a: 1, b: 2, &#125; &#125;, mounted() &#123; setTimeout(() =&gt; &#123; // setTimeout 内部，DOM的异步更新方法和 nextTick 回调方法跟代码的顺序一致 this.$nextTick(() =&gt; &#123; console.log(&#x27;?&#x27;, this.$refs.box.innerHTML) // 1, 2 &#125;) this.b = 4 this.a = 3 &#125;, 2000) &#125;, beforeUpdate() &#123; console.log(&#x27;beforeUpdate &#x27;, this.a) console.log(&#x27;beforeUpdate &#x27;, this.b) &#125;, updated() &#123; console.log(&#x27;updated &#x27;, this.a) console.log(&#x27;updated &#x27;, this.b) &#125;,&#125;&lt;/script&gt; 怪异的 setTimeout如果不加 setTimeout 包裹，nextTick 永远都是在 updated 钩子之后执行，所以无论设置状态的操作和 nextTick 之间的顺序是什么，nextTick 都能拿到最新的 DOM 内容。 但是加了 setTimeout 就不一样了。 当 this.a 在 this.$nextTick 之前时，nextTick 能够拿到最新的 DOM。这个时候，更新 dom 的异步方法先进队列，然后是 beforeUpdate、updated。最后是 nextTick 回调函数进入队列，所以先执行了 更新DOM的异步方法，再执行了 nextTick callback 1234567setTimeout(() =&gt; &#123; this.a = 3 this.$nextTick(() =&gt; &#123; console.log(&#x27;?&#x27;, this.$refs.box.innerHTML) // 3, 4 &#125;) this.b = 4&#125;, 2000) 当 this.a 在 this.$nextTick 之后时，nextTick 会比 DOM的更新操作 先执行。这是因为 nextTick callback 先进入队列，DOM的更新操作紧随其后，然后是 beforeUpdate、updated。所以先执行了 nextTick callback，从而拿不到最新的 DOM。 1234567setTimeout(() =&gt; &#123; this.$nextTick(() =&gt; &#123; console.log(&#x27;?&#x27;, this.$refs.box.innerHTML) // 1, 2 &#125;) this.a = 3 this.b = 4&#125;, 2000) 如何提高前端页面的加载速度？ 使用路由懒加载、异步组件，实现组件模块的拆分，减少入口文件体积大小 抽离公共代码，采用 splitChunks 进行代码分割 组件加载、脚本模块采用按需加载的方式（import 方法） 浏览器缓存策略（HTTP强缓存、协商缓存），缓存静态资源 图片资源的亚索，雪碧图、对小图片采用 base64 减少 HTTP 请求 打包时开启 gzip 压缩处理，compress-webpack-plugin 使用 swc 、esbuild 压缩，提升构建效率 使用 swc 压缩代码，需要安装 @swc/core 包 123456789101112131415161718optimization: &#123; minimize: true, // 开发环境下启用 JS、CSS 优化 minimizer: [new TerserWebpackPlugin(&#123; minify: TerserWebpackPlugin.swcMinify, terserOptions: &#123;&#125; &#125;), new CssMinimizerPlugin()], splitChunks: &#123; cacheGroups: &#123; styles: &#123; name: &quot;styles&quot;, type: &quot;css/mini-extract&quot;, chunks: &quot;all&quot;, enforce: true, &#125;, &#125;, chunks: &#x27;all&#x27; &#125;,&#125;, 静态资源采用 CDN 提速"},{"title":"","date":"2024-06-11T08:52:17.489Z","updated":"2024-06-11T08:52:17.489Z","comments":false,"path":"demo/2023面试准备/模块化打包.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/%E6%A8%A1%E5%9D%97%E5%8C%96%E6%89%93%E5%8C%85.html","excerpt":"","text":"Webpack 找出模块之间的依赖关系，按照一定的规则把这些模块组织、合并为一个JavaScript（以下简写为JS）文件。 Webpack认为一切都是模块，如JS文件、CSS文件、jpg和png图片等都是模块。Webpack会把所有这些模块都合并为一个JS文件，这是它最本质的工作。 当然，我们可能并不想让它把这些模块都合并成一个JS文件，这时我们可以通过一些 规则或工具 来改变它最终打包生成的文件。 webpack &amp; webpack-cliwebpack是Webpack核心npm包 webpack-cli是命令行运行webpack命令所需的npm包 资源拆分我们可以把所有模块打包成一个 js 文件，但是，这样就会导致 js 过于庞大，我们希望可以将其拆分成JS、CSS和图片等资源。 Webpack提供了对拆分功能的支持，在构建的时候，可以通过Webpack的预处理器和插件等进行干预，把原本要打包成的一个.js文件拆分成JS、CSS和图片等资源。 打包模式Webpack的打包模式共有三种：production、development和none，这三种模式是通过mode参数来指定的。 production和development这两种模式会分别按照线上生产环境和本地开发环境进行一些优化处理，而none模式会保留原始的打包结果。 配置文件Webpack默认的配置文件是项目根目录下的 webpack.config.js 文件，在我们执行npx webpack命令的时候，Webpack会自动寻找该文件并使用其配置信息进行打包，如果找不到该文件就使用默认参数打包。 1234567891011// webpack.config.jsconst path = require(&#x27;path&#x27;)module.exports = &#123; mode: &#x27;none&#x27;, // 原模原样输出代码 entry: &#x27;./index.js&#x27;, output: &#123; path: path.resolve(__dirname, &#x27;dist&#x27;), // __dirname 是 nodejs 全局变量，表示当前文件的路径，使用 resolve 拼接 filename: &#x27;bundle.js&#x27; &#125;&#125; 我们创建两个 js 文件，一个是 index.js，一个是 test.js。 然后在 test.js 中创建几个变量和方法，并通过 export 导出，index.js 导入，执行如下命令。 12// terminalnpx webpack 控制台输出，表示打包成功。 123456asset bundle.js 3.18 KiB [emitted] (name: main)runtime modules 670 bytes 3 modulescacheable modules 203 bytes ./index.js 85 bytes [built] [code generated] ./test.js 118 bytes [built] [code generated]webpack 5.82.1 compiled successfully in 76 ms 配置文件资源入口 entry 入口entry是字符串形式 字符串形式entry已经在之前使用过了，这是最简单的形式，表示打包的入口JS文件。 入口entry是数组形式 表示数组的最后一个文件是资源的入口文件，数组的其余文件会被预先构建到入口文件中。 123456789101112131415&#123; //... entry: [&quot;core-js/stable&quot;, &quot;./a.js&quot;] //...&#125;=== 上面的配置和下面的是等效的 ===//a.jsimport &quot;core-js/stable&quot;// webpack.config.jsmodule.exports = &#123; entry: &#x27;./a.js&#x27;&#125; 入口entry是对象形式 对象形式的entry又被称为多入口配置。之前我们讲的都是单入口配置，就是打包后生成一个JS文件。 多入口配置就是打包后生成多个JS文件。 1234567891011121314// webpack.config.jsconst path = require(&#x27;path&#x27;)module.exports = &#123; mode: &#x27;none&#x27;, // 原模原样输出代码 entry: &#123; bundle: &#x27;./index.js&#x27;, vendor: &#x27;./vendor.js&#x27; &#125; output: &#123; path: path.resolve(__dirname, &#x27;dist&#x27;), // __dirname 是 nodejs 全局变量，表示当前文件的路径，使用 resolve 拼接 filename: &#x27;[name].js&#x27; &#125;&#125; 入口entry是函数形式 函数形式的entry，Webpack取函数返回值作为入口配置，返回值是上述三种形式之一即可。 函数形式的entry可以用来做一些额外的逻辑处理，不过在自己搭脚手架时很少使用。 资源出口 outputoutput就是资源出口配置项。 output的值是一个对象，它有几个重要的属性filename、path、publicPath和chunkFilename。 filename filename支持类似变量的方式生成动态文件名，如[hash]-bundle.js，其中方括号代表占位符，里面的hash表示特定的动态值。 webpack5 以前使用hash，webpack5中变成了fullhash，或者考虑使用chunkhash或contenthash。 特定动态值除了[hash]，还有[name]和[id]等。 1filename: &#x27;[name]-[fullhash:8].js&#x27; path 资源输出的绝对路径，存放在磁盘中。 如果你不设置它，Webpack默认其为dist目录。 1path: path.resolve(__dirname, &#x27;dist&#x27;) publicPath 配置项output中的publicPath表示的是资源访问路径，在Web开发时其默认值是字符串auto。 资源存放到磁盘后，浏览器如何知道该资源存放在什么位置呢？这个时候需要我们指定该资源的访问路径，这个访问路径就是用output.publicPath来表示的。 我们来看个示例，有三个 js 文件 index.js, test.js, test1.js，在 index.js 中，动态导入 test.js 和 test1.js。 1234567891011121314151617181920// test.jsconst myName = &#x27;alex&#x27;const age = 18const sayMe = function() &#123; console.log(myName + age)&#125;export default sayMe;// test1.jsconsole.log(&#x27;我是 test1.js&#x27;)// index.jsimport &#x27;./test.css&#x27;import(&#x27;./test&#x27;).then(module =&gt; &#123; module.default() &#125;)import(&#x27;./test1.js&#x27;) 然后我们 webpack 配置不变，不加 publicPath 进行打包。 123456789101112131415const path = require(&#x27;path&#x27;)module.exports = &#123; mode: &#x27;none&#x27;, entry: &#x27;./index.js&#x27;, output: &#123; path: path.resolve(__dirname, &#x27;dist&#x27;), filename: &#x27;bundle.js&#x27;, &#125;, module: &#123; rules: [&#123; test: /\\.css$/, use: [&#x27;style-loader&#x27;, &#x27;css-loader&#x27;] &#125;] &#125;&#125; 我们会发现生成的 dist 目录下有三个文件，bundle.js, 1.bundle.js, 2.bundle.js。 bundle.js是从入口文件index.js开始打包生成的output.filename指定的文件，1.bundle.js, 2.bundle.js是动态加载JS模块而生成的异步资源文件，test.js文件被单独打包成1.bundle.js文件，test1.js文件被单独打包成2.bundle.js文件。 我们打开 index.html 页面，并查看 network，会发现这几个资源文件，都在 dist 目录下。 123http://127.0.0.1:5500/source/demo/webpack5/dist/bundle.jshttp://127.0.0.1:5500/source/demo/webpack5/dist/1.bundle.jshttp://127.0.0.1:5500/source/demo/webpack5/dist/2.bundle.js 那我们加上 publicPath 属性试试，看看会有什么效果呢。 其余都不变，给 output 加上 publicPath： 12345output: &#123; path: path.resolve(__dirname, &#x27;dist&#x27;), filename: &#x27;bundle.js&#x27;, publicPath: &#x27;./assets/&#x27;&#125;, 打包成功后，刷新页面，会发现控制台里已经报错，1.bundle.js, 2.bundle.js 资源 404。 12http://127.0.0.1:5500/source/demo/webpack5/assets/1.bundle.jshttp://127.0.0.1:5500/source/demo/webpack5/assets/2.bundle.js 原来，浏览器是从 assets 目录下加载了这两个资源文件，而我们根本没有创建这个 assets 目录，并且 1.bundle.js, 2.bundle.js 是在 dist 目录下，所以找不到资源了。 在把publicPath设置为assets/ 、 ./assets/ 、../assets/这类路径时，它是相对于当前HTML页面路径取值的。 如果 publicPath 的值是以 / 开头，则是相对于服务器地址，表示要访问的资源以当前页面的服务器地址根目录作为基础路径。 我们来看看示例： 12345output: &#123; path: path.resolve(__dirname, &#x27;dist&#x27;), filename: &#x27;bundle.js&#x27;, publicPath: &#x27;/assets/&#x27;&#125;, 打包后，刷新页面，会发现动态加载的资源 404了，因为浏览器是从服务器根路径开始加载的 1.bundle.js &amp; 2.bundle.js 12http://127.0.0.1:5500/assets/1.bundle.jshttp://127.0.0.1:5500/assets/2.bundle.js publicPath 也可以直接写绝对HTTP地址 12345output: &#123; path: path.resolve(__dirname, &#x27;dist&#x27;), filename: &#x27;bundle.js&#x27;, publicPath: &#x27;https://www.baidu.com/assets/&#x27;&#125;, 12https://www.baidu.com/assets/1.bundle.jshttps://www.baidu.com/assets/2.bundle.js 相对HTTP协议地址以//开头 与绝对HTTP协议地址相比，它省略了前面的https:或http:。 在使用相对HTTP协议地址的时候，浏览器会将当前页面使用的协议名称与相对协议地址拼接，这样本质上与使用绝对HTTP协议地址是一样的。 12345output: &#123; path: path.resolve(__dirname, &#x27;dist&#x27;), filename: &#x27;bundle.js&#x27;, publicPath: &#x27;//www.baidu.com/assets/&#x27;&#125;, chunkFilename chunkFilename也用来表示打包后生成的文件名，那么它和filename有什么区别呢？ chunkFilename表示的是打包过程中非入口文件的chunk名称，通常在使用异步模块的时候，会生成非入口文件的chunk。在前面的例子中，index.js文件里有import（’./test.js’），其中的test.js就是一个异步模块，它被打包成1.bundle.js文件，这个名称就是默认的output.chunkFilename。与output.filename一样，它支持占位符，例如使用[id].js。 123456output: &#123; path: path.resolve(__dirname, &#x27;dist&#x27;), filename: &#x27;bundle.js&#x27;, publicPath: &#x27;./dist/&#x27;, chunkFilename: &#x27;[chunkhash].js&#x27;, // 新增&#125;, 打包后，就不会在有 1.bundle.js了，因为我们生成非入口的文件改了名字： 166ba79be0b67ead70ee6.js webpack预处理器 LoaderWebpack在打包的时候，将所有引入的资源文件都当作模块来处理。 但Webpack在不进行额外配置时，自身只支持对JS文件JSON文件模块的处理，如果你引入了一个CSS文件或图片文件，那么Webpack在处理该模块的时候，会通过控制台报错：Module parse failed…You may need an appropriate loader to handle this file type。 Webpack社区也提供了比较成熟的预处理器，我们可以直接拿来使用，例如使用file-loader和url-loader来处理图片等资源，使用babel-loader来对ES6进行转码，使用vue-loader来处理Vue组件。 处理 CSS需要两个 loader, 分别是css-loader与style-loader。 css-loader是必需的，它的作用是解析CSS文件，包括解析@import等CSS自身的语法。它的作用仅包括解析CSS文件，它会将解析后的CSS文件以字符串的形式打包到JS文件中。不过，此时的CSS样式并不会生效，因为需要把CSS文件插入HTML文件中才会生效。 此时，style-loader就可以发挥作用了，它可以把JS里的样式代码插入HTML文件中。它的原理很简单，就是通过JS动态生成style标签并将其插入HTML文件的head标签中。 1234567891011121314151617// webpack.config.jsmodule.exports = &#123; mode: &#x27;none&#x27;, entry: &#x27;./index.js&#x27;, output: &#123; path: path.resolve(__dirname, &#x27;dist&#x27;), filename: &#x27;bundle.js&#x27; &#125;, module: &#123; rules: [&#123; // 取值是一个正则表达式，表示的含义是当文件名后缀是.css的时候，我们使用对应use项里的预处理器 test: /\\.css$/, // 取值是一个数组，数组每一项是一个预处理器。预处理器的执行顺序是从后向前执行，先执行css-loader，然后把css-loader的执行结果交给style-loader执行。 use: [&#x27;style-loader&#x27;, &#x27;css-loader&#x27;] &#125;] &#125;&#125; 源码如下： 1234567891011// index.jsimport &#x27;./test.css&#x27;import sayMe from &#x27;./test&#x27;sayMe()// test.css.hello &#123; color: red;&#125; index.html 12345678910111213&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1 class=&quot;hello&quot;&gt;Webpack5&lt;/h1&gt; &lt;script src=&quot;./dist/bundle.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; loader配置项预处理器本质上是一个函数，它接收一个资源模块，然后将其处理成Webpack能使用的形式。 用法，以处理 css 为例： 123456789101112131415161718192021module.exports = &#123; mode: &#x27;development&#x27;, entry: &#x27;./index.js&#x27;, output: &#123; path: path.resolve(__dirname, &#x27;dist&#x27;), filename: &#x27;bundle.js&#x27;, publicPath: &#x27;./assets/&#x27;, chunkFilename: &#x27;[chunkhash:8].js&#x27; &#125;, module: &#123; // 模块 rules: [ // 处理 css 文件 &#123; test: /\\.css$/, use: [&#x27;style-loader&#x27;, &#x27;css-loader&#x27;], // 如果是单一loader，use 可以是字符串，如果要给 loader 传参，那么 use 可以配置成对象形式 include: /src/, // 只对 src 目录下的文件做处理 exclude: /node_modules/, // 不处理 node_modules 下的文件 &#125;, ] &#125;&#125; 处理 ES6 语法安装 babel-loader 12345// 需要babel 核心包npm install -D @babel/core@7.13.0 babel-loader@8.2.2// 需要presets包，它表示预设插件的集合，对ES6最新语法进行转码npm install -D @babel/presets-env@7.13.10 1234567891011121314151617// 处理 es6，低版本浏览器并不支持 es6 最新语法&#123; module: &#123; rules: [ &#123; test: /\\.js$/, exclude: /node_modules/, use: &#123; loader: &#x27;babel-loader&#x27;, options: &#123; presets: [&#x27;@babel/presets-env&#x27;] &#125; &#125; &#125; ] &#125;&#125; babel-loader配置项options除了可以设置常规的Babel配置项，还可以开启缓存。可以通过增加cacheDirectory：true属性来开启缓存。在初次打包后再次打包，如果JS文件未发生变化，可以直接使用初次打包后的缓存文件，这样避免了二次转码，可以有效提高打包速度。 1234567&#123; loader: &#x27;babel-loader&#x27;, options: &#123; cacheDirectory：true, presets: [&#x27;@babel/presets-env&#x27;] &#125;&#125; 处理图片资源 使用file-loader 123456789// index.jsimport imgSrc from &#x27;../../img/babel.jpg&#x27;const imgDom = `&lt;img src=&quot;$&#123;imgSrc&#125;&quot;/&gt;`window.onload = function() &#123; const img = document.getElementById(&#x27;img&#x27;) img.innerHTML = imgDom&#125; 将 file-loader 配置到 webpack.config.js 中。 123456789module: &#123; rules: [&#123; test: /\\.css$/, use: [&#x27;style-loader&#x27;, &#x27;css-loader&#x27;] &#125;, &#123; test: /\\.(jpg|png|jpeg)$/, use: &#x27;file-loader&#x27; &#125;]&#125; 处理 css 中的图片资源看似什么都不用处理，但是当你打包后，dist 目录下有两个 jpg 的文件，其中一个无法打开，而页面中 css 中引入的图片资源，就是那个无法加载出来图片。 这是因为 css-loader 会对 @import 和 url() 进行处理，就像 js 解析 import/require() 一样 所以我们使用 file-loader 时，需要将 css 中的图片采用 commonjs 的方式去引入，而不是 esmodule。 解决办法： 123456789101112module: &#123; rules: [&#123; test: /\\.(jpg|png|jpeg)$/, use: &#123; loader: &#x27;file-loader&#x27;, options: &#123; esModule: false // 使用 commonjs 规范 &#125;, &#125;, type: &#x27;javascript/auto&#x27; &#125;]&#125; 重新打包，这时css图片就能正常加载了，而且 dist 目录下，也只有一张图片的资源。 插件-清理打包后文件 clean-webpack-plugin插件是在Webpack编译的某些阶段，通过调用Webpack对外暴露出的API来扩展Webpack的能力的。 123456const &#123; CleanWebpackPlugin &#125; = require(&#x27;clean-webpack-plugin&#x27;)// webpack.config.jsplugins: [ new CleanWebpackPlugin()] webpack devServer到目前为止，我们都是通过打包后再查看页面的效果，这样太麻烦了，每次修改后都要打包。 有两种方式： 文件监听模式 只需要加上 –watch 属性即可 1npx webpack --watch 这时，命令行程序不会退出，当我们修改文件内容，会发现页面刷新了，同时更新了我们最新的代码。 webpack-dev-server 它通过开启一个本地服务器来加载构建完成的资源文件，它还有代理请求等功能。构建完成的资源文件在内存中，而不是存在于磁盘。 模块热替换是一个非常强大的功能，它可以在不刷新浏览器页面的情况下，直接替换修改代码部分的页面位置，能有效提高我们的开发效率。 1234567891011121314151617181920module.exports = &#123; mode: &#x27;none&#x27;, entry: &#x27;./index.js&#x27;, output: &#123; path: path.resolve(__dirname, &#x27;dist&#x27;), filename: &#x27;bundle.js&#x27;, &#125;, devServer: &#123; port: 8888, open: true, hot: true, // 启用 模块热替换 compress: true, // 启用静态资源压缩 &#125;, plugins: [ new CleanWebpackPlugin(), new HTMLWebpackPlugin(&#123; template: &#x27;./index.html&#x27; &#125;) ]&#125; 使用模块热替换功能时，需要使用webpack.HotModuleReplacementPlugin插件的能力。在Webpack 5中，将hot参数设置为true时，会自动添加该插件，不需要我们进行额外的配置。 在我们的前端项目里，开启了模块热替换功能后，它并不会自动运行，它需要使用者触发。在模块文件里，需要使用module.hot接口来触发该功能。 示例： 我们可以在 index.html 文件中写入一个 input 标签 12345678&lt;body&gt; &lt;h1 class=&quot;hello&quot;&gt;Webpack55&lt;/h1&gt; &lt;input type=&quot;text&quot; /&gt; &lt;div id=&quot;img&quot;&gt;&lt;/div&gt; &lt;!-- &lt;script src=&quot;./dist/bundle.js&quot;&gt;&lt;/script&gt; --&gt;&lt;/body&gt; 然后到 index.js 中，写下这样一段代码: 1234// 触发 HMRif (module.hot) &#123; module.hot.accept()&#125; 我们做个实验，在 input 标签中输入一些文字，然后修改 index.js 的 console.log 代码，你会发现，页面上并没有刷新，也就是说，input 的内容没有被刷掉。但是 js 打印更新了。 我们还可以做实验： 比如，触发 HMR 的逻辑，不放到 index.js(入口文件)中，而是放到别的文件中去。 我们创建一个 test.js 文件，将，触发 HMR 的逻辑放进来，然后 index.js 导入 test.js。 回到页面上，在 input 中输入文字，然后到 index.js 中修改 console.log代码，页面刷新了，input 的内容也清空了。 我们再到 input 中输入文字，然后回到 test.js 中，修改 console.log 代码，这时，页面不会刷新了，input 内容不会被刷掉，但是 test.js 文件更新了。 我们可以在需要 HMR 的文件中，加入 HMR 触发逻辑。 为了方便，也可以直接将 HMR 的触发逻辑，放到项目的入口文件中 main.js，之后其他文件改动，都不会刷新整个页面了。 为了减轻开发者的负担，社区常用的预处理器提供了支持模块热替换的功能，例如style-loader、vue-loader和react-hot-loader等。在使用这些工具的时候，它们会自动注入module.hot相关代码，完成模块热替换的工作，无须开发者手动调用，极大地减少了开发者的工作量。 其他框架使用 HMR https://webpack.docschina.org/guides/hot-module-replacement/#other-code-and-frameworks 1npm install react-hot-loader 1234// .babelrc&#123; &quot;plugins&quot;: [&quot;react-hot-loader/babel&quot;]&#125; 1234// App.jsimport &#123; hot &#125; from &#x27;react-hot-loader/root&#x27;;const App = () =&gt; &lt;div&gt;Hello World!&lt;/div&gt;;export default hot(App); Make sure react-hot-loader is required before react and react-dom or import ‘react-hot-loader’ in your main file (before React) or prepend your webpack entry point with react-hot-loader/patch, for example 12345// webpack.config.jsmodule.exports = &#123; entry: [&#x27;react-hot-loader/patch&#x27;, &#x27;./src&#x27;], // ...&#125;; If you need hooks support, use @hot-loader/react-dom webpack source map如果没有将Webpack配置文件的mode设置为none，那么编译后的代码会对我们的原始代码做压缩、整合等操作。而且如果使用webpack-dev-server开启的服务，打包后的代码中也会包含非常多与业务代码无关的Webpack代码。编译打包后的代码与原始代码差别非常大，我们很难调试，开发效率较低。 想要在浏览器里直接看到打包前的代码，就需要使用source map。 source map是一个单独的文件，浏览器可以通过它还原出编译前的原始代码。 123// webpack.config.jsdevtool: &#x27;source-map&#x27; 当配置了 source map 之后，我们再执行打包命令，会发现 dist 目录下多了几个 .map 结尾的文件，这就是 source map 文件。 source-map比较利于定位线上问题和调试代码，但其他人都可以通过浏览器开发者工具看到原始代码，有严重的安全风险，因此不推荐生产环境中用这个类型。基于同样的安全风险考虑，我们也不推荐使用inline-source-map。 Asset Modules 资源模块 Asset Modules通常被翻译为资源模块，它指的是图片和字体等这一类型文件模块，它们无须使用额外的预处理器，Webpack通过一些配置就可以完成对它们的解析。 该功能是Webpack 5新加入的，与file-loader等预处理器的功能很像。 回顾一下file-loader的作用，它解析文件导入地址并将其替换成访问地址，同时把文件输出到相应位置。导入地址包括了JS和CSS等导入语句的地址，例如JS的import和CSS的url()。 在 处理 css 中的图片资源 中，我们如果仅仅使用 file-loader 来处理，会发现页面上无法正确显示图片。最后是采用了 esModule: false 以及 type: &#39;javascript/auto&#39; 的方式，使用 commonjs 来加载图片资源。 12345678910&#123; test: /\\.(jpg|png|jpeg)$/, use: &#123; loader: &#x27;file-loader&#x27;, options: &#123; esModule: false &#125;, &#125;, type: &#x27;javascript/auto&#x27;&#125; 在 webpack5 中有了 Asset Modules，我们加上 type: &#39;asset/resource&#39; 配置即可。 123456789module: &#123; rules: [&#123; test: /\\.css$/, use: [&#x27;style-loader&#x27;, &#x27;css-loader&#x27;] &#125;, &#123; test: /\\.(jpg|png|jpeg)$/, type: &#x27;asset/resource&#x27; &#125;]&#125; Asset Modules的几个主要配置项都存放在module.rules里，关键的配置项叫type，它的值有以下四种： asset/resource：与之前使用的file-loader很像，它处理文件导入地址并将其替换成访问地址，同时把文件输出到相应位置。 asset/inline：与之前使用的url-loader很像，它处理文件导入地址并将其替换为data URL，默认是Base64格式编码的URL。 执行打包命令，文件目录里不会新增图片文件，因为原始图片已经被处理成Base64格式编码的data URL并直接存放于打包生成的资源bundle.js文件里了。 asset/source：与raw-loader很像，以字符串形式导出文件资源。 1234&#123; test: /\\.txt/, type: &#x27;asset/source&#x27;&#125; 所有 .txt 文件将原样注入到 bundle 中。 123import sourceText from &#x27;./test.txt&#x27;console.log(&#x27;sourceText &#x27;, sourceText) // hello world asset：Webpack默认对大于8KB的资源会以asset/resource的方式处理，否则会以asset/inline的方式处理。 自定义资源名 通过generator.filename配置项来配置 在module.rules里增加了generator.filename配置项 123456789101112module: &#123; rules: [&#123; test: /\\.css$/, use: [&#x27;style-loader&#x27;, &#x27;css-loader&#x27;] &#125;, &#123; test: /\\.(jpg|png|jpeg)$/, type: &#x27;asset/resource&#x27;, generator: &#123; filename: &#x27;static/[hash:8][ext][query]&#x27; // 表示处理生成的图片在static目录下，其名称是8位hash值与后缀名的组合。 &#125; &#125;]&#125; 在output里配置 在output里增加了assetModuleFilename配置项，该配置项用来表示资源模块处理文件后的名称。 12345output: &#123; path: path.resolve(__dirname, &#x27;dist&#x27;), filename: &#x27;bundle.js&#x27;, assetModuleFilename: &#x27;static/[hash:8][ext][query]&#x27;&#125;, 这两种方式配置资源文件名称的效果是一样的，并且仅可用于type取值是asset和asset/resource的情况。 生产环境配置实际开发中，开发环境的配置和生产环境的配置有很多是相同的。 相同的配置要分别与开发环境和生产环境合并，我们会用到 webpack-merge 这个工具，它类似于Object.assign方法，但它比Object.assign更加强大，非常适合对Webpack的配置项进行合并。 那我们在构建时，如何区分生产环境和开发环境呢？ 使用环境变量。 在我们使用Webpack的过程中，会遇到以下两种环境变量。 Node.js环境里的环境变量。（执行JS代码时可以获取到的环境变量，它们存放在process.env模块中） Webpack打包模块里的环境变量。 Nodejs 环境变量在实际开发中，我们一般需要设置跨操作系统的环境变量。通常，在npm的package.json文件中，我们可以通过跨操作系统的cross-env MY_ENV=dev这种方式进行环境变量的设置。 123安装yarn install cross-env -D 12345// package.json&quot;script&quot;: &#123; &quot;build&quot;: &quot;cross_env MY_ENV=dev webpack&quot;&#125; 本地开发环境可以使用 cross-env NODE_ENV=development，生产环境可以使用cross-env NODE_ENV=production。 123// webpack.config.jsconsole.log(&#x27;环境变量 &#x27;, process.env.NODE_ENV) 注意：我们配置的 Nodejs 环境变量，在 js 脚本文件中是无法被获取到的，因为 js 脚本通过 html 引入，无法获取 Nodejs 中的环境变量。 webpack 环境变量在实际开发中，我们有时候需要在业务逻辑代码里根据此代码是运行在本地开发环境还是线上生产环境里做区分，这个时候就需要在业务模块文件里注入环境变量。 我们通过DefinePlugin插件来设置打包模块里的环境变量，它是Webpack自带的一个插件。 123456plugins: [ new webpack.DefinePlugin(&#123; isMe: &quot;&#x27;YES&#x27;&quot;, env: JSON.stringify(&#x27;development&#x27;) &#125;)] 需要注意的是，我们在设置一个字符串值的时候，需要在外层再包裹一层引号，或者使用JSON.stringify()方法。如果不进行一层额外包裹，Webpack会把该字符串当成一个变量来处理。 然后到 index.js 文件中，直接获取定义的变量即可： 1console.log(&#x27;webpack : &#x27;, isMe, env) 样式文件提取 MiniCssExtractPluginWebpack 3及之前的版本里常用到的插件是extract-text-webpack-plugin，Webpack 3之后的版本里一般用的插件是mini-css-extract-plugin。 本插件会将 CSS 提取到单独的文件中，为每个包含 CSS 的 JS 文件创建一个 CSS 文件，并且支持 CSS 和 SourceMaps 的按需加载。 异步加载 没有重复的编译（性能） 更容易使用 特别针对 CSS 开发 使用mini-css-extract-plugin插件时有以下两个关键点： 一是它自身带有一个预处理器，在用css-loader处理完CSS模块后，需要紧接着使用MiniCssExtractPlugin.loader这个预处理器。 二是它需要在Webpack配置文件的插件列表进行配置，执行new MiniCssExtractPlugin命令时需要传入一个对象，filename表示同步代码里提取的CSS文件名称，chunkFilename表示异步代码里提取的CSS文件名称。 1234567891011121314151617181920212223module: &#123; rules: [&#123; test: /\\.css$/, use: [ MiniCssExtractPlugin.loader, &#x27;css-loader&#x27; ] &#125;]&#125;,plugins: [ new CleanWebpackPlugin(), // 清空 dist new HTMLWebpackPlugin(&#123; // 自动帮我们引入脚本和 css 文件 template: &#x27;./index.html&#x27; &#125;), new webpack.DefinePlugin(&#123; isMe: &quot;&#x27;YES&#x27;&quot;, env: JSON.stringify(&#x27;development&#x27;) &#125;), new MiniCssExtractPlugin(&#123; filename: &#x27;[name]-[contenthash:8].css&#x27;, // 同步代码里提取的CSS文件名称。 chunkFilename: &#x27;[id].css&#x27; // 异步代码里提取的CSS文件名称。 &#125;)] 将所有 css 提取到一个文件使用 optimization.splitChunks.cacheGroups 选项，所有的 CSS 可以被提取到一个 CSS 文件中。 1234567891011121314151617181920212223242526272829const MiniCssExtractPlugin = require(&quot;mini-css-extract-plugin&quot;);module.exports = &#123; optimization: &#123; splitChunks: &#123; cacheGroups: &#123; styles: &#123; name: &quot;styles&quot;, // css 文件对应的 name type: &quot;css/mini-extract&quot;, chunks: &quot;all&quot;, enforce: true, &#125;, &#125;, &#125;, &#125;, plugins: [ new MiniCssExtractPlugin(&#123; filename: &quot;[name]-[contenthash:8].css&quot;, // 输出 styles-24340912.css &#125;), ], module: &#123; rules: [ &#123; test: /\\.css$/, use: [MiniCssExtractPlugin.loader, &quot;css-loader&quot;], &#125;, ], &#125;,&#125;; yarn build 后，我们会发现 dist 下只有一个 css 文件了。 dist/styles-24340912.css 长期缓存 contenthash使用 filename: “[contenthash].css” 启动长期缓存。根据需要添加 [name]。 12345plugins: [ new MiniCssExtractPlugin(&#123; filename: &quot;[name]-[contenthash:8].css&quot;, &#125;),], 处理 sass在业务开发中，我们通常会采用Sass或Less来书写样式文件，本节介绍Sass样式文件如何进行处理，Less样式文件的处理也是类似的。 处理Sass样式文件需要使用sass-loader预处理器，使用它需要先安装sass-loader这个npm包。sass-loader底层依赖于Node Sass或Dart Sass进行处理，它们对应的npm包的名称分别是node-sass和sass。因为node-sass包在安装使用过程中容易遇到一些问题，所以我们推荐使用sass这个npm包。 1npm install -D sass@1.32.8 sass-loader@11.0.1 Sass有两种书写样式的方式，分别是Sass和Scss，这里我们采用Scss的书写方式。 12345678// test.scssbody &#123; background: pink url(&#x27;../../img/home.jpg&#x27;); .hello &#123; color: red; &#125;&#125; 然后在入口文件中引入 test.scss 修改 webpack.config.js 12345678910module: &#123; rules: [&#123; test: /\\.(scss|css)$/, use: [ MiniCssExtractPlugin.loader, &#x27;css-loader&#x27;, &#x27;sass-loader&#x27; ] &#125;,&#125; PostCssPostCSS是一个转换CSS的工具，但它本身没有提供具体的样式处理能力。我们可以认为它是一个插件平台，具体的样式处理能力由它转交给专门的样式插件来处理。 在Webpack中使用PostCSS，需要安装postcss-loader这个npm包。在Webpack文件里配置处理样式模块规则时，让postcss-loader在css-loader之前进行处理即可。 1npm install -D postcss-loader@5.1.0 在使用PostCSS的时候也需要增加相应的配置文件，我们在工程根目录下增加postcss.config.js文件。 12345678910111213// webpack.config.jsmodule: &#123; rules: [&#123; test: /\\.(scss|css)$/, use: [ MiniCssExtractPlugin.loader, &#x27;css-loader&#x27;, &#x27;postcss-loader&#x27;, // 新增 &#x27;sass-loader&#x27; ] &#125;,&#125; 我们css 中加入 flex 样式 123456789body &#123; background: pink url(&#x27;../../img/home.jpg&#x27;); .hello &#123; color: red; display: flex; justify-content: center; &#125;&#125; 如果我们不配置 postcss.config.js，那么打包后跟之前打包的结果没有任何区别。 在开发过程中，我们使用PostCSS最重要的一个功能就是提供CSS样式浏览器厂商私有前缀，它是通过Autoprefixer来实现的。我们也可以通过postcss-preset-env来实现该功能，postcss-preset-env里包含了Autoprefixer，我们先使用Autoprefixer。 1npm install -D autoprefixer@10.2.5 配置 postcss.config.js 12345678910const autoprefixer = require(&#x27;autoprefixer&#x27;)module.exports = &#123; plugins: [ autoprefixer(&#123; browsers: [ &#x27;chrome &gt;= 18&#x27; ] &#125;) ]&#125; 其实这个 browsers 也可以在 package.json 中配置 browserslist。 123&quot;browserslist&quot;: [ &quot;chrome &gt;= 18&quot;] 我们再重启项目，查看样式代码 123456789.hello &#123; color: red; display: -webkit-box; display: -webkit-flex; display: flex; -webkit-box-pack: center; -webkit-justify-content: center; justify-content: center;&#125; 合并配置 webpack-merge1npm install -D webpack-merge@5.7.3 我们在package.json文件里配置了两个npm命令，分别对应本地开发环境打包和生产环境打包。 1234&quot;scripts&quot;: &#123; &quot;start&quot;: &quot;cross-env NODE_ENV=development webpack serve&quot;, &quot;build&quot;: &quot;cross-env NODE_ENV=production webpack&quot;&#125;, 我们可以直接在 webpack.config.js 中通过环境变量的判断，来应对生产环境和开发环境，但是当项目庞大起来了，配置越来越多且复杂的时候，这种方式就不优雅了。 业界流行的解决办法是把开发环境与生产环境公共的配置提取到一个单独的文件里，然后分别维护一份开发环境的配置文件和一份生产环境的配置文件，并将公共配置文件的JS代码合并到这两个文件里。 1234567891011121314151617181920212223// webpack.common.jsconst path = require(&#x27;path&#x27;)const HTMLWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;)module.exports = &#123; mode: &#x27;none&#x27;, entry: &#x27;./index.js&#x27;, output: &#123; path: path.resolve(__dirname, &#x27;dist&#x27;), filename: &#x27;bundle.js&#x27;, &#125;, devServer: &#123; port: 8888, hot: true &#125;, module: &#123;&#125;, plugins: [ new HTMLWebpackPlugin(&#123; template: &#x27;./index.html&#x27; &#125;) ]&#125; 12345678910111213141516171819// webpack.development.jsconst &#123; merge &#125; = require(&#x27;webpack-merge&#x27;) const common = require(&#x27;./webpack.common.js&#x27;)module.exports = merge(common, &#123; module: &#123; rules: [&#123; test: /\\.(scss|css)$/, use: [ &#x27;css-loader&#x27;, &#x27;postcss-loader&#x27;, &#x27;sass-loader&#x27; ] &#125;, &#123; test: /\\.(jpg|png|jpeg)$/, type: &#x27;asset/resource&#x27; &#125;] &#125;&#125;) 123456789101112131415161718192021222324252627// webpack.production.jsconst &#123; merge &#125; = require(&#x27;webpack-merge&#x27;)const common = require(&#x27;./webpack.common.js&#x27;)const MiniCssExtractPlugin = require(&#x27;mini-css-extract-plugin&#x27;)module.exports = merge(common, &#123; module: &#123; rules: [&#123; test: /\\.(scss|css)$/, use: [ MiniCssExtractPlugin.loader, &#x27;css-loader&#x27;, &#x27;postcss-loader&#x27;, &#x27;sass-loader&#x27; ] &#125;, &#123; test: /\\.(jpg|png|jpeg)$/, type: &#x27;asset/resource&#x27; &#125;] &#125;, plugins: [ new MiniCssExtractPlugin(&#123; filename: &#x27;[name]-[contenthash:8].css&#x27;, chunkFilename: &#x27;[id].css&#x27; &#125;) ]&#125;) 1234&quot;scripts&quot;: &#123; &quot;start&quot;: &quot;cross-env NODE_ENV=development webpack serve --config webpack.development.js&quot;, &quot;build&quot;: &quot;cross-env NODE_ENV=production webpack --config webpack.production.js&quot;&#125;, 性能优化Webpack性能优化总体包括两部分，分别是开发环境的优化与生产环境的优化。 打包体积分析工具 webpack-bundle-analyzerwebpack-bundle-analyzer开启的分析页面，这个页面可以通过控制鼠标来进行放大、缩小等操作。 1npm install -D webpack-bundle-analyzer@4.3.0 123456789const BundleAnalyzerPlugin = require(&#x27;webpack-bundle-analyzer&#x27;).BundleAnalyzerPlugin// ...&#123; plugins: [ new BundleAnalyzerPlugin() ]&#125; 如果你有一个 webpack stats JSON 文件，那么可以分析现有的 bundle。 12345678&#123; plugins: [ new BundleAnalyzerPlugin(&#123; analyzerMode: &#x27;disabled&#x27;, // 禁用模式 generateStatsFile: true, // 设置为 true 来使用这个插件生成 Webpack Stats JSON 文件。 &#125;) ]&#125; 现在我们执行 yarn build，就会发现 dist 目录下多出来了一个 stats.json 文件，它包含了静态资源、模块之间的依赖等等大量信息。 然后就可以通过 webpack-bundle-analyzer 来分析当前打出来的 bundle 了。 123// 命令行npx webpack-bundle-analyzer ./dist/stats.json 打包速度分析工具 - speed-measure-webpack-pluginspeed-measure-webpack-plugin工具可以帮我们分析Webpack在打包过程中 loader 和 plugin 等花费的时间。 压缩JS文件 - terser-webpack-plugin在Webpack 4之前，我们会使用webpack.optimize.UglifyJsPlugin或webpack-parallel-uglify-plugin这一类的插件进行JS文件压缩，现在我们通常使用terser-webpack-plugin插件进行JS文件压缩。 在Webpack 5中，在安装Webpack时会自动安装terser-webpack-plugin插件，因此不需要我们单独安装。 然后在 optimization 中配置 minimizer，不过这将仅在生产环境开启 CSS 优化。 如果还想在开发环境下启用 CSS 优化，将 optimization.minimize 设置为 true 1234567const TerserWebpackPlugin = require(&#x27;terser-webpack-plugin&#x27;)// webpack.config.js 配置 optimization 属性optimization: &#123; minimize: true, // 开发环境下启用 JS、CSS 优化 minimizer: [new TerserWebpackPlugin()]&#125; 压缩css CssMinimizerWebpackPluginwebpack v5 之前，使用 optimize-css-assets-webpack-plugin。 对于 webpack v5或更高版本，使用 css-minizer-webpack-plugin 压缩 css。 css-minizer-webpack-plugin 插件使用 cssnano 优化和压缩 CSS。 Cssnano 使用经过良好格式化的 CSS，并通过许多重点优化来运行它，以确保最终结果在生产环境中尽可能小。cssnano 12345678const CssMinimizerPlugin = require(&quot;css-minimizer-webpack-plugin&quot;);//...optimization: &#123; minimize: true, // 开发环境下启用 JS、CSS 优化 minimizer: [new TerserWebpackPlugin(), new CssMinimizerPlugin()]&#125;, 配置预处理器的exclude与includeexclude可以排除不需要该预处理器解析的文件目录，include可以设置该预处理器只对哪些目录生效，这样可以减少不需要被预处理器处理的文件模块，从而提升构建速度。 比如使用babel-loader进行 js 兼容时，不需要将node_modules模块下的所有js文件进行打包。 12345&#123; test: /\\.js/, use: &#x27;babel-loader&#x27;, exclude: /node_modules/,&#125; module.noParse防止 webpack 解析那些任何与给定正则表达式相匹配的文件。忽略的文件中不应该含有 import, require, define 的调用，或任何其他导入机制。忽略大型的 library 可以提高构建性能。 有些模块不需要被任何预处理器解析，例如 jQuery 与 Lodash 这一类的工具库。 123456module.exports = &#123; // ... module: &#123; noParse: /jQuery|lodash/, &#125;&#125; 代码分割 optimization.splitChunks代码分割是Webpack优化中非常重要的一部分，Webpack里主要有三种方法进行代码分割。 入口entry：配置entry入口文件，从而手动分割代码。 动态加载：通过 import 等方法进行按需加载。(会自动分离出 bundle) 抽取公共代码：使用splitChunks等技术抽取公共代码。 splitChunks指的是Webpack插件SplitChunksPlugin，在Webpack的配置项optimization.splitChunks里直接配置即可，无须单独安装。 在Webpack 4之前，Webpack是通过CommonsChunkPlugin插件来抽取公共代码的，Webpack 4之后使用的是SplitChunksPlugin插件，在Webpack 5中又对其进行了优化，接下来将详细说明SplitChunksPlugin插件在Webpack 5中的使用。 123456789module.exports = &#123; // ... optimization: &#123; splitChunks: &#123; // config //... &#125; &#125;&#125; 配置如下： optimization.splitChunks[props] chunks: 表示从什么类型的chunks里面提取代码，有三个字符串值initial、async、all可以使用，另外也可以使用函数来匹配要提取的chunks。其默认值是async，表示只从动态加载的chunks里提取代码。initial表示只从入口chunks里提取代码，all表示同时从异步chunks和入口chunks里提取代码。 minSize: 表示提取出来的chunk的最小体积，其在Webpack 5中的默认值是20000，表示20kB，只有达到这个值时才会被提取。 maxSize: 表示提取出来的chunk的最大体积，其默认值是0，表示不限制最大体积。它是一个可以违反的值，在被违反时起提示作用。 minChunks: 默认值是1，表示拆分前至少被多少个chunks引用的模块才会被提取。 … 代码分离（多入口引入了相同依赖）除了入口文件 index.js 之外，我还有个另一个文件 another-module.js，现在让它俩进行多入口打包，这样会打出两个 bundle，但是，这两个文件里，我都引入了 lodash，我们来打包看看 1234entry: &#123; index: &#x27;./src/index.js&#x27;, another: &#x27;./src/another-module.js&#x27;,&#125;, lodash 被打进到了两个 bundle 内，导致两个文件都超过 1M 了。 我们必须要将其分离出来，不能打出这样的包来。 1234567891011entry: &#123; main: &#123; import: &#x27;./index.js&#x27;, dependOn: &#x27;shared&#x27;, &#125;, another: &#123; import: &#x27;./another-module.js&#x27;, dependOn: &#x27;shared&#x27;, &#125;, shared: &#x27;lodash&#x27;&#125;, 配置 dependOn option 选项，这样可以在多个 chunk 之间共享模块。我们再打包，会发现 index、another bundle 小了，而多出来的 shared.js 就是 lodash 包了。 也可以使用 optimization.splitChunks 来分离出公共模块。 还原 entry 1234entry: &#123; main: &#x27;./index.js&#x27;, another: &#x27;./another-module.js&#x27;&#125;, 配置 optimization.splitChunks 12345optimization: &#123; &#123; chunks: &#x27;all&#x27; &#125;,&#125;, 这样也是可以把 lodash 分离出来的。 Tree Shaking Tree Shaking可以帮我们检测模块中没有用到的代码块，并在Webpack打包时将没有使用到的代码块移除，减小打包后的资源体积。它的名字也非常形象，通过摇晃树把树上干枯无用的叶子摇掉。 通常我们在本地开发环境下不会使用Tree Shaking，因为它会降低构建速度并且没有太大意义。我们需要在生产环境打包时开启Tree Shaking，生产环境下我们只需要配置参数项mode为production，即可自动开启Tree Shaking。 缓存在使用Webpack开发前端工程时，涉及的缓存主要有两类：一类是访问Web页面时的浏览器缓存，我们称其为长期缓存；另一类是Webpack构建过程中的缓存，我们称其为持久化缓存或编译缓存。 在Webpack 5之前的版本里，Webpack自身没有提供持久化缓存，我们在开发时经常需要使用 cache-loader 或dll动态链接技术来做缓存方面的处理，这无疑提高了我们的学习成本和Webpack配置的复杂度。Webpack 5提供了持久化缓存，它通过使用文件系统缓存，极大地减少了再次编译的时间。 cache 缓存生成的 webpack 模块和 chunk，来改善构建速度。cache 会在开发模式被设置成 type: ‘memory’ 而且在生产模式中被禁用。 cache: true 与 cache: { type: ‘memory’ } 配置作用一致。 传入 false 会禁用缓存: 1234module.exports = &#123; //... cache: true,&#125;; 当将 cache.type 设置为 ‘filesystem’ 是会开放更多的可配置项。 Rollup（ESM打包器，小巧）Parcel（零配置的前端打包器）ESBuildESBuild https://esbuild.bootcss.com/ 介绍: https://juejin.cn/post/6918927987056312327 vite参考资源[^1]：Webpack5"},{"title":"","date":"2024-06-11T08:52:17.490Z","updated":"2024-06-11T08:52:17.490Z","comments":false,"path":"demo/2023面试准备/温故知新 HTTP.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/%E6%B8%A9%E6%95%85%E7%9F%A5%E6%96%B0%20HTTP.html","excerpt":"","text":"URI &amp; URLURI（Uniform Resource Identifier）和URL（Uniform Resource Locator）是互联网上标识和定位资源的两个概念，它们在某些方面有区别，但通常人们使用它们来表示相同的内容。 URI是一个更通用的概念，用于标识任何资源的唯一标识符。它可以用来标识不仅仅是网络资源，还包括本地文件、数据库条目等。URI由两部分组成：标识符和定位器。 URL是URI的一种常见形式，它提供了定位和访问网络资源的方式。URL描述了一个资源在网络上的具体位置和访问方式。它包含了协议（如HTTP、HTTPS、FTP等）、主机名、路径、查询参数等信息，用于定位和访问特定的网络资源。 下面是一个示例： URI: urn:isbn:9780345534491这是一个URI，用于标识一本书的ISBN号。它以”urn”作为标识符，后面是具体的标识信息。 URL: https://www.example.com/images/pic.jpg这是一个URL，用于访问位于www.example.com服务器上的pic.jpg图片文件。它包含了协议（https）、主机名（www.example.com）和路径（/images/pic.jpg）等信息，用于定位和访问资源。 总结来说，URI是一种通用的资源标识符，而URL是一种具体的网络资源定位器。URL是URI的一种特殊形式，用于定位和访问网络资源。 HTTP0.9 / HTTP 1.1 / HTTP2 这三者有什么区别？共同点又是什么？HTTP 0.9、HTTP 1.1和HTTP/2（也称为HTTP2）是HTTP协议的不同版本，它们在功能和性能方面有一些区别，同时也有一些共同点。 HTTP 0.9是最早的HTTP版本，于1991年发布。它是一种非常简单的协议，只支持GET方法，没有请求头和响应头，也不支持持久连接等高级功能。它主要用于通过URL获取HTML文档。 HTTP 1.1是1997年发布的HTTP协议的主要版本，它引入了许多新特性和改进。HTTP 1.1支持多种请求方法（GET、POST、PUT、DELETE等），引入了请求头和响应头，支持持久连接、管线化、缓存控制、虚拟主机等功能。HTTP 1.1通过复用连接、请求头压缩等优化，提高了性能和效率。 HTTP/2是HTTP协议的最新版本，于2015年发布。它是在HTTP 1.1的基础上进行的重大改进。HTTP/2所有数据采用二进制协议而非文本协议，通过二进制帧进行数据传输，引入了多路复用（Multiplexing）机制，允许在单个连接上**同时**发送多个请求和响应，减少了连接建立和关闭的开销。此外，HTTP/2还支持头部压缩、服务器推送、优先级等功能，进一步提高了性能和效率。 区别： 功能支持：HTTP 0.9仅支持GET方法，而HTTP 1.1和HTTP/2支持更多的请求方法和功能。 协议形式：HTTP 0.9、HTTP 1.1是纯文本协议，HTTP/2采用了二进制协议。 连接复用：HTTP 0.9每次请求都需要建立新的连接，HTTP 1.1引入了持久连接，允许复用连接，而HTTP/2通过多路复用在单个连接上同时处理多个请求和响应。 性能优化：HTTP 1.1通过管线化和请求头压缩等方式提高性能，而HTTP/2在此基础上引入了更高级的优化机制，如二进制分帧、头部压缩等。 共同点： 均为应用层协议，用于在客户端和服务器之间传输数据。 均基于请求-响应模型，客户端发送请求，服务器返回响应。 均使用URL作为资源定位标识符。 均使用HTTP状态码来表示请求和响应的结果。 总体而言，HTTP 1.1和HTTP/2是HTTP协议的重要演化版本，提供了更多的功能和性能优化，以适应互联网发展的需求。 三次握手三次握手是建立 TCP 连接时使用的一种协议，用于确保双方的通信能够正常进行。下面是三次握手的详细步骤： 刚开始时，客户端的状态是关闭的（CLOSED），服务器状态处于监听中（LISTEN） 第一次握手（SYN）： 客户端（浏览器）向服务器发送一个 SYN（同步）标志的 TCP 数据包，该数据包的序列号表示客户端要发送数据的初始序列号（Seq=x）。 客户端进入 SYN_SENT 状态，等待服务器的响应。 第二次握手（SYN-ACK）： 服务器收到客户端发送的 SYN 数据包后，会确认收到，并发送一个带有 SYN 和 ACK（确认序列号）标志的 TCP 数据包作为回应。（ACK） 该数据包中包含服务器自己分配的初始序列号（Seq=y）和确认号（ACK= x + 1），确认号为客户端的初始序列号(Seq=x)加1。 服务器进入 SYN_RCIVED 状态。 第三次握手（ACK）： 客户端收到服务器发送的 SYN / ACK 数据包后，会确认收到，并发送一个带有 ACK= y + 1 标志的 TCP 数据包给服务器。 该数据包中的确认号为服务器的初始序列号(Seq=y)加1。 服务器收到客户端发送的 ACK 数据包后，确认号也加1。 客户端和服务器都进入 ESTABLISHED 状态，TCP 连接建立成功。 通过三次握手，客户端和服务器都能够确认彼此的收发能力正常，可以开始进行数据的传输。在握手过程中，初始序列号（ISN）是为了保证每个连接都有唯一的序列号起始值，以增强连接的安全性。 需要注意的是，三次握手只是建立 TCP 连接的过程，并不代表数据的传输。数据的传输是在连接建立完成后进行的，双方可以通过已建立的连接进行数据的发送和接收。 在关闭 TCP 连接时，也需要进行类似的四次挥手（四次握手）过程，以保证双方都完成了数据传输并愿意关闭连接。 半连接队列服务器第一次收到客户端的 SYN 之后，就会处于 SYN_RCVD 状态，此时双方还 没有完全建立其连接，服务器会把此种状态下请求连接放在一个队列里，我们把这种队列称之为半连接队列。 还有一个全连接队列，就是已经完成三次握手，建立起连接的就会放在全连接队列中。如果队列满了就有可能会出现丢包现象。 四次挥手 首先要明白，客户端和服务端都可以发起关闭连接的请求。 这里以客户端发起关闭请求为例。 刚开始，客户端和服务器都处于 established 的状态，客户端主动发起 关闭连接 的请求。 第一次挥手 客户端发送一个 FIN (finish) 报文，报文中会指定一个序列号。此时客户端处于 FIN_WAIT1 状态。 第二次挥手 服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT 状态。 客户端收到服务端的确认后，进入FIN_WAIT2（终止等待2）状态，等待服务端发出的连接释放报文段。 此时，服务端还可以发送未发送完的数据，客户端也可以接收数据。 第三次挥手 如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端进入最后确认状态（LAST_ACK 的状态） 第四次挥手 客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 +1 作为自己 ACK 报文的序列号值，此时客户端处于超时等待 TIME_WAIT 状态，经过超时时间后关闭连接。服务端收到 ACK 报文之后 立即 关闭连接了，处于 CLOSED 状态。 为什么客户端需要进入超时等待状态确保服务端能收到自己的 ACK 报文。 假设客户端发送完 ack 包，就立刻关闭了连接，一旦 ack 包在网络传输中丢失，服务器将一直处于 最后确认状态（LAST_ACK）。服务端因为没有收到 ACK 包会重发 FIN 包，此时客户端关闭了链接，那么就无法关闭连接。 服务端因为没有收到 ACK 包会重发 FIN 包，客户端收到 FIN 包后，就会重发 ACK 包并刷新超时时间。 最后，客户端再也没有收到服务器发送过来的 FIN，等待一段时间后，客户端也进入了关闭状态(Closed)。 !!! 请求报文HTTP请求报文由请求行（Request Line）、请求头部（Headers）和请求主体（Body）三部分组成。以下是一个示例HTTP请求报文的结构： 12345678GET /path/to/resource HTTP/1.1Host: www.example.comUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8Referer: https://www.example.com/referer-pageConnection: keep-alive请求主体（如果存在）//比如：Hello，World!! 解释每个部分的含义： 请求行（Request Line）：包含了HTTP方法、请求的路径和协议版本。 HTTP方法（例如GET、POST、PUT等）指定了客户端对资源的操作类型。 请求的路径指定了服务器上要访问的资源的路径。 协议版本（例如HTTP/1.1）指定了客户端所使用的HTTP协议版本。 请求头部（Headers）：包含了与请求相关的各种元数据信息，以键值对的形式表示。每个键值对占据一行。 Host：指定了服务器的主机名或IP地址。 User-Agent：发送请求的客户端的用户代理标识。 Accept：指定了客户端能够接受的响应内容类型。 Referer：指定了请求的来源页面的URL。 Connection：指定了客户端与服务器之间的连接是否保持持久连接。 请求主体（Body）：可选部分，用于发送附加的请求数据，例如表单数据、JSON数据等。在GET请求中通常为空，而在POST请求中会包含要发送的数据。 响应报文HTTP响应报文由状态行（Status Line）、响应头部（Headers）和响应主体（Body）三部分组成。以下是一个示例HTTP响应报文的结构： 123456HTTP/1.1 200 OKContent-Type: text/html; charset=utf-8Content-Length: 1234Server: Apache/2.4.29 (Unix)响应主体（如果存在）(注意：响应主体不仅仅是换行，而是真正空了一样，才开始显示主体部分) 解释每个部分的含义： 状态行（Status Line）：包含了协议版本、状态码和状态消息。 协议版本（例如HTTP/1.1）指定了服务器使用的HTTP协议版本。 状态码是一个三位数，用于表示服务器对请求的处理结果。例如，状态码200表示成功，404表示资源未找到。 状态消息是对状态码的简要描述，提供了更详细的说明。 响应头部（Headers）：包含了与响应相关的各种元数据信息，以键值对的形式表示。每个键值对占据一行。 Content-Type：指定了响应主体的媒体类型和字符集。 Content-Length：指定了响应主体的长度（以字节为单位）。 Server：指定了响应的服务器软件名称和版本。 响应主体（Body）：可选部分，包含了服务器返回的实际响应内容。例如，对于HTML页面，响应主体可能包含HTML标记和文本内容。 跨域 什么是跨域？ CORS 全称是 Cross-Origin Resource Sharing，意为跨域资源共享。当一个资源去访问另一个不同域名或者不同端口的资源时，就会发出跨域请求。如果另一个资源不允许其进行跨域资源访问，就会造成跨域。 跨域不是问题，是浏览器的安全机制 跨域不会阻止请求的发出，也不会阻止请求的接收，跨域是浏览器为了保护当前页面，你的请求得到了响应，但是浏览器不会将请求到的数据提交给当前页面上的回调，取而代之的是去提示你这是一个跨域数据。 同源策略导致。 所谓同源策略，就是协议、域名、端口号都要相同，有一个不相同，那么就是非同源，就会出现跨域。 12345678910111213141516171819// 跨域(端口不同)http://localhost:8080http://localhost:3000// 跨域(协议不同)https://localhost:8080http://localhost:8080// 跨域(域名)https://localhost:8080https://192.168.1.2:8080// 跨域(协议不同，端口也不同)// http 默认端口是 80，https 默认端口是 443http://localhost/bbbhttps://localhost/aaa 解决跨域 纯后端方式 假设我们有个后端服务 3000，提供了 /user 接口，我们可以直接在 .html 文件中访问，如果后端不设置跨域，那么肯定会出现跨域提示的。 123456789101112131415161718192021222324252627282930313233// serverconst express = require(&#x27;express&#x27;)const app = express()app.get(&#x27;/user&#x27;, (req, res) =&gt; &#123; res.json(&#123; code: 0, msg: &#x27;请求user成功&#x27; &#125;)&#125;)app.listen(&#x27;3000&#x27;, () =&gt; &#123; console.log(&#x27;server running at port 3000...&#x27;)&#125;)// client&lt;script&gt; const xhr = new XMLHttpRequest() xhr.open(&#x27;get&#x27;, &#x27;http://localhost:3000/user&#x27;) xhr.onload = function() &#123; consolelog(xhr.response) &#125; xhr.send() // fetch fetch(&#x27;http://localhost:3000/user&#x27;) .then(res =&gt; res.text()) .then(res =&gt; &#123; console.log(res) &#125;)&lt;/script&gt; 后端设置跨域访问 123456789// CORSapp.all(&#x27;*&#x27;, function(req, res, next) &#123; // 允许所有请求源 res.header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;) // 域名地址 res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;*&quot;) // 允许自定义 headers res.header(&quot;Access-Control-Allow-Methods&quot;, &quot;*&quot;) // 默认允许的方法：GET,HEAD,POST next()&#125;) 前端处理主要是通过 webpack devServer 的 proxy 来处理。 1234567891011121314151617...devServer: &#123; proxy: &#123; &#x27;/api&#x27;: &#123; target: &#x27;http://localhost:3000/&#x27; // http://localhost:8080/api/user =&gt; http://localhost:3000/api/user &#125; &#125;, proxy: &#123; &#x27;/no-api&#x27;: &#123; target: &#x27;http://localhost:3000/&#x27;, // http://localhost:8080/no-api/user =&gt; http://localhost:3000/user pathRewrite: &#123; &#x27;/no-api&#x27;: &#x27;&#x27;, // 后端接口中一般不会含有 api 标识符，我们可以去掉 &#125; &#125; &#125;,&#125;... Nginx 要注意的是，devServer 配置 proxy 只是存在于我们开发项目时有用，如果项目要上线，devServer 就没有了，这时可以考虑采用 Nginx 来代理。 前后端合并方式 我们可以不采用 devServer proxy 方式，而是在后端配置 webpack-dev-middleware，将前后端进行合并。 123456789101112131415161718192021const express = require(&#x27;express&#x27;)const webpack = require(&#x27;webpack&#x27;)const middle = require(&#x27;webpack-dev-middleware&#x27;)const compile = require(&#x27;./webpack.config.js&#x27;)const app = express()app.use(middle(compile))app.get(&#x27;/user&#x27;, (req, res) =&gt; &#123; res.json(&#123; code: 0, msg: &#x27;请求user成功&#x27; &#125;)&#125;)app.listen(&#x27;3000&#x27;, () =&gt; &#123; console.log(&#x27;server running at port 3000...&#x27;)&#125;) jsonp 比较老、兼容性好的方式。 利用标签没有跨域限制的漏洞，在 script 标签上我们可以引用其他服务上的脚本。 最常见的场景就是 CDN. 1&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js&quot;&gt;&lt;/script&gt; 使用方式： 12345678910function callback(res) &#123; console.log(JSON.stringify(res, null, 2))&#125;// 动态创建 script 标签，设置好 scr 属性，主要参数是 cb=callbackconst script = document.createElement(&#x27;script&#x27;)script.src = &#x27;http://127.0.0.1:3000/info/jsonp?cb=callback&#x27;document.getElementByTagsName(&#x27;head&#x27;)[0].appendChild(script) 预请求(OPTIONS)OPTIONS 请求和 GET 请求的区别在于它们的目的和作用不同。 OPTIONS 请求用于探测服务器的支持能力和实施安全机制，以便在进行实际请求之前进行 预检 其它请求方法，比如 GET 请求则是用于获取实际的资源数据。 需要注意的是，出现两个相同URL但请求方法不同的请求可能是因为浏览器进行了请求优化或其他原因。例如，某些浏览器可能会在发送实际的 GET 请求之前，先发送一个 OPTIONS 请求以验证是否允许跨域请求。这是浏览器的行为，并非所有请求都会出现这种情况，具体取决于浏览器的实现和配置。 如果我们不想要 预检，那么在服务端设置 Access-Control-Max-Age，表示在 1000秒 内，都不需要预请求验证。 123res.writeHead(200, &#123; &#x27;Access-Control-Max-Age&#x27;: &#x27;1000&#x27;, // 秒&#125;) 服务端设置好之后，客户端发起的第一次请求，还是会有预检（OPTIONS）和实际请求，再次刷新页面就只会发起实际的请求了。 Cache-ControlHTTP头部字段Cache-Control用于控制缓存的行为，它可以指示浏览器或代理服务器是否缓存响应以及如何缓存。 Cache-Control头部字段有多个可选的指令，可以单独使用或组合使用。下面是一些常见的指令及其作用： no-cache：指示浏览器和代理服务器不应直接使用缓存的响应，而应发送请求到服务器进行验证。服务器可以通过校验请求头（Etag/Last-Modified）来确定是否需要返回新的响应或使用缓存的响应。 no-store：指示浏览器和代理服务器不应存储任何关于请求和响应的内容。每次都必须从原始服务器获取完整的响应。 public：指示响应可以被任何节点缓存（包括客户端和代理服务器）缓存。 private：指示响应只能被客户端缓存，不允许代理服务器缓存。 max-age=&lt;seconds&gt;：指示响应在指定的秒数内可以被缓存。例如，Cache-Control: max-age=3600表示响应可以在一个小时内被缓存。 s-maxage=&lt;seconds&gt;：类似于max-age，但仅适用于共享缓存（例如代理服务器）。它覆盖max-age指令。 这些指令可以通过逗号分隔的方式组合使用，以满足特定的缓存需求。 通过使用Cache-Control头部字段，服务器可以控制缓存的行为，包括缓存有效期、是否需要验证等。而浏览器和代理服务器会根据这些指令来决定是否缓存响应以及如何使用缓存。这有助于提高性能和减少网络流量，同时保证及时获取最新的资源。 比如: res.setHeader(&#39;Cache-Control&#39;, &#39;max-age=3600, public&#39;); 表示所有节点都能缓存（客户端、代理服务器等）3600秒之后，就重新从服务器拉取资源，接着缓存起来，客户端又可以使用缓存资源了。以此循环… 看如下例子： 1234567891011121314151617181920212223&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Hello Http!你好啊&lt;/h1&gt; &lt;script&gt; // 请求另一个服务器资源 fetch(&#x27;http://localhost:9999/&#x27;, &#123; method: &#x27;get&#x27; &#125;) .then(res =&gt; console.log(&#x27;??? &#x27;, res)) &lt;/script&gt; &lt;!-- 加载 js 脚本 --&gt; &lt;script src=&quot;/script.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 1234567891011121314151617181920212223242526272829303132333435// server.jsconst http = require(&#x27;http&#x27;);const fs = require(&#x27;fs&#x27;)const html = fs.readFileSync(&#x27;./index.html&#x27;, &#x27;utf8&#x27;)// 创建HTTP服务器const server = http.createServer((req, res) =&gt; &#123; if (req.url === &#x27;/&#x27;) &#123; // 设置响应头部字段 res.setHeader(&#x27;Cache-Control&#x27;, &#x27;max-age=10, public&#x27;); // 其他响应设置，响应头字段也可以在这设置 res.writeHead(200, &#123; &#x27;Content-Type&#x27;: &#x27;text/html&#x27; &#125;); res.end(html); &#125; if (req.url === &#x27;/script.js&#x27;) &#123; res.writeHead(200, &#123; &#x27;Content-Type&#x27;: &#x27;text/javascript&#x27;, &#x27;Cache-Control&#x27;: &#x27;max-age=10, private&#x27; // 只能客户端缓存，并且 10 秒后缓存失效 &#125;) res.end(&#x27;console.log(&quot;Javascript loaded!!!&quot;)&#x27;) // 控制台打印 .. &#125;&#125;);// 监听端口const port = 8888;server.listen(port, () =&gt; &#123; console.log(`Server running at http://localhost:$&#123;port&#125;/`);&#125;); 加了 cache-control 之后，第一次访问到了资源，再次访问时，就会读取浏览器缓存的资源了，看请求时间是非常短的。 Disk cache 和 Memory cacheDisk cache和Memory cache是浏览器中常见的两种缓存机制，它们在缓存资源时有一些区别。 Disk Cache（磁盘缓存）：Disk cache是指将请求的资源存储在硬盘上的缓存机制。当浏览器收到服务器的响应后，会将响应的资源保存在硬盘的特定位置。当下次请求相同的资源时，浏览器会首先检查硬盘上的缓存，如果缓存存在且有效，则直接从硬盘中读取资源，避免了再次发送网络请求。Disk cache相对于Memory cache来说，存储容量较大，可以缓存更多的资源，但访问速度相对较慢。 Memory Cache（内存缓存）：Memory cache是指将请求的资源存储在内存中的缓存机制。当浏览器收到服务器的响应后，会将响应的资源保存在内存中。内存缓存的访问速度非常快，因为内存的读取速度比硬盘快得多。当下次请求相同的资源时，浏览器会首先检查内存中的缓存，如果缓存存在且有效，则直接从内存中读取资源，无需进行网络请求。Memory cache相对于Disk cache来说，存储容量较小，只能缓存较少的资源，但访问速度非常快。 通常情况下，浏览器在接收到资源后会首先将资源存储在内存缓存中，这样可以提供更快的访问速度。如果内存缓存已满或资源需要长期保存，浏览器会将资源存储在磁盘缓存中，以便长期使用。当浏览器再次请求相同的资源时，会根据缓存策略首先检查内存缓存，然后再检查磁盘缓存，以提供更快的访问速度和节省网络带宽。 什么时候浏览器会使用 disk cache，什么情况下使用 memory cache 呢？浏览器在缓存资源时，会根据一些因素来决定是使用Disk cache还是Memory cache。 Memory Cache（内存缓存）的使用场景： 静态资源：通常情况下，浏览器会优先将静态资源（如CSS、JavaScript、图片等）存储在内存缓存中，以提供更快的访问速度。这是因为内存的读取速度比硬盘快得多，可以快速响应资源请求。 常用资源：经常被访问的资源会被存储在内存缓存中，以减少对网络的依赖，提高用户体验。 短期缓存：一些具有短期有效性的资源，比如通过Ajax动态获取的数据，通常会被存储在内存缓存中，以便快速获取最新的数据。 Disk Cache（磁盘缓存）的使用场景： 大型资源：较大的资源文件（如视频、音频等）通常会被存储在磁盘缓存中。由于内存容量有限，内存缓存不适合存储大型资源，因此浏览器会将这些资源保存在磁盘上，以便长期使用。 持久缓存：一些具有长期有效性的资源，如页面的静态资源文件（如CSS、JavaScript、图片等），通常会被存储在磁盘缓存中。这样可以避免每次都重新下载资源，减少网络请求和加快页面加载速度。 浏览器也可以根据用户的配置和缓存策略来决定是否使用缓存以及缓存的存储位置（内存缓存或磁盘缓存）。 缓存是否失效，如何验证？缓存是否已经失效是由浏览器根据一些规则和策略进行判断的。以下是一些常见的判断依据： 缓存标识符：浏览器通过检查请求中的缓存标识符来判断缓存是否有效。常见的缓存标识符有ETag和Last-Modified。当服务器返回响应时，会包含一个或多个缓存标识符，浏览器会将这些标识符存储起来。下次请求相同资源时，浏览器会将缓存标识符带上，服务器根据这些标识符判断资源是否发生了变化。如果资源没有变化，服务器可以返回一个304 Not Modified的响应，告知浏览器使用缓存副本。 缓存控制指令：响应头部中的缓存控制指令，如Cache-Control和Expires，提供了关于缓存的策略和过期时间。浏览器会根据这些指令来判断缓存是否过期。如果缓存的过期时间尚未到达，且缓存控制指令允许使用缓存，浏览器将使用缓存的副本。 重新验证机制：浏览器可以通过发送一个条件请求来验证缓存是否仍然有效。这种验证通常使用If-None-Match和If-Modified-Since等条件头部字段。服务器可以根据这些条件字段判断资源是否发生了变化，如果没有变化，可以返回一个304 Not Modified的响应，浏览器继续使用缓存副本。 请注意，浏览器对缓存的处理是基于一系列规范和策略的，具体的判断依据可能会因浏览器的实现和配置而有所不同。如果您想要详细了解特定浏览器的缓存机制和行为，可以参考相关浏览器的文档和规范。 ETag &amp; Last-Modified 验证头虽然我们设置了 cache-control 的 max-age 值，但是我想要每次发送请求都想要去服务器验证，应该怎么做？ 那就再设置 no-cache。 1234res.writeHead(200, &#123; &#x27;Content-Type&#x27;: &#x27;text/javascript&#x27;, &#x27;Cache-Control&#x27;: &#x27;max-age=360000, no-cache&#x27;,&#125;) 为了验证是否继续使用缓存，我们在响应头中加上 Etag 和 Last-Modified 这两个属性 123456res.writeHead(200, &#123; &#x27;Content-Type&#x27;: &#x27;text/javascript&#x27;, &#x27;Cache-Control&#x27;: &#x27;max-age=10, no-cache&#x27;, &#x27;ETag&#x27;: &#x27;123456789&#x27;, // 下一次请求时，客户端会在请求头加上 If-None-Match: 123456789 &#x27;Last-Modified&#x27;: &#x27;2023-05-27 21:30&#x27; // 下一次请求时，客户端会在请求头加上 If-Modified-Since: 2023-05-27 21:30&#125;) 还是以上面的例子做示范，虽然加了 Etag 和 Last-Modified 这两个属性，还没完，还需要在 服务端做校验判断： 123456789101112131415161718// server.jsif (req.url === &#x27;/script.js&#x27;) &#123; if (req.headers[&#x27;if-none-match&#x27;] === &#x27;123456789&#x27; &amp;&amp; req.headers[&#x27;if-modified-since&#x27;] === &#x27;2023-05-27 21:30&#x27;) &#123; res.writeHead(304) // 这段代码不会生效了，因为浏览器会从缓存获取资源，控制台还是会打印 Javascript loaded!!! res.end(&#x27;console.log(&quot;服务器验证完毕，同意客户端获取缓存资源!!&quot;)&#x27;) &#125; else &#123; res.writeHead(200, &#123; &#x27;Content-Type&#x27;: &#x27;text/javascript&#x27;, &#x27;Cache-Control&#x27;: &#x27;max-age=10, no-cache&#x27;, &#x27;ETag&#x27;: &#x27;123456789&#x27;, &#x27;Last-Modified&#x27;: &#x27;2023-05-27 21:30&#x27; &#125;) res.end(&#x27;console.log(&quot;Javascript loaded!!!&quot;)&#x27;) &#125;&#125; 效果如下，第一次发起 请求时，会从服务器获取资源，接下来如果再发起请求，因为设置了 no-cache 和 ETag 和 Last-Modified，所以会在服务器进行资源是否失效的校验。 如果资源未失效，则服务器返回状态码 304，表示资源未被修改，可以使用缓存资源。 注意：如果再 Chrome 浏览器重，勾选了 Disable cache，表示不使用缓存，那么 HTTP 请求头是不会携带 if-none-match 或 if-modified-since 这些具有缓存意义的信息了 CookieCookie是一种在Web浏览器和Web服务器之间传递的小型文本文件，用于存储和传递用户的相关信息。它由服务器在HTTP响应的Set-Cookie首部字段中发送给浏览器，并由浏览器在后续的请求中通过Cookie首部字段将该信息发送回服务器。 Cookie主要用于实现会话管理和用户跟踪，以提供个性化的Web体验。 Cookie的工作流程如下： 当浏览器向服务器发送请求时，服务器可以在HTTP响应中通过Set-Cookie首部字段将一个或多个Cookie发送给浏览器。 浏览器收到Cookie后，将其存储在本地的Cookie存储中。 当浏览器向同一服务器发送后续请求时，会在HTTP请求的Cookie首部字段中携带相应的Cookie数据。 服务器收到请求后，可以解析Cookie数据并根据其中的信息来执行相应的操作，如识别用户、保持会话状态等。 当服务器通过HTTP响应的Set-Cookie首部字段发送Cookie时，可以设置多个Cookie项，每个项使用键值对的形式表示。下面是一个示例： 1234HTTP/1.1 200 OKSet-Cookie: username=johndoe; Expires=Wed, 21 Oct 2023 07:28:00 GMT; Path=/; Secure; HttpOnlySet-Cookie: language=en-US; Path=/Set-Cookie: theme=dark; Expires=Wed, 21 Oct 2023 07:28:00 GMT; Path=/ 在上面的示例中，服务器发送了三个Cookie项： username=johndoe：设置了一个名为username的Cookie，其值为johndoe。 language=en-US：设置了一个名为language的Cookie，其值为en-US。 theme=dark：设置了一个名为theme的Cookie，其值为dark。 每个Cookie项可以附带一些可选的属性，如Expires、Path、Secure和HttpOnly等。 Expires属性指定了Cookie的过期时间，浏览器将在过期时间之后删除该Cookie。在上面的示例中，username和theme的Cookie都设置了过期时间为Wed, 21 Oct 2023 07:28:00 GMT。 Max-Age 属性指定了Cookie的最大存活时间，以秒为单位。它表示从当前时间开始，Cookie将在多少秒后过期。 Path属性指定了Cookie的有效路径，即只有在指定路径下的请求才会携带该Cookie。在上面的示例中，username和language的Cookie的路径分别为根路径/和默认路径/。 Secure属性指示浏览器仅在通过安全连接（如HTTPS）发送请求时才会携带该Cookie。 HttpOnly属性指定了该Cookie是否只能通过HTTP协议访问，而不能通过JavaScript代码访问(document.cookie)。这可以提高安全性，防止跨站脚本攻击（XSS）。 注意，浏览器在后续的请求中会自动在Cookie首部字段中携带相应的Cookie数据，无需手动添加。服务器可以通过解析Cookie首部字段来获取客户端发送的Cookie信息。 1234res.writeHead(200, &#123; &#x27;Content-Type&#x27;: &#x27;text/javascript&#x27;, &#x27;Set-Cookie&#x27;: &#x27;age=18&#x27;&#125;) 查看 network: 123456// 第一次响应头Set-Cookie: age=18// 第二次请求头Cookie: age=18 设置多个 Cookie&#39;Set-Cookie&#39;: [&#39;age=18&#39;, &#39;name=alex.cheng&#39;] 查看 network: 1234567// 第一次响应头Set-Cookie: age=18Set-Cookie: name=alex.cheng// 第二次请求头Cookie: name=alex.cheng; age=18 我们可以在控制台的 Applicatioin 中查看 cookie，服务端通过 req.headers.cookie 获取请求头中的 cookie。 cookie 过期时间Expires 和 max-age 都可以设置过期时间，只是 max-age 设置起来更简单方便。 如果没有设置过期时间，表示 cookie 存在于 回话 中(在 application 中显示 session)，表示关闭当前窗口，再发送请求，是不会带上 cookie 的。 以下 cookie中，age 会在 5s 后过期，也就是说过了 5s 再发请求，请求头中不会携带 age 信息了。 12345res.writeHead(200, &#123; &#x27;Content-Type&#x27;: &#x27;text/javascript&#x27;, &#x27;Set-Cookie&#x27;: [&#x27;age=18; max-age=5&#x27;, &#x27;name=alex.cheng&#x27;]&#125;)res.end(&#x27;console.log(&quot;Javascript loaded!!!&quot;)&#x27;) SessionSession（会话）是指在客户端与服务器之间建立的一种状态管理机制。 它用于跟踪和存储特定用户在一段时间内的相关信息。在Web应用程序中，会话通常用于在用户访问不同页面或发送请求时保持用户的身份验证状态和其他会话数据。 也就是说，我们只要能在服务器定位到特定的用户，然后拿到对应的 cookie 信息，那就是 session 的实现方案。 Session的优点包括： 可以存储和管理用户的状态和相关数据。 提供了身份验证和用户跟踪的机制。 可以用于共享数据和上下文信息，使得多个请求之间可以共享数据。 需要注意的是，Session机制依赖于会话ID的传递和存储。常见的方式是使用Cookie来存储会话ID，但也可以通过其他方式（例如URL参数或隐藏表单字段）传递会话ID。此外，为了确保会话的安全性，需要采取一些安全措施，例如使用加密算法对会话ID进行加密，限制会话ID的有效期限等。 123456789101112131415161718192021222324252627282930313233343536373839const express = require(&#x27;express&#x27;);const session = require(&#x27;express-session&#x27;);const app = express();// 配置会话中间件app.use(session(&#123; secret: &#x27;my-secret-key&#x27;, // 用于加密会话数据的密钥 resave: false, saveUninitialized: true&#125;));app.get(&#x27;/login&#x27;, (req, res) =&gt; &#123; // 在会话中存储用户信息 req.session.username = &#x27;john_doe&#x27;; req.session.isLoggedIn = true; res.send(&#x27;Login successful!&#x27;);&#125;);app.get(&#x27;/dashboard&#x27;, (req, res) =&gt; &#123; // 检查会话中的用户信息 if (req.session.isLoggedIn) &#123; const username = req.session.username; const sessionId = req.sessionID; // 获取会话ID res.send(`Welcome to the dashboard, $&#123;username&#125;! Session ID: $&#123;sessionId&#125;`); &#125; else &#123; res.send(&#x27;You need to login first!&#x27;); &#125;&#125;);app.get(&#x27;/logout&#x27;, (req, res) =&gt; &#123; // 销毁会话 req.session.destroy(); res.send(&#x27;Logout successful!&#x27;);&#125;);app.listen(3000, () =&gt; &#123; console.log(&#x27;Server started on port 3000&#x27;);&#125;); 在上述示例中，每当用户登录时，会将用户信息存储在会话中。在访问/dashboard路由时，可以通过req.sessionID获取当前会话的唯一ID，并与用户信息一起返回给用户。这样，不同用户将具有不同的会话ID，从而区分不同的用户。 请注意，会话ID的生成和管理通常是由会话中间件自动处理的，无需手动操作。 HTTP 长连接HTTP长连接（HTTP connection keep-alive）是一种机制，用于在单个TCP连接上发送多个HTTP请求和响应(有先后顺序)，而不是为每个请求和响应都建立一个新的TCP连接。在传统的HTTP请求-响应模型中，每个请求都需要建立一个新的TCP连接，完成请求后立即关闭连接。而使用长连接，可以在同一个TCP连接上发送多个请求，并在一段时间内保持连接处于打开状态，以便在需要时发送更多的请求。 使用HTTP长连接可以带来以下好处： 减少连接建立和断开的开销：TCP连接的建立和断开需要消耗一定的时间和资源。使用长连接可以减少这些开销，提高性能。 减少网络拥塞：长连接可以减少网络中的连接数，减轻网络拥塞的程度。 提高响应速度：由于不需要为每个请求建立新的连接，可以更快地发送请求并接收响应。 节省带宽：在长连接上发送多个请求时，可以减少额外的TCP握手和首部信息的传输，节省带宽。 请注意，HTTP长连接并不是永久的连接，而是在一定的时间内保持打开状态。具体的连接时间可以由服务器或客户端进行配置。如果长时间没有活动，连接可能会被服务器或客户端关闭。 Chrome 浏览器允许并发多少个 TCP 连接？在现代的 Chrome 浏览器中，默认情况下，每个域名允许同时建立的持久 TCP 连接数是有限的，具体取决于浏览器版本和操作系统。在过去的版本中，该限制通常为 6 个 TCP 连接。然而，随着时间的推移和浏览器的更新，这个限制已经有所改变。 我们来做个简单的演示: 我们准备一张图片，还有个 html 文件，html 中请求了 7 张图片 12345678910111213// index.html&lt;body&gt; &lt;h1&gt;HTTP 长连接 connection keep-alive&lt;/h1&gt; &lt;img src=&quot;test.jpg1&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;test.jpg2&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;test.jpg3&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;test.jpg4&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;test.jpg5&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;test.jpg6&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;test.jpg7&quot; alt=&quot;&quot; /&gt;&lt;/body&gt; 再创建一个 http 服务，用来加载 index.html 文件，并处理图片相关的请求: 12345678910111213141516171819202122232425262728const http = require(&#x27;http&#x27;)const fs = require(&#x27;fs&#x27;)const server = http.createServer((req, res) =&gt; &#123; if (req.url === &#x27;/&#x27;) &#123; const html = fs.readFileSync(&#x27;index.html&#x27;) res.writeHead(200, &#123; &#x27;Content-Type&#x27;: &#x27;text/html&#x27; &#125;) res.end(html) &#125; else &#123; // 读取图片，并返回给页面 const img = fs.readFileSync(&#x27;tcp-connect.jpg&#x27;) res.writeHead(200, &#123; &#x27;Content-Type&#x27;: &#x27;iamge/jpg&#x27; &#125;) res.end(img) &#125;&#125;)server.listen(8888, () =&gt; &#123; console.log(&#x27;server running at port 8888...&#x27;)&#125;) 然后我们将网速调慢一点，刷新浏览器查看结果，我们会发现，network 中有 7 个关于图片的 http 请求，其中有一个属于 pendding 状态，当有 TCP 连接有空出来的了（连接数量 &lt; 6），才会加载处于 pendding 状态的请求。 Connection ID 表示当前 TCP 连接的 ID，每个 ID 不一样，表示创建了 不一样的 TCP 连接。由于使用的是默认的 HTTP/1.1 协议，服务器会 自动启用长连接，可以在同一个连接上处理多个请求（TCP连接复用）。 当我们将网速调回来，再次刷新页面，你会发现有多个相同的 Connection ID，表示 tcp 连接被复用了。 如果想要关闭长连接，设置 Connection: close 即可： 1234res.writeHead(200, &#123; &#x27;Content-Type&#x27;: &#x27;iamge/jpg&#x27;, &#x27;Connection&#x27;: &#x27;close&#x27;&#125;) HTTP2 单个 TCP 连接HTTP/2 不再使用多个 TCP 连接来并发传输数据，而是通过单个 TCP 连接进行多路复用。这意味着在 HTTP/2 中，可以 在单个连接上同时进行多个请求和响应。 HTTP/2 使用了二进制协议，将请求和响应分解为更小的帧（frames），并在一个连接上交错地发送这些帧。每个帧都有一个唯一的标识符，用于将其与相应的请求或响应关联起来。这种多路复用的机制允许同时发送多个帧，从而实现了并发传输。提高了性能和效率，并减少了延迟。 数据协商HTTP 数据协商（HTTP Content Negotiation）是指客户端和服务器之间就请求或响应中的内容进行协商，以确定最合适的内容格式、语言、编码等。 在 HTTP 数据协商中，客户端发送请求时，可以通过请求头字段来提供一些关于期望的内容特性的信息，例如 Accept、Accept-Language、Accept-Encoding 等。服务器接收到请求后，可以根据这些请求头字段的值，选择最适合客户端的内容进行响应。 HTTP 数据协商可以分为两种类型： 服务器驱动的协商（Server-driven Negotiation）：服务器根据客户端的请求头信息，从提供的可选项中选择最合适的响应内容。服务器可以根据请求头中的 Accept、Accept-Language、Accept-Encoding 等字段进行协商，并在响应中使用 Content-Type、Content-Language、Content-Encoding 等字段来指示所选内容的特性。 客户端驱动的协商（Client-driven Negotiation）：客户端通过向服务器发送一系列可选项，如请求头中的 Accept、Accept-Language、Accept-Encoding 等字段，告知服务器自己的首选项。服务器根据这些首选项来选择合适的响应内容，并在响应中使用 Content-Type、Content-Language、Content-Encoding 等字段来指示所选内容的特性。 通过 HTTP 数据协商，客户端和服务器可以在请求和响应中进行内容的灵活协商，以提供最适合的内容给客户端，从而提升用户体验和网络效率。这使得客户端和服务器可以根据各自的特性和需求进行交互，并在可选项中选择最佳的内容格式、语言、编码等。 重定向在 HTTP 中，可以通过设置响应状态码和响应头来实现重定向。 常见的重定向状态码包括： 301 Moved Permanently：永久重定向，表示请求的资源已被永久移动到新的位置。浏览器会自动将请求的地址更新为新的地址，不会再发送原来的请求了（这是和 302 的区别）。 302 Found / 307 Temporary Redirect：临时重定向，表示请求的资源临时移动到新的位置。浏览器会继续保持原始请求的方法和请求体，并重定向到新的地址。 303 See Other：表示请求已被处理，应该跳转到另一个地址。GET 方法用于获取重定向后的资源。 具体的重定向步骤如下： 服务器收到请求后，根据需要进行处理，并决定是否需要重定向。 如果需要重定向，服务器设置响应状态码为适当的重定向状态码（如 301、302、307 或 303）。（关键） 服务器在响应头中设置 Location 字段，指定重定向的目标 URL。（关键） 客户端（通常是浏览器）收到响应后，会根据响应状态码进行相应处理。 对于永久重定向（301），客户端会将请求的地址更新为新的地址，并将之后的请求发送到新的地址。 对于临时重定向（302、307）和查看其他（303），客户端会根据响应头中的 Location 字段重新发送请求到新的地址。 对于其他状态码，客户端会根据具体情况进行处理。 以下是一个示例，使用 Node.js 中的 http 模块实现重定向： 1234567891011121314151617181920const http = require(&#x27;http&#x27;);const server = http.createServer((req, res) =&gt; &#123; // 重定向到新的资源 http://localhost:8000/new if (req.url === &#x27;/&#x27;) &#123; res.writeHead(302, &#123; &#x27;Location&#x27;: &#x27;/new&#x27; &#125;); res.end(); &#125; if (req.url === &#x27;/new&#x27;) &#123; res.writeHead(200, &#123; &#x27;Content-Type&#x27;: &#x27;text/html&#x27; &#125;); res.end(&#x27;&lt;h1&gt;New Page&lt;/h1&gt;&#x27;); &#125;&#125;);server.listen(8000, () =&gt; &#123; console.log(&#x27;Server running at http://localhost:8000/&#x27;);&#125;); 上述示例中，当客户端访问服务器时，服务器会返回 302 状态码和 Location 头字段，将客户端重定向到 http://localhost:8000/new 地址。 301 和 302 在浏览器上表现出来的区别最大的区别就是：是否保留原来的HTTP请求 我们在服务端打印 req.url，同时观察 network 中的 http 请求: 1234567// server.js// 302// console.log(req.url)//new/favicon.ico 302 保留了 根路径 的请求，没一次访问 http://localhost:8888/，服务端都会打印出 / 和 /new 123456// server.js// 301// console.log(req.url)/new/favicon.ico 302 不会保留根路径的请求了，从 network 可以看出，http://localhost:8888/ 请求是从 disk cache 获取的，表示永久性重定向，所以 req.url = &#39;/&#39;不会再走到服务端。 注意，如果我们设置了 301 永久重定向，后续再修改服务器的状态，此时浏览器这边是无法知道的，依然会使用 301 永久重定向，也就是说，如果用户不手动清理浏览器缓存，那么就无法拿到最新的服务器资源。所以使用301状态码要非常谨慎！ HTTP Content Security Policy (CSP) https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP 一种用于增强网页安全性的 HTTP 头部字段。 它允许网站管理员 控制网页上能够执行的内容源和操作，以减少恶意脚本注入、跨站点脚本攻击（XSS）等安全威胁。 Content Security Policy 通过定义一系列的策略规则，限制网页中可加载的资源和可执行的操作。这些规则可以包括允许的域名、允许的脚本来源、允许的样式来源、允许的图像来源等。通过限制这些资源的来源，CSP 可以有效防止恶意代码注入和其他安全漏洞。 CSP 的规则可以通过 HTTP 头部字段 Content-Security-Policy 或 Content-Security-Policy-Report-Only 来设置。其中，Content-Security-Policy 是指定实际执行的策略，而 Content-Security-Policy-Report-Only 则只用于报告违规情况，不会阻止资源加载和执行。 以下是一个示例，展示如何使用 CSP 头部字段： 1Content-Security-Policy: default-src &#x27;self&#x27;; script-src &#x27;self&#x27; https://example.com; style-src &#x27;self&#x27; &#x27;unsafe-inline&#x27; 上述示例中，CSP 规则包括： default-src &#39;self&#39;：默认策略要求所有资源从当前域名加载。 script-src &#39;self&#39; https://example.com：指定脚本只能从当前域名和 https://example.com 加载。 style-src &#39;self&#39; &#39;unsafe-inline&#39;：指定样式只能从当前域名加载，但允许内联样式（&#39;unsafe-inline&#39;）。 通过配置适当的 CSP 规则，网站管理员可以限制网页上的资源和操作，从而减少潜在的安全风险。 示例我们在 html 中，加载一张外网的图片，同时服务端设置 CSP default-src self，看看会有什么效果 随便找张图片 1&lt;img src=&quot;http://www.fangfa.net/public/uploads/ueditor/images/20141111/14156729795697.png&quot; alt=&quot;&quot; /&gt; 1234567891011121314151617181920const http = require(&#x27;http&#x27;)const fs = require(&#x27;fs&#x27;)const server = http.createServer((req, res) =&gt; &#123; if (req.url === &#x27;/&#x27;) &#123; res.writeHead(200, &#123; &#x27;Content-Type&#x27;: &#x27;text/html&#x27;, &#x27;Content-Security-Policy&#x27;: &quot;default-src self&quot; // 设置 CSP，所有的请求只能加载本域名下的资源 &#125;) const html = fs.readFileSync(&#x27;index.html&#x27;) res.end(html) &#125;&#125;)server.listen(8888, () =&gt; &#123; console.log(&#x27;server running at port 8888...&#x27;)&#125;) 刷新页面后，发现图片没出来，控制台还报错了 1Refused to load the image &#x27;http://www.fangfa.net/public/uploads/ueditor/images/20141111/14156729795697.png&#x27; because it violates the following Content Security Policy directive: &quot;default-src self&quot;. Note that &#x27;img-src&#x27; was not explicitly set, so &#x27;default-src&#x27; is used as a fallback. 出现了 CSP 错误，如何报告错误？配置 report-uri /report &#39;Content-Security-Policy&#39;: &quot;default-src \\&#39;self\\&#39;; report-uri /report&quot; 设置报告错误后，network 中就会出现 /report 的 http 请求。 123456789101112131415&#123; &quot;csp-report&quot;: &#123; &quot;document-uri&quot;: &quot;http://localhost:8888/&quot;, &quot;referrer&quot;: &quot;&quot;, &quot;violated-directive&quot;: &quot;style-src-elem&quot;, &quot;effective-directive&quot;: &quot;style-src-elem&quot;, &quot;original-policy&quot;: &quot;default-src &#x27;self&#x27;; report-uri /report&quot;, &quot;disposition&quot;: &quot;enforce&quot;, &quot;blocked-uri&quot;: &quot;inline&quot;, &quot;line-number&quot;: 9, &quot;source-file&quot;: &quot;http://localhost:8888/&quot;, &quot;status-code&quot;: 200, &quot;script-sample&quot;: &quot;&quot; &#125;&#125; meta 标签也可以配置 CSP1234&lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;default-src &#x27;self&#x27;; img-src https://*; child-src &#x27;none&#x27;;&quot; /&gt; 不过 meta 标签不能配置 report-uri，所以最好还是通过 http 的响应头来配置 CSP。"},{"title":"","date":"2024-06-11T08:52:17.487Z","updated":"2024-06-11T08:52:17.487Z","comments":false,"path":"demo/2023面试准备/nodejs.html","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/nodejs.html","excerpt":"","text":"疑问❓什么是运行时？举一个例子。 什么是回调？回调与异步调用有必然联系吗？ 什么是事件？ 并行与并发有什么区别和联系? 同步和异步，阻塞和非阻塞的区别? 如何理解“除了代码，一切都是并行的”？这句话是否绝对正确？ 简述事件循环的运行过程。 nextTick的原理是什么，和setImmaite有什么区别？ 浏览器的事件循环 同步代码 异步代码 宏任务 微任务 执行流程 从上之下执行同步代码 遇到宏任务，将其添加到宏任务队列，遇到微任务，将其添加至微任务队列 同步代码执行完毕。 检查微任务队列，如果存在，就开始清空队列里面的回调函数，保持 先进先出 的原则 如果微任务回调函数包含了其它的异步代码，将其添加至相应的队列中，等待执行。 微任务队列清空完毕 检查宏任务队列，如果存在，就开始清空队列里面的回调函数，保持 先进先出 的原则 如果宏任务回调函数包含了其它的异步代码，将其添加至相应的队列中，等待执行。 每当一个宏任务执行完毕，立马去检查微任务队列是否存在微任务，如果存在，继续清空微任务队列 微任务队列清空完毕，接着执行宏任务代码 循环操作 12345678910111213141516171819202122232425setTimeout(() =&gt; &#123; console.log(&#x27;s1&#x27;) Promise.resolve().then(() =&gt; &#123; console.log(&#x27;p2&#x27;) &#125;) Promise.resolve().then(() =&gt; &#123; console.log(&#x27;p3&#x27;) &#125;)&#125;)Promise.resolve().then(() =&gt; &#123; console.log(&#x27;p1&#x27;) setTimeout(() =&gt; &#123; console.log(&#x27;s2&#x27;) &#125;) setTimeout(() =&gt; &#123; console.log(&#x27;s3&#x27;) &#125;)&#125;)// =&gt;&gt;&gt;&gt;&gt;&gt;&gt; p1 s1 p2 p3 s2 s3 NodeJS 事件循环事件循环同样运行在单线程环境下，JavaScript的事件循环是依靠浏览器实现的，而Node作为另一种运行时，事件循环由底层的libuv实现。 Nodejs 事件循环分成了6个不同的阶段，其中每个阶段都维护着一个回调函数的队列，在不同的阶段，事件循环会处理不同类型的事件: timers（定时器阶段）：处理定时器回调函数，例如 setTimeout 和 setInterval。 pending callbacks（待定回调阶段）：处理系统级回调函数，例如网络请求的回调。(tcp、UDP) idle, prepare（空闲和准备阶段）：内部使用，一般不需要关注。 poll（轮询阶段）：等待新的 I/O 事件到达，执行 I/O 回调函数。在此阶段阻塞的地方是等待 I/O 事件到达，同时也是定时器的触发阶段。（文件的读取、写入） check（检查阶段）：执行 setImmediate 的回调函数。 close callbacks（关闭回调阶段）：执行 close 回调函数，例如 socket.on(&#39;close&#39;, ...)。 每次循环称为一个 Tick。在每个阶段中，都会执行相应的回调函数。事件循环会不断重复运行，直到没有回调函数需要执行。 事件循环详细过程http://docs.libuv.org/en/v1.x/_images/loop_iteration.png Node.js 的事件循环（Event Loop）是 Node.js 运行时的核心机制之一，负责管理异步操作、事件回调函数的执行和事件触发等。 下面是 Node.js 事件循环的详细过程： 执行全局脚本（Main Script）： 当 Node.js 进程启动时，会先执行全局脚本。全局脚本中的同步代码会依次执行，遇到异步操作时会将其注册到相应的事件回调队列中。 同步代码执行完毕，先检查微任务队列，检查是否存在微任务，如果有就清空队列。 执行事件回调函数队列： 执行全局脚本后，并且微任务队列没有可执行函数了，开始执行事件回调函数队列。事件回调函数队列包括 timers、pending callbacks、idle, prepare 等阶段的回调函数队列。事件循环按照顺序检查并执行每个阶段的回调函数队列。 注意：再完成队列切换之前，也会先检查 微任务 队列是否存在可执行函数，如果有就清空队列。 Timers 阶段： 在 timers 阶段，执行已经到期的定时器回调函数。这些定时器是通过 setTimeout()、setInterval() 等函数注册的。 切换队列，先检查微任务 I/O callbacks 阶段： 在 I/O callbacks 阶段，执行准备好的异步 I/O 操作的回调函数。例如，当网络请求返回结果、文件读写完成时，相应的回调函数会在这个阶段执行。 闲置阶段（idle、prepare）： 这是一个内部使用的阶段，一般不需要关注。 轮询（Poll）阶段： 在 poll 阶段，Node.js 会检查是否有新的 I/O 事件需要处理。如果有新的 I/O 事件到达，会依次处理这些事件的回调函数。如果没有新的 I/O 事件到达，则会等待一段时间，等待期间如果有定时器到期或者有被 setImmediate() 注册的回调函数，则会跳过 poll 阶段，直接进入 check 阶段。 Check 阶段： 在 check 阶段，执行被 setImmediate() 注册的回调函数。 关闭事件回调阶段（Close Callbacks）： 在关闭事件回调阶段，执行一些关闭事件的回调函数，例如 socket.on(&#39;close&#39;, ...)。 定时器检测阶段（Timers Check）： 在每次事件循环的末尾，会进行定时器的检测和处理。如果有定时器到期，则会执行相应的回调函数。 关于 process.nextTick 要注意的一点是：在事件循环的任何阶段，如果 nextTickQueue 不为空，都会在当前阶段操作结束后 *优先* 执行 nextTickQueue中的回调函数 我们来看下面这个例子： 1234567891011121314151617181920212223242526272829303132333435363738394041424344// timers 阶段setTimeout(() =&gt; &#123; console.log(&#x27;s1&#x27;) process.nextTick(() =&gt; &#123; console.log(&#x27;s1 inner nextTick&#x27;) &#125;) Promise.resolve().then(() =&gt; &#123; console.log(&#x27;s1 p1&#x27;) &#125;)&#125;);setTimeout(() =&gt; &#123; console.log(&#x27;s2&#x27;) process.nextTick(() =&gt; &#123; console.log(&#x27;s2 inner nextTick&#x27;) &#125;) Promise.resolve().then(() =&gt; &#123; console.log(&#x27;s2 p2&#x27;) &#125;)&#125;);// poll 阶段fs.readFile(&#x27;./doc.txt&#x27;, (err, data) =&gt; &#123; console.log(&#x27;fs &#x27;, data.toString())&#125;)// check 阶段setImmediate(() =&gt; &#123; console.log(&#x27;setImmediate&#x27;)&#125;)// 微任务，任意阶段执行完成后执行，优先级高于 promiseprocess.nextTick(() =&gt; &#123; console.log(&#x27;outer nextTick&#x27;)&#125;)// 微任务，待同步代码执行完毕后执行Promise.resolve().then(() =&gt; &#123; console.log(&#x27;p0&#x27;)&#125;) 代码执行顺序如下： 从上之下，同步代码执行完毕。各个队列信息如下 123456789timers: `s1, s2`poll: `&#x27;fs &#x27;, data.toString()`check: `setImmediate`nextTickQueue: `outer nextTick`微任务队列: `p0` 立即检查 nextTickQueue，打印 outer nextTick 开始检查微任务队列，存在 Promise.then，打印 p0 接着进入到 timers 阶段，执行 setTimeout 回调，打印 s1，并注册nextTick 和 promise。接着执行 s2，打印 s2，并注册 nextTick 和 promise timers 阶段执行完毕。 先检查微任务队列，nextTick 优先级高，所以先打印 s1 的 nextTick s1 inner nextTick，接着执行 s2 的 nextTick s2 inner nextTick，然后执行 promise，先打印 s1 p1，再打印 s2 p2 微任务队列清空了。 切换队列，进入到 poll 阶段，如果没有新的 I/O 事件到达，则会等待一段时间，等待期间如果有定时器到期或者有被 setImmediate() 注册的回调函数，则会跳过 poll 阶段，直接进入 check 阶段。打印 setImmediate 切换至 poll 阶段，打印 fs hello world. 循环结束。 12345678910outer nextTickp0s1s2s1 inner nextTicks2 inner nextTicks1 p1s2 p2setImmediatefs hello world 上述过程是基于 Node.js 10.14.2 版本的事件循环机制，不同版本的 Node.js 可能会有微小的差异，但总体流程是相似的。 Node &gt; 11 需要注意的差异点，在于 timers 阶段执行完一个 cb 后，会立马去查看微任务队列，也就是和 浏览器 的执行顺序保持一致了。 123456789101112131415161718192021222324// timers 阶段setTimeout(() =&gt; &#123; console.log(&#x27;s1&#x27;) process.nextTick(() =&gt; &#123; console.log(&#x27;s1 inner nextTick&#x27;) &#125;) Promise.resolve().then(() =&gt; &#123; console.log(&#x27;s1 p1&#x27;) &#125;)&#125;);setTimeout(() =&gt; &#123; console.log(&#x27;s2&#x27;) process.nextTick(() =&gt; &#123; console.log(&#x27;s2 inner nextTick&#x27;) &#125;) Promise.resolve().then(() =&gt; &#123; console.log(&#x27;s2 p2&#x27;) &#125;)&#125;); 在 Node &gt; 11 的环境下，这段代码执行顺序和 浏览器环境下保持一致。 同步代码执行完毕，timers 阶段有两个定时器 s1, s2 开始清空 timers 执行 s1，由于内部注册了 nextTick 和 promise，并且 nextTick 优先级高，所以打印 s1、s1 inner nextTick、s1 p1 执行 s2，由于内部注册了 nextTick 和 promise，并且 nextTick 优先级高，所以打印 s2、s2 inner nextTick、s2 p2 123456s1s1 inner nextTicks1 p1s2s2 inner nextTicks2 p2 process.nextTickprocess.nextTick 其实并不是事件循环的一部分，但它的回调方法也是由事件循环调用的，该方法定义的回调方法会被加入到名为nextTickQueue的队列中。在事件循环的任何阶段，如果nextTickQueue不为空，都会在当前阶段操作结束后*优先*执行nextTickQueue中的回调函数，当nextTickQueue中的回调方法被执行完毕后，事件循环才会继续向下执行。 Node限制了nextTickQueue的大小，如果递归调用了process.nextTick，那么当nextTickQueue达到最大限制后会抛出一个错误! 123process.nextTick((args) =&gt; &#123; console.log(args)&#125;, &#x27;is nextTick callback !&#x27;) setImmediatesetImmediate 的事件会在当前事件循环的结尾触发，对应的回调方法会在当前事件循环末尾（check阶段）执行。 由于process.nextTick会在当前操作完成后立刻执行，因此总会在 setImmediate 之前执行。 123setImmediate(args =&gt; &#123; console.log(args)&#125;, &#x27;so immediate!&#x27;) 当有递归的异步操作时只能使用setImmediate，不能使用process.nextTick，这是因为 setImmediate 不会生成call stack。 由于 setImmediate 的回调函数是在事件循环迭代的 check 阶段执行的，它不会直接将回调函数添加到当前的调用栈（call stack）中。相反，它会将回调函数放入事件队列中，等待事件循环进入下一个迭代时执行。 为什么递归调用中，不要使用 process.nextTick，却可以使用 setImmediateprocess.nextTick 在当前阶段完成后，直接参与 call stack（调用栈） 在 Node.js 中，process.nextTick 方法的回调函数会在当前操作完成后立即执行，而且会在事件循环的当前阶段插入一个微任务。 与 setTimeout 和 setImmediate 不同，process.nextTick 的回调函数会在当前阶段完成后立即执行，而不会被放入事件队列或等待下一个事件循环迭代。这意味着它可以在当前调用栈中被执行，而不需要等待其他任务的执行。 因此，process.nextTick 的回调函数会直接参与当前的调用栈，可能会导致调用栈的深度增加。如果在递归的环境下大量使用 process.nextTick，会导致调用栈的快速增长，可能会触发堆栈溢出错误（stack overflow）。 setImmediate 的回调函数是在事件循环的 check 阶段执行的。 由于 setImmediate 的回调函数是在事件循环迭代的 check 阶段执行的，它不会直接将回调函数添加到当前的调用栈（call stack）中。相反，它会将回调函数放入事件队列中，等待事件循环进入下一个迭代时执行。 setImmediate 和 setTimeout将二者放在一个 I/O 操作的callback中，则永远是 setImmediate 先执行。 123456789101112131415161718192021// pollfs.readFile(&#x27;./index.html&#x27;, () =&gt; &#123; // timers setTimeout(() =&gt; &#123; console.log(&#x27;set timeout 1&#x27;) &#125;, 0); // check setImmediate(() =&gt; &#123; console.log(&#x27;setImmediate 2!&#x27;) &#125;)&#125;)setTimeout(() =&gt; &#123; console.log(&#x27;set timeout 3&#x27;)&#125;, 0);setImmediate(() =&gt; &#123; console.log(&#x27;setImmediate 4!&#x27;)&#125;) 这是因为 readFile 的回调执行时，事件循环位于 poll 阶段，因此事件循环会先进入 check阶段执行setImmediate的回调，然后再进入timers阶段执行setTimeout的回调。 如果不是放在 I/O 中，它俩的顺序可能不确定了。 注意当 setTimeout 、setImmediate 在一起使用时，执行顺序不确定。 1234567setTimeout(() =&gt; &#123; console.log(&#x27;timeout&#x27;)&#125;);setImmediate(() =&gt; &#123; console.log(&#x27;setImmediate!&#x27;)&#125;) 当你多次执行代码，会发现有时候 timeout 执行在前，有时候执行在后，这是为什么呢？ 按理说，在不给 setTimeout 设置时间间隔时，应该先执行 setTimeout，因为它处于 timers 阶段，而 setImmediate 处于 check 阶段。 它俩执行顺序取决于事件循环的状态和系统资源的使用情况，setTimeout 可能会被系统资源占用的情况导致阻塞执行，从而晚于 setImmediate. 浏览器和Node事件循环的区别 任务队列数，浏览器（2），NodeJS（6） 微任务执行时机（NodeJS &lt; 11 任务队列切换之前，检查微任务），NodeJS &gt; 11 的环境中，两者保持一致了。（即每一个宏任务执行完毕，就去检查微任务队列。） NodeJS 中微任务有优先级（nextTick优先级高） 模块 CommonJS CommonJS将每个文件都看作一个模块，模块内部定义的变量都是私有的 CommonJS 加载模块的方式是 同步的 AMD 异步方式加载模块 require 及其运行机制require关键字并不依赖于exports，我们也可以加载一个没有暴露任何方法的模块，这相当于直接执行一个模块内部的代码 重复引入 Node默认先从缓存中加载模块，一个模块被第一次加载后，就会在缓存中维持一个副本，如果遇到重复加载的模块会直接提取缓存中的副本 缓存策略 基于文件路径定位的 1require.cache 可以查看缓存文件信息 Nodejs 中的 this 在控制台中，this 指向 global js 脚本中，this 指向 {}（空对象），即 module.exports 如果声明变量时不使用var或者let关键字，变量会挂在到 global 上。 Nodejs 的作用域种类 全局作用域 即 global 对象，如果声明变量时不使用var或者let关键字，变量会挂在到 global 上。 模块作用域 在代码文件顶层（不在任何方法，对象中）使用var、let或者const修饰的变量都位于模块作用域中，不同模块作用域之间的作用域是隔离的。 this 指向 module.exports 函数作用域 块级作用域 Buffer 缓冲区主要用来处理二进制数据，I/O，在文件操作和网络操作中，如果不显式声明编码格式，其返回数据的默认类型就是 Buffer。 在最新的Node API中，Buffer()方法被标记为Deprecated，表示已经不推荐使用，因为这个方法在某些情况下可能不安全（参考https://github.com/nodejs/node/issues/4660），并且会在将来的版本中将其移除。 https://zhuanlan.zhihu.com/p/398967492 为什么要有 Buffer 缓冲区？从一个文件中读取数据，并写入到磁盘的另一个地方去，读取的操作称为 生产者，写入的那个文件称为 消费者。 存在的问题是：有时候数据的生产者无法满足消费者的消费速度，又或者消费者的消费速度比生产者的生产的速度慢许多，那么无论是那种情况，都会出现数据的等待过程（生产、消费），等待的数据存放在哪？，这个时候就用到了 Buffer 缓冲区了（内存空间）。 注意： Buffer 不占据 v8 堆内存大小的内存空间，直接由 c++ 层面进行分配 内存的使用由 NodeJS 来控制，由 v8 的 GC 回收 一般配合 stream 流使用，充当缓冲区 编码类型Buffer支持的编码类型种类有限，只有以下6种： ASCII Base64 Binary Hex // 将每个字节编码为两个十六进制字符 UTF-8 UTF-16LE/UCS-2 Buffer.alloc()创建长度为 10 的以零填充的缓冲区。 123const buf1 = Buffer.alloc(10);// &lt;Buffer 00 00 00 00 00 00 00 00 00 00&gt; Buffer.from使用 Buffer.from 来初始化一个Buffer，表示创建了一个包含字节 Hello world 的缓冲区。 将 Buffer 转换为字符串通常称为编码，将字符串转换为 Buffer 通常称为解码。 123Buffer.from(&#x27;Hello world&#x27;) // 默认 encoding 是 utf-8Buffer.from(&#x27;helo world&#x27;, &#x27;utf-8&#x27;).toString(&#x27;base64&#x27;) // aGVsbyB3b3JsZA== Buffer 长度 一个中文字符占 3 个字节，比如 Buffer.from(&#39;中&#39;) 是 &lt;Buffer e4 bd a0&gt; 123console.log(Buffer.from(&#x27;中&#x27;).length); // 3console.log(Buffer.from(&#x27;a&#x27;).length); // 1console.log(Buffer.from(&#x27;1&#x27;).length); // 1 拼接 buffer使用 += 来拼接上传的数据流，这个过程包含了一个隐式的编码转换。 body+=chunk相当于body+= chunk.toString() 但如果字符串中包含中文或者其他语言，由于toString方法默认使用utf-8编码，这时就有可能出现乱码 官方的推荐做法是使用push方法来拼接Buffer。 Buffer.concat(bufferList, totalLength): 返回新的 Buffer，它是将 list 中的所有 Buffer 实例连接在一起的结果。 1234567891011const data = []rs.on(&#x27;data&#x27;, (chunk) =&gt; &#123; data.push(chunk)&#125;)rs.on(&#x27;end&#x27;, () =&gt; &#123; const buf = Buffer.concat(data) console.log(buf.toString())&#125;) 上面的代码在拼接过程中不会有隐式的编码转换，首先将Buffer放到数组里面，等待传输完成后再进行转换，这样就不会出现乱码了。 Buffer 实例方法 fill(data, start, end): 使用数据填充 buffer。[start, end) write: 向 buffer 写入数据（与 fill 稍有不同） toString(encoding): 从 buffer 中提取数据，转化为指定的格式 slice: 截取 buffer（类似数组的操作） indexOf: 在 buffer 中查找数据 copy: 复制 buffer 中的数据 buf.toString(encoding)如果想把一个Buffer对象转成字符串形式，需要使用toString方法 1234567buffer.toString([encoding], start, end)- encoding 目标编码格式- start 起始位置- end 结束位置 1Buffer.from(&#x27;Hello world&#x27;).toString(&#x27;utf-8&#x27;, 0, 3) // Hel 缓冲区与迭代器可以使用 for..of 语法迭代 Buffer 实例： 1234567891011const &#123; Buffer &#125; = require(&#x27;node:buffer&#x27;);const buf = Buffer.from([1, 2, 3]);for (const b of buf) &#123; console.log(b);&#125;// 打印:// 1// 2// 3 此外，buf.values()、buf.keys() 和 buf.entries() 方法可用于创建迭代器。 File system fs.readFile readFile 方法用来 异步 读取文本文件中的内容 1234567const res = fs.readFile(&#x27;./doc.txt&#x27;, (err, data) =&gt; &#123; if (err) return // data =&gt; Buffer console.log(data.toString())&#125;) readFile会将一个文件的全部内容都读到 内存 中，适用于体积较小的文本文件；如果你有一个数百MB大小的文件需要读取，建议不要使用readFile而是选择stream fs.readFileSync 如果不指定 encoding，则会返回 buffer 格式的数据 123const res = fs.readFileSync(&#x27;./doc.txt&#x27;, &#123; encoding: &#x27;utf-8&#x27; &#125;)console.log(res) // 八百标兵奔北坡 fs.writeFile 在WriteFile的第一个参数为文件名，如果不存在，则会尝试创建它（默认的flag为w）。 123456789101112131415fs.writeFile(&#x27;./doc.txt&#x27;, &#x27;hello world&#x27;, &#123; flag: &#x27;w&#x27;, encoding: &#x27;utf-8&#x27;&#125;, err =&gt; &#123; if (err) &#123; console.log(&#x27;write file err&#x27;, err) return &#125; console.log(&#x27;write file success ...&#x27;) const res = fs.readFileSync(&#x27;./doc.txt&#x27;, &#123; encoding: &#x27;utf-8&#x27; &#125;) console.log(&#x27;--&#x27;, res)&#125;) fs.stat(异步获取) stat方法通常用来获取文件的状态。 通常开发者可以在调用open()、read()，或者write方法之前调用fs.stat方法，用来判断该文件是否存在。 如果文件存在，result就会返回文件的状态信息。 12345678910111213141516171819202122232425262728fs.stat(&#x27;./doc.txt&#x27;, (err, result) =&gt; &#123; if (err) return console.log(result)&#125;)=== result ===Stats &#123; dev: 16777221, mode: 33188, nlink: 1, uid: 501, gid: 20, rdev: 0, blksize: 4096, ino: 63928842, size: 11, blocks: 8, atimeMs: 1686140463446.1628, mtimeMs: 1686140462704.6558, ctimeMs: 1686140462704.6558, birthtimeMs: 1686139851720.9082, atime: 2023-06-07T12:21:03.446Z, mtime: 2023-06-07T12:21:02.705Z, ctime: 2023-06-07T12:21:02.705Z, birthtime: 2023-06-07T12:10:51.721Z&#125; fs.statSync 同步获取文件信息 fs.readdir 获取当前目录下所有文件/文件夹的名字 1234567891011121314151617fs.readdir(__dirname, (err, res) =&gt; &#123; // res 是数组，包含了当前目录下所有的 文件/文件夹 的名字 for(let subPath of res) &#123; // 同步获取文件信息 const statObj = fs.statSync(`$&#123;__dirname&#125;/$&#123;subPath&#125;`) if (statObj.isFile()) &#123; // 文件 &#125; if (statObj.isDirectory()) &#123; // 文件夹 &#125; &#125;&#125;) fs.copyFile 一次性读取，一次性写入 1fs.copyFile(&#x27;./doc.txt&#x27;, &#x27;./copy-doc.txt&#x27;) stream（流）主要用来处理比较大的数据，分段读取、分段写入等等。也可以配合 管道pipe 实现数据的分段传输。 Readable 可读流 Writeable 可写流 Duplex 双工流（既可读，又可写） Transform 转换流（通常用于输入数据和输出数据不要求匹配的场景） Readable stream可读流：生产供程序消费数据的流 12345const rs = fs.createReadStream(&#x27;./doc.txt&#x27;)rs.setEncoding(&#x27;utf8&#x27;)rs.pipe(process.stdout) // 控制台输出 传递参数，可以设置编码、读取的起始位置、结束位置以及 highWaterMark 通过 事件监听，流的操作 可中断，可恢复 1234567891011121314151617181920212223242526272829303132333435363738const rs = fs.createReadStream(&#x27;./doc.txt&#x27;, &#123; flags: &#x27;r&#x27;, // readable, encoding: null, // 如果是null，表示输出 buffer start: 0, // 读取的起始位置 end: 3, // 结束位置 highWaterMark: 2, // 每次取几个字符&#125;)// 覆盖 optionsrs.setEncoding(&#x27;utf8&#x27;)rs.on(&#x27;data&#x27;, (chunk) =&gt; &#123; console.log(&#x27;data &#x27;, chunk.toString().toUpperCase()) // 可暂停 rs.pause() setTimeout(() =&gt; &#123; // 恢复流 rs.resume() &#125;, 1000);&#125;)rs.on(&#x27;open&#x27;, () =&gt; &#123; console.log(&#x27;只要调用了 createReadStream 方法，就会触发 open 事件。&#x27;)&#125;)rs.on(&#x27;end&#x27;, () =&gt; &#123; console.log(&#x27;数据读取完毕&lt;----end&#x27;)&#125;)rs.on(&#x27;close&#x27;, () =&gt; &#123; console.log(&#x27;关闭文件&#x27;)&#125;)rs.on(&#x27;error&#x27;, () =&gt; &#123; console.log(&#x27;读取文件报错了&#x27;)&#125;) 我们也可以通过监听 readable 并通过 rs.read 方法来获取数据。 不过要注意的是，当 rs.read() 读取完数据后，最后会返回一个 null 123456789101112rs.on(&#x27;readable&#x27;, () =&gt; &#123; const data = rs.read() console.log(data)&#125;)===&gt;hellnull&lt;----end读取完成 所以我们可以通过 while 来判断 123456rs.on(&#x27;readable&#x27;, () =&gt; &#123; let data while ((data = rs.read()) !== null) &#123; console.log(data.toString()) &#125;&#125;) 实际过程中，不应该在 on data 或者 on readable 事件中处理数据，而是放到 on end 事件中，这个阶段表示已经完成所有数据的读取。 123456789101112const bufferArr = []rs.on(&#x27;data&#x27;, (chunk) =&gt; &#123; bufferArr.push(chunk)&#125;)rs.on(&#x27;end&#x27;, () =&gt; &#123; const buffer = Buffer.concat(bufferArr) console.log(buffer.toString())&#125;) Writeable stream可写流：用于消费数据的流 123456789// 创建一个可读流const rs = fs.createReadStream(&#x27;./doc.txt&#x27;)rs.setEncoding(&#x27;utf8&#x27;)// 没有文件的话，会自动创建文件// 创建一个可写流const ws = fs.createWriteStream(&#x27;./copy-doc.txt&#x27;)rs.pipe(ws) // 将 doc 的内容写进 copy-doc 和 Readable 一样，createWriteStream 也支持传递 options 123456789const ws = fs.createWriteStream(&#x27;./copy-doc.txt&#x27;, &#123; flags: &#x27;w&#x27;, encoding: &#x27;utf-8&#x27;, start: 0,&#125;)ws.write(&#x27;写入了一些东西&#x27;, () =&gt; &#123; console.log(&#x27;写入了&#x27;)&#125;) 需要注意的是，write 的第一个参数 The &quot;chunk&quot; argument must be one of type string or Buffer. Received type number。 如果你传入了一个数字或者其他类型的数据，会报错。 还有一点要注意的是，on close 并不是 write 成功后就会触发，而是手动调用了 ws.end() 之后，才会触发 on close 12345ws.on(&#x27;close&#x27;, () =&gt; &#123; console.log(&#x27;close&#x27;)&#125;)ws.end() ws.end() 当我们手动调用了 ws.end()，表示文件写入已经完成，我们不能在 end 之后再执行 write 操作，那样会报错！ 如果我们想要在 end 之后，还想写入内容该怎么办呢？ 你可以把内容直接放到 end(xxxx) 中，它会将收到的参数写入到文件中。 1ws.end(&#x27;最后再写入有点内容。&#x27;) write 执行流程 搞懂 ws.write(&#39;xxxx&#39;) 返回值的意义 highWaterMark 起到了什么作用 为什么 ws.write 返回值为 false 时，才会触发 on drain 事件？ on drain 事件有什么用？ 如何控制 写入速度？ pipe 方法 背压机制 - Backpressure为什么需要背压机制？ 123456const rs = fs.createReadStream(&#x27;./doc.txt&#x27;)const ws = fs.createWriteStream(&#x27;./copy-doc.txt&#x27;)rs.on(&#x27;data&#x27;, chunk =&gt; &#123; ws.write(chunk)&#125;) 乍一看这段代码没有什么问题，但是要知道的是，数据从磁盘读取出来的速度，要远远大于写入磁盘的速度。这样就会出现 产能过剩 的问题，而 Writeable 内部维护了一个队列，在它不能实时的去 消费 由上游所传输过来的数据时，它就会将不能被 消化 掉的数据缓存到队列里。但是队列的内存大小有上限，如果不做 背压机制，很有可能就会造成 内存溢出、GC频繁调用、占用进程导致其它进程变慢。 基于以上原因，就需要一种 数据在生产者和消费者之间平滑流动 的机制，这就是 背压机制。 我们来简单模拟一下 pipe 的背压机制 定义好 doc.txt 文件并写好内容： 123// doc.txt你好世界 12345678910111213141516171819202122232425// doc.txtconst rs = fs.createReadStream(&#x27;./doc.txt&#x27;, &#123; highWaterMark: 4 // 一个汉字占 3 个字节，highWaterMark 设置为 4 的话，表示一次可以取一个汉字 + 1 个字节&#125;)const ws = fs.createWriteStream(&#x27;./copy-doc.txt&#x27;, &#123; highWaterMark: 1&#125;)let flag = truers.on(&#x27;data&#x27;, chunk =&gt; &#123; flag = ws.write(chunk, () =&gt; &#123; console.log(&#x27;写完了&#x27;); &#125;) if (!flag) &#123; rs.pause() &#125;&#125;)ws.on(&#x27;drain&#x27;, () =&gt; &#123; rs.resume()&#125;) 当写入的数据长度 大于设置的 highWaterMark，ws.write 就会返回 false，然后通过 rs.pause() 方法，暂停可读流的读取操作。 这个时候，就会触发 drain 事件，我们可以在这里重新启动 读取数据 的操作，从而达到分批、限流的目的。 实际开发中，我们可能不必这样做，因为 pipe 已经帮我们处理好了，上面的代码也是 pipe 的内部实现原理。 我们只需要调用 pipe 方法，传入 可写流 的实例即可。 123456789const rs = fs.createReadStream(&#x27;./doc.txt&#x27;, &#123; highWaterMark: 4 &#125;)const ws = fs.createWriteStream(&#x27;./copy-doc.txt&#x27;, &#123; highWaterMark: 1&#125;)rs.pipe(ws) HTTP服务通过 createServer 创建一个 http 服务器 12345678910111213141516171819202122const server = http.createServer((req, res) =&gt; &#123; res.setHeader(&#x27;Content-Type&#x27;, &#x27;text/plain&#x27;) res.writeHead(200) // 查看服务器目录信息 const fileInfo = fs.readdirSync(__dirname) res.end(fileInfo.toString())&#125;)server.on(&#x27;connection&#x27;, () =&gt; &#123; console.log(&#x27;http connect&#x27;)&#125;)server.on(&#x27;request&#x27;, () =&gt; &#123; console.log(&#x27;http request&#x27;)&#125;)server.listen(3000, () =&gt; &#123; console.log(&#x27;server running at port 3000...&#x27;)&#125;) HTTP模块除了能在服务端处理客户端请求之外，还可以作为客户端向服务器发起请求，例如通过http.get发起get请求，通过post方法上传文件等 1234567891011121314151617181920// serverif (req.url === &#x27;/getUser&#x27;) &#123; res.end(&#x27;hello world, this is http get method!&#x27;)&#125;// 发起请求http.get(&#x27;http://localhost:3000/getUser&#x27;, res =&gt; &#123; if (res.statusCode === 200) &#123; let result = &#x27;&#x27; res.on(&#x27;data&#x27;, chunk =&gt; &#123; result+= chunk &#125;) res.on(&#x27;end&#x27;, () =&gt; &#123; console.log(&#x27;get 数据&#x27;, result) &#125;) &#125;&#125;) 通过命令行发起 POST 请求编写服务端路由 12345678910// 解析后的数据，会被存储在 ctx.request.body 中const bodyParser = require(&#x27;koa-bodyparser&#x27;)const app = new Koa()app.use(bodyParser())router.post(&#x27;/&#x27;, async (ctx, next) =&gt; &#123; console.log(&#x27;收到post请求：&#x27;, ctx.request.body) ctx.body = ctx.request.body&#125;) 打开命令行工具，输入： 123// -d 后面表示参数curl -d &quot;param1=value1&amp;param2=value2&quot; http://localhost:3000 输出： 12345// serve console收到post请求： &#123; param1: &#x27;value1&#x27;, param2: &#x27;value2&#x27; &#125;// 命令行&#123;&quot;param1&quot;:&quot;value1&quot;,&quot;param2&quot;:&quot;value2&quot;&#125;% HTTPS 什么是 SSL ? SSL（Secure Sockets Layer，安全套接层）协议及其继任者TLS（Transport Layer Security，传输层安全）协议是为网络通信提供安全及数据完整性的一种安全协议。TLS与SSL在传输层对网络连接进行加密。 SSL的一大优势在于它独立于上层协议，和HTTP结合即为HTTPS，和WebSocket结合即为WSS。 事件和监听器12345678910const eventEmitter = require(&quot;events&quot;)const emitter = new eventEmitter()emitter.on(&#x27;login&#x27;, (a, b) =&gt; &#123; console.log(a, b)&#125;)emitter.emit(&#x27;login&#x27;, 1, 2) 如果想获取当前的emitter一共注册了哪些事件，可以使用eventNames方法。 多进程服务child_process processProcess是一个全局对象，无须声明即可访问，每个Node进程都有独立的process对象。该对象中存储了当前进程的环境变量，也定义了一些事件。 Koa中间件 koa-static 静态文件服务 1234staticServe( __dirname + &#x27;/static/&#x27;, &#123; extensions: [&#x27;html&#x27;], defer: true &#125;) defer：是否推迟响应。如果值为true，koa-staitc中间件将会在其他中间件执行完成后再执行。 index：默认的文件名，默认值为index.html。 maxage：浏览器默认的最大缓存时长max-age，单位为毫秒，默认值为0，也就是不启用缓存。 koa-bodyparser 解析后的数据，会被存储在 ctx.request.body 中 koa-router 可以设置前缀 new Router({ prefix: ‘/users’ }) 123456789101112131415161718192021222324252627282930313233343536373839const Koa = require(&#x27;koa&#x27;)const bodyParser = require(&#x27;koa-bodyparser&#x27;)const router = require(&#x27;koa-router&#x27;)()const staticServe = require(&#x27;koa-static&#x27;) // 静态文件服务const app = new Koa()app.use(bodyParser())app.use(router.routes())// extensions 表示访问时，可以省略的后缀app.use(staticServe(__dirname + &#x27;/static/&#x27;, &#123; extensions: [&#x27;html&#x27;]&#125;))router.get(&#x27;/&#x27;, async (ctx, next) =&gt; &#123; ctx.response.body = ` &lt;h1&gt;Index&lt;/h1&gt; &lt;form action=&#x27;/login&#x27; method=&#x27;post&#x27;&gt; &lt;p&gt;Name &lt;input name=&#x27;name&#x27; /&gt;&lt;/p&gt; &lt;p&gt;Password &lt;input name=&#x27;password&#x27; type=&#x27;password&#x27; /&gt;&lt;/p&gt; &lt;p&gt;&lt;input type=&#x27;submit&#x27; value=&#x27;提交&#x27; /&gt;&lt;/p&gt; &lt;/form&gt; `&#125;)router.post(&#x27;/login&#x27;, async (ctx, next) =&gt; &#123; console.log(&#x27;post 数据&#x27;, ctx.request.body) const name = ctx.request.body.name || &#x27;&#x27; const password = ctx.request.body.password || &#x27;&#x27; if (name === &#x27;alex.cheng&#x27; &amp;&amp; password === &#x27;123456&#x27;) &#123; ctx.body = &#x27;Login success!&#x27; &#125; else &#123; ctx.body = &#x27;Some Error!&#x27; &#125;&#125;)app.listen(3000) querystringquerystring模块由Node.js原生提供，包含相关解析和格式化工具，共有4种方法 escape unescape parse stringify 123456789101112131415161718const queryString = require(&#x27;querystring&#x27;)console.log(&#x27;---------- queryString start ---------------&#x27;)const params = &#x27;id=1&amp;name=alex.cheng&#x27;const escapeValue = queryString.escape(params)console.log(escapeValue) // id%3D1%26name%3Dalex.chengconsole.log(queryString.unescape(escapeValue)) // id=1&amp;name=alex.chengconst parseValue = queryString.parse(params)console.log(parseValue) // &#123; id: &#x27;1&#x27;, name: &#x27;alex.cheng&#x27; &#125;console.log(queryString.stringify(parseValue)) // id=1&amp;name=alex.cheng koa-router模块封装了上下文的Request对象，在该对象中内置了query属性和querystring属性。通过query或querystring可以直接获取GET请求的数据，唯一不同的是query返回的是对象，而querystring返回的是查询字符串。 123456router.get(&#x27;/&#x27;, async (ctx, next) =&gt; &#123; console.log(&#x27;query&#x27;, ctx.request.query) console.log(&#x27;querystring&#x27;, ctx.request.querystring)&#125;) koa 中的 ctx.accepts在 Koa 2 中，ctx.accepts 是一个属性，用于获取客户端可接受的内容类型（MIME 类型）。它用于检查客户端请求头中的 Accept 字段，以确定客户端能够接受的内容类型。 ctx.accepts 方法可以接受一个或多个参数，每个参数表示一个内容类型，例如 &#39;json&#39;、&#39;html&#39;、&#39;text/plain&#39; 等。它会根据客户端请求头中的 Accept 字段进行匹配，返回第一个匹配到的内容类型。如果没有匹配到任何内容类型，则返回 false。 以下是一个示例代码，演示了如何使用 ctx.accepts 方法检查客户端可接受的内容类型： 1234567891011121314const Koa = require(&#x27;koa&#x27;);const app = new Koa();app.use(async (ctx) =&gt; &#123; const acceptedType = ctx.accepts(&#x27;json&#x27;, &#x27;html&#x27;, &#x27;text/plain&#x27;); if (acceptedType) &#123; ctx.body = `Accepted Content-Type: $&#123;acceptedType&#125;`; &#125; else &#123; ctx.throw(406, &#x27;Not Acceptable&#x27;); &#125;&#125;);app.listen(3000); 在上面的示例中，我们通过 ctx.accepts(&#39;json&#39;, &#39;html&#39;, &#39;text/plain&#39;) 检查客户端可接受的内容类型。如果客户端能够接受 &#39;json&#39;、&#39;html&#39; 或 &#39;text/plain&#39; 中的任意一种类型，那么响应体中将返回对应的 Accepted Content-Type。如果客户端无法接受任何一种类型，那么会返回状态码 406 Not Acceptable。 ctx.state在 Koa 中，ctx.state 是一个用于存储上下文状态的对象。它可以用来在中间件之间传递数据，并且在请求的生命周期内保持持久性。 通常情况下，ctx.state 可以用于存储一些在请求处理过程中需要共享的数据，例如用户信息、权限信息、请求的元数据等。它可以在中间件中设置和获取，允许不同的中间件对该数据进行操作或使用。 一个常见的用例是在身份验证中间件中将用户信息存储在 ctx.state 中，然后在后续的中间件或路由处理函数中访问该信息，以便进行权限检查或其他操作。这样可以避免在每个中间件或路由处理函数中重复执行相同的身份验证逻辑。 示例代码： 123456789101112app.use(async (ctx, next) =&gt; &#123; // 在某个中间件中设置 ctx.state ctx.state.user = &#123; id: 1, name: &#x27;John&#x27; &#125;; await next();&#125;);app.use(async (ctx) =&gt; &#123; // 在后续的中间件或路由处理函数中获取 ctx.state const user = ctx.state.user; // 使用 user 进行权限检查或其他操作 // ...&#125;); 通过使用 ctx.state，我们可以更方便地在不同的中间件之间传递数据，并确保数据在整个请求处理过程中的持久性和一致性。 定义 auth 中间件通过 ctx.state 保存用户信息 12345678910111213const jwt = require(&#x27;jsonwebtoken&#x27;)const auth = async (ctx, next) =&gt; &#123; // 1. 获取、解析token const &#123; authorization &#125; = ctx.request.header const token = authorization.replace(&#x27;Bearer &#x27;, &#x27;&#x27;) const user = jwt.verify(token, &#x27;shhhh&#x27;) // 2. 保存用户信息 ctx.state.user = user await next()&#125; 使用 auth 中间件 1router.patch(&#x27;/&#x27;, auth, HomeController.updatePassword) 然后我们就可以在 HomeController.updatePassword controller 中获取 user，并对 user 进行相应的处理。 12345678910111213141516171819202122232425262728293031module.exports = &#123; updatePassword: async (ctx, next) =&gt; &#123; // 拿到用户信息 const user = ctx.state.user // 1. 根据 ID 到数据库查询用户，判断是否存在用户 const hasUser = await Login.find(&#123; username: user.username &#125;) if (!hasUser.length) return ctx.body = &#x27;数据库未查询到当前用户&#x27; // 2. 获取 body 参数，拿到新的密码 const &#123; newpassword &#125; = ctx.request.body // 3. 通过 db.collection.updateOne 更新用户密码 db.login.updateOne( &#123; username: &#x27;alex.cheng&#x27; &#125;, // 查询 &#123; $set: &#123; password: newpassword &#125; &#125; ) // 4. 告诉用户更新密码成功，直接把最新的用户信息都返回 const currentUser = await Login.find(&#123; username: user.username &#125;) ctx.body = currentUser &#125;,&#125; mongodb collection在 Mongoose 中，collection 是指 MongoDB 数据库中的集合（Collection）。集合是 MongoDB 存储数据的基本单位，类似于关系数据库中的表。 在 Mongoose 中，每个模型（Model）对应着 MongoDB 数据库中的一个集合。当定义一个模型时，Mongoose 会自动将模型的名称转换为复数形式，并将其作为对应的集合名称。例如，如果定义了一个名为 User 的模型，则对应的集合名称将会是 users。 通过模型，我们可以进行各种数据库操作，如插入数据、查询数据、更新数据等。Mongoose 提供了丰富的方法和功能来操作集合中的数据，并提供了便捷的方式来定义和管理集合的结构、字段和索引等。 通过 Mongoose 的模型和集合的概念，我们可以在应用程序中使用面向对象的方式来操作 MongoDB 数据库，简化了与数据库的交互和管理。 koa 使用 数据存储安装 mongoose npm install mongoose -S 连接数据库，my-test-db 表示数据库名称 123const mongoose = require(&#x27;mongoose&#x27;)mongoose.connect(&#x27;mongodb://localhost/my-test-db&#x27;) 连接到数据库后，需要检测连接状态，用来应付可能出现的错误或异常 1234567const db = mongoose.connectiondb.on(&#x27;error&#x27;, console.error.bind(console, &#x27;connection error!!&#x27;))db.once(&#x27;open&#x27;, function(cb) &#123; console.log(&#x27;connected!&#x27;)&#125;) schema：一种以文件形式存储的数据库模型骨架，不具备数据库的操作能力。 model：由schema发布生成的模型，具有抽象属性和行为的数据库操作对。 创建 models/login.js 12345678910// schemaconst loginSchema = new mongoose.Schema(&#123; username: String, password: String,&#125;)// 第三个参数表示 collection，const Login = db.model(&#x27;login&#x27;, loginSchema, &#x27;login&#x27;)module.exports = Login; 保存数据向数据库插入一条数据 123456789101112const login = new Login(&#123; username: &#x27;alex.cheng1&#x27;, password: &#x27;123456789&#x27;&#125;)login.save() .then(res =&gt; &#123; console.log(&#x27;save res&#x27;, res) &#125;) .catch(err =&gt; &#123; console.log(&#x27;save err&#x27;, err) &#125;) 查询数据12345678const query = await Login.find(&#123; username: &#x27;alex.cheng&#x27;&#125;)ctx.body = ` &lt;h1&gt;Login success!&lt;/h1&gt; &lt;p&gt;username: $&#123;query[0].username&#125;; password: $&#123;query[0].password&#125;&lt;/p&gt;` Koa 的应用级别错误处理 ctx.app.emit在 Koa 中，ctx.app.emit 方法用于触发应用级别的事件，并且可以在不同的中间件或请求处理函数之间进行通信。 ctx.app.emit 方法的作用是发送一个指定的事件到应用程序实例。这样可以让其他部分监听该事件，并采取相应的操作。它类似于 Node.js 中的事件触发器模式。 你可以使用 ctx.app.emit 方法来实现自定义的应用级别事件的触发和处理。下面是一个示例： 123456789101112131415161718const Koa = require(&#x27;koa&#x27;);const app = new Koa();// 监听自定义事件app.on(&#x27;myEvent&#x27;, (data) =&gt; &#123; console.log(&#x27;Custom event triggered:&#x27;, data);&#125;);app.use(async (ctx, next) =&gt; &#123; // 触发自定义事件 ctx.app.emit(&#x27;myEvent&#x27;, &#x27;Hello, world!&#x27;, ctx); await next();&#125;);app.listen(3000, () =&gt; &#123; console.log(&#x27;Server is running on port 3000&#x27;);&#125;); 在上面的示例中，我们在中间件中使用 ctx.app.emit 方法触发了一个自定义事件 &#39;myEvent&#39;，并且传递了 &#39;Hello, world!&#39; 作为数据。然后，在应用程序实例上监听了该事件，并在事件处理函数中打印出了接收到的数据。 通过使用 ctx.app.emit 方法，我们可以在应用程序中的不同部分之间实现松耦合的通信和协作。可以根据具体的业务需求，自定义并触发不同的应用级别事件，以满足特定的功能和交互需求。 定义统一的错误格式我们可以在 constant/error-type.js 中统一定义各式各样的错误类型，保持格式统一。比如用户登录失败、密码错误、token过期、token错误等等 12345678910111213141516171819202122module.exports = &#123; userLoginError: &#123; code: &#x27;1005&#x27;, message: &#x27;用户登录失败&#x27;, result: &#x27;&#x27; &#125;, invalidPassword: &#123; code: &#x27;1006&#x27;, message: &#x27;用户密码错误&#x27;, result: &#x27;&#x27; &#125;, tokenExpiredError: &#123; code: &#x27;10101&#x27;, message: &#x27;token 已过期&#x27;, result: &#x27;&#x27; &#125;, jsonWebTokenError: &#123; code: &#x27;10101&#x27;, message: &#x27;token 错误&#x27;, result: &#x27;&#x27; &#125;,&#125; 然后我们在处理各式各样的逻辑时，如果发生了错误，就可以引用定义好的错误格式，通过 ctx.app.emit 来触发错误监听事件 比如，在解析 token 时，我们做的错误处理 1234567891011121314151617181920212223242526// 导入错误类型const &#123; tokenExpiredError, jsonWebTokenError &#125; = require(&#x27;../constans/error-type.js&#x27;)const &#123; authorization &#125; = ctx.request.header if (authorization) &#123; const token = authorization.replace(&#x27;Bearer &#x27;, &#x27;&#x27;) try &#123; const decoded = jwt.verify(token, &#x27;shhhh&#x27;) ctx.state = decoded // 存储用户状态，在各个中间件之间共享 if (decoded.username === &#x27;alex.cheng&#x27;) &#123; ctx.body = &#x27;可以修改密码&#x27; &#125; &#125; catch(error) &#123; // 错误处理 switch(error.name) &#123; case &#x27;TokenExpiredError&#x27;: return ctx.app.emit(&#x27;error&#x27;, tokenExpiredError, ctx) case &#x27;JsonWebTokenError&#x27;: return ctx.app.emit(&#x27;error&#x27;, jsonWebTokenError, ctx) &#125; &#125; &#125; Nodejs 中的错误处理比较常见的错误处理方式有三种，分别是try/catch、callback和EventEmitter（下面仍简称event）。 try/catch的思想很简单，只适用于同步调用的情况。 callback则是通过定义回调的参数来解决，如果参数err的值不为空就表示出现错误。 event对象，只能用事件处理的方式来处理异常。 MVCMVC模式在概念上强调Model、View和Controller的分离，模块间也遵循着由Controller进行消息处理、Model进行数据源处理、View进行数据显示的职责分离原则。 拆分目录结构我们不能将所有的逻辑都写到 app.js 里，项目大了之后，会变得非常臃肿，代码不仅不易读，也不好维护和管理。 提取路由到单独的文件 router/index.js 1234567891011const router = require(&#x27;koa-router&#x27;)()const HomeController = require(&#x27;./controller/home&#x27;)module.exports = app =&gt; &#123; router.get(&#x27;/login&#x27;, HomeController.index) router.get(&#x27;/home&#x27;, HomeController.home) router.get(&#x27;/home/:id/:name&#x27;, HomeController.homeParams) router.post(&#x27;/login&#x27;, HomeController.login) app.use(router.routes()).use(router.allowedMethods())&#125; 然后在 app.js 中调用即可 router(app) 分离 Controller 对router.js再次进行优化分离，将对应路由的响应函数提取出来，放置在单独的文件controller/home.js中 1234567891011121314151617181920212223242526272829303132333435363738394041const HomeService = require(&#x27;../service/home&#x27;)module.exports = &#123; index: async (ctx, next) =&gt; &#123; ctx.response.body = ` &lt;h1&gt;Index&lt;/h1&gt; &lt;form action=&#x27;/login&#x27; method=&#x27;post&#x27;&gt; &lt;p&gt;Name &lt;input name=&#x27;name&#x27; /&gt;&lt;/p&gt; &lt;p&gt;Password &lt;input name=&#x27;password&#x27; type=&#x27;password&#x27; /&gt;&lt;/p&gt; &lt;p&gt;&lt;input type=&#x27;submit&#x27; value=&#x27;提交&#x27; /&gt;&lt;/p&gt; &lt;/form&gt; ` &#125;, home: async (ctx, next) =&gt; &#123; console.log(ctx.request.query) console.log(ctx.request.querystring) ctx.response.body = ` &lt;h1&gt;Home Page&lt;/h1&gt; &lt;p&gt;JSON.stringify(query): $&#123;JSON.stringify(ctx.request.query)&#125;&lt;/p&gt; &lt;p&gt;querystring: $&#123;ctx.request.querystring&#125;&lt;/p&gt; ` &#125;, homeParams: async (ctx, next) =&gt; &#123; console.log(&#x27;home params &#x27;, ctx.params) const &#123; id, name &#125; = ctx.params ctx.response.body = ` &lt;h1&gt;Home Params Page &lt;/h1&gt; &lt;p&gt;id: $&#123;id&#125;&lt;/p&gt; &lt;p&gt;name: $&#123;name&#125;&lt;/p&gt; ` &#125;, login: async (ctx, next) =&gt; &#123; console.log(&#x27;post 数据&#x27;, ctx.request.body) const name = ctx.request.body.name || &#x27;&#x27; const password = ctx.request.body.password || &#x27;&#x27; const data = await HomeService.login(name, password) ctx.body = data &#125;&#125; 分离 Service 在这里，进行一些数据层的访问操作，如操作数据库、调用第三方接口获取数据等 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263const Login = require(&#x27;../models/login&#x27;)module.exports = &#123; login: async (name,password ) =&gt; &#123; // 聚合查询 const pipeline = [ &#123; $match: &#123; size: &#x27;medium&#x27; &#125; &#125;, &#123; $project: &#123; name: 1, quantity: 1, price: 1, totalPrice: &#123; $multiply: [&quot;$quantity&quot;, &quot;$price&quot;] &#125; &#125; &#125;, &#123; $group: &#123; _id: &#x27;$name&#x27;, totalPrice: &#123; $sum: &#x27;$totalPrice&#x27;, &#125;, totalQuantity: &#123; $sum: &#x27;$quantity&#x27; &#125;, &#125; &#125;, &#123; $sort: &#123; totalQuantity: -1 &#125; &#125; ] const result = await Login.aggregate(pipeline) console.log(result) let responseData = &#x27;&#x27; if (name === &#x27;alex.cheng&#x27; &amp;&amp; password === &#x27;123456&#x27;) &#123; // 查询用户 const query = await Login.find(&#123; username: &#x27;alex.cheng&#x27; &#125;) if (query.length) &#123; responseData = ` &lt;h1&gt;Login success!&lt;/h1&gt; &lt;p&gt;username: $&#123;query[0].username&#125;; password: $&#123;query[0].password&#125;&lt;/p&gt; ` &#125; else &#123; responseData = &#x27;未查到对应用户，请先注册!&#x27; &#125; &#125; else &#123; responseData = &#x27;账号 / 密码错误!&#x27; &#125; return responseData &#125;&#125; 路由自动加载我们不希望每次创建了 router，都去手动引入、配置，而是每次建好 router 就不用处理引入的问题了。 定义 router/home.route.js 12345678const Router = require(&#x27;koa-router&#x27;)const router = new Router(&#123; prefix: &#x27;/home&#x27; &#125;)const HomeController = require(&#x27;../controller/HomeController&#x27;)router.get(&#x27;/&#x27;, HomeController)module.exports = router router/index.js 123456789101112const fs = require(&#x27;fs&#x27;)const Router = require(&#x27;koa-router&#x27;)const router = new Router()fs.readdirSync(__dirname).forEach(filename =&gt; &#123; if (filename !== &#x27;index.js&#x27;) &#123; const currentRouter = require(&#x27;./&#x27; + filename) router.use(currentRouter.routes()) &#125;&#125;)module.exports = router 使用 app.js 123const router = require(&#x27;./router/index.js&#x27;)app.use(router.routes()) 读取配置文件 .env读取根目录中的 .env 文件, 将配置写到 process.env 中 1npm install dotenv -S 创建 .env 文件 1APP_PORT=3000 创建 src/config/config.default.js 1234567const dotenv = require(&#x27;dotenv&#x27;)dotenv.config()// console.log(process.env.APP_PORT) 在 process.env 中就可以获取端口号了module.exports = process.env koa-body 和 koa-bodyparserkoa-body 和 koa-bodyparser 都是用于处理请求体的中间件，但它们在处理请求体的方式和功能上有一些区别。 koa-body: koa-body 是一个功能更为强大的请求体解析中间件。它支持解析多种类型的请求体，包括 JSON、Form 表单、文本、文件上传等。它通过检查请求头中的 Content-Type 字段来确定请求体的类型，并根据类型进行相应的解析。使用 koa-body 可以处理更多类型的请求体，但它相对于 koa-bodyparser 来说更为复杂一些。 koa-bodyparser: koa-bodyparser 是一个轻量级的请求体解析中间件，专门用于解析 JSON 和 Form 表单类型的请求体。它仅支持这两种常见的请求体类型，并将解析后的数据存储在 ctx.request.body 中供后续中间件和处理程序使用。相比于 koa-body，koa-bodyparser 的代码更简单，并且适用于大多数常见的请求体解析需求。 如果你只需要处理 JSON 和 Form 表单类型的请求体，可以使用较为简单的 koa-bodyparser 中间件。而如果你需要处理更多类型的请求体，如文件上传等，可以考虑使用功能更为强大的 koa-body 中间件。 jwt(jsonwebtoken) https://www.npmjs.com/package/jsonwebtoken 当用户登录成功，我们在服务端生成 token，并返给客户端。 下一次用户发起请求时，就需要将 token 放到请求头，服务端根据 jwt.verify 来校验。 1npm install jsonwebtoken -S jwt.sign(payload, privateKey) Expected “payload” to be a plain object. 生成 token 12345678910const res = &#123; id: 1, name: &#x27;alex.cheng&#x27;, password: &#x27;123456&#x27;, isAdmin: 1&#125;const token = jwt.sign(res, &#x27;my-secret-key&#x27;, &#123; expiresIn: &#x27;1h&#x27; // 过期时间&#125;) 根据 token 解密: 12345jwt.verify(token, &#x27;my-secret-key&#x27;, (err, decoded) =&gt; &#123; if (err) throw new Error(&#x27;verify token error&#x27;) console.log(&#x27;decoded token&#x27;, decoded.name)&#125;) 如果我们是从 MongoDB 中查出的 user info，在解密 JWT 令牌后，你得到的是一个 Mongoose 文档对象，它包含了 Mongoose 特定的属性和方法。 jwt 错误处理会返回一个包含 name 的 err 信息 TokenExpiredError（token 过期错误） 1234567891011jwt.verify(token, &#x27;shhhhh&#x27;, function(err, decoded) &#123; if (err) &#123; /* err = &#123; name: &#x27;TokenExpiredError&#x27;, message: &#x27;jwt expired&#x27;, expiredAt: 1408621000 &#125; */ &#125;&#125;); auth 中间件我们需要对每一个请求都进行鉴权，判断用户是否登录，以及 token 是否过期等等。 创建 auth 中间件 midddleware/auth.js 12345678910111213141516async (ctx, next) =&gt; &#123; const &#123; authorization &#125; = ctx.request.header if (authorization) &#123; const token = authorization.replace(&#x27;Bearer &#x27;, &#x27;&#x27;) const decoded = jwt.verify(token, &#x27;shhhh&#x27;) console.log(decoded) if (decoded.username === &#x27;alex.cheng&#x27;) &#123; ctx.body = &#x27;可以修改密码&#x27; &#125; &#125; else &#123; ctx.body = &#x27;token失效或者用户未登录&#x27; &#125;&#125; 文件上传如果你只需要处理 JSON 和 Form 表单类型的请求体，可以使用较为简单的 koa-bodyparser 中间件。 而如果你需要处理更多类型的请求体，如文件上传等，可以考虑使用功能更为强大的 koa-body 中间件。 https://www.npmjs.com/package/koa-body 使用 koa-body (v6.0.1)，它会将文件信息挂到 ctx.request.files 上 12345const &#123; koaBody &#125; = require(&#x27;koa-body&#x27;)app.use(koaBody(&#123; multipart: true // 开启文件上传，默认是关闭&#125;)) apifox 模拟上传 form-data 这一栏中，设置的 key 是 file，那么 ctx.request.files 上，就有个 file 对象，它包含了文件的信息！ 那我们的上传的文件或者图片，放到哪里呢？ 配合 formidable 参数使用 UploadDir { String }设置放置文件上传的目录，默认为 os.tmpDir () keepExtensions { Boolean }写入 uploadDir 的文件是否包含原始文件的扩展名，默认为 false 创建 upload 文件夹，用来存放上传的文件： 1234567app.use(koaBody(&#123; multipart: true, formidable: &#123; uploadDir: __dirname + &#x27;/upload&#x27;, keepExtensions: true // 保留文件后缀 &#125;&#125;)) formidable 其他参数 maxFieldsSize: 指定允许的字段最大大小（字节）。 maxFields: 指定允许的最大字段数。 keepExtensions: 是否保留上传文件的扩展名，默认为 false。 uploadDir: 指定上传文件的存储目录。 hash: 是否生成文件的哈希值作为文件名，默认为 false。 multiples: 是否支持上传多个文件，默认为 false。 encoding: 指定上传文件的编码方式，默认为 &#39;utf-8&#39;。 type: 指定上传文件的编码类型，默认为 &#39;multipart&#39;。 maxFileSize: 指定允许的最大文件大小（字节）。10 * 1024 * 1024 上传成功后，将图片信息返回给用户1234567891011121314151617module.exports = &#123; upload: async (ctx, next) =&gt; &#123; const &#123; file &#125; = ctx.request.files // 如果同时上传了多个文件，那么 file 是个数组 if (file) &#123; ctx.body = &#123; code: 0, message: &#x27;文件上传成功&#x27;, data: file &#125; &#125; else &#123; ctx.body = &#x27;上传失败或者文件无法解析???&#x27; &#125; &#125;&#125; file.filepath 表示上传文件在服务端存放的路径，如果我们想要修改上传文件的名字，需要在 koaBody 中配置 formidable.onFileBegin 方法 123456789101112131415161718app.use(koaBody(&#123; multipart: true, formidable: &#123; uploadDir: __dirname + &#x27;/static&#x27;, keepExtensions: true, onFileBegin(name, file) &#123; if (file &amp;&amp; file.originalFilename &amp;&amp; file.newFilename) &#123; const originalFilename = file.originalFilename.split(&#x27;.&#x27;)[0] const newFilename = file.newFilename.split(&#x27;.&#x27;)[0] file.filepath = file.filepath.replace(newFilename, originalFilename) &#125; &#125;, onError(err) &#123; console.log(&#x27;上传失败~&#x27;, err) &#125; &#125;&#125;)) 这样我们上传的文件，在服务端也保持着同样的名字，而不是 [hash].jpg 这种。 多文件上传html5 支持多文件上传，添加 multiple 属性 1&lt;input type=&quot;file&quot; name=&quot;imgs&quot; multiple/&gt; 使用 koa-body 的话，接收的 imgs 是个数组 ctx.request.files.imgs Apifox 设置环境变量比如，我们调用登录接口，都会获取到 token，那么可以将这个 token 设置为 环境变量，后面所有带有 权限校验 的接口引用这个变量就可以了，不需要我们每次都去手动复制、粘贴。 第一步 找到 登录接口，在面板栏有个 后置操作，表示接口响应成功之后，我们要做什么操作，我们选择如下 代码片段 状态码 200 设置环境变量 pm.response.json() 是将响应结果 json 化，我们可以获取 json 数据里面的内容。 1234pm.test(&quot;Status code is 200&quot;, function () &#123; const res = pm.response.json() pm.environment.set(&quot;token&quot;, res.data.token); // 设置环境变量&#125;); 第二步 添加新的接口，在 Auth 面板设置 token 环境变量。点击 &#123;&#123;token&#125;&#125; 可以预览 token 信息。 发起请求，我们会发现请求头中自动带上了 token，即使将来 token 过期了，我们也不需要在别的接口中去修改 token，环境变量自动帮我们更新了。 参考 文件上传攻略 大文件上传和断点续传 koa 项目: 代码组织、目录结构、node api [对应视频 视频] NodeJS高级编程"},{"title":"","date":"2024-06-11T08:52:17.384Z","updated":"2024-06-11T08:52:17.384Z","comments":false,"path":"demo/2023面试准备/demo/module/package-lock.json","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/module/package-lock.json","excerpt":"","text":"{\"name\":\"module\",\"version\":\"1.0.0\",\"lockfileVersion\":1,\"requires\":true,\"dependencies\":{\"@babel/parser\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/parser/-/parser-7.22.5.tgz\",\"integrity\":\"sha512-DFZMC9LJUG9PLOclRC32G63UXwzqS2koQC8dkx+PLdmt1xSePYpbT/NbsrJy8Q/muXz7o/h/d4A7Fuyixm559Q==\"},\"abbrev\":{\"version\":\"1.1.1\",\"resolved\":\"https://registry.npmmirror.com/abbrev/-/abbrev-1.1.1.tgz\",\"integrity\":\"sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q==\",\"dev\":true},\"ansi-regex\":{\"version\":\"2.1.1\",\"resolved\":\"https://registry.npmmirror.com/ansi-regex/-/ansi-regex-2.1.1.tgz\",\"integrity\":\"sha512-TIGnTpdo+E3+pCyAluZvtED5p5wCqLdezCyhPZzKPcxvFplEt4i+W7OONCKgeZFT3+y5NZZfOOS/Bdcanm1MYA==\",\"dev\":true},\"ansi-styles\":{\"version\":\"2.2.1\",\"resolved\":\"https://registry.npmmirror.com/ansi-styles/-/ansi-styles-2.2.1.tgz\",\"integrity\":\"sha512-kmCevFghRiWM7HB5zTPULl4r9bVFSWjz62MhqizDGUrq2NWuNMQyuv4tHHoKJHs69M/MF64lEcHdYIocrdWQYA==\",\"dev\":true},\"anymatch\":{\"version\":\"1.3.2\",\"resolved\":\"https://registry.npmmirror.com/anymatch/-/anymatch-1.3.2.tgz\",\"integrity\":\"sha512-0XNayC8lTHQ2OI8aljNCN3sSx6hsr/1+rlcDAotXJR7C1oZZHCNsfpbKwMjRA3Uqb5tF1Rae2oloTr4xpq+WjA==\",\"dev\":true,\"optional\":true,\"requires\":{\"micromatch\":\"^2.1.5\",\"normalize-path\":\"^2.0.0\"}},\"arr-diff\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmmirror.com/arr-diff/-/arr-diff-2.0.0.tgz\",\"integrity\":\"sha512-dtXTVMkh6VkEEA7OhXnN1Ecb8aAGFdZ1LFxtOCoqj4qkyOJMt7+qs6Ahdy6p/NQCPYsRSXXivhSB/J5E9jmYKA==\",\"dev\":true,\"optional\":true,\"requires\":{\"arr-flatten\":\"^1.0.1\"}},\"arr-flatten\":{\"version\":\"1.1.0\",\"resolved\":\"https://registry.npmmirror.com/arr-flatten/-/arr-flatten-1.1.0.tgz\",\"integrity\":\"sha512-L3hKV5R/p5o81R7O02IGnwpDmkp6E982XhtbuwSe3O4qOtMMMtodicASA1Cny2U+aCXcNpml+m4dPsvsJ3jatg==\",\"dev\":true,\"optional\":true},\"arr-union\":{\"version\":\"3.1.0\",\"resolved\":\"https://registry.npmmirror.com/arr-union/-/arr-union-3.1.0.tgz\",\"integrity\":\"sha512-sKpyeERZ02v1FeCZT8lrfJq5u6goHCtpTAzPwJYe7c8SPFOboNjNg1vz2L4VTn9T4PQxEx13TbXLmYUcS6Ug7Q==\",\"dev\":true,\"optional\":true},\"array-unique\":{\"version\":\"0.2.1\",\"resolved\":\"https://registry.npmmirror.com/array-unique/-/array-unique-0.2.1.tgz\",\"integrity\":\"sha512-G2n5bG5fSUCpnsXz4+8FUkYsGPkNfLn9YvS66U5qbTIXI2Ynnlo4Bi42bWv+omKUCqz+ejzfClwne0alJWJPhg==\",\"dev\":true,\"optional\":true},\"assign-symbols\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/assign-symbols/-/assign-symbols-1.0.0.tgz\",\"integrity\":\"sha512-Q+JC7Whu8HhmTdBph/Tq59IoRtoy6KAm5zzPv00WdujX82lbAL8K7WVjne7vdCsAmbF4AYaDOPyO3k0kl8qIrw==\",\"dev\":true,\"optional\":true},\"async-each\":{\"version\":\"1.0.6\",\"resolved\":\"https://registry.npmmirror.com/async-each/-/async-each-1.0.6.tgz\",\"integrity\":\"sha512-c646jH1avxr+aVpndVMeAfYw7wAa6idufrlN3LPA4PmKS0QEGp6PIC9nwz0WQkkvBGAMEki3pFdtxaF39J9vvg==\",\"dev\":true,\"optional\":true},\"atob\":{\"version\":\"2.1.2\",\"resolved\":\"https://registry.npmmirror.com/atob/-/atob-2.1.2.tgz\",\"integrity\":\"sha512-Wm6ukoaOGJi/73p/cl2GvLjTI5JM1k/O14isD73YML8StrH/7/lRFgmg8nICZgD3bZZvjwCGxtMOD3wWNAu8cg==\",\"dev\":true,\"optional\":true},\"babel-cli\":{\"version\":\"6.26.0\",\"resolved\":\"https://registry.npmmirror.com/babel-cli/-/babel-cli-6.26.0.tgz\",\"integrity\":\"sha512-wau+BDtQfuSBGQ9PzzFL3REvR9Sxnd4LKwtcHAiPjhugA7K/80vpHXafj+O5bAqJOuSefjOx5ZJnNSR2J1Qw6Q==\",\"dev\":true,\"requires\":{\"babel-core\":\"^6.26.0\",\"babel-polyfill\":\"^6.26.0\",\"babel-register\":\"^6.26.0\",\"babel-runtime\":\"^6.26.0\",\"chokidar\":\"^1.6.1\",\"commander\":\"^2.11.0\",\"convert-source-map\":\"^1.5.0\",\"fs-readdir-recursive\":\"^1.0.0\",\"glob\":\"^7.1.2\",\"lodash\":\"^4.17.4\",\"output-file-sync\":\"^1.1.2\",\"path-is-absolute\":\"^1.0.1\",\"slash\":\"^1.0.0\",\"source-map\":\"^0.5.6\",\"v8flags\":\"^2.1.1\"}},\"babel-code-frame\":{\"version\":\"6.26.0\",\"resolved\":\"https://registry.npmmirror.com/babel-code-frame/-/babel-code-frame-6.26.0.tgz\",\"integrity\":\"sha512-XqYMR2dfdGMW+hd0IUZ2PwK+fGeFkOxZJ0wY+JaQAHzt1Zx8LcvpiZD2NiGkEG8qx0CfkAOr5xt76d1e8vG90g==\",\"dev\":true,\"requires\":{\"chalk\":\"^1.1.3\",\"esutils\":\"^2.0.2\",\"js-tokens\":\"^3.0.2\"}},\"babel-core\":{\"version\":\"6.26.3\",\"resolved\":\"https://registry.npmmirror.com/babel-core/-/babel-core-6.26.3.tgz\",\"integrity\":\"sha512-6jyFLuDmeidKmUEb3NM+/yawG0M2bDZ9Z1qbZP59cyHLz8kYGKYwpJP0UwUKKUiTRNvxfLesJnTedqczP7cTDA==\",\"dev\":true,\"requires\":{\"babel-code-frame\":\"^6.26.0\",\"babel-generator\":\"^6.26.0\",\"babel-helpers\":\"^6.24.1\",\"babel-messages\":\"^6.23.0\",\"babel-register\":\"^6.26.0\",\"babel-runtime\":\"^6.26.0\",\"babel-template\":\"^6.26.0\",\"babel-traverse\":\"^6.26.0\",\"babel-types\":\"^6.26.0\",\"babylon\":\"^6.18.0\",\"convert-source-map\":\"^1.5.1\",\"debug\":\"^2.6.9\",\"json5\":\"^0.5.1\",\"lodash\":\"^4.17.4\",\"minimatch\":\"^3.0.4\",\"path-is-absolute\":\"^1.0.1\",\"private\":\"^0.1.8\",\"slash\":\"^1.0.0\",\"source-map\":\"^0.5.7\"}},\"babel-generator\":{\"version\":\"6.26.1\",\"resolved\":\"https://registry.npmmirror.com/babel-generator/-/babel-generator-6.26.1.tgz\",\"integrity\":\"sha512-HyfwY6ApZj7BYTcJURpM5tznulaBvyio7/0d4zFOeMPUmfxkCjHocCuoLa2SAGzBI8AREcH3eP3758F672DppA==\",\"dev\":true,\"requires\":{\"babel-messages\":\"^6.23.0\",\"babel-runtime\":\"^6.26.0\",\"babel-types\":\"^6.26.0\",\"detect-indent\":\"^4.0.0\",\"jsesc\":\"^1.3.0\",\"lodash\":\"^4.17.4\",\"source-map\":\"^0.5.7\",\"trim-right\":\"^1.0.1\"}},\"babel-helper-builder-binary-assignment-operator-visitor\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-helper-builder-binary-assignment-operator-visitor/-/babel-helper-builder-binary-assignment-operator-visitor-6.24.1.tgz\",\"integrity\":\"sha512-gCtfYORSG1fUMX4kKraymq607FWgMWg+j42IFPc18kFQEsmtaibP4UrqsXt8FlEJle25HUd4tsoDR7H2wDhe9Q==\",\"dev\":true,\"requires\":{\"babel-helper-explode-assignable-expression\":\"^6.24.1\",\"babel-runtime\":\"^6.22.0\",\"babel-types\":\"^6.24.1\"}},\"babel-helper-call-delegate\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-helper-call-delegate/-/babel-helper-call-delegate-6.24.1.tgz\",\"integrity\":\"sha512-RL8n2NiEj+kKztlrVJM9JT1cXzzAdvWFh76xh/H1I4nKwunzE4INBXn8ieCZ+wh4zWszZk7NBS1s/8HR5jDkzQ==\",\"dev\":true,\"requires\":{\"babel-helper-hoist-variables\":\"^6.24.1\",\"babel-runtime\":\"^6.22.0\",\"babel-traverse\":\"^6.24.1\",\"babel-types\":\"^6.24.1\"}},\"babel-helper-define-map\":{\"version\":\"6.26.0\",\"resolved\":\"https://registry.npmmirror.com/babel-helper-define-map/-/babel-helper-define-map-6.26.0.tgz\",\"integrity\":\"sha512-bHkmjcC9lM1kmZcVpA5t2om2nzT/xiZpo6TJq7UlZ3wqKfzia4veeXbIhKvJXAMzhhEBd3cR1IElL5AenWEUpA==\",\"dev\":true,\"requires\":{\"babel-helper-function-name\":\"^6.24.1\",\"babel-runtime\":\"^6.26.0\",\"babel-types\":\"^6.26.0\",\"lodash\":\"^4.17.4\"}},\"babel-helper-explode-assignable-expression\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-helper-explode-assignable-expression/-/babel-helper-explode-assignable-expression-6.24.1.tgz\",\"integrity\":\"sha512-qe5csbhbvq6ccry9G7tkXbzNtcDiH4r51rrPUbwwoTzZ18AqxWYRZT6AOmxrpxKnQBW0pYlBI/8vh73Z//78nQ==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.22.0\",\"babel-traverse\":\"^6.24.1\",\"babel-types\":\"^6.24.1\"}},\"babel-helper-function-name\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-helper-function-name/-/babel-helper-function-name-6.24.1.tgz\",\"integrity\":\"sha512-Oo6+e2iX+o9eVvJ9Y5eKL5iryeRdsIkwRYheCuhYdVHsdEQysbc2z2QkqCLIYnNxkT5Ss3ggrHdXiDI7Dhrn4Q==\",\"dev\":true,\"requires\":{\"babel-helper-get-function-arity\":\"^6.24.1\",\"babel-runtime\":\"^6.22.0\",\"babel-template\":\"^6.24.1\",\"babel-traverse\":\"^6.24.1\",\"babel-types\":\"^6.24.1\"}},\"babel-helper-get-function-arity\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-helper-get-function-arity/-/babel-helper-get-function-arity-6.24.1.tgz\",\"integrity\":\"sha512-WfgKFX6swFB1jS2vo+DwivRN4NB8XUdM3ij0Y1gnC21y1tdBoe6xjVnd7NSI6alv+gZXCtJqvrTeMW3fR/c0ng==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.22.0\",\"babel-types\":\"^6.24.1\"}},\"babel-helper-hoist-variables\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-helper-hoist-variables/-/babel-helper-hoist-variables-6.24.1.tgz\",\"integrity\":\"sha512-zAYl3tqerLItvG5cKYw7f1SpvIxS9zi7ohyGHaI9cgDUjAT6YcY9jIEH5CstetP5wHIVSceXwNS7Z5BpJg+rOw==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.22.0\",\"babel-types\":\"^6.24.1\"}},\"babel-helper-optimise-call-expression\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-helper-optimise-call-expression/-/babel-helper-optimise-call-expression-6.24.1.tgz\",\"integrity\":\"sha512-Op9IhEaxhbRT8MDXx2iNuMgciu2V8lDvYCNQbDGjdBNCjaMvyLf4wl4A3b8IgndCyQF8TwfgsQ8T3VD8aX1/pA==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.22.0\",\"babel-types\":\"^6.24.1\"}},\"babel-helper-regex\":{\"version\":\"6.26.0\",\"resolved\":\"https://registry.npmmirror.com/babel-helper-regex/-/babel-helper-regex-6.26.0.tgz\",\"integrity\":\"sha512-VlPiWmqmGJp0x0oK27Out1D+71nVVCTSdlbhIVoaBAj2lUgrNjBCRR9+llO4lTSb2O4r7PJg+RobRkhBrf6ofg==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.26.0\",\"babel-types\":\"^6.26.0\",\"lodash\":\"^4.17.4\"}},\"babel-helper-remap-async-to-generator\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-helper-remap-async-to-generator/-/babel-helper-remap-async-to-generator-6.24.1.tgz\",\"integrity\":\"sha512-RYqaPD0mQyQIFRu7Ho5wE2yvA/5jxqCIj/Lv4BXNq23mHYu/vxikOy2JueLiBxQknwapwrJeNCesvY0ZcfnlHg==\",\"dev\":true,\"requires\":{\"babel-helper-function-name\":\"^6.24.1\",\"babel-runtime\":\"^6.22.0\",\"babel-template\":\"^6.24.1\",\"babel-traverse\":\"^6.24.1\",\"babel-types\":\"^6.24.1\"}},\"babel-helper-replace-supers\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-helper-replace-supers/-/babel-helper-replace-supers-6.24.1.tgz\",\"integrity\":\"sha512-sLI+u7sXJh6+ToqDr57Bv973kCepItDhMou0xCP2YPVmR1jkHSCY+p1no8xErbV1Siz5QE8qKT1WIwybSWlqjw==\",\"dev\":true,\"requires\":{\"babel-helper-optimise-call-expression\":\"^6.24.1\",\"babel-messages\":\"^6.23.0\",\"babel-runtime\":\"^6.22.0\",\"babel-template\":\"^6.24.1\",\"babel-traverse\":\"^6.24.1\",\"babel-types\":\"^6.24.1\"}},\"babel-helpers\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-helpers/-/babel-helpers-6.24.1.tgz\",\"integrity\":\"sha512-n7pFrqQm44TCYvrCDb0MqabAF+JUBq+ijBvNMUxpkLjJaAu32faIexewMumrH5KLLJ1HDyT0PTEqRyAe/GwwuQ==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.22.0\",\"babel-template\":\"^6.24.1\"}},\"babel-messages\":{\"version\":\"6.23.0\",\"resolved\":\"https://registry.npmmirror.com/babel-messages/-/babel-messages-6.23.0.tgz\",\"integrity\":\"sha512-Bl3ZiA+LjqaMtNYopA9TYE9HP1tQ+E5dLxE0XrAzcIJeK2UqF0/EaqXwBn9esd4UmTfEab+P+UYQ1GnioFIb/w==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.22.0\"}},\"babel-plugin-check-es2015-constants\":{\"version\":\"6.22.0\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-check-es2015-constants/-/babel-plugin-check-es2015-constants-6.22.0.tgz\",\"integrity\":\"sha512-B1M5KBP29248dViEo1owyY32lk1ZSH2DaNNrXLGt8lyjjHm7pBqAdQ7VKUPR6EEDO323+OvT3MQXbCin8ooWdA==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.22.0\"}},\"babel-plugin-syntax-async-functions\":{\"version\":\"6.13.0\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-syntax-async-functions/-/babel-plugin-syntax-async-functions-6.13.0.tgz\",\"integrity\":\"sha512-4Zp4unmHgw30A1eWI5EpACji2qMocisdXhAftfhXoSV9j0Tvj6nRFE3tOmRY912E0FMRm/L5xWE7MGVT2FoLnw==\",\"dev\":true},\"babel-plugin-syntax-exponentiation-operator\":{\"version\":\"6.13.0\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-syntax-exponentiation-operator/-/babel-plugin-syntax-exponentiation-operator-6.13.0.tgz\",\"integrity\":\"sha512-Z/flU+T9ta0aIEKl1tGEmN/pZiI1uXmCiGFRegKacQfEJzp7iNsKloZmyJlQr+75FCJtiFfGIK03SiCvCt9cPQ==\",\"dev\":true},\"babel-plugin-syntax-trailing-function-commas\":{\"version\":\"6.22.0\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-syntax-trailing-function-commas/-/babel-plugin-syntax-trailing-function-commas-6.22.0.tgz\",\"integrity\":\"sha512-Gx9CH3Q/3GKbhs07Bszw5fPTlU+ygrOGfAhEt7W2JICwufpC4SuO0mG0+4NykPBSYPMJhqvVlDBU17qB1D+hMQ==\",\"dev\":true},\"babel-plugin-transform-async-to-generator\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-async-to-generator/-/babel-plugin-transform-async-to-generator-6.24.1.tgz\",\"integrity\":\"sha512-7BgYJujNCg0Ti3x0c/DL3tStvnKS6ktIYOmo9wginv/dfZOrbSZ+qG4IRRHMBOzZ5Awb1skTiAsQXg/+IWkZYw==\",\"dev\":true,\"requires\":{\"babel-helper-remap-async-to-generator\":\"^6.24.1\",\"babel-plugin-syntax-async-functions\":\"^6.8.0\",\"babel-runtime\":\"^6.22.0\"}},\"babel-plugin-transform-es2015-arrow-functions\":{\"version\":\"6.22.0\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-arrow-functions/-/babel-plugin-transform-es2015-arrow-functions-6.22.0.tgz\",\"integrity\":\"sha512-PCqwwzODXW7JMrzu+yZIaYbPQSKjDTAsNNlK2l5Gg9g4rz2VzLnZsStvp/3c46GfXpwkyufb3NCyG9+50FF1Vg==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.22.0\"}},\"babel-plugin-transform-es2015-block-scoped-functions\":{\"version\":\"6.22.0\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-block-scoped-functions/-/babel-plugin-transform-es2015-block-scoped-functions-6.22.0.tgz\",\"integrity\":\"sha512-2+ujAT2UMBzYFm7tidUsYh+ZoIutxJ3pN9IYrF1/H6dCKtECfhmB8UkHVpyxDwkj0CYbQG35ykoz925TUnBc3A==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.22.0\"}},\"babel-plugin-transform-es2015-block-scoping\":{\"version\":\"6.26.0\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-block-scoping/-/babel-plugin-transform-es2015-block-scoping-6.26.0.tgz\",\"integrity\":\"sha512-YiN6sFAQ5lML8JjCmr7uerS5Yc/EMbgg9G8ZNmk2E3nYX4ckHR01wrkeeMijEf5WHNK5TW0Sl0Uu3pv3EdOJWw==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.26.0\",\"babel-template\":\"^6.26.0\",\"babel-traverse\":\"^6.26.0\",\"babel-types\":\"^6.26.0\",\"lodash\":\"^4.17.4\"}},\"babel-plugin-transform-es2015-classes\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-classes/-/babel-plugin-transform-es2015-classes-6.24.1.tgz\",\"integrity\":\"sha512-5Dy7ZbRinGrNtmWpquZKZ3EGY8sDgIVB4CU8Om8q8tnMLrD/m94cKglVcHps0BCTdZ0TJeeAWOq2TK9MIY6cag==\",\"dev\":true,\"requires\":{\"babel-helper-define-map\":\"^6.24.1\",\"babel-helper-function-name\":\"^6.24.1\",\"babel-helper-optimise-call-expression\":\"^6.24.1\",\"babel-helper-replace-supers\":\"^6.24.1\",\"babel-messages\":\"^6.23.0\",\"babel-runtime\":\"^6.22.0\",\"babel-template\":\"^6.24.1\",\"babel-traverse\":\"^6.24.1\",\"babel-types\":\"^6.24.1\"}},\"babel-plugin-transform-es2015-computed-properties\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-computed-properties/-/babel-plugin-transform-es2015-computed-properties-6.24.1.tgz\",\"integrity\":\"sha512-C/uAv4ktFP/Hmh01gMTvYvICrKze0XVX9f2PdIXuriCSvUmV9j+u+BB9f5fJK3+878yMK6dkdcq+Ymr9mrcLzw==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.22.0\",\"babel-template\":\"^6.24.1\"}},\"babel-plugin-transform-es2015-destructuring\":{\"version\":\"6.23.0\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-destructuring/-/babel-plugin-transform-es2015-destructuring-6.23.0.tgz\",\"integrity\":\"sha512-aNv/GDAW0j/f4Uy1OEPZn1mqD+Nfy9viFGBfQ5bZyT35YqOiqx7/tXdyfZkJ1sC21NyEsBdfDY6PYmLHF4r5iA==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.22.0\"}},\"babel-plugin-transform-es2015-duplicate-keys\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-duplicate-keys/-/babel-plugin-transform-es2015-duplicate-keys-6.24.1.tgz\",\"integrity\":\"sha512-ossocTuPOssfxO2h+Z3/Ea1Vo1wWx31Uqy9vIiJusOP4TbF7tPs9U0sJ9pX9OJPf4lXRGj5+6Gkl/HHKiAP5ug==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.22.0\",\"babel-types\":\"^6.24.1\"}},\"babel-plugin-transform-es2015-for-of\":{\"version\":\"6.23.0\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-for-of/-/babel-plugin-transform-es2015-for-of-6.23.0.tgz\",\"integrity\":\"sha512-DLuRwoygCoXx+YfxHLkVx5/NpeSbVwfoTeBykpJK7JhYWlL/O8hgAK/reforUnZDlxasOrVPPJVI/guE3dCwkw==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.22.0\"}},\"babel-plugin-transform-es2015-function-name\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-function-name/-/babel-plugin-transform-es2015-function-name-6.24.1.tgz\",\"integrity\":\"sha512-iFp5KIcorf11iBqu/y/a7DK3MN5di3pNCzto61FqCNnUX4qeBwcV1SLqe10oXNnCaxBUImX3SckX2/o1nsrTcg==\",\"dev\":true,\"requires\":{\"babel-helper-function-name\":\"^6.24.1\",\"babel-runtime\":\"^6.22.0\",\"babel-types\":\"^6.24.1\"}},\"babel-plugin-transform-es2015-literals\":{\"version\":\"6.22.0\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-literals/-/babel-plugin-transform-es2015-literals-6.22.0.tgz\",\"integrity\":\"sha512-tjFl0cwMPpDYyoqYA9li1/7mGFit39XiNX5DKC/uCNjBctMxyL1/PT/l4rSlbvBG1pOKI88STRdUsWXB3/Q9hQ==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.22.0\"}},\"babel-plugin-transform-es2015-modules-amd\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-modules-amd/-/babel-plugin-transform-es2015-modules-amd-6.24.1.tgz\",\"integrity\":\"sha512-LnIIdGWIKdw7zwckqx+eGjcS8/cl8D74A3BpJbGjKTFFNJSMrjN4bIh22HY1AlkUbeLG6X6OZj56BDvWD+OeFA==\",\"dev\":true,\"requires\":{\"babel-plugin-transform-es2015-modules-commonjs\":\"^6.24.1\",\"babel-runtime\":\"^6.22.0\",\"babel-template\":\"^6.24.1\"}},\"babel-plugin-transform-es2015-modules-commonjs\":{\"version\":\"6.26.2\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-modules-commonjs/-/babel-plugin-transform-es2015-modules-commonjs-6.26.2.tgz\",\"integrity\":\"sha512-CV9ROOHEdrjcwhIaJNBGMBCodN+1cfkwtM1SbUHmvyy35KGT7fohbpOxkE2uLz1o6odKK2Ck/tz47z+VqQfi9Q==\",\"dev\":true,\"requires\":{\"babel-plugin-transform-strict-mode\":\"^6.24.1\",\"babel-runtime\":\"^6.26.0\",\"babel-template\":\"^6.26.0\",\"babel-types\":\"^6.26.0\"}},\"babel-plugin-transform-es2015-modules-systemjs\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-modules-systemjs/-/babel-plugin-transform-es2015-modules-systemjs-6.24.1.tgz\",\"integrity\":\"sha512-ONFIPsq8y4bls5PPsAWYXH/21Hqv64TBxdje0FvU3MhIV6QM2j5YS7KvAzg/nTIVLot2D2fmFQrFWCbgHlFEjg==\",\"dev\":true,\"requires\":{\"babel-helper-hoist-variables\":\"^6.24.1\",\"babel-runtime\":\"^6.22.0\",\"babel-template\":\"^6.24.1\"}},\"babel-plugin-transform-es2015-modules-umd\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-modules-umd/-/babel-plugin-transform-es2015-modules-umd-6.24.1.tgz\",\"integrity\":\"sha512-LpVbiT9CLsuAIp3IG0tfbVo81QIhn6pE8xBJ7XSeCtFlMltuar5VuBV6y6Q45tpui9QWcy5i0vLQfCfrnF7Kiw==\",\"dev\":true,\"requires\":{\"babel-plugin-transform-es2015-modules-amd\":\"^6.24.1\",\"babel-runtime\":\"^6.22.0\",\"babel-template\":\"^6.24.1\"}},\"babel-plugin-transform-es2015-object-super\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-object-super/-/babel-plugin-transform-es2015-object-super-6.24.1.tgz\",\"integrity\":\"sha512-8G5hpZMecb53vpD3mjs64NhI1au24TAmokQ4B+TBFBjN9cVoGoOvotdrMMRmHvVZUEvqGUPWL514woru1ChZMA==\",\"dev\":true,\"requires\":{\"babel-helper-replace-supers\":\"^6.24.1\",\"babel-runtime\":\"^6.22.0\"}},\"babel-plugin-transform-es2015-parameters\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-parameters/-/babel-plugin-transform-es2015-parameters-6.24.1.tgz\",\"integrity\":\"sha512-8HxlW+BB5HqniD+nLkQ4xSAVq3bR/pcYW9IigY+2y0dI+Y7INFeTbfAQr+63T3E4UDsZGjyb+l9txUnABWxlOQ==\",\"dev\":true,\"requires\":{\"babel-helper-call-delegate\":\"^6.24.1\",\"babel-helper-get-function-arity\":\"^6.24.1\",\"babel-runtime\":\"^6.22.0\",\"babel-template\":\"^6.24.1\",\"babel-traverse\":\"^6.24.1\",\"babel-types\":\"^6.24.1\"}},\"babel-plugin-transform-es2015-shorthand-properties\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-shorthand-properties/-/babel-plugin-transform-es2015-shorthand-properties-6.24.1.tgz\",\"integrity\":\"sha512-mDdocSfUVm1/7Jw/FIRNw9vPrBQNePy6wZJlR8HAUBLybNp1w/6lr6zZ2pjMShee65t/ybR5pT8ulkLzD1xwiw==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.22.0\",\"babel-types\":\"^6.24.1\"}},\"babel-plugin-transform-es2015-spread\":{\"version\":\"6.22.0\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-spread/-/babel-plugin-transform-es2015-spread-6.22.0.tgz\",\"integrity\":\"sha512-3Ghhi26r4l3d0Js933E5+IhHwk0A1yiutj9gwvzmFbVV0sPMYk2lekhOufHBswX7NCoSeF4Xrl3sCIuSIa+zOg==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.22.0\"}},\"babel-plugin-transform-es2015-sticky-regex\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-sticky-regex/-/babel-plugin-transform-es2015-sticky-regex-6.24.1.tgz\",\"integrity\":\"sha512-CYP359ADryTo3pCsH0oxRo/0yn6UsEZLqYohHmvLQdfS9xkf+MbCzE3/Kolw9OYIY4ZMilH25z/5CbQbwDD+lQ==\",\"dev\":true,\"requires\":{\"babel-helper-regex\":\"^6.24.1\",\"babel-runtime\":\"^6.22.0\",\"babel-types\":\"^6.24.1\"}},\"babel-plugin-transform-es2015-template-literals\":{\"version\":\"6.22.0\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-template-literals/-/babel-plugin-transform-es2015-template-literals-6.22.0.tgz\",\"integrity\":\"sha512-x8b9W0ngnKzDMHimVtTfn5ryimars1ByTqsfBDwAqLibmuuQY6pgBQi5z1ErIsUOWBdw1bW9FSz5RZUojM4apg==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.22.0\"}},\"babel-plugin-transform-es2015-typeof-symbol\":{\"version\":\"6.23.0\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-typeof-symbol/-/babel-plugin-transform-es2015-typeof-symbol-6.23.0.tgz\",\"integrity\":\"sha512-fz6J2Sf4gYN6gWgRZaoFXmq93X+Li/8vf+fb0sGDVtdeWvxC9y5/bTD7bvfWMEq6zetGEHpWjtzRGSugt5kNqw==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.22.0\"}},\"babel-plugin-transform-es2015-unicode-regex\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-es2015-unicode-regex/-/babel-plugin-transform-es2015-unicode-regex-6.24.1.tgz\",\"integrity\":\"sha512-v61Dbbihf5XxnYjtBN04B/JBvsScY37R1cZT5r9permN1cp+b70DY3Ib3fIkgn1DI9U3tGgBJZVD8p/mE/4JbQ==\",\"dev\":true,\"requires\":{\"babel-helper-regex\":\"^6.24.1\",\"babel-runtime\":\"^6.22.0\",\"regexpu-core\":\"^2.0.0\"}},\"babel-plugin-transform-exponentiation-operator\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-exponentiation-operator/-/babel-plugin-transform-exponentiation-operator-6.24.1.tgz\",\"integrity\":\"sha512-LzXDmbMkklvNhprr20//RStKVcT8Cu+SQtX18eMHLhjHf2yFzwtQ0S2f0jQ+89rokoNdmwoSqYzAhq86FxlLSQ==\",\"dev\":true,\"requires\":{\"babel-helper-builder-binary-assignment-operator-visitor\":\"^6.24.1\",\"babel-plugin-syntax-exponentiation-operator\":\"^6.8.0\",\"babel-runtime\":\"^6.22.0\"}},\"babel-plugin-transform-regenerator\":{\"version\":\"6.26.0\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-regenerator/-/babel-plugin-transform-regenerator-6.26.0.tgz\",\"integrity\":\"sha512-LS+dBkUGlNR15/5WHKe/8Neawx663qttS6AGqoOUhICc9d1KciBvtrQSuc0PI+CxQ2Q/S1aKuJ+u64GtLdcEZg==\",\"dev\":true,\"requires\":{\"regenerator-transform\":\"^0.10.0\"}},\"babel-plugin-transform-runtime\":{\"version\":\"6.23.0\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-runtime/-/babel-plugin-transform-runtime-6.23.0.tgz\",\"integrity\":\"sha512-cpGMVC1vt/772y3jx1gwSaTitQVZuFDlllgreMsZ+rTYC6jlYXRyf5FQOgSnckOiA5QmzbXTyBY2A5AmZXF1fA==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.22.0\"}},\"babel-plugin-transform-strict-mode\":{\"version\":\"6.24.1\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-transform-strict-mode/-/babel-plugin-transform-strict-mode-6.24.1.tgz\",\"integrity\":\"sha512-j3KtSpjyLSJxNoCDrhwiJad8kw0gJ9REGj8/CqL0HeRyLnvUNYV9zcqluL6QJSXh3nfsLEmSLvwRfGzrgR96Pw==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.22.0\",\"babel-types\":\"^6.24.1\"}},\"babel-polyfill\":{\"version\":\"6.26.0\",\"resolved\":\"https://registry.npmmirror.com/babel-polyfill/-/babel-polyfill-6.26.0.tgz\",\"integrity\":\"sha512-F2rZGQnAdaHWQ8YAoeRbukc7HS9QgdgeyJ0rQDd485v9opwuPvjpPFcOOT/WmkKTdgy9ESgSPXDcTNpzrGr6iQ==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.26.0\",\"core-js\":\"^2.5.0\",\"regenerator-runtime\":\"^0.10.5\"},\"dependencies\":{\"regenerator-runtime\":{\"version\":\"0.10.5\",\"resolved\":\"https://registry.npmmirror.com/regenerator-runtime/-/regenerator-runtime-0.10.5.tgz\",\"integrity\":\"sha512-02YopEIhAgiBHWeoTiA8aitHDt8z6w+rQqNuIftlM+ZtvSl/brTouaU7DW6GO/cHtvxJvS4Hwv2ibKdxIRi24w==\",\"dev\":true}}},\"babel-preset-env\":{\"version\":\"1.7.0\",\"resolved\":\"https://registry.npmmirror.com/babel-preset-env/-/babel-preset-env-1.7.0.tgz\",\"integrity\":\"sha512-9OR2afuKDneX2/q2EurSftUYM0xGu4O2D9adAhVfADDhrYDaxXV0rBbevVYoY9n6nyX1PmQW/0jtpJvUNr9CHg==\",\"dev\":true,\"requires\":{\"babel-plugin-check-es2015-constants\":\"^6.22.0\",\"babel-plugin-syntax-trailing-function-commas\":\"^6.22.0\",\"babel-plugin-transform-async-to-generator\":\"^6.22.0\",\"babel-plugin-transform-es2015-arrow-functions\":\"^6.22.0\",\"babel-plugin-transform-es2015-block-scoped-functions\":\"^6.22.0\",\"babel-plugin-transform-es2015-block-scoping\":\"^6.23.0\",\"babel-plugin-transform-es2015-classes\":\"^6.23.0\",\"babel-plugin-transform-es2015-computed-properties\":\"^6.22.0\",\"babel-plugin-transform-es2015-destructuring\":\"^6.23.0\",\"babel-plugin-transform-es2015-duplicate-keys\":\"^6.22.0\",\"babel-plugin-transform-es2015-for-of\":\"^6.23.0\",\"babel-plugin-transform-es2015-function-name\":\"^6.22.0\",\"babel-plugin-transform-es2015-literals\":\"^6.22.0\",\"babel-plugin-transform-es2015-modules-amd\":\"^6.22.0\",\"babel-plugin-transform-es2015-modules-commonjs\":\"^6.23.0\",\"babel-plugin-transform-es2015-modules-systemjs\":\"^6.23.0\",\"babel-plugin-transform-es2015-modules-umd\":\"^6.23.0\",\"babel-plugin-transform-es2015-object-super\":\"^6.22.0\",\"babel-plugin-transform-es2015-parameters\":\"^6.23.0\",\"babel-plugin-transform-es2015-shorthand-properties\":\"^6.22.0\",\"babel-plugin-transform-es2015-spread\":\"^6.22.0\",\"babel-plugin-transform-es2015-sticky-regex\":\"^6.22.0\",\"babel-plugin-transform-es2015-template-literals\":\"^6.22.0\",\"babel-plugin-transform-es2015-typeof-symbol\":\"^6.23.0\",\"babel-plugin-transform-es2015-unicode-regex\":\"^6.22.0\",\"babel-plugin-transform-exponentiation-operator\":\"^6.22.0\",\"babel-plugin-transform-regenerator\":\"^6.22.0\",\"browserslist\":\"^3.2.6\",\"invariant\":\"^2.2.2\",\"semver\":\"^5.3.0\"}},\"babel-register\":{\"version\":\"6.26.0\",\"resolved\":\"https://registry.npmmirror.com/babel-register/-/babel-register-6.26.0.tgz\",\"integrity\":\"sha512-veliHlHX06wjaeY8xNITbveXSiI+ASFnOqvne/LaIJIqOWi2Ogmj91KOugEz/hoh/fwMhXNBJPCv8Xaz5CyM4A==\",\"dev\":true,\"requires\":{\"babel-core\":\"^6.26.0\",\"babel-runtime\":\"^6.26.0\",\"core-js\":\"^2.5.0\",\"home-or-tmp\":\"^2.0.0\",\"lodash\":\"^4.17.4\",\"mkdirp\":\"^0.5.1\",\"source-map-support\":\"^0.4.15\"}},\"babel-runtime\":{\"version\":\"6.26.0\",\"resolved\":\"https://registry.npmmirror.com/babel-runtime/-/babel-runtime-6.26.0.tgz\",\"integrity\":\"sha512-ITKNuq2wKlW1fJg9sSW52eepoYgZBggvOAHC0u/CYu/qxQ9EVzThCgR69BnSXLHjy2f7SY5zaQ4yt7H9ZVxY2g==\",\"dev\":true,\"requires\":{\"core-js\":\"^2.4.0\",\"regenerator-runtime\":\"^0.11.0\"}},\"babel-template\":{\"version\":\"6.26.0\",\"resolved\":\"https://registry.npmmirror.com/babel-template/-/babel-template-6.26.0.tgz\",\"integrity\":\"sha512-PCOcLFW7/eazGUKIoqH97sO9A2UYMahsn/yRQ7uOk37iutwjq7ODtcTNF+iFDSHNfkctqsLRjLP7URnOx0T1fg==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.26.0\",\"babel-traverse\":\"^6.26.0\",\"babel-types\":\"^6.26.0\",\"babylon\":\"^6.18.0\",\"lodash\":\"^4.17.4\"}},\"babel-traverse\":{\"version\":\"6.26.0\",\"resolved\":\"https://registry.npmmirror.com/babel-traverse/-/babel-traverse-6.26.0.tgz\",\"integrity\":\"sha512-iSxeXx7apsjCHe9c7n8VtRXGzI2Bk1rBSOJgCCjfyXb6v1aCqE1KSEpq/8SXuVN8Ka/Rh1WDTF0MDzkvTA4MIA==\",\"dev\":true,\"requires\":{\"babel-code-frame\":\"^6.26.0\",\"babel-messages\":\"^6.23.0\",\"babel-runtime\":\"^6.26.0\",\"babel-types\":\"^6.26.0\",\"babylon\":\"^6.18.0\",\"debug\":\"^2.6.8\",\"globals\":\"^9.18.0\",\"invariant\":\"^2.2.2\",\"lodash\":\"^4.17.4\"}},\"babel-types\":{\"version\":\"6.26.0\",\"resolved\":\"https://registry.npmmirror.com/babel-types/-/babel-types-6.26.0.tgz\",\"integrity\":\"sha512-zhe3V/26rCWsEZK8kZN+HaQj5yQ1CilTObixFzKW1UWjqG7618Twz6YEsCnjfg5gBcJh02DrpCkS9h98ZqDY+g==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.26.0\",\"esutils\":\"^2.0.2\",\"lodash\":\"^4.17.4\",\"to-fast-properties\":\"^1.0.3\"}},\"babylon\":{\"version\":\"6.18.0\",\"resolved\":\"https://registry.npmmirror.com/babylon/-/babylon-6.18.0.tgz\",\"integrity\":\"sha512-q/UEjfGJ2Cm3oKV71DJz9d25TPnq5rhBVL2Q4fA5wcC3jcrdn7+SssEybFIxwAvvP+YCsCYNKughoF33GxgycQ==\",\"dev\":true},\"balanced-match\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/balanced-match/-/balanced-match-1.0.2.tgz\",\"integrity\":\"sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==\",\"dev\":true},\"base\":{\"version\":\"0.11.2\",\"resolved\":\"https://registry.npmmirror.com/base/-/base-0.11.2.tgz\",\"integrity\":\"sha512-5T6P4xPgpp0YDFvSWwEZ4NoE3aM4QBQXDzmVbraCkFj8zHM+mba8SyqB5DbZWyR7mYHo6Y7BdQo3MoA4m0TeQg==\",\"dev\":true,\"optional\":true,\"requires\":{\"cache-base\":\"^1.0.1\",\"class-utils\":\"^0.3.5\",\"component-emitter\":\"^1.2.1\",\"define-property\":\"^1.0.0\",\"isobject\":\"^3.0.1\",\"mixin-deep\":\"^1.2.0\",\"pascalcase\":\"^0.1.1\"},\"dependencies\":{\"define-property\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/define-property/-/define-property-1.0.0.tgz\",\"integrity\":\"sha512-cZTYKFWspt9jZsMscWo8sc/5lbPC9Q0N5nBLgb+Yd915iL3udB1uFgS3B8YCx66UVHq018DAVFoee7x+gxggeA==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-descriptor\":\"^1.0.0\"}},\"is-accessor-descriptor\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/is-accessor-descriptor/-/is-accessor-descriptor-1.0.0.tgz\",\"integrity\":\"sha512-m5hnHTkcVsPfqx3AKlyttIPb7J+XykHvJP2B9bZDjlhLIoEq4XoK64Vg7boZlVWYK6LUY94dYPEE7Lh0ZkZKcQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"kind-of\":\"^6.0.0\"}},\"is-data-descriptor\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/is-data-descriptor/-/is-data-descriptor-1.0.0.tgz\",\"integrity\":\"sha512-jbRXy1FmtAoCjQkVmIVYwuuqDFUbaOeDjmed1tOGPrsMhtJA4rD9tkgA0F1qJ3gRFRXcHYVkdeaP50Q5rE/jLQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"kind-of\":\"^6.0.0\"}},\"is-descriptor\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/is-descriptor/-/is-descriptor-1.0.2.tgz\",\"integrity\":\"sha512-2eis5WqQGV7peooDyLmNEPUrps9+SXX5c9pL3xEB+4e9HnGuDa7mB7kHxHw4CbqS9k1T2hOH3miL8n8WtiYVtg==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-accessor-descriptor\":\"^1.0.0\",\"is-data-descriptor\":\"^1.0.0\",\"kind-of\":\"^6.0.2\"}},\"isobject\":{\"version\":\"3.0.1\",\"resolved\":\"https://registry.npmmirror.com/isobject/-/isobject-3.0.1.tgz\",\"integrity\":\"sha512-WhB9zCku7EGTj/HQQRz5aUQEUeoQZH2bWcltRErOpymJ4boYE6wL9Tbr23krRPSZ+C5zqNSrSw+Cc7sZZ4b7vg==\",\"dev\":true,\"optional\":true},\"kind-of\":{\"version\":\"6.0.3\",\"resolved\":\"https://registry.npmmirror.com/kind-of/-/kind-of-6.0.3.tgz\",\"integrity\":\"sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==\",\"dev\":true,\"optional\":true}}},\"binary-extensions\":{\"version\":\"1.13.1\",\"resolved\":\"https://registry.npmmirror.com/binary-extensions/-/binary-extensions-1.13.1.tgz\",\"integrity\":\"sha512-Un7MIEDdUC5gNpcGDV97op1Ywk748MpHcFTHoYs6qnj1Z3j7I53VG3nwZhKzoBZmbdRNnb6WRdFlwl7tSDuZGw==\",\"dev\":true,\"optional\":true},\"bindings\":{\"version\":\"1.5.0\",\"resolved\":\"https://registry.npmmirror.com/bindings/-/bindings-1.5.0.tgz\",\"integrity\":\"sha512-p2q/t/mhvuOj/UeLlV6566GD/guowlr0hHxClI0W9m7MWYkL1F0hLo+0Aexs9HSPCtR1SXQ0TD3MMKrXZajbiQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"file-uri-to-path\":\"1.0.0\"}},\"brace-expansion\":{\"version\":\"1.1.11\",\"resolved\":\"https://registry.npmmirror.com/brace-expansion/-/brace-expansion-1.1.11.tgz\",\"integrity\":\"sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==\",\"dev\":true,\"requires\":{\"balanced-match\":\"^1.0.0\",\"concat-map\":\"0.0.1\"}},\"braces\":{\"version\":\"1.8.5\",\"resolved\":\"https://registry.npmmirror.com/braces/-/braces-1.8.5.tgz\",\"integrity\":\"sha512-xU7bpz2ytJl1bH9cgIurjpg/n8Gohy9GTw81heDYLJQ4RU60dlyJsa+atVF2pI0yMMvKxI9HkKwjePCj5XI1hw==\",\"dev\":true,\"optional\":true,\"requires\":{\"expand-range\":\"^1.8.1\",\"preserve\":\"^0.2.0\",\"repeat-element\":\"^1.1.2\"}},\"browserslist\":{\"version\":\"3.2.8\",\"resolved\":\"https://registry.npmmirror.com/browserslist/-/browserslist-3.2.8.tgz\",\"integrity\":\"sha512-WHVocJYavUwVgVViC0ORikPHQquXwVh939TaelZ4WDqpWgTX/FsGhl/+P4qBUAGcRvtOgDgC+xftNWWp2RUTAQ==\",\"dev\":true,\"requires\":{\"caniuse-lite\":\"^1.0.30000844\",\"electron-to-chromium\":\"^1.3.47\"}},\"cache-base\":{\"version\":\"1.0.1\",\"resolved\":\"https://registry.npmmirror.com/cache-base/-/cache-base-1.0.1.tgz\",\"integrity\":\"sha512-AKcdTnFSWATd5/GCPRxr2ChwIJ85CeyrEyjRHlKxQ56d4XJMGym0uAiKn0xbLOGOl3+yRpOTi484dVCEc5AUzQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"collection-visit\":\"^1.0.0\",\"component-emitter\":\"^1.2.1\",\"get-value\":\"^2.0.6\",\"has-value\":\"^1.0.0\",\"isobject\":\"^3.0.1\",\"set-value\":\"^2.0.0\",\"to-object-path\":\"^0.3.0\",\"union-value\":\"^1.0.0\",\"unset-value\":\"^1.0.0\"},\"dependencies\":{\"isobject\":{\"version\":\"3.0.1\",\"resolved\":\"https://registry.npmmirror.com/isobject/-/isobject-3.0.1.tgz\",\"integrity\":\"sha512-WhB9zCku7EGTj/HQQRz5aUQEUeoQZH2bWcltRErOpymJ4boYE6wL9Tbr23krRPSZ+C5zqNSrSw+Cc7sZZ4b7vg==\",\"dev\":true,\"optional\":true}}},\"caniuse-lite\":{\"version\":\"1.0.30001486\",\"resolved\":\"https://registry.npmmirror.com/caniuse-lite/-/caniuse-lite-1.0.30001486.tgz\",\"integrity\":\"sha512-uv7/gXuHi10Whlj0pp5q/tsK/32J2QSqVRKQhs2j8VsDCjgyruAh/eEXHF822VqO9yT6iZKw3nRwZRSPBE9OQg==\",\"dev\":true},\"chalk\":{\"version\":\"1.1.3\",\"resolved\":\"https://registry.npmmirror.com/chalk/-/chalk-1.1.3.tgz\",\"integrity\":\"sha512-U3lRVLMSlsCfjqYPbLyVv11M9CPW4I728d6TCKMAOJueEeB9/8o+eSsMnxPJD+Q+K909sdESg7C+tIkoH6on1A==\",\"dev\":true,\"requires\":{\"ansi-styles\":\"^2.2.1\",\"escape-string-regexp\":\"^1.0.2\",\"has-ansi\":\"^2.0.0\",\"strip-ansi\":\"^3.0.0\",\"supports-color\":\"^2.0.0\"}},\"chokidar\":{\"version\":\"1.7.0\",\"resolved\":\"https://registry.npmmirror.com/chokidar/-/chokidar-1.7.0.tgz\",\"integrity\":\"sha512-mk8fAWcRUOxY7btlLtitj3A45jOwSAxH4tOFOoEGbVsl6cL6pPMWUy7dwZ/canfj3QEdP6FHSnf/l1c6/WkzVg==\",\"dev\":true,\"optional\":true,\"requires\":{\"anymatch\":\"^1.3.0\",\"async-each\":\"^1.0.0\",\"fsevents\":\"^1.0.0\",\"glob-parent\":\"^2.0.0\",\"inherits\":\"^2.0.1\",\"is-binary-path\":\"^1.0.0\",\"is-glob\":\"^2.0.0\",\"path-is-absolute\":\"^1.0.0\",\"readdirp\":\"^2.0.0\"}},\"class-utils\":{\"version\":\"0.3.6\",\"resolved\":\"https://registry.npmmirror.com/class-utils/-/class-utils-0.3.6.tgz\",\"integrity\":\"sha512-qOhPa/Fj7s6TY8H8esGu5QNpMMQxz79h+urzrNYN6mn+9BnxlDGf5QZ+XeCDsxSjPqsSR56XOZOJmpeurnLMeg==\",\"dev\":true,\"optional\":true,\"requires\":{\"arr-union\":\"^3.1.0\",\"define-property\":\"^0.2.5\",\"isobject\":\"^3.0.0\",\"static-extend\":\"^0.1.1\"},\"dependencies\":{\"define-property\":{\"version\":\"0.2.5\",\"resolved\":\"https://registry.npmmirror.com/define-property/-/define-property-0.2.5.tgz\",\"integrity\":\"sha512-Rr7ADjQZenceVOAKop6ALkkRAmH1A4Gx9hV/7ZujPUN2rkATqFO0JZLZInbAjpZYoJ1gUx8MRMQVkYemcbMSTA==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-descriptor\":\"^0.1.0\"}},\"isobject\":{\"version\":\"3.0.1\",\"resolved\":\"https://registry.npmmirror.com/isobject/-/isobject-3.0.1.tgz\",\"integrity\":\"sha512-WhB9zCku7EGTj/HQQRz5aUQEUeoQZH2bWcltRErOpymJ4boYE6wL9Tbr23krRPSZ+C5zqNSrSw+Cc7sZZ4b7vg==\",\"dev\":true,\"optional\":true}}},\"collection-visit\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/collection-visit/-/collection-visit-1.0.0.tgz\",\"integrity\":\"sha512-lNkKvzEeMBBjUGHZ+q6z9pSJla0KWAQPvtzhEV9+iGyQYG+pBpl7xKDhxoNSOZH2hhv0v5k0y2yAM4o4SjoSkw==\",\"dev\":true,\"optional\":true,\"requires\":{\"map-visit\":\"^1.0.0\",\"object-visit\":\"^1.0.0\"}},\"commander\":{\"version\":\"2.20.3\",\"resolved\":\"https://registry.npmmirror.com/commander/-/commander-2.20.3.tgz\",\"integrity\":\"sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ==\",\"dev\":true},\"component-emitter\":{\"version\":\"1.3.0\",\"resolved\":\"https://registry.npmmirror.com/component-emitter/-/component-emitter-1.3.0.tgz\",\"integrity\":\"sha512-Rd3se6QB+sO1TwqZjscQrurpEPIfO0/yYnSin6Q/rD3mOutHvUrCAhJub3r90uNb+SESBuE0QYoB90YdfatsRg==\",\"dev\":true,\"optional\":true},\"concat-map\":{\"version\":\"0.0.1\",\"resolved\":\"https://registry.npmmirror.com/concat-map/-/concat-map-0.0.1.tgz\",\"integrity\":\"sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==\",\"dev\":true},\"convert-source-map\":{\"version\":\"1.9.0\",\"resolved\":\"https://registry.npmmirror.com/convert-source-map/-/convert-source-map-1.9.0.tgz\",\"integrity\":\"sha512-ASFBup0Mz1uyiIjANan1jzLQami9z1PoYSZCiiYW2FczPbenXc45FZdBZLzOT+r6+iciuEModtmCti+hjaAk0A==\",\"dev\":true},\"copy-descriptor\":{\"version\":\"0.1.1\",\"resolved\":\"https://registry.npmmirror.com/copy-descriptor/-/copy-descriptor-0.1.1.tgz\",\"integrity\":\"sha512-XgZ0pFcakEUlbwQEVNg3+QAis1FyTL3Qel9FYy8pSkQqoG3PNoT0bOCQtOXcOkur21r2Eq2kI+IE+gsmAEVlYw==\",\"dev\":true,\"optional\":true},\"core-js\":{\"version\":\"2.6.12\",\"resolved\":\"https://registry.npmmirror.com/core-js/-/core-js-2.6.12.tgz\",\"integrity\":\"sha512-Kb2wC0fvsWfQrgk8HU5lW6U/Lcs8+9aaYcy4ZFc6DDlo4nZ7n70dEgE5rtR0oG6ufKDUnrwfWL1mXR5ljDatrQ==\",\"dev\":true},\"core-util-is\":{\"version\":\"1.0.3\",\"resolved\":\"https://registry.npmmirror.com/core-util-is/-/core-util-is-1.0.3.tgz\",\"integrity\":\"sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ==\",\"dev\":true,\"optional\":true},\"debug\":{\"version\":\"2.6.9\",\"resolved\":\"https://registry.npmmirror.com/debug/-/debug-2.6.9.tgz\",\"integrity\":\"sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==\",\"dev\":true,\"requires\":{\"ms\":\"2.0.0\"}},\"decode-uri-component\":{\"version\":\"0.2.2\",\"resolved\":\"https://registry.npmmirror.com/decode-uri-component/-/decode-uri-component-0.2.2.tgz\",\"integrity\":\"sha512-FqUYQ+8o158GyGTrMFJms9qh3CqTKvAqgqsTnkLI8sKu0028orqBhxNMFkFen0zGyg6epACD32pjVk58ngIErQ==\",\"dev\":true,\"optional\":true},\"define-property\":{\"version\":\"2.0.2\",\"resolved\":\"https://registry.npmmirror.com/define-property/-/define-property-2.0.2.tgz\",\"integrity\":\"sha512-jwK2UV4cnPpbcG7+VRARKTZPUWowwXA8bzH5NP6ud0oeAxyYPuGZUAC7hMugpCdz4BeSZl2Dl9k66CHJ/46ZYQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-descriptor\":\"^1.0.2\",\"isobject\":\"^3.0.1\"},\"dependencies\":{\"is-accessor-descriptor\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/is-accessor-descriptor/-/is-accessor-descriptor-1.0.0.tgz\",\"integrity\":\"sha512-m5hnHTkcVsPfqx3AKlyttIPb7J+XykHvJP2B9bZDjlhLIoEq4XoK64Vg7boZlVWYK6LUY94dYPEE7Lh0ZkZKcQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"kind-of\":\"^6.0.0\"}},\"is-data-descriptor\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/is-data-descriptor/-/is-data-descriptor-1.0.0.tgz\",\"integrity\":\"sha512-jbRXy1FmtAoCjQkVmIVYwuuqDFUbaOeDjmed1tOGPrsMhtJA4rD9tkgA0F1qJ3gRFRXcHYVkdeaP50Q5rE/jLQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"kind-of\":\"^6.0.0\"}},\"is-descriptor\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/is-descriptor/-/is-descriptor-1.0.2.tgz\",\"integrity\":\"sha512-2eis5WqQGV7peooDyLmNEPUrps9+SXX5c9pL3xEB+4e9HnGuDa7mB7kHxHw4CbqS9k1T2hOH3miL8n8WtiYVtg==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-accessor-descriptor\":\"^1.0.0\",\"is-data-descriptor\":\"^1.0.0\",\"kind-of\":\"^6.0.2\"}},\"isobject\":{\"version\":\"3.0.1\",\"resolved\":\"https://registry.npmmirror.com/isobject/-/isobject-3.0.1.tgz\",\"integrity\":\"sha512-WhB9zCku7EGTj/HQQRz5aUQEUeoQZH2bWcltRErOpymJ4boYE6wL9Tbr23krRPSZ+C5zqNSrSw+Cc7sZZ4b7vg==\",\"dev\":true,\"optional\":true},\"kind-of\":{\"version\":\"6.0.3\",\"resolved\":\"https://registry.npmmirror.com/kind-of/-/kind-of-6.0.3.tgz\",\"integrity\":\"sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==\",\"dev\":true,\"optional\":true}}},\"detect-indent\":{\"version\":\"4.0.0\",\"resolved\":\"https://registry.npmmirror.com/detect-indent/-/detect-indent-4.0.0.tgz\",\"integrity\":\"sha512-BDKtmHlOzwI7iRuEkhzsnPoi5ypEhWAJB5RvHWe1kMr06js3uK5B3734i3ui5Yd+wOJV1cpE4JnivPD283GU/A==\",\"dev\":true,\"requires\":{\"repeating\":\"^2.0.0\"}},\"electron-to-chromium\":{\"version\":\"1.4.392\",\"resolved\":\"https://registry.npmmirror.com/electron-to-chromium/-/electron-to-chromium-1.4.392.tgz\",\"integrity\":\"sha512-TXQOMW9tnhIms3jGy/lJctLjICOgyueZFJ1KUtm6DTQ+QpxX3p7ZBwB6syuZ9KBuT5S4XX7bgY1ECPgfxKUdOg==\",\"dev\":true},\"escape-string-regexp\":{\"version\":\"1.0.5\",\"resolved\":\"https://registry.npmmirror.com/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz\",\"integrity\":\"sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==\",\"dev\":true},\"esutils\":{\"version\":\"2.0.3\",\"resolved\":\"https://registry.npmmirror.com/esutils/-/esutils-2.0.3.tgz\",\"integrity\":\"sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==\",\"dev\":true},\"expand-brackets\":{\"version\":\"0.1.5\",\"resolved\":\"https://registry.npmmirror.com/expand-brackets/-/expand-brackets-0.1.5.tgz\",\"integrity\":\"sha512-hxx03P2dJxss6ceIeri9cmYOT4SRs3Zk3afZwWpOsRqLqprhTR8u++SlC+sFGsQr7WGFPdMF7Gjc1njDLDK6UA==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-posix-bracket\":\"^0.1.0\"}},\"expand-range\":{\"version\":\"1.8.2\",\"resolved\":\"https://registry.npmmirror.com/expand-range/-/expand-range-1.8.2.tgz\",\"integrity\":\"sha512-AFASGfIlnIbkKPQwX1yHaDjFvh/1gyKJODme52V6IORh69uEYgZp0o9C+qsIGNVEiuuhQU0CSSl++Rlegg1qvA==\",\"dev\":true,\"optional\":true,\"requires\":{\"fill-range\":\"^2.1.0\"}},\"extend-shallow\":{\"version\":\"3.0.2\",\"resolved\":\"https://registry.npmmirror.com/extend-shallow/-/extend-shallow-3.0.2.tgz\",\"integrity\":\"sha512-BwY5b5Ql4+qZoefgMj2NUmx+tehVTH/Kf4k1ZEtOHNFcm2wSxMRo992l6X3TIgni2eZVTZ85xMOjF31fwZAj6Q==\",\"dev\":true,\"optional\":true,\"requires\":{\"assign-symbols\":\"^1.0.0\",\"is-extendable\":\"^1.0.1\"},\"dependencies\":{\"is-extendable\":{\"version\":\"1.0.1\",\"resolved\":\"https://registry.npmmirror.com/is-extendable/-/is-extendable-1.0.1.tgz\",\"integrity\":\"sha512-arnXMxT1hhoKo9k1LZdmlNyJdDDfy2v0fXjFlmok4+i8ul/6WlbVge9bhM74OpNPQPMGUToDtz+KXa1PneJxOA==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-plain-object\":\"^2.0.4\"}}}},\"extglob\":{\"version\":\"0.3.2\",\"resolved\":\"https://registry.npmmirror.com/extglob/-/extglob-0.3.2.tgz\",\"integrity\":\"sha512-1FOj1LOwn42TMrruOHGt18HemVnbwAmAak7krWk+wa93KXxGbK+2jpezm+ytJYDaBX0/SPLZFHKM7m+tKobWGg==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-extglob\":\"^1.0.0\"}},\"file-uri-to-path\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/file-uri-to-path/-/file-uri-to-path-1.0.0.tgz\",\"integrity\":\"sha512-0Zt+s3L7Vf1biwWZ29aARiVYLx7iMGnEUl9x33fbB/j3jR81u/O2LbqK+Bm1CDSNDKVtJ/YjwY7TUd5SkeLQLw==\",\"dev\":true,\"optional\":true},\"filename-regex\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmmirror.com/filename-regex/-/filename-regex-2.0.1.tgz\",\"integrity\":\"sha512-BTCqyBaWBTsauvnHiE8i562+EdJj+oUpkqWp2R1iCoR8f6oo8STRu3of7WJJ0TqWtxN50a5YFpzYK4Jj9esYfQ==\",\"dev\":true,\"optional\":true},\"fill-range\":{\"version\":\"2.2.4\",\"resolved\":\"https://registry.npmmirror.com/fill-range/-/fill-range-2.2.4.tgz\",\"integrity\":\"sha512-cnrcCbj01+j2gTG921VZPnHbjmdAf8oQV/iGeV2kZxGSyfYjjTyY79ErsK1WJWMpw6DaApEX72binqJE+/d+5Q==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-number\":\"^2.1.0\",\"isobject\":\"^2.0.0\",\"randomatic\":\"^3.0.0\",\"repeat-element\":\"^1.1.2\",\"repeat-string\":\"^1.5.2\"}},\"for-in\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/for-in/-/for-in-1.0.2.tgz\",\"integrity\":\"sha512-7EwmXrOjyL+ChxMhmG5lnW9MPt1aIeZEwKhQzoBUdTV0N3zuwWDZYVJatDvZ2OyzPUvdIAZDsCetk3coyMfcnQ==\",\"dev\":true,\"optional\":true},\"for-own\":{\"version\":\"0.1.5\",\"resolved\":\"https://registry.npmmirror.com/for-own/-/for-own-0.1.5.tgz\",\"integrity\":\"sha512-SKmowqGTJoPzLO1T0BBJpkfp3EMacCMOuH40hOUbrbzElVktk4DioXVM99QkLCyKoiuOmyjgcWMpVz2xjE7LZw==\",\"dev\":true,\"optional\":true,\"requires\":{\"for-in\":\"^1.0.1\"}},\"fragment-cache\":{\"version\":\"0.2.1\",\"resolved\":\"https://registry.npmmirror.com/fragment-cache/-/fragment-cache-0.2.1.tgz\",\"integrity\":\"sha512-GMBAbW9antB8iZRHLoGw0b3HANt57diZYFO/HL1JGIC1MjKrdmhxvrJbupnVvpys0zsz7yBApXdQyfepKly2kA==\",\"dev\":true,\"optional\":true,\"requires\":{\"map-cache\":\"^0.2.2\"}},\"fs-readdir-recursive\":{\"version\":\"1.1.0\",\"resolved\":\"https://registry.npmmirror.com/fs-readdir-recursive/-/fs-readdir-recursive-1.1.0.tgz\",\"integrity\":\"sha512-GNanXlVr2pf02+sPN40XN8HG+ePaNcvM0q5mZBd668Obwb0yD5GiUbZOFgwn8kGMY6I3mdyDJzieUy3PTYyTRA==\",\"dev\":true},\"fs.realpath\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/fs.realpath/-/fs.realpath-1.0.0.tgz\",\"integrity\":\"sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==\",\"dev\":true},\"fsevents\":{\"version\":\"1.2.13\",\"resolved\":\"https://registry.npmmirror.com/fsevents/-/fsevents-1.2.13.tgz\",\"integrity\":\"sha512-oWb1Z6mkHIskLzEJ/XWX0srkpkTQ7vaopMQkyaEIoq0fmtFVxOthb8cCxeT+p3ynTdkk/RZwbgG4brR5BeWECw==\",\"dev\":true,\"optional\":true,\"requires\":{\"bindings\":\"^1.5.0\",\"nan\":\"^2.12.1\"}},\"get-value\":{\"version\":\"2.0.6\",\"resolved\":\"https://registry.npmmirror.com/get-value/-/get-value-2.0.6.tgz\",\"integrity\":\"sha512-Ln0UQDlxH1BapMu3GPtf7CuYNwRZf2gwCuPqbyG6pB8WfmFpzqcy4xtAaAMUhnNqjMKTiCPZG2oMT3YSx8U2NA==\",\"dev\":true,\"optional\":true},\"glob\":{\"version\":\"7.2.3\",\"resolved\":\"https://registry.npmmirror.com/glob/-/glob-7.2.3.tgz\",\"integrity\":\"sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==\",\"dev\":true,\"requires\":{\"fs.realpath\":\"^1.0.0\",\"inflight\":\"^1.0.4\",\"inherits\":\"2\",\"minimatch\":\"^3.1.1\",\"once\":\"^1.3.0\",\"path-is-absolute\":\"^1.0.0\"}},\"glob-base\":{\"version\":\"0.3.0\",\"resolved\":\"https://registry.npmmirror.com/glob-base/-/glob-base-0.3.0.tgz\",\"integrity\":\"sha512-ab1S1g1EbO7YzauaJLkgLp7DZVAqj9M/dvKlTt8DkXA2tiOIcSMrlVI2J1RZyB5iJVccEscjGn+kpOG9788MHA==\",\"dev\":true,\"optional\":true,\"requires\":{\"glob-parent\":\"^2.0.0\",\"is-glob\":\"^2.0.0\"}},\"glob-parent\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmmirror.com/glob-parent/-/glob-parent-2.0.0.tgz\",\"integrity\":\"sha512-JDYOvfxio/t42HKdxkAYaCiBN7oYiuxykOxKxdaUW5Qn0zaYN3gRQWolrwdnf0shM9/EP0ebuuTmyoXNr1cC5w==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-glob\":\"^2.0.0\"}},\"globals\":{\"version\":\"9.18.0\",\"resolved\":\"https://registry.npmmirror.com/globals/-/globals-9.18.0.tgz\",\"integrity\":\"sha512-S0nG3CLEQiY/ILxqtztTWH/3iRRdyBLw6KMDxnKMchrtbj2OFmehVh0WUCfW3DUrIgx/qFrJPICrq4Z4sTR9UQ==\",\"dev\":true},\"graceful-fs\":{\"version\":\"4.2.11\",\"resolved\":\"https://registry.npmmirror.com/graceful-fs/-/graceful-fs-4.2.11.tgz\",\"integrity\":\"sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==\",\"dev\":true},\"has-ansi\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmmirror.com/has-ansi/-/has-ansi-2.0.0.tgz\",\"integrity\":\"sha512-C8vBJ8DwUCx19vhm7urhTuUsr4/IyP6l4VzNQDv+ryHQObW3TTTp9yB68WpYgRe2bbaGuZ/se74IqFeVnMnLZg==\",\"dev\":true,\"requires\":{\"ansi-regex\":\"^2.0.0\"}},\"has-flag\":{\"version\":\"3.0.0\",\"resolved\":\"https://registry.npmmirror.com/has-flag/-/has-flag-3.0.0.tgz\",\"integrity\":\"sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==\",\"dev\":true},\"has-value\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/has-value/-/has-value-1.0.0.tgz\",\"integrity\":\"sha512-IBXk4GTsLYdQ7Rvt+GRBrFSVEkmuOUy4re0Xjd9kJSUQpnTrWR4/y9RpfexN9vkAPMFuQoeWKwqzPozRTlasGw==\",\"dev\":true,\"optional\":true,\"requires\":{\"get-value\":\"^2.0.6\",\"has-values\":\"^1.0.0\",\"isobject\":\"^3.0.0\"},\"dependencies\":{\"isobject\":{\"version\":\"3.0.1\",\"resolved\":\"https://registry.npmmirror.com/isobject/-/isobject-3.0.1.tgz\",\"integrity\":\"sha512-WhB9zCku7EGTj/HQQRz5aUQEUeoQZH2bWcltRErOpymJ4boYE6wL9Tbr23krRPSZ+C5zqNSrSw+Cc7sZZ4b7vg==\",\"dev\":true,\"optional\":true}}},\"has-values\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/has-values/-/has-values-1.0.0.tgz\",\"integrity\":\"sha512-ODYZC64uqzmtfGMEAX/FvZiRyWLpAC3vYnNunURUnkGVTS+mI0smVsWaPydRBsE3g+ok7h960jChO8mFcWlHaQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-number\":\"^3.0.0\",\"kind-of\":\"^4.0.0\"},\"dependencies\":{\"is-number\":{\"version\":\"3.0.0\",\"resolved\":\"https://registry.npmmirror.com/is-number/-/is-number-3.0.0.tgz\",\"integrity\":\"sha512-4cboCqIpliH+mAvFNegjZQ4kgKc3ZUhQVr3HvWbSh5q3WH2v82ct+T2Y1hdU5Gdtorx/cLifQjqCbL7bpznLTg==\",\"dev\":true,\"optional\":true,\"requires\":{\"kind-of\":\"^3.0.2\"},\"dependencies\":{\"kind-of\":{\"version\":\"3.2.2\",\"resolved\":\"https://registry.npmmirror.com/kind-of/-/kind-of-3.2.2.tgz\",\"integrity\":\"sha512-NOW9QQXMoZGg/oqnVNoNTTIFEIid1627WCffUBJEdMxYApq7mNE7CpzucIPc+ZQg25Phej7IJSmX3hO+oblOtQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-buffer\":\"^1.1.5\"}}}},\"kind-of\":{\"version\":\"4.0.0\",\"resolved\":\"https://registry.npmmirror.com/kind-of/-/kind-of-4.0.0.tgz\",\"integrity\":\"sha512-24XsCxmEbRwEDbz/qz3stgin8TTzZ1ESR56OMCN0ujYg+vRutNSiOj9bHH9u85DKgXguraugV5sFuvbD4FW/hw==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-buffer\":\"^1.1.5\"}}}},\"home-or-tmp\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmmirror.com/home-or-tmp/-/home-or-tmp-2.0.0.tgz\",\"integrity\":\"sha512-ycURW7oUxE2sNiPVw1HVEFsW+ecOpJ5zaj7eC0RlwhibhRBod20muUN8qu/gzx956YrLolVvs1MTXwKgC2rVEg==\",\"dev\":true,\"requires\":{\"os-homedir\":\"^1.0.0\",\"os-tmpdir\":\"^1.0.1\"}},\"ignore-by-default\":{\"version\":\"1.0.1\",\"resolved\":\"https://registry.npmmirror.com/ignore-by-default/-/ignore-by-default-1.0.1.tgz\",\"integrity\":\"sha512-Ius2VYcGNk7T90CppJqcIkS5ooHUZyIQK+ClZfMfMNFEF9VSE73Fq+906u/CWu92x4gzZMWOwfFYckPObzdEbA==\",\"dev\":true},\"inflight\":{\"version\":\"1.0.6\",\"resolved\":\"https://registry.npmmirror.com/inflight/-/inflight-1.0.6.tgz\",\"integrity\":\"sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==\",\"dev\":true,\"requires\":{\"once\":\"^1.3.0\",\"wrappy\":\"1\"}},\"inherits\":{\"version\":\"2.0.4\",\"resolved\":\"https://registry.npmmirror.com/inherits/-/inherits-2.0.4.tgz\",\"integrity\":\"sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==\",\"dev\":true},\"invariant\":{\"version\":\"2.2.4\",\"resolved\":\"https://registry.npmmirror.com/invariant/-/invariant-2.2.4.tgz\",\"integrity\":\"sha512-phJfQVBuaJM5raOpJjSfkiD6BpbCE4Ns//LaXl6wGYtUBY83nWS6Rf9tXm2e8VaK60JEjYldbPif/A2B1C2gNA==\",\"dev\":true,\"requires\":{\"loose-envify\":\"^1.0.0\"}},\"is-accessor-descriptor\":{\"version\":\"0.1.6\",\"resolved\":\"https://registry.npmmirror.com/is-accessor-descriptor/-/is-accessor-descriptor-0.1.6.tgz\",\"integrity\":\"sha512-e1BM1qnDbMRG3ll2U9dSK0UMHuWOs3pY3AtcFsmvwPtKL3MML/Q86i+GilLfvqEs4GW+ExB91tQ3Ig9noDIZ+A==\",\"dev\":true,\"optional\":true,\"requires\":{\"kind-of\":\"^3.0.2\"}},\"is-binary-path\":{\"version\":\"1.0.1\",\"resolved\":\"https://registry.npmmirror.com/is-binary-path/-/is-binary-path-1.0.1.tgz\",\"integrity\":\"sha512-9fRVlXc0uCxEDj1nQzaWONSpbTfx0FmJfzHF7pwlI8DkWGoHBBea4Pg5Ky0ojwwxQmnSifgbKkI06Qv0Ljgj+Q==\",\"dev\":true,\"optional\":true,\"requires\":{\"binary-extensions\":\"^1.0.0\"}},\"is-buffer\":{\"version\":\"1.1.6\",\"resolved\":\"https://registry.npmmirror.com/is-buffer/-/is-buffer-1.1.6.tgz\",\"integrity\":\"sha512-NcdALwpXkTm5Zvvbk7owOUSvVvBKDgKP5/ewfXEznmQFfs4ZRmanOeKBTjRVjka3QFoN6XJ+9F3USqfHqTaU5w==\",\"dev\":true,\"optional\":true},\"is-data-descriptor\":{\"version\":\"0.1.4\",\"resolved\":\"https://registry.npmmirror.com/is-data-descriptor/-/is-data-descriptor-0.1.4.tgz\",\"integrity\":\"sha512-+w9D5ulSoBNlmw9OHn3U2v51SyoCd0he+bB3xMl62oijhrspxowjU+AIcDY0N3iEJbUEkB15IlMASQsxYigvXg==\",\"dev\":true,\"optional\":true,\"requires\":{\"kind-of\":\"^3.0.2\"}},\"is-descriptor\":{\"version\":\"0.1.6\",\"resolved\":\"https://registry.npmmirror.com/is-descriptor/-/is-descriptor-0.1.6.tgz\",\"integrity\":\"sha512-avDYr0SB3DwO9zsMov0gKCESFYqCnE4hq/4z3TdUlukEy5t9C0YRq7HLrsN52NAcqXKaepeCD0n+B0arnVG3Hg==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-accessor-descriptor\":\"^0.1.6\",\"is-data-descriptor\":\"^0.1.4\",\"kind-of\":\"^5.0.0\"},\"dependencies\":{\"kind-of\":{\"version\":\"5.1.0\",\"resolved\":\"https://registry.npmmirror.com/kind-of/-/kind-of-5.1.0.tgz\",\"integrity\":\"sha512-NGEErnH6F2vUuXDh+OlbcKW7/wOcfdRHaZ7VWtqCztfHri/++YKmP51OdWeGPuqCOba6kk2OTe5d02VmTB80Pw==\",\"dev\":true,\"optional\":true}}},\"is-dotfile\":{\"version\":\"1.0.3\",\"resolved\":\"https://registry.npmmirror.com/is-dotfile/-/is-dotfile-1.0.3.tgz\",\"integrity\":\"sha512-9YclgOGtN/f8zx0Pr4FQYMdibBiTaH3sn52vjYip4ZSf6C4/6RfTEZ+MR4GvKhCxdPh21Bg42/WL55f6KSnKpg==\",\"dev\":true,\"optional\":true},\"is-equal-shallow\":{\"version\":\"0.1.3\",\"resolved\":\"https://registry.npmmirror.com/is-equal-shallow/-/is-equal-shallow-0.1.3.tgz\",\"integrity\":\"sha512-0EygVC5qPvIyb+gSz7zdD5/AAoS6Qrx1e//6N4yv4oNm30kqvdmG66oZFWVlQHUWe5OjP08FuTw2IdT0EOTcYA==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-primitive\":\"^2.0.0\"}},\"is-extendable\":{\"version\":\"0.1.1\",\"resolved\":\"https://registry.npmmirror.com/is-extendable/-/is-extendable-0.1.1.tgz\",\"integrity\":\"sha512-5BMULNob1vgFX6EjQw5izWDxrecWK9AM72rugNr0TFldMOi0fj6Jk+zeKIt0xGj4cEfQIJth4w3OKWOJ4f+AFw==\",\"dev\":true,\"optional\":true},\"is-extglob\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/is-extglob/-/is-extglob-1.0.0.tgz\",\"integrity\":\"sha512-7Q+VbVafe6x2T+Tu6NcOf6sRklazEPmBoB3IWk3WdGZM2iGUwU/Oe3Wtq5lSEkDTTlpp8yx+5t4pzO/i9Ty1ww==\",\"dev\":true,\"optional\":true},\"is-finite\":{\"version\":\"1.1.0\",\"resolved\":\"https://registry.npmmirror.com/is-finite/-/is-finite-1.1.0.tgz\",\"integrity\":\"sha512-cdyMtqX/BOqqNBBiKlIVkytNHm49MtMlYyn1zxzvJKWmFMlGzm+ry5BBfYyeY9YmNKbRSo/o7OX9w9ale0wg3w==\",\"dev\":true},\"is-glob\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmmirror.com/is-glob/-/is-glob-2.0.1.tgz\",\"integrity\":\"sha512-a1dBeB19NXsf/E0+FHqkagizel/LQw2DjSQpvQrj3zT+jYPpaUCryPnrQajXKFLCMuf4I6FhRpaGtw4lPrG6Eg==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-extglob\":\"^1.0.0\"}},\"is-number\":{\"version\":\"2.1.0\",\"resolved\":\"https://registry.npmmirror.com/is-number/-/is-number-2.1.0.tgz\",\"integrity\":\"sha512-QUzH43Gfb9+5yckcrSA0VBDwEtDUchrk4F6tfJZQuNzDJbEDB9cZNzSfXGQ1jqmdDY/kl41lUOWM9syA8z8jlg==\",\"dev\":true,\"optional\":true,\"requires\":{\"kind-of\":\"^3.0.2\"}},\"is-plain-object\":{\"version\":\"2.0.4\",\"resolved\":\"https://registry.npmmirror.com/is-plain-object/-/is-plain-object-2.0.4.tgz\",\"integrity\":\"sha512-h5PpgXkWitc38BBMYawTYMWJHFZJVnBquFE57xFpjB8pJFiF6gZ+bU+WyI/yqXiFR5mdLsgYNaPe8uao6Uv9Og==\",\"dev\":true,\"optional\":true,\"requires\":{\"isobject\":\"^3.0.1\"},\"dependencies\":{\"isobject\":{\"version\":\"3.0.1\",\"resolved\":\"https://registry.npmmirror.com/isobject/-/isobject-3.0.1.tgz\",\"integrity\":\"sha512-WhB9zCku7EGTj/HQQRz5aUQEUeoQZH2bWcltRErOpymJ4boYE6wL9Tbr23krRPSZ+C5zqNSrSw+Cc7sZZ4b7vg==\",\"dev\":true,\"optional\":true}}},\"is-posix-bracket\":{\"version\":\"0.1.1\",\"resolved\":\"https://registry.npmmirror.com/is-posix-bracket/-/is-posix-bracket-0.1.1.tgz\",\"integrity\":\"sha512-Yu68oeXJ7LeWNmZ3Zov/xg/oDBnBK2RNxwYY1ilNJX+tKKZqgPK+qOn/Gs9jEu66KDY9Netf5XLKNGzas/vPfQ==\",\"dev\":true,\"optional\":true},\"is-primitive\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmmirror.com/is-primitive/-/is-primitive-2.0.0.tgz\",\"integrity\":\"sha512-N3w1tFaRfk3UrPfqeRyD+GYDASU3W5VinKhlORy8EWVf/sIdDL9GAcew85XmktCfH+ngG7SRXEVDoO18WMdB/Q==\",\"dev\":true,\"optional\":true},\"is-windows\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/is-windows/-/is-windows-1.0.2.tgz\",\"integrity\":\"sha512-eXK1UInq2bPmjyX6e3VHIzMLobc4J94i4AWn+Hpq3OU5KkrRC96OAcR3PRJ/pGu6m8TRnBHP9dkXQVsT/COVIA==\",\"dev\":true,\"optional\":true},\"isarray\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/isarray/-/isarray-1.0.0.tgz\",\"integrity\":\"sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==\",\"dev\":true,\"optional\":true},\"isobject\":{\"version\":\"2.1.0\",\"resolved\":\"https://registry.npmmirror.com/isobject/-/isobject-2.1.0.tgz\",\"integrity\":\"sha512-+OUdGJlgjOBZDfxnDjYYG6zp487z0JGNQq3cYQYg5f5hKR+syHMsaztzGeml/4kGG55CSpKSpWTY+jYGgsHLgA==\",\"dev\":true,\"optional\":true,\"requires\":{\"isarray\":\"1.0.0\"}},\"js-tokens\":{\"version\":\"3.0.2\",\"resolved\":\"https://registry.npmmirror.com/js-tokens/-/js-tokens-3.0.2.tgz\",\"integrity\":\"sha512-RjTcuD4xjtthQkaWH7dFlH85L+QaVtSoOyGdZ3g6HFhS9dFNDfLyqgm2NFe2X6cQpeFmt0452FJjFG5UameExg==\",\"dev\":true},\"jsesc\":{\"version\":\"1.3.0\",\"resolved\":\"https://registry.npmmirror.com/jsesc/-/jsesc-1.3.0.tgz\",\"integrity\":\"sha512-Mke0DA0QjUWuJlhsE0ZPPhYiJkRap642SmI/4ztCFaUs6V2AiH1sfecc+57NgaryfAA2VR3v6O+CSjC1jZJKOA==\",\"dev\":true},\"json5\":{\"version\":\"0.5.1\",\"resolved\":\"https://registry.npmmirror.com/json5/-/json5-0.5.1.tgz\",\"integrity\":\"sha512-4xrs1aW+6N5DalkqSVA8fxh458CXvR99WU8WLKmq4v8eWAL86Xo3BVqyd3SkA9wEVjCMqyvvRRkshAdOnBp5rw==\",\"dev\":true},\"kind-of\":{\"version\":\"3.2.2\",\"resolved\":\"https://registry.npmmirror.com/kind-of/-/kind-of-3.2.2.tgz\",\"integrity\":\"sha512-NOW9QQXMoZGg/oqnVNoNTTIFEIid1627WCffUBJEdMxYApq7mNE7CpzucIPc+ZQg25Phej7IJSmX3hO+oblOtQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-buffer\":\"^1.1.5\"}},\"lodash\":{\"version\":\"4.17.21\",\"resolved\":\"https://registry.npmmirror.com/lodash/-/lodash-4.17.21.tgz\",\"integrity\":\"sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==\",\"dev\":true},\"loose-envify\":{\"version\":\"1.4.0\",\"resolved\":\"https://registry.npmmirror.com/loose-envify/-/loose-envify-1.4.0.tgz\",\"integrity\":\"sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==\",\"dev\":true,\"requires\":{\"js-tokens\":\"^3.0.0 || ^4.0.0\"}},\"map-cache\":{\"version\":\"0.2.2\",\"resolved\":\"https://registry.npmmirror.com/map-cache/-/map-cache-0.2.2.tgz\",\"integrity\":\"sha512-8y/eV9QQZCiyn1SprXSrCmqJN0yNRATe+PO8ztwqrvrbdRLA3eYJF0yaR0YayLWkMbsQSKWS9N2gPcGEc4UsZg==\",\"dev\":true,\"optional\":true},\"map-visit\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/map-visit/-/map-visit-1.0.0.tgz\",\"integrity\":\"sha512-4y7uGv8bd2WdM9vpQsiQNo41Ln1NvhvDRuVt0k2JZQ+ezN2uaQes7lZeZ+QQUHOLQAtDaBJ+7wCbi+ab/KFs+w==\",\"dev\":true,\"optional\":true,\"requires\":{\"object-visit\":\"^1.0.0\"}},\"math-random\":{\"version\":\"1.0.4\",\"resolved\":\"https://registry.npmmirror.com/math-random/-/math-random-1.0.4.tgz\",\"integrity\":\"sha512-rUxjysqif/BZQH2yhd5Aaq7vXMSx9NdEsQcyA07uEzIvxgI7zIr33gGsh+RU0/XjmQpCW7RsVof1vlkvQVCK5A==\",\"dev\":true,\"optional\":true},\"micromatch\":{\"version\":\"2.3.11\",\"resolved\":\"https://registry.npmmirror.com/micromatch/-/micromatch-2.3.11.tgz\",\"integrity\":\"sha512-LnU2XFEk9xxSJ6rfgAry/ty5qwUTyHYOBU0g4R6tIw5ljwgGIBmiKhRWLw5NpMOnrgUNcDJ4WMp8rl3sYVHLNA==\",\"dev\":true,\"optional\":true,\"requires\":{\"arr-diff\":\"^2.0.0\",\"array-unique\":\"^0.2.1\",\"braces\":\"^1.8.2\",\"expand-brackets\":\"^0.1.4\",\"extglob\":\"^0.3.1\",\"filename-regex\":\"^2.0.0\",\"is-extglob\":\"^1.0.0\",\"is-glob\":\"^2.0.1\",\"kind-of\":\"^3.0.2\",\"normalize-path\":\"^2.0.1\",\"object.omit\":\"^2.0.0\",\"parse-glob\":\"^3.0.4\",\"regex-cache\":\"^0.4.2\"}},\"minimatch\":{\"version\":\"3.1.2\",\"resolved\":\"https://registry.npmmirror.com/minimatch/-/minimatch-3.1.2.tgz\",\"integrity\":\"sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==\",\"dev\":true,\"requires\":{\"brace-expansion\":\"^1.1.7\"}},\"minimist\":{\"version\":\"1.2.8\",\"resolved\":\"https://registry.npmmirror.com/minimist/-/minimist-1.2.8.tgz\",\"integrity\":\"sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==\",\"dev\":true},\"mixin-deep\":{\"version\":\"1.3.2\",\"resolved\":\"https://registry.npmmirror.com/mixin-deep/-/mixin-deep-1.3.2.tgz\",\"integrity\":\"sha512-WRoDn//mXBiJ1H40rqa3vH0toePwSsGb45iInWlTySa+Uu4k3tYUSxa2v1KqAiLtvlrSzaExqS1gtk96A9zvEA==\",\"dev\":true,\"optional\":true,\"requires\":{\"for-in\":\"^1.0.2\",\"is-extendable\":\"^1.0.1\"},\"dependencies\":{\"is-extendable\":{\"version\":\"1.0.1\",\"resolved\":\"https://registry.npmmirror.com/is-extendable/-/is-extendable-1.0.1.tgz\",\"integrity\":\"sha512-arnXMxT1hhoKo9k1LZdmlNyJdDDfy2v0fXjFlmok4+i8ul/6WlbVge9bhM74OpNPQPMGUToDtz+KXa1PneJxOA==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-plain-object\":\"^2.0.4\"}}}},\"mkdirp\":{\"version\":\"0.5.6\",\"resolved\":\"https://registry.npmmirror.com/mkdirp/-/mkdirp-0.5.6.tgz\",\"integrity\":\"sha512-FP+p8RB8OWpF3YZBCrP5gtADmtXApB5AMLn+vdyA+PyxCjrCs00mjyUozssO33cwDeT3wNGdLxJ5M//YqtHAJw==\",\"dev\":true,\"requires\":{\"minimist\":\"^1.2.6\"}},\"ms\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmmirror.com/ms/-/ms-2.0.0.tgz\",\"integrity\":\"sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==\",\"dev\":true},\"nan\":{\"version\":\"2.17.0\",\"resolved\":\"https://registry.npmmirror.com/nan/-/nan-2.17.0.tgz\",\"integrity\":\"sha512-2ZTgtl0nJsO0KQCjEpxcIr5D+Yv90plTitZt9JBfQvVJDS5seMl3FOvsh3+9CoYWXf/1l5OaZzzF6nDm4cagaQ==\",\"dev\":true,\"optional\":true},\"nanomatch\":{\"version\":\"1.2.13\",\"resolved\":\"https://registry.npmmirror.com/nanomatch/-/nanomatch-1.2.13.tgz\",\"integrity\":\"sha512-fpoe2T0RbHwBTBUOftAfBPaDEi06ufaUai0mE6Yn1kacc3SnTErfb/h+X94VXzI64rKFHYImXSvdwGGCmwOqCA==\",\"dev\":true,\"optional\":true,\"requires\":{\"arr-diff\":\"^4.0.0\",\"array-unique\":\"^0.3.2\",\"define-property\":\"^2.0.2\",\"extend-shallow\":\"^3.0.2\",\"fragment-cache\":\"^0.2.1\",\"is-windows\":\"^1.0.2\",\"kind-of\":\"^6.0.2\",\"object.pick\":\"^1.3.0\",\"regex-not\":\"^1.0.0\",\"snapdragon\":\"^0.8.1\",\"to-regex\":\"^3.0.1\"},\"dependencies\":{\"arr-diff\":{\"version\":\"4.0.0\",\"resolved\":\"https://registry.npmmirror.com/arr-diff/-/arr-diff-4.0.0.tgz\",\"integrity\":\"sha512-YVIQ82gZPGBebQV/a8dar4AitzCQs0jjXwMPZllpXMaGjXPYVUawSxQrRsjhjupyVxEvbHgUmIhKVlND+j02kA==\",\"dev\":true,\"optional\":true},\"array-unique\":{\"version\":\"0.3.2\",\"resolved\":\"https://registry.npmmirror.com/array-unique/-/array-unique-0.3.2.tgz\",\"integrity\":\"sha512-SleRWjh9JUud2wH1hPs9rZBZ33H6T9HOiL0uwGnGx9FpE6wKGyfWugmbkEOIs6qWrZhg0LWeLziLrEwQJhs5mQ==\",\"dev\":true,\"optional\":true},\"kind-of\":{\"version\":\"6.0.3\",\"resolved\":\"https://registry.npmmirror.com/kind-of/-/kind-of-6.0.3.tgz\",\"integrity\":\"sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==\",\"dev\":true,\"optional\":true}}},\"nodemon\":{\"version\":\"2.0.22\",\"resolved\":\"https://registry.npmmirror.com/nodemon/-/nodemon-2.0.22.tgz\",\"integrity\":\"sha512-B8YqaKMmyuCO7BowF1Z1/mkPqLk6cs/l63Ojtd6otKjMx47Dq1utxfRxcavH1I7VSaL8n5BUaoutadnsX3AAVQ==\",\"dev\":true,\"requires\":{\"chokidar\":\"^3.5.2\",\"debug\":\"^3.2.7\",\"ignore-by-default\":\"^1.0.1\",\"minimatch\":\"^3.1.2\",\"pstree.remy\":\"^1.1.8\",\"semver\":\"^5.7.1\",\"simple-update-notifier\":\"^1.0.7\",\"supports-color\":\"^5.5.0\",\"touch\":\"^3.1.0\",\"undefsafe\":\"^2.0.5\"},\"dependencies\":{\"anymatch\":{\"version\":\"3.1.3\",\"resolved\":\"https://registry.npmmirror.com/anymatch/-/anymatch-3.1.3.tgz\",\"integrity\":\"sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==\",\"dev\":true,\"requires\":{\"normalize-path\":\"^3.0.0\",\"picomatch\":\"^2.0.4\"}},\"binary-extensions\":{\"version\":\"2.2.0\",\"resolved\":\"https://registry.npmmirror.com/binary-extensions/-/binary-extensions-2.2.0.tgz\",\"integrity\":\"sha512-jDctJ/IVQbZoJykoeHbhXpOlNBqGNcwXJKJog42E5HDPUwQTSdjCHdihjj0DlnheQ7blbT6dHOafNAiS8ooQKA==\",\"dev\":true},\"braces\":{\"version\":\"3.0.2\",\"resolved\":\"https://registry.npmmirror.com/braces/-/braces-3.0.2.tgz\",\"integrity\":\"sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==\",\"dev\":true,\"requires\":{\"fill-range\":\"^7.0.1\"}},\"chokidar\":{\"version\":\"3.5.3\",\"resolved\":\"https://registry.npmmirror.com/chokidar/-/chokidar-3.5.3.tgz\",\"integrity\":\"sha512-Dr3sfKRP6oTcjf2JmUmFJfeVMvXBdegxB0iVQ5eb2V10uFJUCAS8OByZdVAyVb8xXNz3GjjTgj9kLWsZTqE6kw==\",\"dev\":true,\"requires\":{\"anymatch\":\"~3.1.2\",\"braces\":\"~3.0.2\",\"fsevents\":\"~2.3.2\",\"glob-parent\":\"~5.1.2\",\"is-binary-path\":\"~2.1.0\",\"is-glob\":\"~4.0.1\",\"normalize-path\":\"~3.0.0\",\"readdirp\":\"~3.6.0\"}},\"debug\":{\"version\":\"3.2.7\",\"resolved\":\"https://registry.npmmirror.com/debug/-/debug-3.2.7.tgz\",\"integrity\":\"sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==\",\"dev\":true,\"requires\":{\"ms\":\"^2.1.1\"}},\"fill-range\":{\"version\":\"7.0.1\",\"resolved\":\"https://registry.npmmirror.com/fill-range/-/fill-range-7.0.1.tgz\",\"integrity\":\"sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==\",\"dev\":true,\"requires\":{\"to-regex-range\":\"^5.0.1\"}},\"fsevents\":{\"version\":\"2.3.2\",\"resolved\":\"https://registry.npmmirror.com/fsevents/-/fsevents-2.3.2.tgz\",\"integrity\":\"sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==\",\"dev\":true,\"optional\":true},\"glob-parent\":{\"version\":\"5.1.2\",\"resolved\":\"https://registry.npmmirror.com/glob-parent/-/glob-parent-5.1.2.tgz\",\"integrity\":\"sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==\",\"dev\":true,\"requires\":{\"is-glob\":\"^4.0.1\"}},\"is-binary-path\":{\"version\":\"2.1.0\",\"resolved\":\"https://registry.npmmirror.com/is-binary-path/-/is-binary-path-2.1.0.tgz\",\"integrity\":\"sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==\",\"dev\":true,\"requires\":{\"binary-extensions\":\"^2.0.0\"}},\"is-extglob\":{\"version\":\"2.1.1\",\"resolved\":\"https://registry.npmmirror.com/is-extglob/-/is-extglob-2.1.1.tgz\",\"integrity\":\"sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==\",\"dev\":true},\"is-glob\":{\"version\":\"4.0.3\",\"resolved\":\"https://registry.npmmirror.com/is-glob/-/is-glob-4.0.3.tgz\",\"integrity\":\"sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==\",\"dev\":true,\"requires\":{\"is-extglob\":\"^2.1.1\"}},\"is-number\":{\"version\":\"7.0.0\",\"resolved\":\"https://registry.npmmirror.com/is-number/-/is-number-7.0.0.tgz\",\"integrity\":\"sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==\",\"dev\":true},\"ms\":{\"version\":\"2.1.3\",\"resolved\":\"https://registry.npmmirror.com/ms/-/ms-2.1.3.tgz\",\"integrity\":\"sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==\",\"dev\":true},\"normalize-path\":{\"version\":\"3.0.0\",\"resolved\":\"https://registry.npmmirror.com/normalize-path/-/normalize-path-3.0.0.tgz\",\"integrity\":\"sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==\",\"dev\":true},\"readdirp\":{\"version\":\"3.6.0\",\"resolved\":\"https://registry.npmmirror.com/readdirp/-/readdirp-3.6.0.tgz\",\"integrity\":\"sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==\",\"dev\":true,\"requires\":{\"picomatch\":\"^2.2.1\"}},\"supports-color\":{\"version\":\"5.5.0\",\"resolved\":\"https://registry.npmmirror.com/supports-color/-/supports-color-5.5.0.tgz\",\"integrity\":\"sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==\",\"dev\":true,\"requires\":{\"has-flag\":\"^3.0.0\"}},\"to-regex-range\":{\"version\":\"5.0.1\",\"resolved\":\"https://registry.npmmirror.com/to-regex-range/-/to-regex-range-5.0.1.tgz\",\"integrity\":\"sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==\",\"dev\":true,\"requires\":{\"is-number\":\"^7.0.0\"}}}},\"nopt\":{\"version\":\"1.0.10\",\"resolved\":\"https://registry.npmmirror.com/nopt/-/nopt-1.0.10.tgz\",\"integrity\":\"sha512-NWmpvLSqUrgrAC9HCuxEvb+PSloHpqVu+FqcO4eeF2h5qYRhA7ev6KvelyQAKtegUbC6RypJnlEOhd8vloNKYg==\",\"dev\":true,\"requires\":{\"abbrev\":\"1\"}},\"normalize-path\":{\"version\":\"2.1.1\",\"resolved\":\"https://registry.npmmirror.com/normalize-path/-/normalize-path-2.1.1.tgz\",\"integrity\":\"sha512-3pKJwH184Xo/lnH6oyP1q2pMd7HcypqqmRs91/6/i2CGtWwIKGCkOOMTm/zXbgTEWHw1uNpNi/igc3ePOYHb6w==\",\"dev\":true,\"optional\":true,\"requires\":{\"remove-trailing-separator\":\"^1.0.1\"}},\"object-assign\":{\"version\":\"4.1.1\",\"resolved\":\"https://registry.npmmirror.com/object-assign/-/object-assign-4.1.1.tgz\",\"integrity\":\"sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==\",\"dev\":true},\"object-copy\":{\"version\":\"0.1.0\",\"resolved\":\"https://registry.npmmirror.com/object-copy/-/object-copy-0.1.0.tgz\",\"integrity\":\"sha512-79LYn6VAb63zgtmAteVOWo9Vdj71ZVBy3Pbse+VqxDpEP83XuujMrGqHIwAXJ5I/aM0zU7dIyIAhifVTPrNItQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"copy-descriptor\":\"^0.1.0\",\"define-property\":\"^0.2.5\",\"kind-of\":\"^3.0.3\"},\"dependencies\":{\"define-property\":{\"version\":\"0.2.5\",\"resolved\":\"https://registry.npmmirror.com/define-property/-/define-property-0.2.5.tgz\",\"integrity\":\"sha512-Rr7ADjQZenceVOAKop6ALkkRAmH1A4Gx9hV/7ZujPUN2rkATqFO0JZLZInbAjpZYoJ1gUx8MRMQVkYemcbMSTA==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-descriptor\":\"^0.1.0\"}}}},\"object-visit\":{\"version\":\"1.0.1\",\"resolved\":\"https://registry.npmmirror.com/object-visit/-/object-visit-1.0.1.tgz\",\"integrity\":\"sha512-GBaMwwAVK9qbQN3Scdo0OyvgPW7l3lnaVMj84uTOZlswkX0KpF6fyDBJhtTthf7pymztoN36/KEr1DyhF96zEA==\",\"dev\":true,\"optional\":true,\"requires\":{\"isobject\":\"^3.0.0\"},\"dependencies\":{\"isobject\":{\"version\":\"3.0.1\",\"resolved\":\"https://registry.npmmirror.com/isobject/-/isobject-3.0.1.tgz\",\"integrity\":\"sha512-WhB9zCku7EGTj/HQQRz5aUQEUeoQZH2bWcltRErOpymJ4boYE6wL9Tbr23krRPSZ+C5zqNSrSw+Cc7sZZ4b7vg==\",\"dev\":true,\"optional\":true}}},\"object.omit\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmmirror.com/object.omit/-/object.omit-2.0.1.tgz\",\"integrity\":\"sha512-UiAM5mhmIuKLsOvrL+B0U2d1hXHF3bFYWIuH1LMpuV2EJEHG1Ntz06PgLEHjm6VFd87NpH8rastvPoyv6UW2fA==\",\"dev\":true,\"optional\":true,\"requires\":{\"for-own\":\"^0.1.4\",\"is-extendable\":\"^0.1.1\"}},\"object.pick\":{\"version\":\"1.3.0\",\"resolved\":\"https://registry.npmmirror.com/object.pick/-/object.pick-1.3.0.tgz\",\"integrity\":\"sha512-tqa/UMy/CCoYmj+H5qc07qvSL9dqcs/WZENZ1JbtWBlATP+iVOe778gE6MSijnyCnORzDuX6hU+LA4SZ09YjFQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"isobject\":\"^3.0.1\"},\"dependencies\":{\"isobject\":{\"version\":\"3.0.1\",\"resolved\":\"https://registry.npmmirror.com/isobject/-/isobject-3.0.1.tgz\",\"integrity\":\"sha512-WhB9zCku7EGTj/HQQRz5aUQEUeoQZH2bWcltRErOpymJ4boYE6wL9Tbr23krRPSZ+C5zqNSrSw+Cc7sZZ4b7vg==\",\"dev\":true,\"optional\":true}}},\"once\":{\"version\":\"1.4.0\",\"resolved\":\"https://registry.npmmirror.com/once/-/once-1.4.0.tgz\",\"integrity\":\"sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==\",\"dev\":true,\"requires\":{\"wrappy\":\"1\"}},\"os-homedir\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/os-homedir/-/os-homedir-1.0.2.tgz\",\"integrity\":\"sha512-B5JU3cabzk8c67mRRd3ECmROafjYMXbuzlwtqdM8IbS8ktlTix8aFGb2bAGKrSRIlnfKwovGUUr72JUPyOb6kQ==\",\"dev\":true},\"os-tmpdir\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/os-tmpdir/-/os-tmpdir-1.0.2.tgz\",\"integrity\":\"sha512-D2FR03Vir7FIu45XBY20mTb+/ZSWB00sjU9jdQXt83gDrI4Ztz5Fs7/yy74g2N5SVQY4xY1qDr4rNddwYRVX0g==\",\"dev\":true},\"output-file-sync\":{\"version\":\"1.1.2\",\"resolved\":\"https://registry.npmmirror.com/output-file-sync/-/output-file-sync-1.1.2.tgz\",\"integrity\":\"sha512-uQLlclru4xpCi+tfs80l3QF24KL81X57ELNMy7W/dox+JTtxUf1bLyQ8968fFCmSqqbokjW0kn+WBIlO+rSkNg==\",\"dev\":true,\"requires\":{\"graceful-fs\":\"^4.1.4\",\"mkdirp\":\"^0.5.1\",\"object-assign\":\"^4.1.0\"}},\"parse-glob\":{\"version\":\"3.0.4\",\"resolved\":\"https://registry.npmmirror.com/parse-glob/-/parse-glob-3.0.4.tgz\",\"integrity\":\"sha512-FC5TeK0AwXzq3tUBFtH74naWkPQCEWs4K+xMxWZBlKDWu0bVHXGZa+KKqxKidd7xwhdZ19ZNuF2uO1M/r196HA==\",\"dev\":true,\"optional\":true,\"requires\":{\"glob-base\":\"^0.3.0\",\"is-dotfile\":\"^1.0.0\",\"is-extglob\":\"^1.0.0\",\"is-glob\":\"^2.0.0\"}},\"pascalcase\":{\"version\":\"0.1.1\",\"resolved\":\"https://registry.npmmirror.com/pascalcase/-/pascalcase-0.1.1.tgz\",\"integrity\":\"sha512-XHXfu/yOQRy9vYOtUDVMN60OEJjW013GoObG1o+xwQTpB9eYJX/BjXMsdW13ZDPruFhYYn0AG22w0xgQMwl3Nw==\",\"dev\":true,\"optional\":true},\"path-is-absolute\":{\"version\":\"1.0.1\",\"resolved\":\"https://registry.npmmirror.com/path-is-absolute/-/path-is-absolute-1.0.1.tgz\",\"integrity\":\"sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==\",\"dev\":true},\"picomatch\":{\"version\":\"2.3.1\",\"resolved\":\"https://registry.npmmirror.com/picomatch/-/picomatch-2.3.1.tgz\",\"integrity\":\"sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==\",\"dev\":true},\"posix-character-classes\":{\"version\":\"0.1.1\",\"resolved\":\"https://registry.npmmirror.com/posix-character-classes/-/posix-character-classes-0.1.1.tgz\",\"integrity\":\"sha512-xTgYBc3fuo7Yt7JbiuFxSYGToMoz8fLoE6TC9Wx1P/u+LfeThMOAqmuyECnlBaaJb+u1m9hHiXUEtwW4OzfUJg==\",\"dev\":true,\"optional\":true},\"preserve\":{\"version\":\"0.2.0\",\"resolved\":\"https://registry.npmmirror.com/preserve/-/preserve-0.2.0.tgz\",\"integrity\":\"sha512-s/46sYeylUfHNjI+sA/78FAHlmIuKqI9wNnzEOGehAlUUYeObv5C2mOinXBjyUyWmJ2SfcS2/ydApH4hTF4WXQ==\",\"dev\":true,\"optional\":true},\"private\":{\"version\":\"0.1.8\",\"resolved\":\"https://registry.npmmirror.com/private/-/private-0.1.8.tgz\",\"integrity\":\"sha512-VvivMrbvd2nKkiG38qjULzlc+4Vx4wm/whI9pQD35YrARNnhxeiRktSOhSukRLFNlzg6Br/cJPet5J/u19r/mg==\",\"dev\":true},\"process-nextick-args\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmmirror.com/process-nextick-args/-/process-nextick-args-2.0.1.tgz\",\"integrity\":\"sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==\",\"dev\":true,\"optional\":true},\"pstree.remy\":{\"version\":\"1.1.8\",\"resolved\":\"https://registry.npmmirror.com/pstree.remy/-/pstree.remy-1.1.8.tgz\",\"integrity\":\"sha512-77DZwxQmxKnu3aR542U+X8FypNzbfJ+C5XQDk3uWjWxn6151aIMGthWYRXTqT1E5oJvg+ljaa2OJi+VfvCOQ8w==\",\"dev\":true},\"randomatic\":{\"version\":\"3.1.1\",\"resolved\":\"https://registry.npmmirror.com/randomatic/-/randomatic-3.1.1.tgz\",\"integrity\":\"sha512-TuDE5KxZ0J461RVjrJZCJc+J+zCkTb1MbH9AQUq68sMhOMcy9jLcb3BrZKgp9q9Ncltdg4QVqWrH02W2EFFVYw==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-number\":\"^4.0.0\",\"kind-of\":\"^6.0.0\",\"math-random\":\"^1.0.1\"},\"dependencies\":{\"is-number\":{\"version\":\"4.0.0\",\"resolved\":\"https://registry.npmmirror.com/is-number/-/is-number-4.0.0.tgz\",\"integrity\":\"sha512-rSklcAIlf1OmFdyAqbnWTLVelsQ58uvZ66S/ZyawjWqIviTWCjg2PzVGw8WUA+nNuPTqb4wgA+NszrJ+08LlgQ==\",\"dev\":true,\"optional\":true},\"kind-of\":{\"version\":\"6.0.3\",\"resolved\":\"https://registry.npmmirror.com/kind-of/-/kind-of-6.0.3.tgz\",\"integrity\":\"sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==\",\"dev\":true,\"optional\":true}}},\"readable-stream\":{\"version\":\"2.3.8\",\"resolved\":\"https://registry.npmmirror.com/readable-stream/-/readable-stream-2.3.8.tgz\",\"integrity\":\"sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==\",\"dev\":true,\"optional\":true,\"requires\":{\"core-util-is\":\"~1.0.0\",\"inherits\":\"~2.0.3\",\"isarray\":\"~1.0.0\",\"process-nextick-args\":\"~2.0.0\",\"safe-buffer\":\"~5.1.1\",\"string_decoder\":\"~1.1.1\",\"util-deprecate\":\"~1.0.1\"}},\"readdirp\":{\"version\":\"2.2.1\",\"resolved\":\"https://registry.npmmirror.com/readdirp/-/readdirp-2.2.1.tgz\",\"integrity\":\"sha512-1JU/8q+VgFZyxwrJ+SVIOsh+KywWGpds3NTqikiKpDMZWScmAYyKIgqkO+ARvNWJfXeXR1zxz7aHF4u4CyH6vQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"graceful-fs\":\"^4.1.11\",\"micromatch\":\"^3.1.10\",\"readable-stream\":\"^2.0.2\"},\"dependencies\":{\"arr-diff\":{\"version\":\"4.0.0\",\"resolved\":\"https://registry.npmmirror.com/arr-diff/-/arr-diff-4.0.0.tgz\",\"integrity\":\"sha512-YVIQ82gZPGBebQV/a8dar4AitzCQs0jjXwMPZllpXMaGjXPYVUawSxQrRsjhjupyVxEvbHgUmIhKVlND+j02kA==\",\"dev\":true,\"optional\":true},\"array-unique\":{\"version\":\"0.3.2\",\"resolved\":\"https://registry.npmmirror.com/array-unique/-/array-unique-0.3.2.tgz\",\"integrity\":\"sha512-SleRWjh9JUud2wH1hPs9rZBZ33H6T9HOiL0uwGnGx9FpE6wKGyfWugmbkEOIs6qWrZhg0LWeLziLrEwQJhs5mQ==\",\"dev\":true,\"optional\":true},\"braces\":{\"version\":\"2.3.2\",\"resolved\":\"https://registry.npmmirror.com/braces/-/braces-2.3.2.tgz\",\"integrity\":\"sha512-aNdbnj9P8PjdXU4ybaWLK2IF3jc/EoDYbC7AazW6to3TRsfXxscC9UXOB5iDiEQrkyIbWp2SLQda4+QAa7nc3w==\",\"dev\":true,\"optional\":true,\"requires\":{\"arr-flatten\":\"^1.1.0\",\"array-unique\":\"^0.3.2\",\"extend-shallow\":\"^2.0.1\",\"fill-range\":\"^4.0.0\",\"isobject\":\"^3.0.1\",\"repeat-element\":\"^1.1.2\",\"snapdragon\":\"^0.8.1\",\"snapdragon-node\":\"^2.0.1\",\"split-string\":\"^3.0.2\",\"to-regex\":\"^3.0.1\"},\"dependencies\":{\"extend-shallow\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmmirror.com/extend-shallow/-/extend-shallow-2.0.1.tgz\",\"integrity\":\"sha512-zCnTtlxNoAiDc3gqY2aYAWFx7XWWiasuF2K8Me5WbN8otHKTUKBwjPtNpRs/rbUZm7KxWAaNj7P1a/p52GbVug==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-extendable\":\"^0.1.0\"}}}},\"expand-brackets\":{\"version\":\"2.1.4\",\"resolved\":\"https://registry.npmmirror.com/expand-brackets/-/expand-brackets-2.1.4.tgz\",\"integrity\":\"sha512-w/ozOKR9Obk3qoWeY/WDi6MFta9AoMR+zud60mdnbniMcBxRuFJyDt2LdX/14A1UABeqk+Uk+LDfUpvoGKppZA==\",\"dev\":true,\"optional\":true,\"requires\":{\"debug\":\"^2.3.3\",\"define-property\":\"^0.2.5\",\"extend-shallow\":\"^2.0.1\",\"posix-character-classes\":\"^0.1.0\",\"regex-not\":\"^1.0.0\",\"snapdragon\":\"^0.8.1\",\"to-regex\":\"^3.0.1\"},\"dependencies\":{\"define-property\":{\"version\":\"0.2.5\",\"resolved\":\"https://registry.npmmirror.com/define-property/-/define-property-0.2.5.tgz\",\"integrity\":\"sha512-Rr7ADjQZenceVOAKop6ALkkRAmH1A4Gx9hV/7ZujPUN2rkATqFO0JZLZInbAjpZYoJ1gUx8MRMQVkYemcbMSTA==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-descriptor\":\"^0.1.0\"}},\"extend-shallow\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmmirror.com/extend-shallow/-/extend-shallow-2.0.1.tgz\",\"integrity\":\"sha512-zCnTtlxNoAiDc3gqY2aYAWFx7XWWiasuF2K8Me5WbN8otHKTUKBwjPtNpRs/rbUZm7KxWAaNj7P1a/p52GbVug==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-extendable\":\"^0.1.0\"}},\"is-accessor-descriptor\":{\"version\":\"0.1.6\",\"resolved\":\"https://registry.npmmirror.com/is-accessor-descriptor/-/is-accessor-descriptor-0.1.6.tgz\",\"integrity\":\"sha512-e1BM1qnDbMRG3ll2U9dSK0UMHuWOs3pY3AtcFsmvwPtKL3MML/Q86i+GilLfvqEs4GW+ExB91tQ3Ig9noDIZ+A==\",\"dev\":true,\"optional\":true,\"requires\":{\"kind-of\":\"^3.0.2\"},\"dependencies\":{\"kind-of\":{\"version\":\"3.2.2\",\"resolved\":\"https://registry.npmmirror.com/kind-of/-/kind-of-3.2.2.tgz\",\"integrity\":\"sha512-NOW9QQXMoZGg/oqnVNoNTTIFEIid1627WCffUBJEdMxYApq7mNE7CpzucIPc+ZQg25Phej7IJSmX3hO+oblOtQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-buffer\":\"^1.1.5\"}}}},\"is-data-descriptor\":{\"version\":\"0.1.4\",\"resolved\":\"https://registry.npmmirror.com/is-data-descriptor/-/is-data-descriptor-0.1.4.tgz\",\"integrity\":\"sha512-+w9D5ulSoBNlmw9OHn3U2v51SyoCd0he+bB3xMl62oijhrspxowjU+AIcDY0N3iEJbUEkB15IlMASQsxYigvXg==\",\"dev\":true,\"optional\":true,\"requires\":{\"kind-of\":\"^3.0.2\"},\"dependencies\":{\"kind-of\":{\"version\":\"3.2.2\",\"resolved\":\"https://registry.npmmirror.com/kind-of/-/kind-of-3.2.2.tgz\",\"integrity\":\"sha512-NOW9QQXMoZGg/oqnVNoNTTIFEIid1627WCffUBJEdMxYApq7mNE7CpzucIPc+ZQg25Phej7IJSmX3hO+oblOtQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-buffer\":\"^1.1.5\"}}}},\"is-descriptor\":{\"version\":\"0.1.6\",\"resolved\":\"https://registry.npmmirror.com/is-descriptor/-/is-descriptor-0.1.6.tgz\",\"integrity\":\"sha512-avDYr0SB3DwO9zsMov0gKCESFYqCnE4hq/4z3TdUlukEy5t9C0YRq7HLrsN52NAcqXKaepeCD0n+B0arnVG3Hg==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-accessor-descriptor\":\"^0.1.6\",\"is-data-descriptor\":\"^0.1.4\",\"kind-of\":\"^5.0.0\"}},\"kind-of\":{\"version\":\"5.1.0\",\"resolved\":\"https://registry.npmmirror.com/kind-of/-/kind-of-5.1.0.tgz\",\"integrity\":\"sha512-NGEErnH6F2vUuXDh+OlbcKW7/wOcfdRHaZ7VWtqCztfHri/++YKmP51OdWeGPuqCOba6kk2OTe5d02VmTB80Pw==\",\"dev\":true,\"optional\":true}}},\"extglob\":{\"version\":\"2.0.4\",\"resolved\":\"https://registry.npmmirror.com/extglob/-/extglob-2.0.4.tgz\",\"integrity\":\"sha512-Nmb6QXkELsuBr24CJSkilo6UHHgbekK5UiZgfE6UHD3Eb27YC6oD+bhcT+tJ6cl8dmsgdQxnWlcry8ksBIBLpw==\",\"dev\":true,\"optional\":true,\"requires\":{\"array-unique\":\"^0.3.2\",\"define-property\":\"^1.0.0\",\"expand-brackets\":\"^2.1.4\",\"extend-shallow\":\"^2.0.1\",\"fragment-cache\":\"^0.2.1\",\"regex-not\":\"^1.0.0\",\"snapdragon\":\"^0.8.1\",\"to-regex\":\"^3.0.1\"},\"dependencies\":{\"define-property\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/define-property/-/define-property-1.0.0.tgz\",\"integrity\":\"sha512-cZTYKFWspt9jZsMscWo8sc/5lbPC9Q0N5nBLgb+Yd915iL3udB1uFgS3B8YCx66UVHq018DAVFoee7x+gxggeA==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-descriptor\":\"^1.0.0\"}},\"extend-shallow\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmmirror.com/extend-shallow/-/extend-shallow-2.0.1.tgz\",\"integrity\":\"sha512-zCnTtlxNoAiDc3gqY2aYAWFx7XWWiasuF2K8Me5WbN8otHKTUKBwjPtNpRs/rbUZm7KxWAaNj7P1a/p52GbVug==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-extendable\":\"^0.1.0\"}}}},\"fill-range\":{\"version\":\"4.0.0\",\"resolved\":\"https://registry.npmmirror.com/fill-range/-/fill-range-4.0.0.tgz\",\"integrity\":\"sha512-VcpLTWqWDiTerugjj8e3+esbg+skS3M9e54UuR3iCeIDMXCLTsAH8hTSzDQU/X6/6t3eYkOKoZSef2PlU6U1XQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"extend-shallow\":\"^2.0.1\",\"is-number\":\"^3.0.0\",\"repeat-string\":\"^1.6.1\",\"to-regex-range\":\"^2.1.0\"},\"dependencies\":{\"extend-shallow\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmmirror.com/extend-shallow/-/extend-shallow-2.0.1.tgz\",\"integrity\":\"sha512-zCnTtlxNoAiDc3gqY2aYAWFx7XWWiasuF2K8Me5WbN8otHKTUKBwjPtNpRs/rbUZm7KxWAaNj7P1a/p52GbVug==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-extendable\":\"^0.1.0\"}}}},\"is-accessor-descriptor\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/is-accessor-descriptor/-/is-accessor-descriptor-1.0.0.tgz\",\"integrity\":\"sha512-m5hnHTkcVsPfqx3AKlyttIPb7J+XykHvJP2B9bZDjlhLIoEq4XoK64Vg7boZlVWYK6LUY94dYPEE7Lh0ZkZKcQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"kind-of\":\"^6.0.0\"}},\"is-data-descriptor\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/is-data-descriptor/-/is-data-descriptor-1.0.0.tgz\",\"integrity\":\"sha512-jbRXy1FmtAoCjQkVmIVYwuuqDFUbaOeDjmed1tOGPrsMhtJA4rD9tkgA0F1qJ3gRFRXcHYVkdeaP50Q5rE/jLQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"kind-of\":\"^6.0.0\"}},\"is-descriptor\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/is-descriptor/-/is-descriptor-1.0.2.tgz\",\"integrity\":\"sha512-2eis5WqQGV7peooDyLmNEPUrps9+SXX5c9pL3xEB+4e9HnGuDa7mB7kHxHw4CbqS9k1T2hOH3miL8n8WtiYVtg==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-accessor-descriptor\":\"^1.0.0\",\"is-data-descriptor\":\"^1.0.0\",\"kind-of\":\"^6.0.2\"}},\"is-number\":{\"version\":\"3.0.0\",\"resolved\":\"https://registry.npmmirror.com/is-number/-/is-number-3.0.0.tgz\",\"integrity\":\"sha512-4cboCqIpliH+mAvFNegjZQ4kgKc3ZUhQVr3HvWbSh5q3WH2v82ct+T2Y1hdU5Gdtorx/cLifQjqCbL7bpznLTg==\",\"dev\":true,\"optional\":true,\"requires\":{\"kind-of\":\"^3.0.2\"},\"dependencies\":{\"kind-of\":{\"version\":\"3.2.2\",\"resolved\":\"https://registry.npmmirror.com/kind-of/-/kind-of-3.2.2.tgz\",\"integrity\":\"sha512-NOW9QQXMoZGg/oqnVNoNTTIFEIid1627WCffUBJEdMxYApq7mNE7CpzucIPc+ZQg25Phej7IJSmX3hO+oblOtQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-buffer\":\"^1.1.5\"}}}},\"isobject\":{\"version\":\"3.0.1\",\"resolved\":\"https://registry.npmmirror.com/isobject/-/isobject-3.0.1.tgz\",\"integrity\":\"sha512-WhB9zCku7EGTj/HQQRz5aUQEUeoQZH2bWcltRErOpymJ4boYE6wL9Tbr23krRPSZ+C5zqNSrSw+Cc7sZZ4b7vg==\",\"dev\":true,\"optional\":true},\"kind-of\":{\"version\":\"6.0.3\",\"resolved\":\"https://registry.npmmirror.com/kind-of/-/kind-of-6.0.3.tgz\",\"integrity\":\"sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==\",\"dev\":true,\"optional\":true},\"micromatch\":{\"version\":\"3.1.10\",\"resolved\":\"https://registry.npmmirror.com/micromatch/-/micromatch-3.1.10.tgz\",\"integrity\":\"sha512-MWikgl9n9M3w+bpsY3He8L+w9eF9338xRl8IAO5viDizwSzziFEyUzo2xrrloB64ADbTf8uA8vRqqttDTOmccg==\",\"dev\":true,\"optional\":true,\"requires\":{\"arr-diff\":\"^4.0.0\",\"array-unique\":\"^0.3.2\",\"braces\":\"^2.3.1\",\"define-property\":\"^2.0.2\",\"extend-shallow\":\"^3.0.2\",\"extglob\":\"^2.0.4\",\"fragment-cache\":\"^0.2.1\",\"kind-of\":\"^6.0.2\",\"nanomatch\":\"^1.2.9\",\"object.pick\":\"^1.3.0\",\"regex-not\":\"^1.0.0\",\"snapdragon\":\"^0.8.1\",\"to-regex\":\"^3.0.2\"}}}},\"regenerate\":{\"version\":\"1.4.2\",\"resolved\":\"https://registry.npmmirror.com/regenerate/-/regenerate-1.4.2.tgz\",\"integrity\":\"sha512-zrceR/XhGYU/d/opr2EKO7aRHUeiBI8qjtfHqADTwZd6Szfy16la6kqD0MIUs5z5hx6AaKa+PixpPrR289+I0A==\",\"dev\":true},\"regenerator-runtime\":{\"version\":\"0.11.1\",\"resolved\":\"https://registry.npmmirror.com/regenerator-runtime/-/regenerator-runtime-0.11.1.tgz\",\"integrity\":\"sha512-MguG95oij0fC3QV3URf4V2SDYGJhJnJGqvIIgdECeODCT98wSWDAJ94SSuVpYQUoTcGUIL6L4yNB7j1DFFHSBg==\",\"dev\":true},\"regenerator-transform\":{\"version\":\"0.10.1\",\"resolved\":\"https://registry.npmmirror.com/regenerator-transform/-/regenerator-transform-0.10.1.tgz\",\"integrity\":\"sha512-PJepbvDbuK1xgIgnau7Y90cwaAmO/LCLMI2mPvaXq2heGMR3aWW5/BQvYrhJ8jgmQjXewXvBjzfqKcVOmhjZ6Q==\",\"dev\":true,\"requires\":{\"babel-runtime\":\"^6.18.0\",\"babel-types\":\"^6.19.0\",\"private\":\"^0.1.6\"}},\"regex-cache\":{\"version\":\"0.4.4\",\"resolved\":\"https://registry.npmmirror.com/regex-cache/-/regex-cache-0.4.4.tgz\",\"integrity\":\"sha512-nVIZwtCjkC9YgvWkpM55B5rBhBYRZhAaJbgcFYXXsHnbZ9UZI9nnVWYZpBlCqv9ho2eZryPnWrZGsOdPwVWXWQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-equal-shallow\":\"^0.1.3\"}},\"regex-not\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/regex-not/-/regex-not-1.0.2.tgz\",\"integrity\":\"sha512-J6SDjUgDxQj5NusnOtdFxDwN/+HWykR8GELwctJ7mdqhcyy1xEc4SRFHUXvxTp661YaVKAjfRLZ9cCqS6tn32A==\",\"dev\":true,\"optional\":true,\"requires\":{\"extend-shallow\":\"^3.0.2\",\"safe-regex\":\"^1.1.0\"}},\"regexpu-core\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmmirror.com/regexpu-core/-/regexpu-core-2.0.0.tgz\",\"integrity\":\"sha512-tJ9+S4oKjxY8IZ9jmjnp/mtytu1u3iyIQAfmI51IKWH6bFf7XR1ybtaO6j7INhZKXOTYADk7V5qxaqLkmNxiZQ==\",\"dev\":true,\"requires\":{\"regenerate\":\"^1.2.1\",\"regjsgen\":\"^0.2.0\",\"regjsparser\":\"^0.1.4\"}},\"regjsgen\":{\"version\":\"0.2.0\",\"resolved\":\"https://registry.npmmirror.com/regjsgen/-/regjsgen-0.2.0.tgz\",\"integrity\":\"sha512-x+Y3yA24uF68m5GA+tBjbGYo64xXVJpbToBaWCoSNSc1hdk6dfctaRWrNFTVJZIIhL5GxW8zwjoixbnifnK59g==\",\"dev\":true},\"regjsparser\":{\"version\":\"0.1.5\",\"resolved\":\"https://registry.npmmirror.com/regjsparser/-/regjsparser-0.1.5.tgz\",\"integrity\":\"sha512-jlQ9gYLfk2p3V5Ag5fYhA7fv7OHzd1KUH0PRP46xc3TgwjwgROIW572AfYg/X9kaNq/LJnu6oJcFRXlIrGoTRw==\",\"dev\":true,\"requires\":{\"jsesc\":\"~0.5.0\"},\"dependencies\":{\"jsesc\":{\"version\":\"0.5.0\",\"resolved\":\"https://registry.npmmirror.com/jsesc/-/jsesc-0.5.0.tgz\",\"integrity\":\"sha512-uZz5UnB7u4T9LvwmFqXii7pZSouaRPorGs5who1Ip7VO0wxanFvBL7GkM6dTHlgX+jhBApRetaWpnDabOeTcnA==\",\"dev\":true}}},\"remove-trailing-separator\":{\"version\":\"1.1.0\",\"resolved\":\"https://registry.npmmirror.com/remove-trailing-separator/-/remove-trailing-separator-1.1.0.tgz\",\"integrity\":\"sha512-/hS+Y0u3aOfIETiaiirUFwDBDzmXPvO+jAfKTitUngIPzdKc6Z0LoFjM/CK5PL4C+eKwHohlHAb6H0VFfmmUsw==\",\"dev\":true,\"optional\":true},\"repeat-element\":{\"version\":\"1.1.4\",\"resolved\":\"https://registry.npmmirror.com/repeat-element/-/repeat-element-1.1.4.tgz\",\"integrity\":\"sha512-LFiNfRcSu7KK3evMyYOuCzv3L10TW7yC1G2/+StMjK8Y6Vqd2MG7r/Qjw4ghtuCOjFvlnms/iMmLqpvW/ES/WQ==\",\"dev\":true,\"optional\":true},\"repeat-string\":{\"version\":\"1.6.1\",\"resolved\":\"https://registry.npmmirror.com/repeat-string/-/repeat-string-1.6.1.tgz\",\"integrity\":\"sha512-PV0dzCYDNfRi1jCDbJzpW7jNNDRuCOG/jI5ctQcGKt/clZD+YcPS3yIlWuTJMmESC8aevCFmWJy5wjAFgNqN6w==\",\"dev\":true,\"optional\":true},\"repeating\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmmirror.com/repeating/-/repeating-2.0.1.tgz\",\"integrity\":\"sha512-ZqtSMuVybkISo2OWvqvm7iHSWngvdaW3IpsT9/uP8v4gMi591LY6h35wdOfvQdWCKFWZWm2Y1Opp4kV7vQKT6A==\",\"dev\":true,\"requires\":{\"is-finite\":\"^1.0.0\"}},\"resolve-url\":{\"version\":\"0.2.1\",\"resolved\":\"https://registry.npmmirror.com/resolve-url/-/resolve-url-0.2.1.tgz\",\"integrity\":\"sha512-ZuF55hVUQaaczgOIwqWzkEcEidmlD/xl44x1UZnhOXcYuFN2S6+rcxpG+C1N3So0wvNI3DmJICUFfu2SxhBmvg==\",\"dev\":true,\"optional\":true},\"ret\":{\"version\":\"0.1.15\",\"resolved\":\"https://registry.npmmirror.com/ret/-/ret-0.1.15.tgz\",\"integrity\":\"sha512-TTlYpa+OL+vMMNG24xSlQGEJ3B/RzEfUlLct7b5G/ytav+wPrplCpVMFuwzXbkecJrb6IYo1iFb0S9v37754mg==\",\"dev\":true,\"optional\":true},\"safe-buffer\":{\"version\":\"5.1.2\",\"resolved\":\"https://registry.npmmirror.com/safe-buffer/-/safe-buffer-5.1.2.tgz\",\"integrity\":\"sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==\",\"dev\":true,\"optional\":true},\"safe-regex\":{\"version\":\"1.1.0\",\"resolved\":\"https://registry.npmmirror.com/safe-regex/-/safe-regex-1.1.0.tgz\",\"integrity\":\"sha512-aJXcif4xnaNUzvUuC5gcb46oTS7zvg4jpMTnuqtrEPlR3vFr4pxtdTwaF1Qs3Enjn9HK+ZlwQui+a7z0SywIzg==\",\"dev\":true,\"optional\":true,\"requires\":{\"ret\":\"~0.1.10\"}},\"semver\":{\"version\":\"5.7.1\",\"resolved\":\"https://registry.npmmirror.com/semver/-/semver-5.7.1.tgz\",\"integrity\":\"sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ==\",\"dev\":true},\"set-value\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmmirror.com/set-value/-/set-value-2.0.1.tgz\",\"integrity\":\"sha512-JxHc1weCN68wRY0fhCoXpyK55m/XPHafOmK4UWD7m2CI14GMcFypt4w/0+NV5f/ZMby2F6S2wwA7fgynh9gWSw==\",\"dev\":true,\"optional\":true,\"requires\":{\"extend-shallow\":\"^2.0.1\",\"is-extendable\":\"^0.1.1\",\"is-plain-object\":\"^2.0.3\",\"split-string\":\"^3.0.1\"},\"dependencies\":{\"extend-shallow\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmmirror.com/extend-shallow/-/extend-shallow-2.0.1.tgz\",\"integrity\":\"sha512-zCnTtlxNoAiDc3gqY2aYAWFx7XWWiasuF2K8Me5WbN8otHKTUKBwjPtNpRs/rbUZm7KxWAaNj7P1a/p52GbVug==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-extendable\":\"^0.1.0\"}}}},\"simple-update-notifier\":{\"version\":\"1.1.0\",\"resolved\":\"https://registry.npmmirror.com/simple-update-notifier/-/simple-update-notifier-1.1.0.tgz\",\"integrity\":\"sha512-VpsrsJSUcJEseSbMHkrsrAVSdvVS5I96Qo1QAQ4FxQ9wXFcB+pjj7FB7/us9+GcgfW4ziHtYMc1J0PLczb55mg==\",\"dev\":true,\"requires\":{\"semver\":\"~7.0.0\"},\"dependencies\":{\"semver\":{\"version\":\"7.0.0\",\"resolved\":\"https://registry.npmmirror.com/semver/-/semver-7.0.0.tgz\",\"integrity\":\"sha512-+GB6zVA9LWh6zovYQLALHwv5rb2PHGlJi3lfiqIHxR0uuwCgefcOJc59v9fv1w8GbStwxuuqqAjI9NMAOOgq1A==\",\"dev\":true}}},\"slash\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/slash/-/slash-1.0.0.tgz\",\"integrity\":\"sha512-3TYDR7xWt4dIqV2JauJr+EJeW356RXijHeUlO+8djJ+uBXPn8/2dpzBc8yQhh583sVvc9CvFAeQVgijsH+PNNg==\",\"dev\":true},\"snapdragon\":{\"version\":\"0.8.2\",\"resolved\":\"https://registry.npmmirror.com/snapdragon/-/snapdragon-0.8.2.tgz\",\"integrity\":\"sha512-FtyOnWN/wCHTVXOMwvSv26d+ko5vWlIDD6zoUJ7LW8vh+ZBC8QdljveRP+crNrtBwioEUWy/4dMtbBjA4ioNlg==\",\"dev\":true,\"optional\":true,\"requires\":{\"base\":\"^0.11.1\",\"debug\":\"^2.2.0\",\"define-property\":\"^0.2.5\",\"extend-shallow\":\"^2.0.1\",\"map-cache\":\"^0.2.2\",\"source-map\":\"^0.5.6\",\"source-map-resolve\":\"^0.5.0\",\"use\":\"^3.1.0\"},\"dependencies\":{\"define-property\":{\"version\":\"0.2.5\",\"resolved\":\"https://registry.npmmirror.com/define-property/-/define-property-0.2.5.tgz\",\"integrity\":\"sha512-Rr7ADjQZenceVOAKop6ALkkRAmH1A4Gx9hV/7ZujPUN2rkATqFO0JZLZInbAjpZYoJ1gUx8MRMQVkYemcbMSTA==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-descriptor\":\"^0.1.0\"}},\"extend-shallow\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmmirror.com/extend-shallow/-/extend-shallow-2.0.1.tgz\",\"integrity\":\"sha512-zCnTtlxNoAiDc3gqY2aYAWFx7XWWiasuF2K8Me5WbN8otHKTUKBwjPtNpRs/rbUZm7KxWAaNj7P1a/p52GbVug==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-extendable\":\"^0.1.0\"}}}},\"snapdragon-node\":{\"version\":\"2.1.1\",\"resolved\":\"https://registry.npmmirror.com/snapdragon-node/-/snapdragon-node-2.1.1.tgz\",\"integrity\":\"sha512-O27l4xaMYt/RSQ5TR3vpWCAB5Kb/czIcqUFOM/C4fYcLnbZUc1PkjTAMjof2pBWaSTwOUd6qUHcFGVGj7aIwnw==\",\"dev\":true,\"optional\":true,\"requires\":{\"define-property\":\"^1.0.0\",\"isobject\":\"^3.0.0\",\"snapdragon-util\":\"^3.0.1\"},\"dependencies\":{\"define-property\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/define-property/-/define-property-1.0.0.tgz\",\"integrity\":\"sha512-cZTYKFWspt9jZsMscWo8sc/5lbPC9Q0N5nBLgb+Yd915iL3udB1uFgS3B8YCx66UVHq018DAVFoee7x+gxggeA==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-descriptor\":\"^1.0.0\"}},\"is-accessor-descriptor\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/is-accessor-descriptor/-/is-accessor-descriptor-1.0.0.tgz\",\"integrity\":\"sha512-m5hnHTkcVsPfqx3AKlyttIPb7J+XykHvJP2B9bZDjlhLIoEq4XoK64Vg7boZlVWYK6LUY94dYPEE7Lh0ZkZKcQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"kind-of\":\"^6.0.0\"}},\"is-data-descriptor\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/is-data-descriptor/-/is-data-descriptor-1.0.0.tgz\",\"integrity\":\"sha512-jbRXy1FmtAoCjQkVmIVYwuuqDFUbaOeDjmed1tOGPrsMhtJA4rD9tkgA0F1qJ3gRFRXcHYVkdeaP50Q5rE/jLQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"kind-of\":\"^6.0.0\"}},\"is-descriptor\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/is-descriptor/-/is-descriptor-1.0.2.tgz\",\"integrity\":\"sha512-2eis5WqQGV7peooDyLmNEPUrps9+SXX5c9pL3xEB+4e9HnGuDa7mB7kHxHw4CbqS9k1T2hOH3miL8n8WtiYVtg==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-accessor-descriptor\":\"^1.0.0\",\"is-data-descriptor\":\"^1.0.0\",\"kind-of\":\"^6.0.2\"}},\"isobject\":{\"version\":\"3.0.1\",\"resolved\":\"https://registry.npmmirror.com/isobject/-/isobject-3.0.1.tgz\",\"integrity\":\"sha512-WhB9zCku7EGTj/HQQRz5aUQEUeoQZH2bWcltRErOpymJ4boYE6wL9Tbr23krRPSZ+C5zqNSrSw+Cc7sZZ4b7vg==\",\"dev\":true,\"optional\":true},\"kind-of\":{\"version\":\"6.0.3\",\"resolved\":\"https://registry.npmmirror.com/kind-of/-/kind-of-6.0.3.tgz\",\"integrity\":\"sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==\",\"dev\":true,\"optional\":true}}},\"snapdragon-util\":{\"version\":\"3.0.1\",\"resolved\":\"https://registry.npmmirror.com/snapdragon-util/-/snapdragon-util-3.0.1.tgz\",\"integrity\":\"sha512-mbKkMdQKsjX4BAL4bRYTj21edOf8cN7XHdYUJEe+Zn99hVEYcMvKPct1IqNe7+AZPirn8BCDOQBHQZknqmKlZQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"kind-of\":\"^3.2.0\"}},\"source-map\":{\"version\":\"0.5.7\",\"resolved\":\"https://registry.npmmirror.com/source-map/-/source-map-0.5.7.tgz\",\"integrity\":\"sha512-LbrmJOMUSdEVxIKvdcJzQC+nQhe8FUZQTXQy6+I75skNgn3OoQ0DZA8YnFa7gp8tqtL3KPf1kmo0R5DoApeSGQ==\",\"dev\":true},\"source-map-resolve\":{\"version\":\"0.5.3\",\"resolved\":\"https://registry.npmmirror.com/source-map-resolve/-/source-map-resolve-0.5.3.tgz\",\"integrity\":\"sha512-Htz+RnsXWk5+P2slx5Jh3Q66vhQj1Cllm0zvnaY98+NFx+Dv2CF/f5O/t8x+KaNdrdIAsruNzoh/KpialbqAnw==\",\"dev\":true,\"optional\":true,\"requires\":{\"atob\":\"^2.1.2\",\"decode-uri-component\":\"^0.2.0\",\"resolve-url\":\"^0.2.1\",\"source-map-url\":\"^0.4.0\",\"urix\":\"^0.1.0\"}},\"source-map-support\":{\"version\":\"0.4.18\",\"resolved\":\"https://registry.npmmirror.com/source-map-support/-/source-map-support-0.4.18.tgz\",\"integrity\":\"sha512-try0/JqxPLF9nOjvSta7tVondkP5dwgyLDjVoyMDlmjugT2lRZ1OfsrYTkCd2hkDnJTKRbO/Rl3orm8vlsUzbA==\",\"dev\":true,\"requires\":{\"source-map\":\"^0.5.6\"}},\"source-map-url\":{\"version\":\"0.4.1\",\"resolved\":\"https://registry.npmmirror.com/source-map-url/-/source-map-url-0.4.1.tgz\",\"integrity\":\"sha512-cPiFOTLUKvJFIg4SKVScy4ilPPW6rFgMgfuZJPNoDuMs3nC1HbMUycBoJw77xFIp6z1UJQJOfx6C9GMH80DiTw==\",\"dev\":true,\"optional\":true},\"split-string\":{\"version\":\"3.1.0\",\"resolved\":\"https://registry.npmmirror.com/split-string/-/split-string-3.1.0.tgz\",\"integrity\":\"sha512-NzNVhJDYpwceVVii8/Hu6DKfD2G+NrQHlS/V/qgv763EYudVwEcMQNxd2lh+0VrUByXN/oJkl5grOhYWvQUYiw==\",\"dev\":true,\"optional\":true,\"requires\":{\"extend-shallow\":\"^3.0.0\"}},\"static-extend\":{\"version\":\"0.1.2\",\"resolved\":\"https://registry.npmmirror.com/static-extend/-/static-extend-0.1.2.tgz\",\"integrity\":\"sha512-72E9+uLc27Mt718pMHt9VMNiAL4LMsmDbBva8mxWUCkT07fSzEGMYUCk0XWY6lp0j6RBAG4cJ3mWuZv2OE3s0g==\",\"dev\":true,\"optional\":true,\"requires\":{\"define-property\":\"^0.2.5\",\"object-copy\":\"^0.1.0\"},\"dependencies\":{\"define-property\":{\"version\":\"0.2.5\",\"resolved\":\"https://registry.npmmirror.com/define-property/-/define-property-0.2.5.tgz\",\"integrity\":\"sha512-Rr7ADjQZenceVOAKop6ALkkRAmH1A4Gx9hV/7ZujPUN2rkATqFO0JZLZInbAjpZYoJ1gUx8MRMQVkYemcbMSTA==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-descriptor\":\"^0.1.0\"}}}},\"string_decoder\":{\"version\":\"1.1.1\",\"resolved\":\"https://registry.npmmirror.com/string_decoder/-/string_decoder-1.1.1.tgz\",\"integrity\":\"sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==\",\"dev\":true,\"optional\":true,\"requires\":{\"safe-buffer\":\"~5.1.0\"}},\"strip-ansi\":{\"version\":\"3.0.1\",\"resolved\":\"https://registry.npmmirror.com/strip-ansi/-/strip-ansi-3.0.1.tgz\",\"integrity\":\"sha512-VhumSSbBqDTP8p2ZLKj40UjBCV4+v8bUSEpUb4KjRgWk9pbqGF4REFj6KEagidb2f/M6AzC0EmFyDNGaw9OCzg==\",\"dev\":true,\"requires\":{\"ansi-regex\":\"^2.0.0\"}},\"supports-color\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmmirror.com/supports-color/-/supports-color-2.0.0.tgz\",\"integrity\":\"sha512-KKNVtd6pCYgPIKU4cp2733HWYCpplQhddZLBUryaAHou723x+FRzQ5Df824Fj+IyyuiQTRoub4SnIFfIcrp70g==\",\"dev\":true},\"to-fast-properties\":{\"version\":\"1.0.3\",\"resolved\":\"https://registry.npmmirror.com/to-fast-properties/-/to-fast-properties-1.0.3.tgz\",\"integrity\":\"sha512-lxrWP8ejsq+7E3nNjwYmUBMAgjMTZoTI+sdBOpvNyijeDLa29LUn9QaoXAHv4+Z578hbmHHJKZknzxVtvo77og==\",\"dev\":true},\"to-object-path\":{\"version\":\"0.3.0\",\"resolved\":\"https://registry.npmmirror.com/to-object-path/-/to-object-path-0.3.0.tgz\",\"integrity\":\"sha512-9mWHdnGRuh3onocaHzukyvCZhzvr6tiflAy/JRFXcJX0TjgfWA9pk9t8CMbzmBE4Jfw58pXbkngtBtqYxzNEyg==\",\"dev\":true,\"optional\":true,\"requires\":{\"kind-of\":\"^3.0.2\"}},\"to-regex\":{\"version\":\"3.0.2\",\"resolved\":\"https://registry.npmmirror.com/to-regex/-/to-regex-3.0.2.tgz\",\"integrity\":\"sha512-FWtleNAtZ/Ki2qtqej2CXTOayOH9bHDQF+Q48VpWyDXjbYxA4Yz8iDB31zXOBUlOHHKidDbqGVrTUvQMPmBGBw==\",\"dev\":true,\"optional\":true,\"requires\":{\"define-property\":\"^2.0.2\",\"extend-shallow\":\"^3.0.2\",\"regex-not\":\"^1.0.2\",\"safe-regex\":\"^1.1.0\"}},\"to-regex-range\":{\"version\":\"2.1.1\",\"resolved\":\"https://registry.npmmirror.com/to-regex-range/-/to-regex-range-2.1.1.tgz\",\"integrity\":\"sha512-ZZWNfCjUokXXDGXFpZehJIkZqq91BcULFq/Pi7M5i4JnxXdhMKAK682z8bCW3o8Hj1wuuzoKcW3DfVzaP6VuNg==\",\"dev\":true,\"optional\":true,\"requires\":{\"is-number\":\"^3.0.0\",\"repeat-string\":\"^1.6.1\"},\"dependencies\":{\"is-number\":{\"version\":\"3.0.0\",\"resolved\":\"https://registry.npmmirror.com/is-number/-/is-number-3.0.0.tgz\",\"integrity\":\"sha512-4cboCqIpliH+mAvFNegjZQ4kgKc3ZUhQVr3HvWbSh5q3WH2v82ct+T2Y1hdU5Gdtorx/cLifQjqCbL7bpznLTg==\",\"dev\":true,\"optional\":true,\"requires\":{\"kind-of\":\"^3.0.2\"}}}},\"touch\":{\"version\":\"3.1.0\",\"resolved\":\"https://registry.npmmirror.com/touch/-/touch-3.1.0.tgz\",\"integrity\":\"sha512-WBx8Uy5TLtOSRtIq+M03/sKDrXCLHxwDcquSP2c43Le03/9serjQBIztjRz6FkJez9D/hleyAXTBGLwwZUw9lA==\",\"dev\":true,\"requires\":{\"nopt\":\"~1.0.10\"}},\"trim-right\":{\"version\":\"1.0.1\",\"resolved\":\"https://registry.npmmirror.com/trim-right/-/trim-right-1.0.1.tgz\",\"integrity\":\"sha512-WZGXGstmCWgeevgTL54hrCuw1dyMQIzWy7ZfqRJfSmJZBwklI15egmQytFP6bPidmw3M8d5yEowl1niq4vmqZw==\",\"dev\":true},\"undefsafe\":{\"version\":\"2.0.5\",\"resolved\":\"https://registry.npmmirror.com/undefsafe/-/undefsafe-2.0.5.tgz\",\"integrity\":\"sha512-WxONCrssBM8TSPRqN5EmsjVrsv4A8X12J4ArBiiayv3DyyG3ZlIg6yysuuSYdZsVz3TKcTg2fd//Ujd4CHV1iA==\",\"dev\":true},\"union-value\":{\"version\":\"1.0.1\",\"resolved\":\"https://registry.npmmirror.com/union-value/-/union-value-1.0.1.tgz\",\"integrity\":\"sha512-tJfXmxMeWYnczCVs7XAEvIV7ieppALdyepWMkHkwciRpZraG/xwT+s2JN8+pr1+8jCRf80FFzvr+MpQeeoF4Xg==\",\"dev\":true,\"optional\":true,\"requires\":{\"arr-union\":\"^3.1.0\",\"get-value\":\"^2.0.6\",\"is-extendable\":\"^0.1.1\",\"set-value\":\"^2.0.1\"}},\"unset-value\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/unset-value/-/unset-value-1.0.0.tgz\",\"integrity\":\"sha512-PcA2tsuGSF9cnySLHTLSh2qrQiJ70mn+r+Glzxv2TWZblxsxCC52BDlZoPCsz7STd9pN7EZetkWZBAvk4cgZdQ==\",\"dev\":true,\"optional\":true,\"requires\":{\"has-value\":\"^0.3.1\",\"isobject\":\"^3.0.0\"},\"dependencies\":{\"has-value\":{\"version\":\"0.3.1\",\"resolved\":\"https://registry.npmmirror.com/has-value/-/has-value-0.3.1.tgz\",\"integrity\":\"sha512-gpG936j8/MzaeID5Yif+577c17TxaDmhuyVgSwtnL/q8UUTySg8Mecb+8Cf1otgLoD7DDH75axp86ER7LFsf3Q==\",\"dev\":true,\"optional\":true,\"requires\":{\"get-value\":\"^2.0.3\",\"has-values\":\"^0.1.4\",\"isobject\":\"^2.0.0\"},\"dependencies\":{\"isobject\":{\"version\":\"2.1.0\",\"resolved\":\"https://registry.npmmirror.com/isobject/-/isobject-2.1.0.tgz\",\"integrity\":\"sha512-+OUdGJlgjOBZDfxnDjYYG6zp487z0JGNQq3cYQYg5f5hKR+syHMsaztzGeml/4kGG55CSpKSpWTY+jYGgsHLgA==\",\"dev\":true,\"optional\":true,\"requires\":{\"isarray\":\"1.0.0\"}}}},\"has-values\":{\"version\":\"0.1.4\",\"resolved\":\"https://registry.npmmirror.com/has-values/-/has-values-0.1.4.tgz\",\"integrity\":\"sha512-J8S0cEdWuQbqD9//tlZxiMuMNmxB8PlEwvYwuxsTmR1G5RXUePEX/SJn7aD0GMLieuZYSwNH0cQuJGwnYunXRQ==\",\"dev\":true,\"optional\":true},\"isobject\":{\"version\":\"3.0.1\",\"resolved\":\"https://registry.npmmirror.com/isobject/-/isobject-3.0.1.tgz\",\"integrity\":\"sha512-WhB9zCku7EGTj/HQQRz5aUQEUeoQZH2bWcltRErOpymJ4boYE6wL9Tbr23krRPSZ+C5zqNSrSw+Cc7sZZ4b7vg==\",\"dev\":true,\"optional\":true}}},\"urix\":{\"version\":\"0.1.0\",\"resolved\":\"https://registry.npmmirror.com/urix/-/urix-0.1.0.tgz\",\"integrity\":\"sha512-Am1ousAhSLBeB9cG/7k7r2R0zj50uDRlZHPGbazid5s9rlF1F/QKYObEKSIunSjIOkJZqwRRLpvewjEkM7pSqg==\",\"dev\":true,\"optional\":true},\"use\":{\"version\":\"3.1.1\",\"resolved\":\"https://registry.npmmirror.com/use/-/use-3.1.1.tgz\",\"integrity\":\"sha512-cwESVXlO3url9YWlFW/TA9cshCEhtu7IKJ/p5soJ/gGpj7vbvFrAY/eIioQ6Dw23KjZhYgiIo8HOs1nQ2vr/oQ==\",\"dev\":true,\"optional\":true},\"user-home\":{\"version\":\"1.1.1\",\"resolved\":\"https://registry.npmmirror.com/user-home/-/user-home-1.1.1.tgz\",\"integrity\":\"sha512-aggiKfEEubv3UwRNqTzLInZpAOmKzwdHqEBmW/hBA/mt99eg+b4VrX6i+IRLxU8+WJYfa33rGwRseg4eElUgsQ==\",\"dev\":true},\"util-deprecate\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/util-deprecate/-/util-deprecate-1.0.2.tgz\",\"integrity\":\"sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==\",\"dev\":true,\"optional\":true},\"v8flags\":{\"version\":\"2.1.1\",\"resolved\":\"https://registry.npmmirror.com/v8flags/-/v8flags-2.1.1.tgz\",\"integrity\":\"sha512-SKfhk/LlaXzvtowJabLZwD4K6SGRYeoxA7KJeISlUMAB/NT4CBkZjMq3WceX2Ckm4llwqYVo8TICgsDYCBU2tA==\",\"dev\":true,\"requires\":{\"user-home\":\"^1.1.1\"}},\"wrappy\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/wrappy/-/wrappy-1.0.2.tgz\",\"integrity\":\"sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==\",\"dev\":true}}}"},{"title":"","date":"2024-06-11T08:52:17.389Z","updated":"2024-06-11T08:52:17.389Z","comments":false,"path":"demo/2023面试准备/demo/node.js/package-lock.json","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/node.js/package-lock.json","excerpt":"","text":"{\"name\":\"node.js\",\"version\":\"1.0.0\",\"lockfileVersion\":1,\"requires\":true,\"dependencies\":{\"@ampproject/remapping\":{\"version\":\"2.2.1\",\"resolved\":\"https://registry.npmmirror.com/@ampproject/remapping/-/remapping-2.2.1.tgz\",\"integrity\":\"sha512-lFMjJTrFL3j7L9yBxwYfCq2k6qqwHyzuUl/XBnif78PWTJYyL/dfowQHWE3sp6U6ZzqWiiIZnpTMO96zhkjwtg==\",\"dev\":true,\"requires\":{\"@jridgewell/gen-mapping\":\"^0.3.0\",\"@jridgewell/trace-mapping\":\"^0.3.9\"}},\"@babel/code-frame\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/code-frame/-/code-frame-7.22.5.tgz\",\"integrity\":\"sha512-Xmwn266vad+6DAqEB2A6V/CcZVp62BbwVmcOJc2RPuwih1kw02TjQvWVWlcKGbBPd+8/0V5DEkOcizRGYsspYQ==\",\"dev\":true,\"requires\":{\"@babel/highlight\":\"^7.22.5\"}},\"@babel/compat-data\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/compat-data/-/compat-data-7.22.5.tgz\",\"integrity\":\"sha512-4Jc/YuIaYqKnDDz892kPIledykKg12Aw1PYX5i/TY28anJtacvM1Rrr8wbieB9GfEJwlzqT0hUEao0CxEebiDA==\",\"dev\":true},\"@babel/core\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/core/-/core-7.22.5.tgz\",\"integrity\":\"sha512-SBuTAjg91A3eKOvD+bPEz3LlhHZRNu1nFOVts9lzDJTXshHTjII0BAtDS3Y2DAkdZdDKWVZGVwkDfc4Clxn1dg==\",\"dev\":true,\"requires\":{\"@ampproject/remapping\":\"^2.2.0\",\"@babel/code-frame\":\"^7.22.5\",\"@babel/generator\":\"^7.22.5\",\"@babel/helper-compilation-targets\":\"^7.22.5\",\"@babel/helper-module-transforms\":\"^7.22.5\",\"@babel/helpers\":\"^7.22.5\",\"@babel/parser\":\"^7.22.5\",\"@babel/template\":\"^7.22.5\",\"@babel/traverse\":\"^7.22.5\",\"@babel/types\":\"^7.22.5\",\"convert-source-map\":\"^1.7.0\",\"debug\":\"^4.1.0\",\"gensync\":\"^1.0.0-beta.2\",\"json5\":\"^2.2.2\",\"semver\":\"^6.3.0\"}},\"@babel/generator\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/generator/-/generator-7.22.5.tgz\",\"integrity\":\"sha512-+lcUbnTRhd0jOewtFSedLyiPsD5tswKkbgcezOqqWFUVNEwoUTlpPOBmvhG7OXWLR4jMdv0czPGH5XbflnD1EA==\",\"dev\":true,\"requires\":{\"@babel/types\":\"^7.22.5\",\"@jridgewell/gen-mapping\":\"^0.3.2\",\"@jridgewell/trace-mapping\":\"^0.3.17\",\"jsesc\":\"^2.5.1\"}},\"@babel/helper-annotate-as-pure\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/helper-annotate-as-pure/-/helper-annotate-as-pure-7.22.5.tgz\",\"integrity\":\"sha512-LvBTxu8bQSQkcyKOU+a1btnNFQ1dMAd0R6PyW3arXes06F6QLWLIrd681bxRPIXlrMGR3XYnW9JyML7dP3qgxg==\",\"dev\":true,\"requires\":{\"@babel/types\":\"^7.22.5\"}},\"@babel/helper-builder-binary-assignment-operator-visitor\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/helper-builder-binary-assignment-operator-visitor/-/helper-builder-binary-assignment-operator-visitor-7.22.5.tgz\",\"integrity\":\"sha512-m1EP3lVOPptR+2DwD125gziZNcmoNSHGmJROKoy87loWUQyJaVXDgpmruWqDARZSmtYQ+Dl25okU8+qhVzuykw==\",\"dev\":true,\"requires\":{\"@babel/types\":\"^7.22.5\"}},\"@babel/helper-compilation-targets\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/helper-compilation-targets/-/helper-compilation-targets-7.22.5.tgz\",\"integrity\":\"sha512-Ji+ywpHeuqxB8WDxraCiqR0xfhYjiDE/e6k7FuIaANnoOFxAHskHChz4vA1mJC9Lbm01s1PVAGhQY4FUKSkGZw==\",\"dev\":true,\"requires\":{\"@babel/compat-data\":\"^7.22.5\",\"@babel/helper-validator-option\":\"^7.22.5\",\"browserslist\":\"^4.21.3\",\"lru-cache\":\"^5.1.1\",\"semver\":\"^6.3.0\"}},\"@babel/helper-create-class-features-plugin\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/helper-create-class-features-plugin/-/helper-create-class-features-plugin-7.22.5.tgz\",\"integrity\":\"sha512-xkb58MyOYIslxu3gKmVXmjTtUPvBU4odYzbiIQbWwLKIHCsx6UGZGX6F1IznMFVnDdirseUZopzN+ZRt8Xb33Q==\",\"dev\":true,\"requires\":{\"@babel/helper-annotate-as-pure\":\"^7.22.5\",\"@babel/helper-environment-visitor\":\"^7.22.5\",\"@babel/helper-function-name\":\"^7.22.5\",\"@babel/helper-member-expression-to-functions\":\"^7.22.5\",\"@babel/helper-optimise-call-expression\":\"^7.22.5\",\"@babel/helper-replace-supers\":\"^7.22.5\",\"@babel/helper-skip-transparent-expression-wrappers\":\"^7.22.5\",\"@babel/helper-split-export-declaration\":\"^7.22.5\",\"semver\":\"^6.3.0\"}},\"@babel/helper-create-regexp-features-plugin\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/helper-create-regexp-features-plugin/-/helper-create-regexp-features-plugin-7.22.5.tgz\",\"integrity\":\"sha512-1VpEFOIbMRaXyDeUwUfmTIxExLwQ+zkW+Bh5zXpApA3oQedBx9v/updixWxnx/bZpKw7u8VxWjb/qWpIcmPq8A==\",\"dev\":true,\"requires\":{\"@babel/helper-annotate-as-pure\":\"^7.22.5\",\"regexpu-core\":\"^5.3.1\",\"semver\":\"^6.3.0\"}},\"@babel/helper-define-polyfill-provider\":{\"version\":\"0.4.0\",\"resolved\":\"https://registry.npmmirror.com/@babel/helper-define-polyfill-provider/-/helper-define-polyfill-provider-0.4.0.tgz\",\"integrity\":\"sha512-RnanLx5ETe6aybRi1cO/edaRH+bNYWaryCEmjDDYyNr4wnSzyOp8T0dWipmqVHKEY3AbVKUom50AKSlj1zmKbg==\",\"dev\":true,\"requires\":{\"@babel/helper-compilation-targets\":\"^7.17.7\",\"@babel/helper-plugin-utils\":\"^7.16.7\",\"debug\":\"^4.1.1\",\"lodash.debounce\":\"^4.0.8\",\"resolve\":\"^1.14.2\",\"semver\":\"^6.1.2\"}},\"@babel/helper-environment-visitor\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/helper-environment-visitor/-/helper-environment-visitor-7.22.5.tgz\",\"integrity\":\"sha512-XGmhECfVA/5sAt+H+xpSg0mfrHq6FzNr9Oxh7PSEBBRUb/mL7Kz3NICXb194rCqAEdxkhPT1a88teizAFyvk8Q==\",\"dev\":true},\"@babel/helper-function-name\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/helper-function-name/-/helper-function-name-7.22.5.tgz\",\"integrity\":\"sha512-wtHSq6jMRE3uF2otvfuD3DIvVhOsSNshQl0Qrd7qC9oQJzHvOL4qQXlQn2916+CXGywIjpGuIkoyZRRxHPiNQQ==\",\"dev\":true,\"requires\":{\"@babel/template\":\"^7.22.5\",\"@babel/types\":\"^7.22.5\"}},\"@babel/helper-hoist-variables\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/helper-hoist-variables/-/helper-hoist-variables-7.22.5.tgz\",\"integrity\":\"sha512-wGjk9QZVzvknA6yKIUURb8zY3grXCcOZt+/7Wcy8O2uctxhplmUPkOdlgoNhmdVee2c92JXbf1xpMtVNbfoxRw==\",\"dev\":true,\"requires\":{\"@babel/types\":\"^7.22.5\"}},\"@babel/helper-member-expression-to-functions\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/helper-member-expression-to-functions/-/helper-member-expression-to-functions-7.22.5.tgz\",\"integrity\":\"sha512-aBiH1NKMG0H2cGZqspNvsaBe6wNGjbJjuLy29aU+eDZjSbbN53BaxlpB02xm9v34pLTZ1nIQPFYn2qMZoa5BQQ==\",\"dev\":true,\"requires\":{\"@babel/types\":\"^7.22.5\"}},\"@babel/helper-module-imports\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/helper-module-imports/-/helper-module-imports-7.22.5.tgz\",\"integrity\":\"sha512-8Dl6+HD/cKifutF5qGd/8ZJi84QeAKh+CEe1sBzz8UayBBGg1dAIJrdHOcOM5b2MpzWL2yuotJTtGjETq0qjXg==\",\"dev\":true,\"requires\":{\"@babel/types\":\"^7.22.5\"}},\"@babel/helper-module-transforms\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/helper-module-transforms/-/helper-module-transforms-7.22.5.tgz\",\"integrity\":\"sha512-+hGKDt/Ze8GFExiVHno/2dvG5IdstpzCq0y4Qc9OJ25D4q3pKfiIP/4Vp3/JvhDkLKsDK2api3q3fpIgiIF5bw==\",\"dev\":true,\"requires\":{\"@babel/helper-environment-visitor\":\"^7.22.5\",\"@babel/helper-module-imports\":\"^7.22.5\",\"@babel/helper-simple-access\":\"^7.22.5\",\"@babel/helper-split-export-declaration\":\"^7.22.5\",\"@babel/helper-validator-identifier\":\"^7.22.5\",\"@babel/template\":\"^7.22.5\",\"@babel/traverse\":\"^7.22.5\",\"@babel/types\":\"^7.22.5\"}},\"@babel/helper-optimise-call-expression\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/helper-optimise-call-expression/-/helper-optimise-call-expression-7.22.5.tgz\",\"integrity\":\"sha512-HBwaojN0xFRx4yIvpwGqxiV2tUfl7401jlok564NgB9EHS1y6QT17FmKWm4ztqjeVdXLuC4fSvHc5ePpQjoTbw==\",\"dev\":true,\"requires\":{\"@babel/types\":\"^7.22.5\"}},\"@babel/helper-plugin-utils\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/helper-plugin-utils/-/helper-plugin-utils-7.22.5.tgz\",\"integrity\":\"sha512-uLls06UVKgFG9QD4OeFYLEGteMIAa5kpTPcFL28yuCIIzsf6ZyKZMllKVOCZFhiZ5ptnwX4mtKdWCBE/uT4amg==\",\"dev\":true},\"@babel/helper-remap-async-to-generator\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/helper-remap-async-to-generator/-/helper-remap-async-to-generator-7.22.5.tgz\",\"integrity\":\"sha512-cU0Sq1Rf4Z55fgz7haOakIyM7+x/uCFwXpLPaeRzfoUtAEAuUZjZvFPjL/rk5rW693dIgn2hng1W7xbT7lWT4g==\",\"dev\":true,\"requires\":{\"@babel/helper-annotate-as-pure\":\"^7.22.5\",\"@babel/helper-environment-visitor\":\"^7.22.5\",\"@babel/helper-wrap-function\":\"^7.22.5\",\"@babel/types\":\"^7.22.5\"}},\"@babel/helper-replace-supers\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/helper-replace-supers/-/helper-replace-supers-7.22.5.tgz\",\"integrity\":\"sha512-aLdNM5I3kdI/V9xGNyKSF3X/gTyMUBohTZ+/3QdQKAA9vxIiy12E+8E2HoOP1/DjeqU+g6as35QHJNMDDYpuCg==\",\"dev\":true,\"requires\":{\"@babel/helper-environment-visitor\":\"^7.22.5\",\"@babel/helper-member-expression-to-functions\":\"^7.22.5\",\"@babel/helper-optimise-call-expression\":\"^7.22.5\",\"@babel/template\":\"^7.22.5\",\"@babel/traverse\":\"^7.22.5\",\"@babel/types\":\"^7.22.5\"}},\"@babel/helper-simple-access\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/helper-simple-access/-/helper-simple-access-7.22.5.tgz\",\"integrity\":\"sha512-n0H99E/K+Bika3++WNL17POvo4rKWZ7lZEp1Q+fStVbUi8nxPQEBOlTmCOxW/0JsS56SKKQ+ojAe2pHKJHN35w==\",\"dev\":true,\"requires\":{\"@babel/types\":\"^7.22.5\"}},\"@babel/helper-skip-transparent-expression-wrappers\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/helper-skip-transparent-expression-wrappers/-/helper-skip-transparent-expression-wrappers-7.22.5.tgz\",\"integrity\":\"sha512-tK14r66JZKiC43p8Ki33yLBVJKlQDFoA8GYN67lWCDCqoL6EMMSuM9b+Iff2jHaM/RRFYl7K+iiru7hbRqNx8Q==\",\"dev\":true,\"requires\":{\"@babel/types\":\"^7.22.5\"}},\"@babel/helper-split-export-declaration\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/helper-split-export-declaration/-/helper-split-export-declaration-7.22.5.tgz\",\"integrity\":\"sha512-thqK5QFghPKWLhAV321lxF95yCg2K3Ob5yw+M3VHWfdia0IkPXUtoLH8x/6Fh486QUvzhb8YOWHChTVen2/PoQ==\",\"dev\":true,\"requires\":{\"@babel/types\":\"^7.22.5\"}},\"@babel/helper-string-parser\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/helper-string-parser/-/helper-string-parser-7.22.5.tgz\",\"integrity\":\"sha512-mM4COjgZox8U+JcXQwPijIZLElkgEpO5rsERVDJTc2qfCDfERyob6k5WegS14SX18IIjv+XD+GrqNumY5JRCDw==\",\"dev\":true},\"@babel/helper-validator-identifier\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/helper-validator-identifier/-/helper-validator-identifier-7.22.5.tgz\",\"integrity\":\"sha512-aJXu+6lErq8ltp+JhkJUfk1MTGyuA4v7f3pA+BJ5HLfNC6nAQ0Cpi9uOquUj8Hehg0aUiHzWQbOVJGao6ztBAQ==\",\"dev\":true},\"@babel/helper-validator-option\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/helper-validator-option/-/helper-validator-option-7.22.5.tgz\",\"integrity\":\"sha512-R3oB6xlIVKUnxNUxbmgq7pKjxpru24zlimpE8WK47fACIlM0II/Hm1RS8IaOI7NgCr6LNS+jl5l75m20npAziw==\",\"dev\":true},\"@babel/helper-wrap-function\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/helper-wrap-function/-/helper-wrap-function-7.22.5.tgz\",\"integrity\":\"sha512-bYqLIBSEshYcYQyfks8ewYA8S30yaGSeRslcvKMvoUk6HHPySbxHq9YRi6ghhzEU+yhQv9bP/jXnygkStOcqZw==\",\"dev\":true,\"requires\":{\"@babel/helper-function-name\":\"^7.22.5\",\"@babel/template\":\"^7.22.5\",\"@babel/traverse\":\"^7.22.5\",\"@babel/types\":\"^7.22.5\"}},\"@babel/helpers\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/helpers/-/helpers-7.22.5.tgz\",\"integrity\":\"sha512-pSXRmfE1vzcUIDFQcSGA5Mr+GxBV9oiRKDuDxXvWQQBCh8HoIjs/2DlDB7H8smac1IVrB9/xdXj2N3Wol9Cr+Q==\",\"dev\":true,\"requires\":{\"@babel/template\":\"^7.22.5\",\"@babel/traverse\":\"^7.22.5\",\"@babel/types\":\"^7.22.5\"}},\"@babel/highlight\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/highlight/-/highlight-7.22.5.tgz\",\"integrity\":\"sha512-BSKlD1hgnedS5XRnGOljZawtag7H1yPfQp0tdNJCHoH6AZ+Pcm9VvkrK59/Yy593Ypg0zMxH2BxD1VPYUQ7UIw==\",\"dev\":true,\"requires\":{\"@babel/helper-validator-identifier\":\"^7.22.5\",\"chalk\":\"^2.0.0\",\"js-tokens\":\"^4.0.0\"}},\"@babel/node\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/node/-/node-7.22.5.tgz\",\"integrity\":\"sha512-rguSfZsRNsAhCQ/XjZhDK2CTWxp/jEKx2On8Ir+C6uCZERirg/Ae6fJaOSKQgTg11kA2LEvonpxY2Hb3zF5C8g==\",\"dev\":true,\"requires\":{\"@babel/register\":\"^7.22.5\",\"commander\":\"^4.0.1\",\"core-js\":\"^3.30.2\",\"node-environment-flags\":\"^1.0.5\",\"regenerator-runtime\":\"^0.13.11\",\"v8flags\":\"^3.1.1\"}},\"@babel/parser\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/parser/-/parser-7.22.5.tgz\",\"integrity\":\"sha512-DFZMC9LJUG9PLOclRC32G63UXwzqS2koQC8dkx+PLdmt1xSePYpbT/NbsrJy8Q/muXz7o/h/d4A7Fuyixm559Q==\",\"dev\":true},\"@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression/-/plugin-bugfix-safari-id-destructuring-collision-in-function-expression-7.22.5.tgz\",\"integrity\":\"sha512-NP1M5Rf+u2Gw9qfSO4ihjcTGW5zXTi36ITLd4/EoAcEhIZ0yjMqmftDNl3QC19CX7olhrjpyU454g/2W7X0jvQ==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.22.5\"}},\"@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining/-/plugin-bugfix-v8-spread-parameters-in-optional-chaining-7.22.5.tgz\",\"integrity\":\"sha512-31Bb65aZaUwqCbWMnZPduIZxCBngHFlzyN6Dq6KAJjtx+lx6ohKHubc61OomYi7XwVD4Ol0XCVz4h+pYFR048g==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.22.5\",\"@babel/helper-skip-transparent-expression-wrappers\":\"^7.22.5\",\"@babel/plugin-transform-optional-chaining\":\"^7.22.5\"}},\"@babel/plugin-proposal-class-properties\":{\"version\":\"7.18.6\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-proposal-class-properties/-/plugin-proposal-class-properties-7.18.6.tgz\",\"integrity\":\"sha512-cumfXOF0+nzZrrN8Rf0t7M+tF6sZc7vhQwYQck9q1/5w2OExlD+b4v4RpMJFaV1Z7WcDRgO6FqvxqxGlwo+RHQ==\",\"dev\":true,\"requires\":{\"@babel/helper-create-class-features-plugin\":\"^7.18.6\",\"@babel/helper-plugin-utils\":\"^7.18.6\"}},\"@babel/plugin-proposal-decorators\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-proposal-decorators/-/plugin-proposal-decorators-7.22.5.tgz\",\"integrity\":\"sha512-h8hlezQ4dl6ixodgXkH8lUfcD7x+WAuIqPUjwGoItynrXOAv4a4Tci1zA/qjzQjjcl0v3QpLdc2LM6ZACQuY7A==\",\"dev\":true,\"requires\":{\"@babel/helper-create-class-features-plugin\":\"^7.22.5\",\"@babel/helper-plugin-utils\":\"^7.22.5\",\"@babel/helper-replace-supers\":\"^7.22.5\",\"@babel/helper-split-export-declaration\":\"^7.22.5\",\"@babel/plugin-syntax-decorators\":\"^7.22.5\"}},\"@babel/plugin-proposal-private-property-in-object\":{\"version\":\"7.21.0-placeholder-for-preset-env.2\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-proposal-private-property-in-object/-/plugin-proposal-private-property-in-object-7.21.0-placeholder-for-preset-env.2.tgz\",\"integrity\":\"sha512-SOSkfJDddaM7mak6cPEpswyTRnuRltl429hMraQEglW+OkovnCzsiszTmsrlY//qLFjCpQDFRvjdm2wA5pPm9w==\",\"dev\":true},\"@babel/plugin-proposal-unicode-property-regex\":{\"version\":\"7.18.6\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-proposal-unicode-property-regex/-/plugin-proposal-unicode-property-regex-7.18.6.tgz\",\"integrity\":\"sha512-2BShG/d5yoZyXZfVePH91urL5wTG6ASZU9M4o03lKK8u8UW1y08OMttBSOADTcJrnPMpvDXRG3G8fyLh4ovs8w==\",\"dev\":true,\"requires\":{\"@babel/helper-create-regexp-features-plugin\":\"^7.18.6\",\"@babel/helper-plugin-utils\":\"^7.18.6\"}},\"@babel/plugin-syntax-async-generators\":{\"version\":\"7.8.4\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-syntax-async-generators/-/plugin-syntax-async-generators-7.8.4.tgz\",\"integrity\":\"sha512-tycmZxkGfZaxhMRbXlPXuVFpdWlXpir2W4AMhSJgRKzk/eDlIXOhb2LHWoLpDF7TEHylV5zNhykX6KAgHJmTNw==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.8.0\"}},\"@babel/plugin-syntax-class-properties\":{\"version\":\"7.12.13\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-syntax-class-properties/-/plugin-syntax-class-properties-7.12.13.tgz\",\"integrity\":\"sha512-fm4idjKla0YahUNgFNLCB0qySdsoPiZP3iQE3rky0mBUtMZ23yDJ9SJdg6dXTSDnulOVqiF3Hgr9nbXvXTQZYA==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.12.13\"}},\"@babel/plugin-syntax-class-static-block\":{\"version\":\"7.14.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-syntax-class-static-block/-/plugin-syntax-class-static-block-7.14.5.tgz\",\"integrity\":\"sha512-b+YyPmr6ldyNnM6sqYeMWE+bgJcJpO6yS4QD7ymxgH34GBPNDM/THBh8iunyvKIZztiwLH4CJZ0RxTk9emgpjw==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.14.5\"}},\"@babel/plugin-syntax-decorators\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-syntax-decorators/-/plugin-syntax-decorators-7.22.5.tgz\",\"integrity\":\"sha512-avpUOBS7IU6al8MmF1XpAyj9QYeLPuSDJI5D4pVMSMdL7xQokKqJPYQC67RCT0aCTashUXPiGwMJ0DEXXCEmMA==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.22.5\"}},\"@babel/plugin-syntax-dynamic-import\":{\"version\":\"7.8.3\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-syntax-dynamic-import/-/plugin-syntax-dynamic-import-7.8.3.tgz\",\"integrity\":\"sha512-5gdGbFon+PszYzqs83S3E5mpi7/y/8M9eC90MRTZfduQOYW76ig6SOSPNe41IG5LoP3FGBn2N0RjVDSQiS94kQ==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.8.0\"}},\"@babel/plugin-syntax-export-namespace-from\":{\"version\":\"7.8.3\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-syntax-export-namespace-from/-/plugin-syntax-export-namespace-from-7.8.3.tgz\",\"integrity\":\"sha512-MXf5laXo6c1IbEbegDmzGPwGNTsHZmEy6QGznu5Sh2UCWvueywb2ee+CCE4zQiZstxU9BMoQO9i6zUFSY0Kj0Q==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.8.3\"}},\"@babel/plugin-syntax-import-assertions\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-syntax-import-assertions/-/plugin-syntax-import-assertions-7.22.5.tgz\",\"integrity\":\"sha512-rdV97N7KqsRzeNGoWUOK6yUsWarLjE5Su/Snk9IYPU9CwkWHs4t+rTGOvffTR8XGkJMTAdLfO0xVnXm8wugIJg==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.22.5\"}},\"@babel/plugin-syntax-import-attributes\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-syntax-import-attributes/-/plugin-syntax-import-attributes-7.22.5.tgz\",\"integrity\":\"sha512-KwvoWDeNKPETmozyFE0P2rOLqh39EoQHNjqizrI5B8Vt0ZNS7M56s7dAiAqbYfiAYOuIzIh96z3iR2ktgu3tEg==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.22.5\"}},\"@babel/plugin-syntax-import-meta\":{\"version\":\"7.10.4\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-syntax-import-meta/-/plugin-syntax-import-meta-7.10.4.tgz\",\"integrity\":\"sha512-Yqfm+XDx0+Prh3VSeEQCPU81yC+JWZ2pDPFSS4ZdpfZhp4MkFMaDC1UqseovEKwSUpnIL7+vK+Clp7bfh0iD7g==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.10.4\"}},\"@babel/plugin-syntax-json-strings\":{\"version\":\"7.8.3\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-syntax-json-strings/-/plugin-syntax-json-strings-7.8.3.tgz\",\"integrity\":\"sha512-lY6kdGpWHvjoe2vk4WrAapEuBR69EMxZl+RoGRhrFGNYVK8mOPAW8VfbT/ZgrFbXlDNiiaxQnAtgVCZ6jv30EA==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.8.0\"}},\"@babel/plugin-syntax-logical-assignment-operators\":{\"version\":\"7.10.4\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-syntax-logical-assignment-operators/-/plugin-syntax-logical-assignment-operators-7.10.4.tgz\",\"integrity\":\"sha512-d8waShlpFDinQ5MtvGU9xDAOzKH47+FFoney2baFIoMr952hKOLp1HR7VszoZvOsV/4+RRszNY7D17ba0te0ig==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.10.4\"}},\"@babel/plugin-syntax-nullish-coalescing-operator\":{\"version\":\"7.8.3\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-syntax-nullish-coalescing-operator/-/plugin-syntax-nullish-coalescing-operator-7.8.3.tgz\",\"integrity\":\"sha512-aSff4zPII1u2QD7y+F8oDsz19ew4IGEJg9SVW+bqwpwtfFleiQDMdzA/R+UlWDzfnHFCxxleFT0PMIrR36XLNQ==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.8.0\"}},\"@babel/plugin-syntax-numeric-separator\":{\"version\":\"7.10.4\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-syntax-numeric-separator/-/plugin-syntax-numeric-separator-7.10.4.tgz\",\"integrity\":\"sha512-9H6YdfkcK/uOnY/K7/aA2xpzaAgkQn37yzWUMRK7OaPOqOpGS1+n0H5hxT9AUw9EsSjPW8SVyMJwYRtWs3X3ug==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.10.4\"}},\"@babel/plugin-syntax-object-rest-spread\":{\"version\":\"7.8.3\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-syntax-object-rest-spread/-/plugin-syntax-object-rest-spread-7.8.3.tgz\",\"integrity\":\"sha512-XoqMijGZb9y3y2XskN+P1wUGiVwWZ5JmoDRwx5+3GmEplNyVM2s2Dg8ILFQm8rWM48orGy5YpI5Bl8U1y7ydlA==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.8.0\"}},\"@babel/plugin-syntax-optional-catch-binding\":{\"version\":\"7.8.3\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-syntax-optional-catch-binding/-/plugin-syntax-optional-catch-binding-7.8.3.tgz\",\"integrity\":\"sha512-6VPD0Pc1lpTqw0aKoeRTMiB+kWhAoT24PA+ksWSBrFtl5SIRVpZlwN3NNPQjehA2E/91FV3RjLWoVTglWcSV3Q==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.8.0\"}},\"@babel/plugin-syntax-optional-chaining\":{\"version\":\"7.8.3\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-syntax-optional-chaining/-/plugin-syntax-optional-chaining-7.8.3.tgz\",\"integrity\":\"sha512-KoK9ErH1MBlCPxV0VANkXW2/dw4vlbGDrFgz8bmUsBGYkFRcbRwMh6cIJubdPrkxRwuGdtCk0v/wPTKbQgBjkg==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.8.0\"}},\"@babel/plugin-syntax-private-property-in-object\":{\"version\":\"7.14.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-syntax-private-property-in-object/-/plugin-syntax-private-property-in-object-7.14.5.tgz\",\"integrity\":\"sha512-0wVnp9dxJ72ZUJDV27ZfbSj6iHLoytYZmh3rFcxNnvsJF3ktkzLDZPy/mA17HGsaQT3/DQsWYX1f1QGWkCoVUg==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.14.5\"}},\"@babel/plugin-syntax-top-level-await\":{\"version\":\"7.14.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-syntax-top-level-await/-/plugin-syntax-top-level-await-7.14.5.tgz\",\"integrity\":\"sha512-hx++upLv5U1rgYfwe1xBQUhRmU41NEvpUvrp8jkrSCdvGSnM5/qdRMtylJ6PG5OFkBaHkbTAKTnd3/YyESRHFw==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.14.5\"}},\"@babel/plugin-syntax-unicode-sets-regex\":{\"version\":\"7.18.6\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-syntax-unicode-sets-regex/-/plugin-syntax-unicode-sets-regex-7.18.6.tgz\",\"integrity\":\"sha512-727YkEAPwSIQTv5im8QHz3upqp92JTWhidIC81Tdx4VJYIte/VndKf1qKrfnnhPLiPghStWfvC/iFaMCQu7Nqg==\",\"dev\":true,\"requires\":{\"@babel/helper-create-regexp-features-plugin\":\"^7.18.6\",\"@babel/helper-plugin-utils\":\"^7.18.6\"}},\"@babel/plugin-transform-arrow-functions\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-arrow-functions/-/plugin-transform-arrow-functions-7.22.5.tgz\",\"integrity\":\"sha512-26lTNXoVRdAnsaDXPpvCNUq+OVWEVC6bx7Vvz9rC53F2bagUWW4u4ii2+h8Fejfh7RYqPxn+libeFBBck9muEw==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.22.5\"}},\"@babel/plugin-transform-async-generator-functions\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-async-generator-functions/-/plugin-transform-async-generator-functions-7.22.5.tgz\",\"integrity\":\"sha512-gGOEvFzm3fWoyD5uZq7vVTD57pPJ3PczPUD/xCFGjzBpUosnklmXyKnGQbbbGs1NPNPskFex0j93yKbHt0cHyg==\",\"dev\":true,\"requires\":{\"@babel/helper-environment-visitor\":\"^7.22.5\",\"@babel/helper-plugin-utils\":\"^7.22.5\",\"@babel/helper-remap-async-to-generator\":\"^7.22.5\",\"@babel/plugin-syntax-async-generators\":\"^7.8.4\"}},\"@babel/plugin-transform-async-to-generator\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-async-to-generator/-/plugin-transform-async-to-generator-7.22.5.tgz\",\"integrity\":\"sha512-b1A8D8ZzE/VhNDoV1MSJTnpKkCG5bJo+19R4o4oy03zM7ws8yEMK755j61Dc3EyvdysbqH5BOOTquJ7ZX9C6vQ==\",\"dev\":true,\"requires\":{\"@babel/helper-module-imports\":\"^7.22.5\",\"@babel/helper-plugin-utils\":\"^7.22.5\",\"@babel/helper-remap-async-to-generator\":\"^7.22.5\"}},\"@babel/plugin-transform-block-scoped-functions\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-block-scoped-functions/-/plugin-transform-block-scoped-functions-7.22.5.tgz\",\"integrity\":\"sha512-tdXZ2UdknEKQWKJP1KMNmuF5Lx3MymtMN/pvA+p/VEkhK8jVcQ1fzSy8KM9qRYhAf2/lV33hoMPKI/xaI9sADA==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.22.5\"}},\"@babel/plugin-transform-block-scoping\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-block-scoping/-/plugin-transform-block-scoping-7.22.5.tgz\",\"integrity\":\"sha512-EcACl1i5fSQ6bt+YGuU/XGCeZKStLmyVGytWkpyhCLeQVA0eu6Wtiw92V+I1T/hnezUv7j74dA/Ro69gWcU+hg==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.22.5\"}},\"@babel/plugin-transform-class-properties\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-class-properties/-/plugin-transform-class-properties-7.22.5.tgz\",\"integrity\":\"sha512-nDkQ0NfkOhPTq8YCLiWNxp1+f9fCobEjCb0n8WdbNUBc4IB5V7P1QnX9IjpSoquKrXF5SKojHleVNs2vGeHCHQ==\",\"dev\":true,\"requires\":{\"@babel/helper-create-class-features-plugin\":\"^7.22.5\",\"@babel/helper-plugin-utils\":\"^7.22.5\"}},\"@babel/plugin-transform-class-static-block\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-class-static-block/-/plugin-transform-class-static-block-7.22.5.tgz\",\"integrity\":\"sha512-SPToJ5eYZLxlnp1UzdARpOGeC2GbHvr9d/UV0EukuVx8atktg194oe+C5BqQ8jRTkgLRVOPYeXRSBg1IlMoVRA==\",\"dev\":true,\"requires\":{\"@babel/helper-create-class-features-plugin\":\"^7.22.5\",\"@babel/helper-plugin-utils\":\"^7.22.5\",\"@babel/plugin-syntax-class-static-block\":\"^7.14.5\"}},\"@babel/plugin-transform-classes\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-classes/-/plugin-transform-classes-7.22.5.tgz\",\"integrity\":\"sha512-2edQhLfibpWpsVBx2n/GKOz6JdGQvLruZQfGr9l1qes2KQaWswjBzhQF7UDUZMNaMMQeYnQzxwOMPsbYF7wqPQ==\",\"dev\":true,\"requires\":{\"@babel/helper-annotate-as-pure\":\"^7.22.5\",\"@babel/helper-compilation-targets\":\"^7.22.5\",\"@babel/helper-environment-visitor\":\"^7.22.5\",\"@babel/helper-function-name\":\"^7.22.5\",\"@babel/helper-optimise-call-expression\":\"^7.22.5\",\"@babel/helper-plugin-utils\":\"^7.22.5\",\"@babel/helper-replace-supers\":\"^7.22.5\",\"@babel/helper-split-export-declaration\":\"^7.22.5\",\"globals\":\"^11.1.0\"}},\"@babel/plugin-transform-computed-properties\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-computed-properties/-/plugin-transform-computed-properties-7.22.5.tgz\",\"integrity\":\"sha512-4GHWBgRf0krxPX+AaPtgBAlTgTeZmqDynokHOX7aqqAB4tHs3U2Y02zH6ETFdLZGcg9UQSD1WCmkVrE9ErHeOg==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.22.5\",\"@babel/template\":\"^7.22.5\"}},\"@babel/plugin-transform-destructuring\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-destructuring/-/plugin-transform-destructuring-7.22.5.tgz\",\"integrity\":\"sha512-GfqcFuGW8vnEqTUBM7UtPd5A4q797LTvvwKxXTgRsFjoqaJiEg9deBG6kWeQYkVEL569NpnmpC0Pkr/8BLKGnQ==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.22.5\"}},\"@babel/plugin-transform-dotall-regex\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-dotall-regex/-/plugin-transform-dotall-regex-7.22.5.tgz\",\"integrity\":\"sha512-5/Yk9QxCQCl+sOIB1WelKnVRxTJDSAIxtJLL2/pqL14ZVlbH0fUQUZa/T5/UnQtBNgghR7mfB8ERBKyKPCi7Vw==\",\"dev\":true,\"requires\":{\"@babel/helper-create-regexp-features-plugin\":\"^7.22.5\",\"@babel/helper-plugin-utils\":\"^7.22.5\"}},\"@babel/plugin-transform-duplicate-keys\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-duplicate-keys/-/plugin-transform-duplicate-keys-7.22.5.tgz\",\"integrity\":\"sha512-dEnYD+9BBgld5VBXHnF/DbYGp3fqGMsyxKbtD1mDyIA7AkTSpKXFhCVuj/oQVOoALfBs77DudA0BE4d5mcpmqw==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.22.5\"}},\"@babel/plugin-transform-dynamic-import\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-dynamic-import/-/plugin-transform-dynamic-import-7.22.5.tgz\",\"integrity\":\"sha512-0MC3ppTB1AMxd8fXjSrbPa7LT9hrImt+/fcj+Pg5YMD7UQyWp/02+JWpdnCymmsXwIx5Z+sYn1bwCn4ZJNvhqQ==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.22.5\",\"@babel/plugin-syntax-dynamic-import\":\"^7.8.3\"}},\"@babel/plugin-transform-exponentiation-operator\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-exponentiation-operator/-/plugin-transform-exponentiation-operator-7.22.5.tgz\",\"integrity\":\"sha512-vIpJFNM/FjZ4rh1myqIya9jXwrwwgFRHPjT3DkUA9ZLHuzox8jiXkOLvwm1H+PQIP3CqfC++WPKeuDi0Sjdj1g==\",\"dev\":true,\"requires\":{\"@babel/helper-builder-binary-assignment-operator-visitor\":\"^7.22.5\",\"@babel/helper-plugin-utils\":\"^7.22.5\"}},\"@babel/plugin-transform-export-namespace-from\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-export-namespace-from/-/plugin-transform-export-namespace-from-7.22.5.tgz\",\"integrity\":\"sha512-X4hhm7FRnPgd4nDA4b/5V280xCx6oL7Oob5+9qVS5C13Zq4bh1qq7LU0GgRU6b5dBWBvhGaXYVB4AcN6+ol6vg==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.22.5\",\"@babel/plugin-syntax-export-namespace-from\":\"^7.8.3\"}},\"@babel/plugin-transform-for-of\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-for-of/-/plugin-transform-for-of-7.22.5.tgz\",\"integrity\":\"sha512-3kxQjX1dU9uudwSshyLeEipvrLjBCVthCgeTp6CzE/9JYrlAIaeekVxRpCWsDDfYTfRZRoCeZatCQvwo+wvK8A==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.22.5\"}},\"@babel/plugin-transform-function-name\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-function-name/-/plugin-transform-function-name-7.22.5.tgz\",\"integrity\":\"sha512-UIzQNMS0p0HHiQm3oelztj+ECwFnj+ZRV4KnguvlsD2of1whUeM6o7wGNj6oLwcDoAXQ8gEqfgC24D+VdIcevg==\",\"dev\":true,\"requires\":{\"@babel/helper-compilation-targets\":\"^7.22.5\",\"@babel/helper-function-name\":\"^7.22.5\",\"@babel/helper-plugin-utils\":\"^7.22.5\"}},\"@babel/plugin-transform-json-strings\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-json-strings/-/plugin-transform-json-strings-7.22.5.tgz\",\"integrity\":\"sha512-DuCRB7fu8MyTLbEQd1ew3R85nx/88yMoqo2uPSjevMj3yoN7CDM8jkgrY0wmVxfJZyJ/B9fE1iq7EQppWQmR5A==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.22.5\",\"@babel/plugin-syntax-json-strings\":\"^7.8.3\"}},\"@babel/plugin-transform-literals\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-literals/-/plugin-transform-literals-7.22.5.tgz\",\"integrity\":\"sha512-fTLj4D79M+mepcw3dgFBTIDYpbcB9Sm0bpm4ppXPaO+U+PKFFyV9MGRvS0gvGw62sd10kT5lRMKXAADb9pWy8g==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.22.5\"}},\"@babel/plugin-transform-logical-assignment-operators\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-logical-assignment-operators/-/plugin-transform-logical-assignment-operators-7.22.5.tgz\",\"integrity\":\"sha512-MQQOUW1KL8X0cDWfbwYP+TbVbZm16QmQXJQ+vndPtH/BoO0lOKpVoEDMI7+PskYxH+IiE0tS8xZye0qr1lGzSA==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.22.5\",\"@babel/plugin-syntax-logical-assignment-operators\":\"^7.10.4\"}},\"@babel/plugin-transform-member-expression-literals\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-member-expression-literals/-/plugin-transform-member-expression-literals-7.22.5.tgz\",\"integrity\":\"sha512-RZEdkNtzzYCFl9SE9ATaUMTj2hqMb4StarOJLrZRbqqU4HSBE7UlBw9WBWQiDzrJZJdUWiMTVDI6Gv/8DPvfew==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.22.5\"}},\"@babel/plugin-transform-modules-amd\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-modules-amd/-/plugin-transform-modules-amd-7.22.5.tgz\",\"integrity\":\"sha512-R+PTfLTcYEmb1+kK7FNkhQ1gP4KgjpSO6HfH9+f8/yfp2Nt3ggBjiVpRwmwTlfqZLafYKJACy36yDXlEmI9HjQ==\",\"dev\":true,\"requires\":{\"@babel/helper-module-transforms\":\"^7.22.5\",\"@babel/helper-plugin-utils\":\"^7.22.5\"}},\"@babel/plugin-transform-modules-commonjs\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-modules-commonjs/-/plugin-transform-modules-commonjs-7.22.5.tgz\",\"integrity\":\"sha512-B4pzOXj+ONRmuaQTg05b3y/4DuFz3WcCNAXPLb2Q0GT0TrGKGxNKV4jwsXts+StaM0LQczZbOpj8o1DLPDJIiA==\",\"dev\":true,\"requires\":{\"@babel/helper-module-transforms\":\"^7.22.5\",\"@babel/helper-plugin-utils\":\"^7.22.5\",\"@babel/helper-simple-access\":\"^7.22.5\"}},\"@babel/plugin-transform-modules-systemjs\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-modules-systemjs/-/plugin-transform-modules-systemjs-7.22.5.tgz\",\"integrity\":\"sha512-emtEpoaTMsOs6Tzz+nbmcePl6AKVtS1yC4YNAeMun9U8YCsgadPNxnOPQ8GhHFB2qdx+LZu9LgoC0Lthuu05DQ==\",\"dev\":true,\"requires\":{\"@babel/helper-hoist-variables\":\"^7.22.5\",\"@babel/helper-module-transforms\":\"^7.22.5\",\"@babel/helper-plugin-utils\":\"^7.22.5\",\"@babel/helper-validator-identifier\":\"^7.22.5\"}},\"@babel/plugin-transform-modules-umd\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-modules-umd/-/plugin-transform-modules-umd-7.22.5.tgz\",\"integrity\":\"sha512-+S6kzefN/E1vkSsKx8kmQuqeQsvCKCd1fraCM7zXm4SFoggI099Tr4G8U81+5gtMdUeMQ4ipdQffbKLX0/7dBQ==\",\"dev\":true,\"requires\":{\"@babel/helper-module-transforms\":\"^7.22.5\",\"@babel/helper-plugin-utils\":\"^7.22.5\"}},\"@babel/plugin-transform-named-capturing-groups-regex\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-named-capturing-groups-regex/-/plugin-transform-named-capturing-groups-regex-7.22.5.tgz\",\"integrity\":\"sha512-YgLLKmS3aUBhHaxp5hi1WJTgOUb/NCuDHzGT9z9WTt3YG+CPRhJs6nprbStx6DnWM4dh6gt7SU3sZodbZ08adQ==\",\"dev\":true,\"requires\":{\"@babel/helper-create-regexp-features-plugin\":\"^7.22.5\",\"@babel/helper-plugin-utils\":\"^7.22.5\"}},\"@babel/plugin-transform-new-target\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-new-target/-/plugin-transform-new-target-7.22.5.tgz\",\"integrity\":\"sha512-AsF7K0Fx/cNKVyk3a+DW0JLo+Ua598/NxMRvxDnkpCIGFh43+h/v2xyhRUYf6oD8gE4QtL83C7zZVghMjHd+iw==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.22.5\"}},\"@babel/plugin-transform-nullish-coalescing-operator\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-nullish-coalescing-operator/-/plugin-transform-nullish-coalescing-operator-7.22.5.tgz\",\"integrity\":\"sha512-6CF8g6z1dNYZ/VXok5uYkkBBICHZPiGEl7oDnAx2Mt1hlHVHOSIKWJaXHjQJA5VB43KZnXZDIexMchY4y2PGdA==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.22.5\",\"@babel/plugin-syntax-nullish-coalescing-operator\":\"^7.8.3\"}},\"@babel/plugin-transform-numeric-separator\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-numeric-separator/-/plugin-transform-numeric-separator-7.22.5.tgz\",\"integrity\":\"sha512-NbslED1/6M+sXiwwtcAB/nieypGw02Ejf4KtDeMkCEpP6gWFMX1wI9WKYua+4oBneCCEmulOkRpwywypVZzs/g==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.22.5\",\"@babel/plugin-syntax-numeric-separator\":\"^7.10.4\"}},\"@babel/plugin-transform-object-rest-spread\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-object-rest-spread/-/plugin-transform-object-rest-spread-7.22.5.tgz\",\"integrity\":\"sha512-Kk3lyDmEslH9DnvCDA1s1kkd3YWQITiBOHngOtDL9Pt6BZjzqb6hiOlb8VfjiiQJ2unmegBqZu0rx5RxJb5vmQ==\",\"dev\":true,\"requires\":{\"@babel/compat-data\":\"^7.22.5\",\"@babel/helper-compilation-targets\":\"^7.22.5\",\"@babel/helper-plugin-utils\":\"^7.22.5\",\"@babel/plugin-syntax-object-rest-spread\":\"^7.8.3\",\"@babel/plugin-transform-parameters\":\"^7.22.5\"}},\"@babel/plugin-transform-object-super\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-object-super/-/plugin-transform-object-super-7.22.5.tgz\",\"integrity\":\"sha512-klXqyaT9trSjIUrcsYIfETAzmOEZL3cBYqOYLJxBHfMFFggmXOv+NYSX/Jbs9mzMVESw/WycLFPRx8ba/b2Ipw==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.22.5\",\"@babel/helper-replace-supers\":\"^7.22.5\"}},\"@babel/plugin-transform-optional-catch-binding\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-optional-catch-binding/-/plugin-transform-optional-catch-binding-7.22.5.tgz\",\"integrity\":\"sha512-pH8orJahy+hzZje5b8e2QIlBWQvGpelS76C63Z+jhZKsmzfNaPQ+LaW6dcJ9bxTpo1mtXbgHwy765Ro3jftmUg==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.22.5\",\"@babel/plugin-syntax-optional-catch-binding\":\"^7.8.3\"}},\"@babel/plugin-transform-optional-chaining\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-optional-chaining/-/plugin-transform-optional-chaining-7.22.5.tgz\",\"integrity\":\"sha512-AconbMKOMkyG+xCng2JogMCDcqW8wedQAqpVIL4cOSescZ7+iW8utC6YDZLMCSUIReEA733gzRSaOSXMAt/4WQ==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.22.5\",\"@babel/helper-skip-transparent-expression-wrappers\":\"^7.22.5\",\"@babel/plugin-syntax-optional-chaining\":\"^7.8.3\"}},\"@babel/plugin-transform-parameters\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-parameters/-/plugin-transform-parameters-7.22.5.tgz\",\"integrity\":\"sha512-AVkFUBurORBREOmHRKo06FjHYgjrabpdqRSwq6+C7R5iTCZOsM4QbcB27St0a4U6fffyAOqh3s/qEfybAhfivg==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.22.5\"}},\"@babel/plugin-transform-private-methods\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-private-methods/-/plugin-transform-private-methods-7.22.5.tgz\",\"integrity\":\"sha512-PPjh4gyrQnGe97JTalgRGMuU4icsZFnWkzicB/fUtzlKUqvsWBKEpPPfr5a2JiyirZkHxnAqkQMO5Z5B2kK3fA==\",\"dev\":true,\"requires\":{\"@babel/helper-create-class-features-plugin\":\"^7.22.5\",\"@babel/helper-plugin-utils\":\"^7.22.5\"}},\"@babel/plugin-transform-private-property-in-object\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-private-property-in-object/-/plugin-transform-private-property-in-object-7.22.5.tgz\",\"integrity\":\"sha512-/9xnaTTJcVoBtSSmrVyhtSvO3kbqS2ODoh2juEU72c3aYonNF0OMGiaz2gjukyKM2wBBYJP38S4JiE0Wfb5VMQ==\",\"dev\":true,\"requires\":{\"@babel/helper-annotate-as-pure\":\"^7.22.5\",\"@babel/helper-create-class-features-plugin\":\"^7.22.5\",\"@babel/helper-plugin-utils\":\"^7.22.5\",\"@babel/plugin-syntax-private-property-in-object\":\"^7.14.5\"}},\"@babel/plugin-transform-property-literals\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-property-literals/-/plugin-transform-property-literals-7.22.5.tgz\",\"integrity\":\"sha512-TiOArgddK3mK/x1Qwf5hay2pxI6wCZnvQqrFSqbtg1GLl2JcNMitVH/YnqjP+M31pLUeTfzY1HAXFDnUBV30rQ==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.22.5\"}},\"@babel/plugin-transform-regenerator\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-regenerator/-/plugin-transform-regenerator-7.22.5.tgz\",\"integrity\":\"sha512-rR7KePOE7gfEtNTh9Qw+iO3Q/e4DEsoQ+hdvM6QUDH7JRJ5qxq5AA52ZzBWbI5i9lfNuvySgOGP8ZN7LAmaiPw==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.22.5\",\"regenerator-transform\":\"^0.15.1\"}},\"@babel/plugin-transform-reserved-words\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-reserved-words/-/plugin-transform-reserved-words-7.22.5.tgz\",\"integrity\":\"sha512-DTtGKFRQUDm8svigJzZHzb/2xatPc6TzNvAIJ5GqOKDsGFYgAskjRulbR/vGsPKq3OPqtexnz327qYpP57RFyA==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.22.5\"}},\"@babel/plugin-transform-shorthand-properties\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-shorthand-properties/-/plugin-transform-shorthand-properties-7.22.5.tgz\",\"integrity\":\"sha512-vM4fq9IXHscXVKzDv5itkO1X52SmdFBFcMIBZ2FRn2nqVYqw6dBexUgMvAjHW+KXpPPViD/Yo3GrDEBaRC0QYA==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.22.5\"}},\"@babel/plugin-transform-spread\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-spread/-/plugin-transform-spread-7.22.5.tgz\",\"integrity\":\"sha512-5ZzDQIGyvN4w8+dMmpohL6MBo+l2G7tfC/O2Dg7/hjpgeWvUx8FzfeOKxGog9IimPa4YekaQ9PlDqTLOljkcxg==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.22.5\",\"@babel/helper-skip-transparent-expression-wrappers\":\"^7.22.5\"}},\"@babel/plugin-transform-sticky-regex\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-sticky-regex/-/plugin-transform-sticky-regex-7.22.5.tgz\",\"integrity\":\"sha512-zf7LuNpHG0iEeiyCNwX4j3gDg1jgt1k3ZdXBKbZSoA3BbGQGvMiSvfbZRR3Dr3aeJe3ooWFZxOOG3IRStYp2Bw==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.22.5\"}},\"@babel/plugin-transform-template-literals\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-template-literals/-/plugin-transform-template-literals-7.22.5.tgz\",\"integrity\":\"sha512-5ciOehRNf+EyUeewo8NkbQiUs4d6ZxiHo6BcBcnFlgiJfu16q0bQUw9Jvo0b0gBKFG1SMhDSjeKXSYuJLeFSMA==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.22.5\"}},\"@babel/plugin-transform-typeof-symbol\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-typeof-symbol/-/plugin-transform-typeof-symbol-7.22.5.tgz\",\"integrity\":\"sha512-bYkI5lMzL4kPii4HHEEChkD0rkc+nvnlR6+o/qdqR6zrm0Sv/nodmyLhlq2DO0YKLUNd2VePmPRjJXSBh9OIdA==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.22.5\"}},\"@babel/plugin-transform-unicode-escapes\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-unicode-escapes/-/plugin-transform-unicode-escapes-7.22.5.tgz\",\"integrity\":\"sha512-biEmVg1IYB/raUO5wT1tgfacCef15Fbzhkx493D3urBI++6hpJ+RFG4SrWMn0NEZLfvilqKf3QDrRVZHo08FYg==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.22.5\"}},\"@babel/plugin-transform-unicode-property-regex\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-unicode-property-regex/-/plugin-transform-unicode-property-regex-7.22.5.tgz\",\"integrity\":\"sha512-HCCIb+CbJIAE6sXn5CjFQXMwkCClcOfPCzTlilJ8cUatfzwHlWQkbtV0zD338u9dZskwvuOYTuuaMaA8J5EI5A==\",\"dev\":true,\"requires\":{\"@babel/helper-create-regexp-features-plugin\":\"^7.22.5\",\"@babel/helper-plugin-utils\":\"^7.22.5\"}},\"@babel/plugin-transform-unicode-regex\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-unicode-regex/-/plugin-transform-unicode-regex-7.22.5.tgz\",\"integrity\":\"sha512-028laaOKptN5vHJf9/Arr/HiJekMd41hOEZYvNsrsXqJ7YPYuX2bQxh31fkZzGmq3YqHRJzYFFAVYvKfMPKqyg==\",\"dev\":true,\"requires\":{\"@babel/helper-create-regexp-features-plugin\":\"^7.22.5\",\"@babel/helper-plugin-utils\":\"^7.22.5\"}},\"@babel/plugin-transform-unicode-sets-regex\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/plugin-transform-unicode-sets-regex/-/plugin-transform-unicode-sets-regex-7.22.5.tgz\",\"integrity\":\"sha512-lhMfi4FC15j13eKrh3DnYHjpGj6UKQHtNKTbtc1igvAhRy4+kLhV07OpLcsN0VgDEw/MjAvJO4BdMJsHwMhzCg==\",\"dev\":true,\"requires\":{\"@babel/helper-create-regexp-features-plugin\":\"^7.22.5\",\"@babel/helper-plugin-utils\":\"^7.22.5\"}},\"@babel/preset-env\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/preset-env/-/preset-env-7.22.5.tgz\",\"integrity\":\"sha512-fj06hw89dpiZzGZtxn+QybifF07nNiZjZ7sazs2aVDcysAZVGjW7+7iFYxg6GLNM47R/thYfLdrXc+2f11Vi9A==\",\"dev\":true,\"requires\":{\"@babel/compat-data\":\"^7.22.5\",\"@babel/helper-compilation-targets\":\"^7.22.5\",\"@babel/helper-plugin-utils\":\"^7.22.5\",\"@babel/helper-validator-option\":\"^7.22.5\",\"@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression\":\"^7.22.5\",\"@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining\":\"^7.22.5\",\"@babel/plugin-proposal-private-property-in-object\":\"7.21.0-placeholder-for-preset-env.2\",\"@babel/plugin-syntax-async-generators\":\"^7.8.4\",\"@babel/plugin-syntax-class-properties\":\"^7.12.13\",\"@babel/plugin-syntax-class-static-block\":\"^7.14.5\",\"@babel/plugin-syntax-dynamic-import\":\"^7.8.3\",\"@babel/plugin-syntax-export-namespace-from\":\"^7.8.3\",\"@babel/plugin-syntax-import-assertions\":\"^7.22.5\",\"@babel/plugin-syntax-import-attributes\":\"^7.22.5\",\"@babel/plugin-syntax-import-meta\":\"^7.10.4\",\"@babel/plugin-syntax-json-strings\":\"^7.8.3\",\"@babel/plugin-syntax-logical-assignment-operators\":\"^7.10.4\",\"@babel/plugin-syntax-nullish-coalescing-operator\":\"^7.8.3\",\"@babel/plugin-syntax-numeric-separator\":\"^7.10.4\",\"@babel/plugin-syntax-object-rest-spread\":\"^7.8.3\",\"@babel/plugin-syntax-optional-catch-binding\":\"^7.8.3\",\"@babel/plugin-syntax-optional-chaining\":\"^7.8.3\",\"@babel/plugin-syntax-private-property-in-object\":\"^7.14.5\",\"@babel/plugin-syntax-top-level-await\":\"^7.14.5\",\"@babel/plugin-syntax-unicode-sets-regex\":\"^7.18.6\",\"@babel/plugin-transform-arrow-functions\":\"^7.22.5\",\"@babel/plugin-transform-async-generator-functions\":\"^7.22.5\",\"@babel/plugin-transform-async-to-generator\":\"^7.22.5\",\"@babel/plugin-transform-block-scoped-functions\":\"^7.22.5\",\"@babel/plugin-transform-block-scoping\":\"^7.22.5\",\"@babel/plugin-transform-class-properties\":\"^7.22.5\",\"@babel/plugin-transform-class-static-block\":\"^7.22.5\",\"@babel/plugin-transform-classes\":\"^7.22.5\",\"@babel/plugin-transform-computed-properties\":\"^7.22.5\",\"@babel/plugin-transform-destructuring\":\"^7.22.5\",\"@babel/plugin-transform-dotall-regex\":\"^7.22.5\",\"@babel/plugin-transform-duplicate-keys\":\"^7.22.5\",\"@babel/plugin-transform-dynamic-import\":\"^7.22.5\",\"@babel/plugin-transform-exponentiation-operator\":\"^7.22.5\",\"@babel/plugin-transform-export-namespace-from\":\"^7.22.5\",\"@babel/plugin-transform-for-of\":\"^7.22.5\",\"@babel/plugin-transform-function-name\":\"^7.22.5\",\"@babel/plugin-transform-json-strings\":\"^7.22.5\",\"@babel/plugin-transform-literals\":\"^7.22.5\",\"@babel/plugin-transform-logical-assignment-operators\":\"^7.22.5\",\"@babel/plugin-transform-member-expression-literals\":\"^7.22.5\",\"@babel/plugin-transform-modules-amd\":\"^7.22.5\",\"@babel/plugin-transform-modules-commonjs\":\"^7.22.5\",\"@babel/plugin-transform-modules-systemjs\":\"^7.22.5\",\"@babel/plugin-transform-modules-umd\":\"^7.22.5\",\"@babel/plugin-transform-named-capturing-groups-regex\":\"^7.22.5\",\"@babel/plugin-transform-new-target\":\"^7.22.5\",\"@babel/plugin-transform-nullish-coalescing-operator\":\"^7.22.5\",\"@babel/plugin-transform-numeric-separator\":\"^7.22.5\",\"@babel/plugin-transform-object-rest-spread\":\"^7.22.5\",\"@babel/plugin-transform-object-super\":\"^7.22.5\",\"@babel/plugin-transform-optional-catch-binding\":\"^7.22.5\",\"@babel/plugin-transform-optional-chaining\":\"^7.22.5\",\"@babel/plugin-transform-parameters\":\"^7.22.5\",\"@babel/plugin-transform-private-methods\":\"^7.22.5\",\"@babel/plugin-transform-private-property-in-object\":\"^7.22.5\",\"@babel/plugin-transform-property-literals\":\"^7.22.5\",\"@babel/plugin-transform-regenerator\":\"^7.22.5\",\"@babel/plugin-transform-reserved-words\":\"^7.22.5\",\"@babel/plugin-transform-shorthand-properties\":\"^7.22.5\",\"@babel/plugin-transform-spread\":\"^7.22.5\",\"@babel/plugin-transform-sticky-regex\":\"^7.22.5\",\"@babel/plugin-transform-template-literals\":\"^7.22.5\",\"@babel/plugin-transform-typeof-symbol\":\"^7.22.5\",\"@babel/plugin-transform-unicode-escapes\":\"^7.22.5\",\"@babel/plugin-transform-unicode-property-regex\":\"^7.22.5\",\"@babel/plugin-transform-unicode-regex\":\"^7.22.5\",\"@babel/plugin-transform-unicode-sets-regex\":\"^7.22.5\",\"@babel/preset-modules\":\"^0.1.5\",\"@babel/types\":\"^7.22.5\",\"babel-plugin-polyfill-corejs2\":\"^0.4.3\",\"babel-plugin-polyfill-corejs3\":\"^0.8.1\",\"babel-plugin-polyfill-regenerator\":\"^0.5.0\",\"core-js-compat\":\"^3.30.2\",\"semver\":\"^6.3.0\"}},\"@babel/preset-modules\":{\"version\":\"0.1.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/preset-modules/-/preset-modules-0.1.5.tgz\",\"integrity\":\"sha512-A57th6YRG7oR3cq/yt/Y84MvGgE0eJG2F1JLhKuyG+jFxEgrd/HAMJatiFtmOiZurz+0DkrvbheCLaV5f2JfjA==\",\"dev\":true,\"requires\":{\"@babel/helper-plugin-utils\":\"^7.0.0\",\"@babel/plugin-proposal-unicode-property-regex\":\"^7.4.4\",\"@babel/plugin-transform-dotall-regex\":\"^7.4.4\",\"@babel/types\":\"^7.4.4\",\"esutils\":\"^2.0.2\"}},\"@babel/register\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/register/-/register-7.22.5.tgz\",\"integrity\":\"sha512-vV6pm/4CijSQ8Y47RH5SopXzursN35RQINfGJkmOlcpAtGuf94miFvIPhCKGQN7WGIcsgG1BHEX2KVdTYwTwUQ==\",\"dev\":true,\"requires\":{\"clone-deep\":\"^4.0.1\",\"find-cache-dir\":\"^2.0.0\",\"make-dir\":\"^2.1.0\",\"pirates\":\"^4.0.5\",\"source-map-support\":\"^0.5.16\"}},\"@babel/regjsgen\":{\"version\":\"0.8.0\",\"resolved\":\"https://registry.npmmirror.com/@babel/regjsgen/-/regjsgen-0.8.0.tgz\",\"integrity\":\"sha512-x/rqGMdzj+fWZvCOYForTghzbtqPDZ5gPwaoNGHdgDfF2QA/XZbCBp4Moo5scrkAMPhB7z26XM/AaHuIJdgauA==\",\"dev\":true},\"@babel/runtime\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/runtime/-/runtime-7.22.5.tgz\",\"integrity\":\"sha512-ecjvYlnAaZ/KVneE/OdKYBYfgXV3Ptu6zQWmgEF7vwKhQnvVS6bjMD2XYgj+SNvQ1GfK/pjgokfPkC/2CO8CuA==\",\"dev\":true,\"requires\":{\"regenerator-runtime\":\"^0.13.11\"}},\"@babel/template\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/template/-/template-7.22.5.tgz\",\"integrity\":\"sha512-X7yV7eiwAxdj9k94NEylvbVHLiVG1nvzCV2EAowhxLTwODV1jl9UzZ48leOC0sH7OnuHrIkllaBgneUykIcZaw==\",\"dev\":true,\"requires\":{\"@babel/code-frame\":\"^7.22.5\",\"@babel/parser\":\"^7.22.5\",\"@babel/types\":\"^7.22.5\"}},\"@babel/traverse\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/traverse/-/traverse-7.22.5.tgz\",\"integrity\":\"sha512-7DuIjPgERaNo6r+PZwItpjCZEa5vyw4eJGufeLxrPdBXBoLcCJCIasvK6pK/9DVNrLZTLFhUGqaC6X/PA007TQ==\",\"dev\":true,\"requires\":{\"@babel/code-frame\":\"^7.22.5\",\"@babel/generator\":\"^7.22.5\",\"@babel/helper-environment-visitor\":\"^7.22.5\",\"@babel/helper-function-name\":\"^7.22.5\",\"@babel/helper-hoist-variables\":\"^7.22.5\",\"@babel/helper-split-export-declaration\":\"^7.22.5\",\"@babel/parser\":\"^7.22.5\",\"@babel/types\":\"^7.22.5\",\"debug\":\"^4.1.0\",\"globals\":\"^11.1.0\"}},\"@babel/types\":{\"version\":\"7.22.5\",\"resolved\":\"https://registry.npmmirror.com/@babel/types/-/types-7.22.5.tgz\",\"integrity\":\"sha512-zo3MIHGOkPOfoRXitsgHLjEXmlDaD/5KU1Uzuc9GNiZPhSqVxVRtxuPaSBZDsYZ9qV88AjtMtWW7ww98loJ9KA==\",\"dev\":true,\"requires\":{\"@babel/helper-string-parser\":\"^7.22.5\",\"@babel/helper-validator-identifier\":\"^7.22.5\",\"to-fast-properties\":\"^2.0.0\"}},\"@jridgewell/gen-mapping\":{\"version\":\"0.3.3\",\"resolved\":\"https://registry.npmmirror.com/@jridgewell/gen-mapping/-/gen-mapping-0.3.3.tgz\",\"integrity\":\"sha512-HLhSWOLRi875zjjMG/r+Nv0oCW8umGb0BgEhyX3dDX3egwZtB8PqLnjz3yedt8R5StBrzcg4aBpnh8UA9D1BoQ==\",\"dev\":true,\"requires\":{\"@jridgewell/set-array\":\"^1.0.1\",\"@jridgewell/sourcemap-codec\":\"^1.4.10\",\"@jridgewell/trace-mapping\":\"^0.3.9\"}},\"@jridgewell/resolve-uri\":{\"version\":\"3.1.0\",\"resolved\":\"https://registry.npmmirror.com/@jridgewell/resolve-uri/-/resolve-uri-3.1.0.tgz\",\"integrity\":\"sha512-F2msla3tad+Mfht5cJq7LSXcdudKTWCVYUgw6pLFOOHSTtZlj6SWNYAp+AhuqLmWdBO2X5hPrLcu8cVP8fy28w==\",\"dev\":true},\"@jridgewell/set-array\":{\"version\":\"1.1.2\",\"resolved\":\"https://registry.npmmirror.com/@jridgewell/set-array/-/set-array-1.1.2.tgz\",\"integrity\":\"sha512-xnkseuNADM0gt2bs+BvhO0p78Mk762YnZdsuzFV018NoG1Sj1SCQvpSqa7XUaTam5vAGasABV9qXASMKnFMwMw==\",\"dev\":true},\"@jridgewell/sourcemap-codec\":{\"version\":\"1.4.15\",\"resolved\":\"https://registry.npmmirror.com/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.15.tgz\",\"integrity\":\"sha512-eF2rxCRulEKXHTRiDrDy6erMYWqNw4LPdQ8UQA4huuxaQsVeRPFl2oM8oDGxMFhJUWZf9McpLtJasDDZb/Bpeg==\",\"dev\":true},\"@jridgewell/trace-mapping\":{\"version\":\"0.3.18\",\"resolved\":\"https://registry.npmmirror.com/@jridgewell/trace-mapping/-/trace-mapping-0.3.18.tgz\",\"integrity\":\"sha512-w+niJYzMHdd7USdiH2U6869nqhD2nbfZXND5Yp93qIbEmnDNk7PD48o+YchRVpzMU7M6jVCbenTR7PA1FLQ9pA==\",\"dev\":true,\"requires\":{\"@jridgewell/resolve-uri\":\"3.1.0\",\"@jridgewell/sourcemap-codec\":\"1.4.14\"},\"dependencies\":{\"@jridgewell/sourcemap-codec\":{\"version\":\"1.4.14\",\"resolved\":\"https://registry.npmmirror.com/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.14.tgz\",\"integrity\":\"sha512-XPSJHWmi394fuUuzDnGz1wiKqWfo1yXecHQMRf2l6hztTO+nPru658AyDngaBe7isIxEkRsPR3FZh+s7iVa4Uw==\",\"dev\":true}}},\"@types/accepts\":{\"version\":\"1.3.5\",\"resolved\":\"https://registry.npmmirror.com/@types/accepts/-/accepts-1.3.5.tgz\",\"integrity\":\"sha512-jOdnI/3qTpHABjM5cx1Hc0sKsPoYCp+DP/GJRGtDlPd7fiV9oXGGIcjW/ZOxLIvjGz8MA+uMZI9metHlgqbgwQ==\",\"requires\":{\"@types/node\":\"*\"}},\"@types/body-parser\":{\"version\":\"1.19.2\",\"resolved\":\"https://registry.npmmirror.com/@types/body-parser/-/body-parser-1.19.2.tgz\",\"integrity\":\"sha512-ALYone6pm6QmwZoAgeyNksccT9Q4AWZQ6PvfwR37GT6r6FWUPguq6sUmNGSMV2Wr761oQoBxwGGa6DR5o1DC9g==\",\"requires\":{\"@types/connect\":\"*\",\"@types/node\":\"*\"}},\"@types/co-body\":{\"version\":\"6.1.0\",\"resolved\":\"https://registry.npmmirror.com/@types/co-body/-/co-body-6.1.0.tgz\",\"integrity\":\"sha512-3e0q2jyDAnx/DSZi0z2H0yoZ2wt5yRDZ+P7ymcMObvq0ufWRT4tsajyO+Q1VwVWiv9PRR4W3YEjEzBjeZlhF+w==\",\"requires\":{\"@types/node\":\"*\",\"@types/qs\":\"*\"}},\"@types/connect\":{\"version\":\"3.4.35\",\"resolved\":\"https://registry.npmmirror.com/@types/connect/-/connect-3.4.35.tgz\",\"integrity\":\"sha512-cdeYyv4KWoEgpBISTxWvqYsVy444DOqehiF3fM3ne10AmJ62RSyNkUnxMJXHQWRQQX2eR94m5y1IZyDwBjV9FQ==\",\"requires\":{\"@types/node\":\"*\"}},\"@types/content-disposition\":{\"version\":\"0.5.5\",\"resolved\":\"https://registry.npmmirror.com/@types/content-disposition/-/content-disposition-0.5.5.tgz\",\"integrity\":\"sha512-v6LCdKfK6BwcqMo+wYW05rLS12S0ZO0Fl4w1h4aaZMD7bqT3gVUns6FvLJKGZHQmYn3SX55JWGpziwJRwVgutA==\"},\"@types/cookies\":{\"version\":\"0.7.7\",\"resolved\":\"https://registry.npmmirror.com/@types/cookies/-/cookies-0.7.7.tgz\",\"integrity\":\"sha512-h7BcvPUogWbKCzBR2lY4oqaZbO3jXZksexYJVFvkrFeLgbZjQkU4x8pRq6eg2MHXQhY0McQdqmmsxRWlVAHooA==\",\"requires\":{\"@types/connect\":\"*\",\"@types/express\":\"*\",\"@types/keygrip\":\"*\",\"@types/node\":\"*\"}},\"@types/express\":{\"version\":\"4.17.17\",\"resolved\":\"https://registry.npmmirror.com/@types/express/-/express-4.17.17.tgz\",\"integrity\":\"sha512-Q4FmmuLGBG58btUnfS1c1r/NQdlp3DMfGDGig8WhfpA2YRUtEkxAjkZb0yvplJGYdF1fsQ81iMDcH24sSCNC/Q==\",\"requires\":{\"@types/body-parser\":\"*\",\"@types/express-serve-static-core\":\"^4.17.33\",\"@types/qs\":\"*\",\"@types/serve-static\":\"*\"}},\"@types/express-serve-static-core\":{\"version\":\"4.17.35\",\"resolved\":\"https://registry.npmmirror.com/@types/express-serve-static-core/-/express-serve-static-core-4.17.35.tgz\",\"integrity\":\"sha512-wALWQwrgiB2AWTT91CB62b6Yt0sNHpznUXeZEcnPU3DRdlDIz74x8Qg1UUYKSVFi+va5vKOLYRBI1bRKiLLKIg==\",\"requires\":{\"@types/node\":\"*\",\"@types/qs\":\"*\",\"@types/range-parser\":\"*\",\"@types/send\":\"*\"}},\"@types/formidable\":{\"version\":\"2.0.6\",\"resolved\":\"https://registry.npmmirror.com/@types/formidable/-/formidable-2.0.6.tgz\",\"integrity\":\"sha512-L4HcrA05IgQyNYJj6kItuIkXrInJvsXTPC5B1i64FggWKKqSL+4hgt7asiSNva75AoLQjq29oPxFfU4GAQ6Z2w==\",\"requires\":{\"@types/node\":\"*\"}},\"@types/http-assert\":{\"version\":\"1.5.3\",\"resolved\":\"https://registry.npmmirror.com/@types/http-assert/-/http-assert-1.5.3.tgz\",\"integrity\":\"sha512-FyAOrDuQmBi8/or3ns4rwPno7/9tJTijVW6aQQjK02+kOQ8zmoNg2XJtAuQhvQcy1ASJq38wirX5//9J1EqoUA==\"},\"@types/http-errors\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmmirror.com/@types/http-errors/-/http-errors-2.0.1.tgz\",\"integrity\":\"sha512-/K3ds8TRAfBvi5vfjuz8y6+GiAYBZ0x4tXv1Av6CWBWn0IlADc+ZX9pMq7oU0fNQPnBwIZl3rmeLp6SBApbxSQ==\"},\"@types/keygrip\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/@types/keygrip/-/keygrip-1.0.2.tgz\",\"integrity\":\"sha512-GJhpTepz2udxGexqos8wgaBx4I/zWIDPh/KOGEwAqtuGDkOUJu5eFvwmdBX4AmB8Odsr+9pHCQqiAqDL/yKMKw==\"},\"@types/koa\":{\"version\":\"2.13.6\",\"resolved\":\"https://registry.npmmirror.com/@types/koa/-/koa-2.13.6.tgz\",\"integrity\":\"sha512-diYUfp/GqfWBAiwxHtYJ/FQYIXhlEhlyaU7lB/bWQrx4Il9lCET5UwpFy3StOAohfsxxvEQ11qIJgT1j2tfBvw==\",\"requires\":{\"@types/accepts\":\"*\",\"@types/content-disposition\":\"*\",\"@types/cookies\":\"*\",\"@types/http-assert\":\"*\",\"@types/http-errors\":\"*\",\"@types/keygrip\":\"*\",\"@types/koa-compose\":\"*\",\"@types/node\":\"*\"}},\"@types/koa-compose\":{\"version\":\"3.2.5\",\"resolved\":\"https://registry.npmmirror.com/@types/koa-compose/-/koa-compose-3.2.5.tgz\",\"integrity\":\"sha512-B8nG/OoE1ORZqCkBVsup/AKcvjdgoHnfi4pZMn5UwAPCbhk/96xyv284eBYW8JlQbQ7zDmnpFr68I/40mFoIBQ==\",\"requires\":{\"@types/koa\":\"*\"}},\"@types/mime\":{\"version\":\"1.3.2\",\"resolved\":\"https://registry.npmmirror.com/@types/mime/-/mime-1.3.2.tgz\",\"integrity\":\"sha512-YATxVxgRqNH6nHEIsvg6k2Boc1JHI9ZbH5iWFFv/MTkchz3b1ieGDa5T0a9RznNdI0KhVbdbWSN+KWWrQZRxTw==\"},\"@types/node\":{\"version\":\"20.2.5\",\"resolved\":\"https://registry.npmmirror.com/@types/node/-/node-20.2.5.tgz\",\"integrity\":\"sha512-JJulVEQXmiY9Px5axXHeYGLSjhkZEnD+MDPDGbCbIAbMslkKwmygtZFy1X6s/075Yo94sf8GuSlFfPzysQrWZQ==\"},\"@types/qs\":{\"version\":\"6.9.7\",\"resolved\":\"https://registry.npmmirror.com/@types/qs/-/qs-6.9.7.tgz\",\"integrity\":\"sha512-FGa1F62FT09qcrueBA6qYTrJPVDzah9a+493+o2PCXsesWHIn27G98TsSMs3WPNbZIEj4+VJf6saSFpvD+3Zsw==\"},\"@types/range-parser\":{\"version\":\"1.2.4\",\"resolved\":\"https://registry.npmmirror.com/@types/range-parser/-/range-parser-1.2.4.tgz\",\"integrity\":\"sha512-EEhsLsD6UsDM1yFhAvy0Cjr6VwmpMWqFBCb9w07wVugF7w9nfajxLuVmngTIpgS6svCnm6Vaw+MZhoDCKnOfsw==\"},\"@types/send\":{\"version\":\"0.17.1\",\"resolved\":\"https://registry.npmmirror.com/@types/send/-/send-0.17.1.tgz\",\"integrity\":\"sha512-Cwo8LE/0rnvX7kIIa3QHCkcuF21c05Ayb0ZfxPiv0W8VRiZiNW/WuRupHKpqqGVGf7SUA44QSOUKaEd9lIrd/Q==\",\"requires\":{\"@types/mime\":\"^1\",\"@types/node\":\"*\"}},\"@types/serve-static\":{\"version\":\"1.15.1\",\"resolved\":\"https://registry.npmmirror.com/@types/serve-static/-/serve-static-1.15.1.tgz\",\"integrity\":\"sha512-NUo5XNiAdULrJENtJXZZ3fHtfMolzZwczzBbnAeBbqBwG+LaG6YaJtuwzwGSQZ2wsCrxjEhNNjAkKigy3n8teQ==\",\"requires\":{\"@types/mime\":\"*\",\"@types/node\":\"*\"}},\"@types/webidl-conversions\":{\"version\":\"7.0.0\",\"resolved\":\"https://registry.npmmirror.com/@types/webidl-conversions/-/webidl-conversions-7.0.0.tgz\",\"integrity\":\"sha512-xTE1E+YF4aWPJJeUzaZI5DRntlkY3+BCVJi0axFptnjGmAoWxkyREIh/XMrfxVLejwQxMCfDXdICo0VLxThrog==\"},\"@types/whatwg-url\":{\"version\":\"8.2.2\",\"resolved\":\"https://registry.npmmirror.com/@types/whatwg-url/-/whatwg-url-8.2.2.tgz\",\"integrity\":\"sha512-FtQu10RWgn3D9U4aazdwIE2yzphmTJREDqNdODHrbrZmmMqI0vMheC/6NE/J1Yveaj8H+ela+YwWTjq5PGmuhA==\",\"requires\":{\"@types/node\":\"*\",\"@types/webidl-conversions\":\"*\"}},\"accepts\":{\"version\":\"1.3.8\",\"resolved\":\"https://registry.npmmirror.com/accepts/-/accepts-1.3.8.tgz\",\"integrity\":\"sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==\",\"requires\":{\"mime-types\":\"~2.1.34\",\"negotiator\":\"0.6.3\"}},\"ansi-styles\":{\"version\":\"3.2.1\",\"resolved\":\"https://registry.npmmirror.com/ansi-styles/-/ansi-styles-3.2.1.tgz\",\"integrity\":\"sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==\",\"dev\":true,\"requires\":{\"color-convert\":\"^1.9.0\"}},\"array-buffer-byte-length\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/array-buffer-byte-length/-/array-buffer-byte-length-1.0.0.tgz\",\"integrity\":\"sha512-LPuwb2P+NrQw3XhxGc36+XSvuBPopovXYTR9Ew++Du9Yb/bx5AzBfrIsBoj0EZUifjQU+sHL21sseZ3jerWO/A==\",\"dev\":true,\"requires\":{\"call-bind\":\"^1.0.2\",\"is-array-buffer\":\"^3.0.1\"}},\"array.prototype.reduce\":{\"version\":\"1.0.5\",\"resolved\":\"https://registry.npmmirror.com/array.prototype.reduce/-/array.prototype.reduce-1.0.5.tgz\",\"integrity\":\"sha512-kDdugMl7id9COE8R7MHF5jWk7Dqt/fs4Pv+JXoICnYwqpjjjbUurz6w5fT5IG6brLdJhv6/VoHB0H7oyIBXd+Q==\",\"dev\":true,\"requires\":{\"call-bind\":\"^1.0.2\",\"define-properties\":\"^1.1.4\",\"es-abstract\":\"^1.20.4\",\"es-array-method-boxes-properly\":\"^1.0.0\",\"is-string\":\"^1.0.7\"}},\"asap\":{\"version\":\"2.0.6\",\"resolved\":\"https://registry.npmmirror.com/asap/-/asap-2.0.6.tgz\",\"integrity\":\"sha512-BSHWgDSAiKs50o2Re8ppvp3seVHXSRM44cdSsT9FfNEUUZLOGWVCsiWaRPWM1Znn+mqZ1OfVZ3z3DWEzSp7hRA==\"},\"available-typed-arrays\":{\"version\":\"1.0.5\",\"resolved\":\"https://registry.npmmirror.com/available-typed-arrays/-/available-typed-arrays-1.0.5.tgz\",\"integrity\":\"sha512-DMD0KiN46eipeziST1LPP/STfDU0sufISXmjSgvVsoU2tqxctQeASejWcfNtxYKqETM1UxQ8sp2OrSBWpHY6sw==\",\"dev\":true},\"babel-plugin-polyfill-corejs2\":{\"version\":\"0.4.3\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-polyfill-corejs2/-/babel-plugin-polyfill-corejs2-0.4.3.tgz\",\"integrity\":\"sha512-bM3gHc337Dta490gg+/AseNB9L4YLHxq1nGKZZSHbhXv4aTYU2MD2cjza1Ru4S6975YLTaL1K8uJf6ukJhhmtw==\",\"dev\":true,\"requires\":{\"@babel/compat-data\":\"^7.17.7\",\"@babel/helper-define-polyfill-provider\":\"^0.4.0\",\"semver\":\"^6.1.1\"}},\"babel-plugin-polyfill-corejs3\":{\"version\":\"0.8.1\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-polyfill-corejs3/-/babel-plugin-polyfill-corejs3-0.8.1.tgz\",\"integrity\":\"sha512-ikFrZITKg1xH6pLND8zT14UPgjKHiGLqex7rGEZCH2EvhsneJaJPemmpQaIZV5AL03II+lXylw3UmddDK8RU5Q==\",\"dev\":true,\"requires\":{\"@babel/helper-define-polyfill-provider\":\"^0.4.0\",\"core-js-compat\":\"^3.30.1\"}},\"babel-plugin-polyfill-regenerator\":{\"version\":\"0.5.0\",\"resolved\":\"https://registry.npmmirror.com/babel-plugin-polyfill-regenerator/-/babel-plugin-polyfill-regenerator-0.5.0.tgz\",\"integrity\":\"sha512-hDJtKjMLVa7Z+LwnTCxoDLQj6wdc+B8dun7ayF2fYieI6OzfuvcLMB32ihJZ4UhCBwNYGl5bg/x/P9cMdnkc2g==\",\"dev\":true,\"requires\":{\"@babel/helper-define-polyfill-provider\":\"^0.4.0\"}},\"browserslist\":{\"version\":\"4.21.7\",\"resolved\":\"https://registry.npmmirror.com/browserslist/-/browserslist-4.21.7.tgz\",\"integrity\":\"sha512-BauCXrQ7I2ftSqd2mvKHGo85XR0u7Ru3C/Hxsy/0TkfCtjrmAbPdzLGasmoiBxplpDXlPvdjX9u7srIMfgasNA==\",\"dev\":true,\"requires\":{\"caniuse-lite\":\"^1.0.30001489\",\"electron-to-chromium\":\"^1.4.411\",\"node-releases\":\"^2.0.12\",\"update-browserslist-db\":\"^1.0.11\"}},\"bson\":{\"version\":\"5.3.0\",\"resolved\":\"https://registry.npmmirror.com/bson/-/bson-5.3.0.tgz\",\"integrity\":\"sha512-ukmCZMneMlaC5ebPHXIkP8YJzNl5DC41N5MAIvKDqLggdao342t4McltoJBQfQya/nHBWAcSsYRqlXPoQkTJag==\"},\"buffer-equal-constant-time\":{\"version\":\"1.0.1\",\"resolved\":\"https://registry.npmmirror.com/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz\",\"integrity\":\"sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA==\"},\"buffer-from\":{\"version\":\"1.1.2\",\"resolved\":\"https://registry.npmmirror.com/buffer-from/-/buffer-from-1.1.2.tgz\",\"integrity\":\"sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==\",\"dev\":true},\"bytes\":{\"version\":\"3.1.2\",\"resolved\":\"https://registry.npmmirror.com/bytes/-/bytes-3.1.2.tgz\",\"integrity\":\"sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==\"},\"cache-content-type\":{\"version\":\"1.0.1\",\"resolved\":\"https://registry.npmmirror.com/cache-content-type/-/cache-content-type-1.0.1.tgz\",\"integrity\":\"sha512-IKufZ1o4Ut42YUrZSo8+qnMTrFuKkvyoLXUywKz9GJ5BrhOFGhLdkx9sG4KAnVvbY6kEcSFjLQul+DVmBm2bgA==\",\"requires\":{\"mime-types\":\"^2.1.18\",\"ylru\":\"^1.2.0\"}},\"call-bind\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/call-bind/-/call-bind-1.0.2.tgz\",\"integrity\":\"sha512-7O+FbCihrB5WGbFYesctwmTKae6rOiIzmz1icreWJ+0aA7LJfuqhEso2T9ncpcFtzMQtzXf2QGGueWJGTYsqrA==\",\"requires\":{\"function-bind\":\"^1.1.1\",\"get-intrinsic\":\"^1.0.2\"}},\"caniuse-lite\":{\"version\":\"1.0.30001497\",\"resolved\":\"https://registry.npmmirror.com/caniuse-lite/-/caniuse-lite-1.0.30001497.tgz\",\"integrity\":\"sha512-I4/duVK4wL6rAK/aKZl3HXB4g+lIZvaT4VLAn2rCgJ38jVLb0lv2Xug6QuqmxXFVRJMF74SPPWPJ/1Sdm3vCzw==\",\"dev\":true},\"chalk\":{\"version\":\"2.4.2\",\"resolved\":\"https://registry.npmmirror.com/chalk/-/chalk-2.4.2.tgz\",\"integrity\":\"sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==\",\"dev\":true,\"requires\":{\"ansi-styles\":\"^3.2.1\",\"escape-string-regexp\":\"^1.0.5\",\"supports-color\":\"^5.3.0\"}},\"clone-deep\":{\"version\":\"4.0.1\",\"resolved\":\"https://registry.npmmirror.com/clone-deep/-/clone-deep-4.0.1.tgz\",\"integrity\":\"sha512-neHB9xuzh/wk0dIHweyAXv2aPGZIVk3pLMe+/RNzINf17fe0OG96QroktYAUm7SM1PBnzTabaLboqqxDyMU+SQ==\",\"dev\":true,\"requires\":{\"is-plain-object\":\"^2.0.4\",\"kind-of\":\"^6.0.2\",\"shallow-clone\":\"^3.0.0\"}},\"co\":{\"version\":\"4.6.0\",\"resolved\":\"https://registry.npmmirror.com/co/-/co-4.6.0.tgz\",\"integrity\":\"sha512-QVb0dM5HvG+uaxitm8wONl7jltx8dqhfU33DcqtOZcLSVIKSDDLDi7+0LbAKiyI8hD9u42m2YxXSkMGWThaecQ==\"},\"co-body\":{\"version\":\"6.1.0\",\"resolved\":\"https://registry.npmmirror.com/co-body/-/co-body-6.1.0.tgz\",\"integrity\":\"sha512-m7pOT6CdLN7FuXUcpuz/8lfQ/L77x8SchHCF4G0RBTJO20Wzmhn5Sp4/5WsKy8OSpifBSUrmg83qEqaDHdyFuQ==\",\"requires\":{\"inflation\":\"^2.0.0\",\"qs\":\"^6.5.2\",\"raw-body\":\"^2.3.3\",\"type-is\":\"^1.6.16\"}},\"color-convert\":{\"version\":\"1.9.3\",\"resolved\":\"https://registry.npmmirror.com/color-convert/-/color-convert-1.9.3.tgz\",\"integrity\":\"sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==\",\"dev\":true,\"requires\":{\"color-name\":\"1.1.3\"}},\"color-name\":{\"version\":\"1.1.3\",\"resolved\":\"https://registry.npmmirror.com/color-name/-/color-name-1.1.3.tgz\",\"integrity\":\"sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==\",\"dev\":true},\"commander\":{\"version\":\"4.1.1\",\"resolved\":\"https://registry.npmmirror.com/commander/-/commander-4.1.1.tgz\",\"integrity\":\"sha512-NOKm8xhkzAjzFx8B2v5OAHT+u5pRQc2UCa2Vq9jYL/31o2wi9mxBA7LIFs3sV5VSC49z6pEhfbMULvShKj26WA==\",\"dev\":true},\"commondir\":{\"version\":\"1.0.1\",\"resolved\":\"https://registry.npmmirror.com/commondir/-/commondir-1.0.1.tgz\",\"integrity\":\"sha512-W9pAhw0ja1Edb5GVdIF1mjZw/ASI0AlShXM83UUGe2DVr5TdAPEA1OA8m/g8zWp9x6On7gqufY+FatDbC3MDQg==\",\"dev\":true},\"content-disposition\":{\"version\":\"0.5.4\",\"resolved\":\"https://registry.npmmirror.com/content-disposition/-/content-disposition-0.5.4.tgz\",\"integrity\":\"sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==\",\"requires\":{\"safe-buffer\":\"5.2.1\"}},\"content-type\":{\"version\":\"1.0.5\",\"resolved\":\"https://registry.npmmirror.com/content-type/-/content-type-1.0.5.tgz\",\"integrity\":\"sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==\"},\"convert-source-map\":{\"version\":\"1.9.0\",\"resolved\":\"https://registry.npmmirror.com/convert-source-map/-/convert-source-map-1.9.0.tgz\",\"integrity\":\"sha512-ASFBup0Mz1uyiIjANan1jzLQami9z1PoYSZCiiYW2FczPbenXc45FZdBZLzOT+r6+iciuEModtmCti+hjaAk0A==\",\"dev\":true},\"cookies\":{\"version\":\"0.8.0\",\"resolved\":\"https://registry.npmmirror.com/cookies/-/cookies-0.8.0.tgz\",\"integrity\":\"sha512-8aPsApQfebXnuI+537McwYsDtjVxGm8gTIzQI3FDW6t5t/DAhERxtnbEPN/8RX+uZthoz4eCOgloXaE5cYyNow==\",\"requires\":{\"depd\":\"~2.0.0\",\"keygrip\":\"~1.1.0\"}},\"copy-to\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmmirror.com/copy-to/-/copy-to-2.0.1.tgz\",\"integrity\":\"sha512-3DdaFaU/Zf1AnpLiFDeNCD4TOWe3Zl2RZaTzUvWiIk5ERzcCodOE20Vqq4fzCbNoHURFHT4/us/Lfq+S2zyY4w==\"},\"core-js\":{\"version\":\"3.30.2\",\"resolved\":\"https://registry.npmmirror.com/core-js/-/core-js-3.30.2.tgz\",\"integrity\":\"sha512-uBJiDmwqsbJCWHAwjrx3cvjbMXP7xD72Dmsn5LOJpiRmE3WbBbN5rCqQ2Qh6Ek6/eOrjlWngEynBWo4VxerQhg==\",\"dev\":true},\"core-js-compat\":{\"version\":\"3.30.2\",\"resolved\":\"https://registry.npmmirror.com/core-js-compat/-/core-js-compat-3.30.2.tgz\",\"integrity\":\"sha512-nriW1nuJjUgvkEjIot1Spwakz52V9YkYHZAQG6A1eCgC8AA1p0zngrQEP9R0+V6hji5XilWKG1Bd0YRppmGimA==\",\"dev\":true,\"requires\":{\"browserslist\":\"^4.21.5\"}},\"debug\":{\"version\":\"4.3.4\",\"resolved\":\"https://registry.npmmirror.com/debug/-/debug-4.3.4.tgz\",\"integrity\":\"sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==\",\"requires\":{\"ms\":\"2.1.2\"}},\"deep-equal\":{\"version\":\"1.0.1\",\"resolved\":\"https://registry.npmmirror.com/deep-equal/-/deep-equal-1.0.1.tgz\",\"integrity\":\"sha512-bHtC0iYvWhyaTzvV3CZgPeZQqCOBGyGsVV7v4eevpdkLHfiSrXUdBG+qAuSz4RI70sszvjQ1QSZ98An1yNwpSw==\"},\"define-properties\":{\"version\":\"1.2.0\",\"resolved\":\"https://registry.npmmirror.com/define-properties/-/define-properties-1.2.0.tgz\",\"integrity\":\"sha512-xvqAVKGfT1+UAvPwKTVw/njhdQ8ZhXK4lI0bCIuCMrp2up9nPnaDftrLtmpTazqd1o+UY4zgzU+avtMbDP+ldA==\",\"dev\":true,\"requires\":{\"has-property-descriptors\":\"^1.0.0\",\"object-keys\":\"^1.1.1\"}},\"delegates\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/delegates/-/delegates-1.0.0.tgz\",\"integrity\":\"sha512-bd2L678uiWATM6m5Z1VzNCErI3jiGzt6HGY8OVICs40JQq/HALfbyNJmp0UDakEY4pMMaN0Ly5om/B1VI/+xfQ==\"},\"depd\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmmirror.com/depd/-/depd-2.0.0.tgz\",\"integrity\":\"sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==\"},\"destroy\":{\"version\":\"1.2.0\",\"resolved\":\"https://registry.npmmirror.com/destroy/-/destroy-1.2.0.tgz\",\"integrity\":\"sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==\"},\"dezalgo\":{\"version\":\"1.0.4\",\"resolved\":\"https://registry.npmmirror.com/dezalgo/-/dezalgo-1.0.4.tgz\",\"integrity\":\"sha512-rXSP0bf+5n0Qonsb+SVVfNfIsimO4HEtmnIpPHY8Q1UCzKlQrDMfdobr8nJOOsRgWCyMRqeSBQzmWUMq7zvVig==\",\"requires\":{\"asap\":\"^2.0.0\",\"wrappy\":\"1\"}},\"ecdsa-sig-formatter\":{\"version\":\"1.0.11\",\"resolved\":\"https://registry.npmmirror.com/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz\",\"integrity\":\"sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==\",\"requires\":{\"safe-buffer\":\"^5.0.1\"}},\"ee-first\":{\"version\":\"1.1.1\",\"resolved\":\"https://registry.npmmirror.com/ee-first/-/ee-first-1.1.1.tgz\",\"integrity\":\"sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==\"},\"electron-to-chromium\":{\"version\":\"1.4.427\",\"resolved\":\"https://registry.npmmirror.com/electron-to-chromium/-/electron-to-chromium-1.4.427.tgz\",\"integrity\":\"sha512-HK3r9l+Jm8dYAm1ctXEWIC+hV60zfcjS9UA5BDlYvnI5S7PU/yytjpvSrTNrSSRRkuu3tDyZhdkwIczh+0DWaw==\",\"dev\":true},\"encodeurl\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/encodeurl/-/encodeurl-1.0.2.tgz\",\"integrity\":\"sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==\"},\"es-abstract\":{\"version\":\"1.21.2\",\"resolved\":\"https://registry.npmmirror.com/es-abstract/-/es-abstract-1.21.2.tgz\",\"integrity\":\"sha512-y/B5POM2iBnIxCiernH1G7rC9qQoM77lLIMQLuob0zhp8C56Po81+2Nj0WFKnd0pNReDTnkYryc+zhOzpEIROg==\",\"dev\":true,\"requires\":{\"array-buffer-byte-length\":\"^1.0.0\",\"available-typed-arrays\":\"^1.0.5\",\"call-bind\":\"^1.0.2\",\"es-set-tostringtag\":\"^2.0.1\",\"es-to-primitive\":\"^1.2.1\",\"function.prototype.name\":\"^1.1.5\",\"get-intrinsic\":\"^1.2.0\",\"get-symbol-description\":\"^1.0.0\",\"globalthis\":\"^1.0.3\",\"gopd\":\"^1.0.1\",\"has\":\"^1.0.3\",\"has-property-descriptors\":\"^1.0.0\",\"has-proto\":\"^1.0.1\",\"has-symbols\":\"^1.0.3\",\"internal-slot\":\"^1.0.5\",\"is-array-buffer\":\"^3.0.2\",\"is-callable\":\"^1.2.7\",\"is-negative-zero\":\"^2.0.2\",\"is-regex\":\"^1.1.4\",\"is-shared-array-buffer\":\"^1.0.2\",\"is-string\":\"^1.0.7\",\"is-typed-array\":\"^1.1.10\",\"is-weakref\":\"^1.0.2\",\"object-inspect\":\"^1.12.3\",\"object-keys\":\"^1.1.1\",\"object.assign\":\"^4.1.4\",\"regexp.prototype.flags\":\"^1.4.3\",\"safe-regex-test\":\"^1.0.0\",\"string.prototype.trim\":\"^1.2.7\",\"string.prototype.trimend\":\"^1.0.6\",\"string.prototype.trimstart\":\"^1.0.6\",\"typed-array-length\":\"^1.0.4\",\"unbox-primitive\":\"^1.0.2\",\"which-typed-array\":\"^1.1.9\"}},\"es-array-method-boxes-properly\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/es-array-method-boxes-properly/-/es-array-method-boxes-properly-1.0.0.tgz\",\"integrity\":\"sha512-wd6JXUmyHmt8T5a2xreUwKcGPq6f1f+WwIJkijUqiGcJz1qqnZgP6XIK+QyIWU5lT7imeNxUll48bziG+TSYcA==\",\"dev\":true},\"es-set-tostringtag\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmmirror.com/es-set-tostringtag/-/es-set-tostringtag-2.0.1.tgz\",\"integrity\":\"sha512-g3OMbtlwY3QewlqAiMLI47KywjWZoEytKr8pf6iTC8uJq5bIAH52Z9pnQ8pVL6whrCto53JZDuUIsifGeLorTg==\",\"dev\":true,\"requires\":{\"get-intrinsic\":\"^1.1.3\",\"has\":\"^1.0.3\",\"has-tostringtag\":\"^1.0.0\"}},\"es-to-primitive\":{\"version\":\"1.2.1\",\"resolved\":\"https://registry.npmmirror.com/es-to-primitive/-/es-to-primitive-1.2.1.tgz\",\"integrity\":\"sha512-QCOllgZJtaUo9miYBcLChTUaHNjJF3PYs1VidD7AwiEj1kYxKeQTctLAezAOH5ZKRH0g2IgPn6KwB4IT8iRpvA==\",\"dev\":true,\"requires\":{\"is-callable\":\"^1.1.4\",\"is-date-object\":\"^1.0.1\",\"is-symbol\":\"^1.0.2\"}},\"escalade\":{\"version\":\"3.1.1\",\"resolved\":\"https://registry.npmmirror.com/escalade/-/escalade-3.1.1.tgz\",\"integrity\":\"sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==\",\"dev\":true},\"escape-html\":{\"version\":\"1.0.3\",\"resolved\":\"https://registry.npmmirror.com/escape-html/-/escape-html-1.0.3.tgz\",\"integrity\":\"sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==\"},\"escape-string-regexp\":{\"version\":\"1.0.5\",\"resolved\":\"https://registry.npmmirror.com/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz\",\"integrity\":\"sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==\",\"dev\":true},\"esutils\":{\"version\":\"2.0.3\",\"resolved\":\"https://registry.npmmirror.com/esutils/-/esutils-2.0.3.tgz\",\"integrity\":\"sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==\",\"dev\":true},\"find-cache-dir\":{\"version\":\"2.1.0\",\"resolved\":\"https://registry.npmmirror.com/find-cache-dir/-/find-cache-dir-2.1.0.tgz\",\"integrity\":\"sha512-Tq6PixE0w/VMFfCgbONnkiQIVol/JJL7nRMi20fqzA4NRs9AfeqMGeRdPi3wIhYkxjeBaWh2rxwapn5Tu3IqOQ==\",\"dev\":true,\"requires\":{\"commondir\":\"^1.0.1\",\"make-dir\":\"^2.0.0\",\"pkg-dir\":\"^3.0.0\"}},\"find-up\":{\"version\":\"3.0.0\",\"resolved\":\"https://registry.npmmirror.com/find-up/-/find-up-3.0.0.tgz\",\"integrity\":\"sha512-1yD6RmLI1XBfxugvORwlck6f75tYL+iR0jqwsOrOxMZyGYqUuDhJ0l4AXdO1iX/FTs9cBAMEk1gWSEx1kSbylg==\",\"dev\":true,\"requires\":{\"locate-path\":\"^3.0.0\"}},\"for-each\":{\"version\":\"0.3.3\",\"resolved\":\"https://registry.npmmirror.com/for-each/-/for-each-0.3.3.tgz\",\"integrity\":\"sha512-jqYfLp7mo9vIyQf8ykW2v7A+2N4QjeCeI5+Dz9XraiO1ign81wjiH7Fb9vSOWvQfNtmSa4H2RoQTrrXivdUZmw==\",\"dev\":true,\"requires\":{\"is-callable\":\"^1.1.3\"}},\"formidable\":{\"version\":\"2.1.1\",\"resolved\":\"https://registry.npmmirror.com/formidable/-/formidable-2.1.1.tgz\",\"integrity\":\"sha512-0EcS9wCFEzLvfiks7omJ+SiYJAiD+TzK4Pcw1UlUoGnhUxDcMKjt0P7x8wEb0u6OHu8Nb98WG3nxtlF5C7bvUQ==\",\"requires\":{\"dezalgo\":\"^1.0.4\",\"hexoid\":\"^1.0.0\",\"once\":\"^1.4.0\",\"qs\":\"^6.11.0\"}},\"fresh\":{\"version\":\"0.5.2\",\"resolved\":\"https://registry.npmmirror.com/fresh/-/fresh-0.5.2.tgz\",\"integrity\":\"sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==\"},\"function-bind\":{\"version\":\"1.1.1\",\"resolved\":\"https://registry.npmmirror.com/function-bind/-/function-bind-1.1.1.tgz\",\"integrity\":\"sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A==\"},\"function.prototype.name\":{\"version\":\"1.1.5\",\"resolved\":\"https://registry.npmmirror.com/function.prototype.name/-/function.prototype.name-1.1.5.tgz\",\"integrity\":\"sha512-uN7m/BzVKQnCUF/iW8jYea67v++2u7m5UgENbHRtdDVclOUP+FMPlCNdmk0h/ysGyo2tavMJEDqJAkJdRa1vMA==\",\"dev\":true,\"requires\":{\"call-bind\":\"^1.0.2\",\"define-properties\":\"^1.1.3\",\"es-abstract\":\"^1.19.0\",\"functions-have-names\":\"^1.2.2\"}},\"functions-have-names\":{\"version\":\"1.2.3\",\"resolved\":\"https://registry.npmmirror.com/functions-have-names/-/functions-have-names-1.2.3.tgz\",\"integrity\":\"sha512-xckBUXyTIqT97tq2x2AMb+g163b5JFysYk0x4qxNFwbfQkmNZoiRHb6sPzI9/QV33WeuvVYBUIiD4NzNIyqaRQ==\",\"dev\":true},\"gensync\":{\"version\":\"1.0.0-beta.2\",\"resolved\":\"https://registry.npmmirror.com/gensync/-/gensync-1.0.0-beta.2.tgz\",\"integrity\":\"sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==\",\"dev\":true},\"get-intrinsic\":{\"version\":\"1.2.1\",\"resolved\":\"https://registry.npmmirror.com/get-intrinsic/-/get-intrinsic-1.2.1.tgz\",\"integrity\":\"sha512-2DcsyfABl+gVHEfCOaTrWgyt+tb6MSEGmKq+kI5HwLbIYgjgmMcV8KQ41uaKz1xxUcn9tJtgFbQUEVcEbd0FYw==\",\"requires\":{\"function-bind\":\"^1.1.1\",\"has\":\"^1.0.3\",\"has-proto\":\"^1.0.1\",\"has-symbols\":\"^1.0.3\"}},\"get-symbol-description\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/get-symbol-description/-/get-symbol-description-1.0.0.tgz\",\"integrity\":\"sha512-2EmdH1YvIQiZpltCNgkuiUnyukzxM/R6NDJX31Ke3BG1Nq5b0S2PhX59UKi9vZpPDQVdqn+1IcaAwnzTT5vCjw==\",\"dev\":true,\"requires\":{\"call-bind\":\"^1.0.2\",\"get-intrinsic\":\"^1.1.1\"}},\"globals\":{\"version\":\"11.12.0\",\"resolved\":\"https://registry.npmmirror.com/globals/-/globals-11.12.0.tgz\",\"integrity\":\"sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==\",\"dev\":true},\"globalthis\":{\"version\":\"1.0.3\",\"resolved\":\"https://registry.npmmirror.com/globalthis/-/globalthis-1.0.3.tgz\",\"integrity\":\"sha512-sFdI5LyBiNTHjRd7cGPWapiHWMOXKyuBNX/cWJ3NfzrZQVa8GI/8cofCl74AOVqq9W5kNmguTIzJ/1s2gyI9wA==\",\"dev\":true,\"requires\":{\"define-properties\":\"^1.1.3\"}},\"gopd\":{\"version\":\"1.0.1\",\"resolved\":\"https://registry.npmmirror.com/gopd/-/gopd-1.0.1.tgz\",\"integrity\":\"sha512-d65bNlIadxvpb/A2abVdlqKqV563juRnZ1Wtk6s1sIR8uNsXR70xqIzVqxVf1eTqDunwT2MkczEeaezCKTZhwA==\",\"dev\":true,\"requires\":{\"get-intrinsic\":\"^1.1.3\"}},\"has\":{\"version\":\"1.0.3\",\"resolved\":\"https://registry.npmmirror.com/has/-/has-1.0.3.tgz\",\"integrity\":\"sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==\",\"requires\":{\"function-bind\":\"^1.1.1\"}},\"has-bigints\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/has-bigints/-/has-bigints-1.0.2.tgz\",\"integrity\":\"sha512-tSvCKtBr9lkF0Ex0aQiP9N+OpV4zi2r/Nee5VkRDbaqv35RLYMzbwQfFSZZH0kR+Rd6302UJZ2p/bJCEoR3VoQ==\",\"dev\":true},\"has-flag\":{\"version\":\"3.0.0\",\"resolved\":\"https://registry.npmmirror.com/has-flag/-/has-flag-3.0.0.tgz\",\"integrity\":\"sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==\",\"dev\":true},\"has-property-descriptors\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/has-property-descriptors/-/has-property-descriptors-1.0.0.tgz\",\"integrity\":\"sha512-62DVLZGoiEBDHQyqG4w9xCuZ7eJEwNmJRWw2VY84Oedb7WFcA27fiEVe8oUQx9hAUJ4ekurquucTGwsyO1XGdQ==\",\"dev\":true,\"requires\":{\"get-intrinsic\":\"^1.1.1\"}},\"has-proto\":{\"version\":\"1.0.1\",\"resolved\":\"https://registry.npmmirror.com/has-proto/-/has-proto-1.0.1.tgz\",\"integrity\":\"sha512-7qE+iP+O+bgF9clE5+UoBFzE65mlBiVj3tKCrlNQ0Ogwm0BjpT/gK4SlLYDMybDh5I3TCTKnPPa0oMG7JDYrhg==\"},\"has-symbols\":{\"version\":\"1.0.3\",\"resolved\":\"https://registry.npmmirror.com/has-symbols/-/has-symbols-1.0.3.tgz\",\"integrity\":\"sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A==\"},\"has-tostringtag\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/has-tostringtag/-/has-tostringtag-1.0.0.tgz\",\"integrity\":\"sha512-kFjcSNhnlGV1kyoGk7OXKSawH5JOb/LzUc5w9B02hOTO0dfFRjbHQKvg1d6cf3HbeUmtU9VbbV3qzZ2Teh97WQ==\",\"requires\":{\"has-symbols\":\"^1.0.2\"}},\"hexoid\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/hexoid/-/hexoid-1.0.0.tgz\",\"integrity\":\"sha512-QFLV0taWQOZtvIRIAdBChesmogZrtuXvVWsFHZTk2SU+anspqZ2vMnoLg7IE1+Uk16N19APic1BuF8bC8c2m5g==\"},\"homedir-polyfill\":{\"version\":\"1.0.3\",\"resolved\":\"https://registry.npmmirror.com/homedir-polyfill/-/homedir-polyfill-1.0.3.tgz\",\"integrity\":\"sha512-eSmmWE5bZTK2Nou4g0AI3zZ9rswp7GRKoKXS1BLUkvPviOqs4YTN1djQIqrXy9k5gEtdLPy86JjRwsNM9tnDcA==\",\"dev\":true,\"requires\":{\"parse-passwd\":\"^1.0.0\"}},\"http-assert\":{\"version\":\"1.5.0\",\"resolved\":\"https://registry.npmmirror.com/http-assert/-/http-assert-1.5.0.tgz\",\"integrity\":\"sha512-uPpH7OKX4H25hBmU6G1jWNaqJGpTXxey+YOUizJUAgu0AjLUeC8D73hTrhvDS5D+GJN1DN1+hhc/eF/wpxtp0w==\",\"requires\":{\"deep-equal\":\"~1.0.1\",\"http-errors\":\"~1.8.0\"}},\"http-errors\":{\"version\":\"1.8.1\",\"resolved\":\"https://registry.npmmirror.com/http-errors/-/http-errors-1.8.1.tgz\",\"integrity\":\"sha512-Kpk9Sm7NmI+RHhnj6OIWDI1d6fIoFAtFt9RLaTMRlg/8w49juAStsrBgp0Dp4OdxdVbRIeKhtCUvoi/RuAhO4g==\",\"requires\":{\"depd\":\"~1.1.2\",\"inherits\":\"2.0.4\",\"setprototypeof\":\"1.2.0\",\"statuses\":\">= 1.5.0 < 2\",\"toidentifier\":\"1.0.1\"},\"dependencies\":{\"depd\":{\"version\":\"1.1.2\",\"resolved\":\"https://registry.npmmirror.com/depd/-/depd-1.1.2.tgz\",\"integrity\":\"sha512-7emPTl6Dpo6JRXOXjLRxck+FlLRX5847cLKEn00PLAgc3g2hTZZgr+e4c2v6QpSmLeFP3n5yUo7ft6avBK/5jQ==\"}}},\"iconv-lite\":{\"version\":\"0.4.24\",\"resolved\":\"https://registry.npmmirror.com/iconv-lite/-/iconv-lite-0.4.24.tgz\",\"integrity\":\"sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==\",\"requires\":{\"safer-buffer\":\">= 2.1.2 < 3\"}},\"inflation\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmmirror.com/inflation/-/inflation-2.0.0.tgz\",\"integrity\":\"sha512-m3xv4hJYR2oXw4o4Y5l6P5P16WYmazYof+el6Al3f+YlggGj6qT9kImBAnzDelRALnP5d3h4jGBPKzYCizjZZw==\"},\"inherits\":{\"version\":\"2.0.4\",\"resolved\":\"https://registry.npmmirror.com/inherits/-/inherits-2.0.4.tgz\",\"integrity\":\"sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==\"},\"internal-slot\":{\"version\":\"1.0.5\",\"resolved\":\"https://registry.npmmirror.com/internal-slot/-/internal-slot-1.0.5.tgz\",\"integrity\":\"sha512-Y+R5hJrzs52QCG2laLn4udYVnxsfny9CpOhNhUvk/SSSVyF6T27FzRbF0sroPidSu3X8oEAkOn2K804mjpt6UQ==\",\"dev\":true,\"requires\":{\"get-intrinsic\":\"^1.2.0\",\"has\":\"^1.0.3\",\"side-channel\":\"^1.0.4\"}},\"ip\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmmirror.com/ip/-/ip-2.0.0.tgz\",\"integrity\":\"sha512-WKa+XuLG1A1R0UWhl2+1XQSi+fZWMsYKffMZTTYsiZaUD8k2yDAj5atimTUD2TZkyCkNEeYE5NhFZmupOGtjYQ==\"},\"is-array-buffer\":{\"version\":\"3.0.2\",\"resolved\":\"https://registry.npmmirror.com/is-array-buffer/-/is-array-buffer-3.0.2.tgz\",\"integrity\":\"sha512-y+FyyR/w8vfIRq4eQcM1EYgSTnmHXPqaF+IgzgraytCFq5Xh8lllDVmAZolPJiZttZLeFSINPYMaEJ7/vWUa1w==\",\"dev\":true,\"requires\":{\"call-bind\":\"^1.0.2\",\"get-intrinsic\":\"^1.2.0\",\"is-typed-array\":\"^1.1.10\"}},\"is-bigint\":{\"version\":\"1.0.4\",\"resolved\":\"https://registry.npmmirror.com/is-bigint/-/is-bigint-1.0.4.tgz\",\"integrity\":\"sha512-zB9CruMamjym81i2JZ3UMn54PKGsQzsJeo6xvN3HJJ4CAsQNB6iRutp2To77OfCNuoxspsIhzaPoO1zyCEhFOg==\",\"dev\":true,\"requires\":{\"has-bigints\":\"^1.0.1\"}},\"is-boolean-object\":{\"version\":\"1.1.2\",\"resolved\":\"https://registry.npmmirror.com/is-boolean-object/-/is-boolean-object-1.1.2.tgz\",\"integrity\":\"sha512-gDYaKHJmnj4aWxyj6YHyXVpdQawtVLHU5cb+eztPGczf6cjuTdwve5ZIEfgXqH4e57An1D1AKf8CZ3kYrQRqYA==\",\"dev\":true,\"requires\":{\"call-bind\":\"^1.0.2\",\"has-tostringtag\":\"^1.0.0\"}},\"is-callable\":{\"version\":\"1.2.7\",\"resolved\":\"https://registry.npmmirror.com/is-callable/-/is-callable-1.2.7.tgz\",\"integrity\":\"sha512-1BC0BVFhS/p0qtw6enp8e+8OD0UrK0oFLztSjNzhcKA3WDuJxxAPXzPuPtKkjEY9UUoEWlX/8fgKeu2S8i9JTA==\",\"dev\":true},\"is-core-module\":{\"version\":\"2.12.1\",\"resolved\":\"https://registry.npmmirror.com/is-core-module/-/is-core-module-2.12.1.tgz\",\"integrity\":\"sha512-Q4ZuBAe2FUsKtyQJoQHlvP8OvBERxO3jEmy1I7hcRXcJBGGHFh/aJBswbXuS9sgrDH2QUO8ilkwNPHvHMd8clg==\",\"dev\":true,\"requires\":{\"has\":\"^1.0.3\"}},\"is-date-object\":{\"version\":\"1.0.5\",\"resolved\":\"https://registry.npmmirror.com/is-date-object/-/is-date-object-1.0.5.tgz\",\"integrity\":\"sha512-9YQaSxsAiSwcvS33MBk3wTCVnWK+HhF8VZR2jRxehM16QcVOdHqPn4VPHmRK4lSr38n9JriurInLcP90xsYNfQ==\",\"dev\":true,\"requires\":{\"has-tostringtag\":\"^1.0.0\"}},\"is-generator-function\":{\"version\":\"1.0.10\",\"resolved\":\"https://registry.npmmirror.com/is-generator-function/-/is-generator-function-1.0.10.tgz\",\"integrity\":\"sha512-jsEjy9l3yiXEQ+PsXdmBwEPcOxaXWLspKdplFUVI9vq1iZgIekeC0L167qeu86czQaxed3q/Uzuw0swL0irL8A==\",\"requires\":{\"has-tostringtag\":\"^1.0.0\"}},\"is-negative-zero\":{\"version\":\"2.0.2\",\"resolved\":\"https://registry.npmmirror.com/is-negative-zero/-/is-negative-zero-2.0.2.tgz\",\"integrity\":\"sha512-dqJvarLawXsFbNDeJW7zAz8ItJ9cd28YufuuFzh0G8pNHjJMnY08Dv7sYX2uF5UpQOwieAeOExEYAWWfu7ZZUA==\",\"dev\":true},\"is-number-object\":{\"version\":\"1.0.7\",\"resolved\":\"https://registry.npmmirror.com/is-number-object/-/is-number-object-1.0.7.tgz\",\"integrity\":\"sha512-k1U0IRzLMo7ZlYIfzRu23Oh6MiIFasgpb9X76eqfFZAqwH44UI4KTBvBYIZ1dSL9ZzChTB9ShHfLkR4pdW5krQ==\",\"dev\":true,\"requires\":{\"has-tostringtag\":\"^1.0.0\"}},\"is-plain-object\":{\"version\":\"2.0.4\",\"resolved\":\"https://registry.npmmirror.com/is-plain-object/-/is-plain-object-2.0.4.tgz\",\"integrity\":\"sha512-h5PpgXkWitc38BBMYawTYMWJHFZJVnBquFE57xFpjB8pJFiF6gZ+bU+WyI/yqXiFR5mdLsgYNaPe8uao6Uv9Og==\",\"dev\":true,\"requires\":{\"isobject\":\"^3.0.1\"}},\"is-regex\":{\"version\":\"1.1.4\",\"resolved\":\"https://registry.npmmirror.com/is-regex/-/is-regex-1.1.4.tgz\",\"integrity\":\"sha512-kvRdxDsxZjhzUX07ZnLydzS1TU/TJlTUHHY4YLL87e37oUA49DfkLqgy+VjFocowy29cKvcSiu+kIv728jTTVg==\",\"dev\":true,\"requires\":{\"call-bind\":\"^1.0.2\",\"has-tostringtag\":\"^1.0.0\"}},\"is-shared-array-buffer\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/is-shared-array-buffer/-/is-shared-array-buffer-1.0.2.tgz\",\"integrity\":\"sha512-sqN2UDu1/0y6uvXyStCOzyhAjCSlHceFoMKJW8W9EU9cvic/QdsZ0kEU93HEy3IUEFZIiH/3w+AH/UQbPHNdhA==\",\"dev\":true,\"requires\":{\"call-bind\":\"^1.0.2\"}},\"is-string\":{\"version\":\"1.0.7\",\"resolved\":\"https://registry.npmmirror.com/is-string/-/is-string-1.0.7.tgz\",\"integrity\":\"sha512-tE2UXzivje6ofPW7l23cjDOMa09gb7xlAqG6jG5ej6uPV32TlWP3NKPigtaGeHNu9fohccRYvIiZMfOOnOYUtg==\",\"dev\":true,\"requires\":{\"has-tostringtag\":\"^1.0.0\"}},\"is-symbol\":{\"version\":\"1.0.4\",\"resolved\":\"https://registry.npmmirror.com/is-symbol/-/is-symbol-1.0.4.tgz\",\"integrity\":\"sha512-C/CPBqKWnvdcxqIARxyOh4v1UUEOCHpgDa0WYgpKDFMszcrPcffg5uhwSgPCLD2WWxmq6isisz87tzT01tuGhg==\",\"dev\":true,\"requires\":{\"has-symbols\":\"^1.0.2\"}},\"is-typed-array\":{\"version\":\"1.1.10\",\"resolved\":\"https://registry.npmmirror.com/is-typed-array/-/is-typed-array-1.1.10.tgz\",\"integrity\":\"sha512-PJqgEHiWZvMpaFZ3uTc8kHPM4+4ADTlDniuQL7cU/UDA0Ql7F70yGfHph3cLNe+c9toaigv+DFzTJKhc2CtO6A==\",\"dev\":true,\"requires\":{\"available-typed-arrays\":\"^1.0.5\",\"call-bind\":\"^1.0.2\",\"for-each\":\"^0.3.3\",\"gopd\":\"^1.0.1\",\"has-tostringtag\":\"^1.0.0\"}},\"is-weakref\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/is-weakref/-/is-weakref-1.0.2.tgz\",\"integrity\":\"sha512-qctsuLZmIQ0+vSSMfoVvyFe2+GSEvnmZ2ezTup1SBse9+twCCeial6EEi3Nc2KFcf6+qz2FBPnjXsk8xhKSaPQ==\",\"dev\":true,\"requires\":{\"call-bind\":\"^1.0.2\"}},\"isarray\":{\"version\":\"2.0.5\",\"resolved\":\"https://registry.npmmirror.com/isarray/-/isarray-2.0.5.tgz\",\"integrity\":\"sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==\",\"dev\":true},\"isobject\":{\"version\":\"3.0.1\",\"resolved\":\"https://registry.npmmirror.com/isobject/-/isobject-3.0.1.tgz\",\"integrity\":\"sha512-WhB9zCku7EGTj/HQQRz5aUQEUeoQZH2bWcltRErOpymJ4boYE6wL9Tbr23krRPSZ+C5zqNSrSw+Cc7sZZ4b7vg==\",\"dev\":true},\"js-tokens\":{\"version\":\"4.0.0\",\"resolved\":\"https://registry.npmmirror.com/js-tokens/-/js-tokens-4.0.0.tgz\",\"integrity\":\"sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==\",\"dev\":true},\"jsesc\":{\"version\":\"2.5.2\",\"resolved\":\"https://registry.npmmirror.com/jsesc/-/jsesc-2.5.2.tgz\",\"integrity\":\"sha512-OYu7XEzjkCQ3C5Ps3QIZsQfNpqoJyZZA99wd9aWd05NCtC5pWOkShK2mkL6HXQR6/Cy2lbNdPlZBpuQHXE63gA==\",\"dev\":true},\"json5\":{\"version\":\"2.2.3\",\"resolved\":\"https://registry.npmmirror.com/json5/-/json5-2.2.3.tgz\",\"integrity\":\"sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==\",\"dev\":true},\"jsonwebtoken\":{\"version\":\"9.0.0\",\"resolved\":\"https://registry.npmmirror.com/jsonwebtoken/-/jsonwebtoken-9.0.0.tgz\",\"integrity\":\"sha512-tuGfYXxkQGDPnLJ7SibiQgVgeDgfbPq2k2ICcbgqW8WxWLBAxKQM/ZCu/IT8SOSwmaYl4dpTFCW5xZv7YbbWUw==\",\"requires\":{\"jws\":\"^3.2.2\",\"lodash\":\"^4.17.21\",\"ms\":\"^2.1.1\",\"semver\":\"^7.3.8\"},\"dependencies\":{\"lru-cache\":{\"version\":\"6.0.0\",\"resolved\":\"https://registry.npmmirror.com/lru-cache/-/lru-cache-6.0.0.tgz\",\"integrity\":\"sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==\",\"requires\":{\"yallist\":\"^4.0.0\"}},\"semver\":{\"version\":\"7.5.1\",\"resolved\":\"https://registry.npmmirror.com/semver/-/semver-7.5.1.tgz\",\"integrity\":\"sha512-Wvss5ivl8TMRZXXESstBA4uR5iXgEN/VC5/sOcuXdVLzcdkz4HWetIoRfG5gb5X+ij/G9rw9YoGn3QoQ8OCSpw==\",\"requires\":{\"lru-cache\":\"^6.0.0\"}},\"yallist\":{\"version\":\"4.0.0\",\"resolved\":\"https://registry.npmmirror.com/yallist/-/yallist-4.0.0.tgz\",\"integrity\":\"sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==\"}}},\"jwa\":{\"version\":\"1.4.1\",\"resolved\":\"https://registry.npmmirror.com/jwa/-/jwa-1.4.1.tgz\",\"integrity\":\"sha512-qiLX/xhEEFKUAJ6FiBMbes3w9ATzyk5W7Hvzpa/SLYdxNtng+gcurvrI7TbACjIXlsJyr05/S1oUhZrc63evQA==\",\"requires\":{\"buffer-equal-constant-time\":\"1.0.1\",\"ecdsa-sig-formatter\":\"1.0.11\",\"safe-buffer\":\"^5.0.1\"}},\"jws\":{\"version\":\"3.2.2\",\"resolved\":\"https://registry.npmmirror.com/jws/-/jws-3.2.2.tgz\",\"integrity\":\"sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==\",\"requires\":{\"jwa\":\"^1.4.1\",\"safe-buffer\":\"^5.0.1\"}},\"kareem\":{\"version\":\"2.5.1\",\"resolved\":\"https://registry.npmmirror.com/kareem/-/kareem-2.5.1.tgz\",\"integrity\":\"sha512-7jFxRVm+jD+rkq3kY0iZDJfsO2/t4BBPeEb2qKn2lR/9KhuksYk5hxzfRYWMPV8P/x2d0kHD306YyWLzjjH+uA==\"},\"keygrip\":{\"version\":\"1.1.0\",\"resolved\":\"https://registry.npmmirror.com/keygrip/-/keygrip-1.1.0.tgz\",\"integrity\":\"sha512-iYSchDJ+liQ8iwbSI2QqsQOvqv58eJCEanyJPJi+Khyu8smkcKSFUCbPwzFcL7YVtZ6eONjqRX/38caJ7QjRAQ==\",\"requires\":{\"tsscmp\":\"1.0.6\"}},\"kind-of\":{\"version\":\"6.0.3\",\"resolved\":\"https://registry.npmmirror.com/kind-of/-/kind-of-6.0.3.tgz\",\"integrity\":\"sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==\",\"dev\":true},\"koa\":{\"version\":\"2.14.2\",\"resolved\":\"https://registry.npmmirror.com/koa/-/koa-2.14.2.tgz\",\"integrity\":\"sha512-VFI2bpJaodz6P7x2uyLiX6RLYpZmOJqNmoCst/Yyd7hQlszyPwG/I9CQJ63nOtKSxpt5M7NH67V6nJL2BwCl7g==\",\"requires\":{\"accepts\":\"^1.3.5\",\"cache-content-type\":\"^1.0.0\",\"content-disposition\":\"~0.5.2\",\"content-type\":\"^1.0.4\",\"cookies\":\"~0.8.0\",\"debug\":\"^4.3.2\",\"delegates\":\"^1.0.0\",\"depd\":\"^2.0.0\",\"destroy\":\"^1.0.4\",\"encodeurl\":\"^1.0.2\",\"escape-html\":\"^1.0.3\",\"fresh\":\"~0.5.2\",\"http-assert\":\"^1.3.0\",\"http-errors\":\"^1.6.3\",\"is-generator-function\":\"^1.0.7\",\"koa-compose\":\"^4.1.0\",\"koa-convert\":\"^2.0.0\",\"on-finished\":\"^2.3.0\",\"only\":\"~0.0.2\",\"parseurl\":\"^1.3.2\",\"statuses\":\"^1.5.0\",\"type-is\":\"^1.6.16\",\"vary\":\"^1.1.2\"}},\"koa-body\":{\"version\":\"6.0.1\",\"resolved\":\"https://registry.npmmirror.com/koa-body/-/koa-body-6.0.1.tgz\",\"integrity\":\"sha512-M8ZvMD8r+kPHy28aWP9VxL7kY8oPWA+C7ZgCljrCMeaU7uX6wsIQgDHskyrAr9sw+jqnIXyv4Mlxri5R4InIJg==\",\"requires\":{\"@types/co-body\":\"^6.1.0\",\"@types/formidable\":\"^2.0.5\",\"@types/koa\":\"^2.13.5\",\"co-body\":\"^6.1.0\",\"formidable\":\"^2.0.1\",\"zod\":\"^3.19.1\"}},\"koa-bodyparser\":{\"version\":\"4.4.0\",\"resolved\":\"https://registry.npmmirror.com/koa-bodyparser/-/koa-bodyparser-4.4.0.tgz\",\"integrity\":\"sha512-AXPY7wwKZUmbgb8VkTEUFoRNOlx6aWRJwEnQD+zfNf33/7KSAkN4Oo9BqlIk80D+5TvuqlhpQT5dPVcyxl5Zsw==\",\"requires\":{\"co-body\":\"^6.0.0\",\"copy-to\":\"^2.0.1\"}},\"koa-compose\":{\"version\":\"4.1.0\",\"resolved\":\"https://registry.npmmirror.com/koa-compose/-/koa-compose-4.1.0.tgz\",\"integrity\":\"sha512-8ODW8TrDuMYvXRwra/Kh7/rJo9BtOfPc6qO8eAfC80CnCvSjSl0bkRM24X6/XBBEyj0v1nRUQ1LyOy3dbqOWXw==\"},\"koa-convert\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmmirror.com/koa-convert/-/koa-convert-2.0.0.tgz\",\"integrity\":\"sha512-asOvN6bFlSnxewce2e/DK3p4tltyfC4VM7ZwuTuepI7dEQVcvpyFuBcEARu1+Hxg8DIwytce2n7jrZtRlPrARA==\",\"requires\":{\"co\":\"^4.6.0\",\"koa-compose\":\"^4.1.0\"}},\"koa-router\":{\"version\":\"12.0.0\",\"resolved\":\"https://registry.npmmirror.com/koa-router/-/koa-router-12.0.0.tgz\",\"integrity\":\"sha512-zGrdiXygGYW8WvrzeGsHZvKnHs4DzyGoqJ9a8iHlRkiwuEAOAPyI27//OlhoWdgFAEIM3qbUgr0KCuRaP/TCag==\",\"requires\":{\"http-errors\":\"^2.0.0\",\"koa-compose\":\"^4.1.0\",\"methods\":\"^1.1.2\",\"path-to-regexp\":\"^6.2.1\"},\"dependencies\":{\"http-errors\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmmirror.com/http-errors/-/http-errors-2.0.0.tgz\",\"integrity\":\"sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==\",\"requires\":{\"depd\":\"2.0.0\",\"inherits\":\"2.0.4\",\"setprototypeof\":\"1.2.0\",\"statuses\":\"2.0.1\",\"toidentifier\":\"1.0.1\"}},\"statuses\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmmirror.com/statuses/-/statuses-2.0.1.tgz\",\"integrity\":\"sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==\"}}},\"koa-send\":{\"version\":\"5.0.1\",\"resolved\":\"https://registry.npmmirror.com/koa-send/-/koa-send-5.0.1.tgz\",\"integrity\":\"sha512-tmcyQ/wXXuxpDxyNXv5yNNkdAMdFRqwtegBXUaowiQzUKqJehttS0x2j0eOZDQAyloAth5w6wwBImnFzkUz3pQ==\",\"requires\":{\"debug\":\"^4.1.1\",\"http-errors\":\"^1.7.3\",\"resolve-path\":\"^1.4.0\"}},\"koa-static\":{\"version\":\"5.0.0\",\"resolved\":\"https://registry.npmmirror.com/koa-static/-/koa-static-5.0.0.tgz\",\"integrity\":\"sha512-UqyYyH5YEXaJrf9S8E23GoJFQZXkBVJ9zYYMPGz919MSX1KuvAcycIuS0ci150HCoPf4XQVhQ84Qf8xRPWxFaQ==\",\"requires\":{\"debug\":\"^3.1.0\",\"koa-send\":\"^5.0.0\"},\"dependencies\":{\"debug\":{\"version\":\"3.2.7\",\"resolved\":\"https://registry.npmmirror.com/debug/-/debug-3.2.7.tgz\",\"integrity\":\"sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==\",\"requires\":{\"ms\":\"^2.1.1\"}}}},\"locate-path\":{\"version\":\"3.0.0\",\"resolved\":\"https://registry.npmmirror.com/locate-path/-/locate-path-3.0.0.tgz\",\"integrity\":\"sha512-7AO748wWnIhNqAuaty2ZWHkQHRSNfPVIsPIfwEOWO22AmaoVrWavlOcMR5nzTLNYvp36X220/maaRsrec1G65A==\",\"dev\":true,\"requires\":{\"p-locate\":\"^3.0.0\",\"path-exists\":\"^3.0.0\"}},\"lodash\":{\"version\":\"4.17.21\",\"resolved\":\"https://registry.npmmirror.com/lodash/-/lodash-4.17.21.tgz\",\"integrity\":\"sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==\"},\"lodash.debounce\":{\"version\":\"4.0.8\",\"resolved\":\"https://registry.npmmirror.com/lodash.debounce/-/lodash.debounce-4.0.8.tgz\",\"integrity\":\"sha512-FT1yDzDYEoYWhnSGnpE/4Kj1fLZkDFyqRb7fNt6FdYOSxlUWAtp42Eh6Wb0rGIv/m9Bgo7x4GhQbm5Ys4SG5ow==\",\"dev\":true},\"lru-cache\":{\"version\":\"5.1.1\",\"resolved\":\"https://registry.npmmirror.com/lru-cache/-/lru-cache-5.1.1.tgz\",\"integrity\":\"sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==\",\"dev\":true,\"requires\":{\"yallist\":\"^3.0.2\"}},\"make-dir\":{\"version\":\"2.1.0\",\"resolved\":\"https://registry.npmmirror.com/make-dir/-/make-dir-2.1.0.tgz\",\"integrity\":\"sha512-LS9X+dc8KLxXCb8dni79fLIIUA5VyZoyjSMCwTluaXA0o27cCK0bhXkpgw+sTXVpPy/lSO57ilRixqk0vDmtRA==\",\"dev\":true,\"requires\":{\"pify\":\"^4.0.1\",\"semver\":\"^5.6.0\"},\"dependencies\":{\"semver\":{\"version\":\"5.7.1\",\"resolved\":\"https://registry.npmmirror.com/semver/-/semver-5.7.1.tgz\",\"integrity\":\"sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ==\",\"dev\":true}}},\"media-typer\":{\"version\":\"0.3.0\",\"resolved\":\"https://registry.npmmirror.com/media-typer/-/media-typer-0.3.0.tgz\",\"integrity\":\"sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==\"},\"memory-pager\":{\"version\":\"1.5.0\",\"resolved\":\"https://registry.npmmirror.com/memory-pager/-/memory-pager-1.5.0.tgz\",\"integrity\":\"sha512-ZS4Bp4r/Zoeq6+NLJpP+0Zzm0pR8whtGPf1XExKLJBAczGMnSi3It14OiNCStjQjM6NU1okjQGSxgEZN8eBYKg==\",\"optional\":true},\"methods\":{\"version\":\"1.1.2\",\"resolved\":\"https://registry.npmmirror.com/methods/-/methods-1.1.2.tgz\",\"integrity\":\"sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==\"},\"mime-db\":{\"version\":\"1.52.0\",\"resolved\":\"https://registry.npmmirror.com/mime-db/-/mime-db-1.52.0.tgz\",\"integrity\":\"sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==\"},\"mime-types\":{\"version\":\"2.1.35\",\"resolved\":\"https://registry.npmmirror.com/mime-types/-/mime-types-2.1.35.tgz\",\"integrity\":\"sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==\",\"requires\":{\"mime-db\":\"1.52.0\"}},\"mongodb\":{\"version\":\"5.5.0\",\"resolved\":\"https://registry.npmmirror.com/mongodb/-/mongodb-5.5.0.tgz\",\"integrity\":\"sha512-XgrkUgAAdfnZKQfk5AsYL8j7O99WHd4YXPxYxnh8dZxD+ekYWFRA3JktUsBnfg+455Smf75/+asoU/YLwNGoQQ==\",\"requires\":{\"bson\":\"^5.3.0\",\"mongodb-connection-string-url\":\"^2.6.0\",\"saslprep\":\"^1.0.3\",\"socks\":\"^2.7.1\"}},\"mongodb-connection-string-url\":{\"version\":\"2.6.0\",\"resolved\":\"https://registry.npmmirror.com/mongodb-connection-string-url/-/mongodb-connection-string-url-2.6.0.tgz\",\"integrity\":\"sha512-WvTZlI9ab0QYtTYnuMLgobULWhokRjtC7db9LtcVfJ+Hsnyr5eo6ZtNAt3Ly24XZScGMelOcGtm7lSn0332tPQ==\",\"requires\":{\"@types/whatwg-url\":\"^8.2.1\",\"whatwg-url\":\"^11.0.0\"}},\"mongoose\":{\"version\":\"7.2.2\",\"resolved\":\"https://registry.npmmirror.com/mongoose/-/mongoose-7.2.2.tgz\",\"integrity\":\"sha512-JPBMTF+oYfLGVFWbHSZ/H+f1GajNanGLYH6c/P0nE3bNJfwGhX573vieGR0kNlNhj3cZk8WCPrnVsTNeUmFUag==\",\"requires\":{\"bson\":\"^5.3.0\",\"kareem\":\"2.5.1\",\"mongodb\":\"5.5.0\",\"mpath\":\"0.9.0\",\"mquery\":\"5.0.0\",\"ms\":\"2.1.3\",\"sift\":\"16.0.1\"},\"dependencies\":{\"ms\":{\"version\":\"2.1.3\",\"resolved\":\"https://registry.npmmirror.com/ms/-/ms-2.1.3.tgz\",\"integrity\":\"sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==\"}}},\"mpath\":{\"version\":\"0.9.0\",\"resolved\":\"https://registry.npmmirror.com/mpath/-/mpath-0.9.0.tgz\",\"integrity\":\"sha512-ikJRQTk8hw5DEoFVxHG1Gn9T/xcjtdnOKIU1JTmGjZZlg9LST2mBLmcX3/ICIbgJydT2GOc15RnNy5mHmzfSew==\"},\"mquery\":{\"version\":\"5.0.0\",\"resolved\":\"https://registry.npmmirror.com/mquery/-/mquery-5.0.0.tgz\",\"integrity\":\"sha512-iQMncpmEK8R8ncT8HJGsGc9Dsp8xcgYMVSbs5jgnm1lFHTZqMJTUWTDx1LBO8+mK3tPNZWFLBghQEIOULSTHZg==\",\"requires\":{\"debug\":\"4.x\"}},\"ms\":{\"version\":\"2.1.2\",\"resolved\":\"https://registry.npmmirror.com/ms/-/ms-2.1.2.tgz\",\"integrity\":\"sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==\"},\"negotiator\":{\"version\":\"0.6.3\",\"resolved\":\"https://registry.npmmirror.com/negotiator/-/negotiator-0.6.3.tgz\",\"integrity\":\"sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==\"},\"node-environment-flags\":{\"version\":\"1.0.6\",\"resolved\":\"https://registry.npmmirror.com/node-environment-flags/-/node-environment-flags-1.0.6.tgz\",\"integrity\":\"sha512-5Evy2epuL+6TM0lCQGpFIj6KwiEsGh1SrHUhTbNX+sLbBtjidPZFAnVK9y5yU1+h//RitLbRHTIMyxQPtxMdHw==\",\"dev\":true,\"requires\":{\"object.getownpropertydescriptors\":\"^2.0.3\",\"semver\":\"^5.7.0\"},\"dependencies\":{\"semver\":{\"version\":\"5.7.1\",\"resolved\":\"https://registry.npmmirror.com/semver/-/semver-5.7.1.tgz\",\"integrity\":\"sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ==\",\"dev\":true}}},\"node-releases\":{\"version\":\"2.0.12\",\"resolved\":\"https://registry.npmmirror.com/node-releases/-/node-releases-2.0.12.tgz\",\"integrity\":\"sha512-QzsYKWhXTWx8h1kIvqfnC++o0pEmpRQA/aenALsL2F4pqNVr7YzcdMlDij5WBnwftRbJCNJL/O7zdKaxKPHqgQ==\",\"dev\":true},\"object-inspect\":{\"version\":\"1.12.3\",\"resolved\":\"https://registry.npmmirror.com/object-inspect/-/object-inspect-1.12.3.tgz\",\"integrity\":\"sha512-geUvdk7c+eizMNUDkRpW1wJwgfOiOeHbxBR/hLXK1aT6zmVSO0jsQcs7fj6MGw89jC/cjGfLcNOrtMYtGqm81g==\"},\"object-keys\":{\"version\":\"1.1.1\",\"resolved\":\"https://registry.npmmirror.com/object-keys/-/object-keys-1.1.1.tgz\",\"integrity\":\"sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==\",\"dev\":true},\"object.assign\":{\"version\":\"4.1.4\",\"resolved\":\"https://registry.npmmirror.com/object.assign/-/object.assign-4.1.4.tgz\",\"integrity\":\"sha512-1mxKf0e58bvyjSCtKYY4sRe9itRk3PJpquJOjeIkz885CczcI4IvJJDLPS72oowuSh+pBxUFROpX+TU++hxhZQ==\",\"dev\":true,\"requires\":{\"call-bind\":\"^1.0.2\",\"define-properties\":\"^1.1.4\",\"has-symbols\":\"^1.0.3\",\"object-keys\":\"^1.1.1\"}},\"object.getownpropertydescriptors\":{\"version\":\"2.1.6\",\"resolved\":\"https://registry.npmmirror.com/object.getownpropertydescriptors/-/object.getownpropertydescriptors-2.1.6.tgz\",\"integrity\":\"sha512-lq+61g26E/BgHv0ZTFgRvi7NMEPuAxLkFU7rukXjc/AlwH4Am5xXVnIXy3un1bg/JPbXHrixRkK1itUzzPiIjQ==\",\"dev\":true,\"requires\":{\"array.prototype.reduce\":\"^1.0.5\",\"call-bind\":\"^1.0.2\",\"define-properties\":\"^1.2.0\",\"es-abstract\":\"^1.21.2\",\"safe-array-concat\":\"^1.0.0\"}},\"on-finished\":{\"version\":\"2.4.1\",\"resolved\":\"https://registry.npmmirror.com/on-finished/-/on-finished-2.4.1.tgz\",\"integrity\":\"sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==\",\"requires\":{\"ee-first\":\"1.1.1\"}},\"once\":{\"version\":\"1.4.0\",\"resolved\":\"https://registry.npmmirror.com/once/-/once-1.4.0.tgz\",\"integrity\":\"sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==\",\"requires\":{\"wrappy\":\"1\"}},\"only\":{\"version\":\"0.0.2\",\"resolved\":\"https://registry.npmmirror.com/only/-/only-0.0.2.tgz\",\"integrity\":\"sha512-Fvw+Jemq5fjjyWz6CpKx6w9s7xxqo3+JCyM0WXWeCSOboZ8ABkyvP8ID4CZuChA/wxSx+XSJmdOm8rGVyJ1hdQ==\"},\"p-limit\":{\"version\":\"2.3.0\",\"resolved\":\"https://registry.npmmirror.com/p-limit/-/p-limit-2.3.0.tgz\",\"integrity\":\"sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==\",\"dev\":true,\"requires\":{\"p-try\":\"^2.0.0\"}},\"p-locate\":{\"version\":\"3.0.0\",\"resolved\":\"https://registry.npmmirror.com/p-locate/-/p-locate-3.0.0.tgz\",\"integrity\":\"sha512-x+12w/To+4GFfgJhBEpiDcLozRJGegY+Ei7/z0tSLkMmxGZNybVMSfWj9aJn8Z5Fc7dBUNJOOVgPv2H7IwulSQ==\",\"dev\":true,\"requires\":{\"p-limit\":\"^2.0.0\"}},\"p-try\":{\"version\":\"2.2.0\",\"resolved\":\"https://registry.npmmirror.com/p-try/-/p-try-2.2.0.tgz\",\"integrity\":\"sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==\",\"dev\":true},\"parse-passwd\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/parse-passwd/-/parse-passwd-1.0.0.tgz\",\"integrity\":\"sha512-1Y1A//QUXEZK7YKz+rD9WydcE1+EuPr6ZBgKecAB8tmoW6UFv0NREVJe1p+jRxtThkcbbKkfwIbWJe/IeE6m2Q==\",\"dev\":true},\"parseurl\":{\"version\":\"1.3.3\",\"resolved\":\"https://registry.npmmirror.com/parseurl/-/parseurl-1.3.3.tgz\",\"integrity\":\"sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==\"},\"path-exists\":{\"version\":\"3.0.0\",\"resolved\":\"https://registry.npmmirror.com/path-exists/-/path-exists-3.0.0.tgz\",\"integrity\":\"sha512-bpC7GYwiDYQ4wYLe+FA8lhRjhQCMcQGuSgGGqDkg/QerRWw9CmGRT0iSOVRSZJ29NMLZgIzqaljJ63oaL4NIJQ==\",\"dev\":true},\"path-is-absolute\":{\"version\":\"1.0.1\",\"resolved\":\"https://registry.npmmirror.com/path-is-absolute/-/path-is-absolute-1.0.1.tgz\",\"integrity\":\"sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==\"},\"path-parse\":{\"version\":\"1.0.7\",\"resolved\":\"https://registry.npmmirror.com/path-parse/-/path-parse-1.0.7.tgz\",\"integrity\":\"sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==\",\"dev\":true},\"path-to-regexp\":{\"version\":\"6.2.1\",\"resolved\":\"https://registry.npmmirror.com/path-to-regexp/-/path-to-regexp-6.2.1.tgz\",\"integrity\":\"sha512-JLyh7xT1kizaEvcaXOQwOc2/Yhw6KZOvPf1S8401UyLk86CU79LN3vl7ztXGm/pZ+YjoyAJ4rxmHwbkBXJX+yw==\"},\"picocolors\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/picocolors/-/picocolors-1.0.0.tgz\",\"integrity\":\"sha512-1fygroTLlHu66zi26VoTDv8yRgm0Fccecssto+MhsZ0D/DGW2sm8E8AjW7NU5VVTRt5GxbeZ5qBuJr+HyLYkjQ==\",\"dev\":true},\"pify\":{\"version\":\"4.0.1\",\"resolved\":\"https://registry.npmmirror.com/pify/-/pify-4.0.1.tgz\",\"integrity\":\"sha512-uB80kBFb/tfd68bVleG9T5GGsGPjJrLAUpR5PZIrhBnIaRTQRjqdJSsIKkOP6OAIFbj7GOrcudc5pNjZ+geV2g==\",\"dev\":true},\"pirates\":{\"version\":\"4.0.5\",\"resolved\":\"https://registry.npmmirror.com/pirates/-/pirates-4.0.5.tgz\",\"integrity\":\"sha512-8V9+HQPupnaXMA23c5hvl69zXvTwTzyAYasnkb0Tts4XvO4CliqONMOnvlq26rkhLC3nWDFBJf73LU1e1VZLaQ==\",\"dev\":true},\"pkg-dir\":{\"version\":\"3.0.0\",\"resolved\":\"https://registry.npmmirror.com/pkg-dir/-/pkg-dir-3.0.0.tgz\",\"integrity\":\"sha512-/E57AYkoeQ25qkxMj5PBOVgF8Kiu/h7cYS30Z5+R7WaiCCBfLq58ZI/dSeaEKb9WVJV5n/03QwrN3IeWIFllvw==\",\"dev\":true,\"requires\":{\"find-up\":\"^3.0.0\"}},\"punycode\":{\"version\":\"2.3.0\",\"resolved\":\"https://registry.npmmirror.com/punycode/-/punycode-2.3.0.tgz\",\"integrity\":\"sha512-rRV+zQD8tVFys26lAGR9WUuS4iUAngJScM+ZRSKtvl5tKeZ2t5bvdNFdNHBW9FWR4guGHlgmsZ1G7BSm2wTbuA==\"},\"qs\":{\"version\":\"6.11.2\",\"resolved\":\"https://registry.npmmirror.com/qs/-/qs-6.11.2.tgz\",\"integrity\":\"sha512-tDNIz22aBzCDxLtVH++VnTfzxlfeK5CbqohpSqpJgj1Wg/cQbStNAz3NuqCs5vV+pjBsK4x4pN9HlVh7rcYRiA==\",\"requires\":{\"side-channel\":\"^1.0.4\"}},\"raw-body\":{\"version\":\"2.5.2\",\"resolved\":\"https://registry.npmmirror.com/raw-body/-/raw-body-2.5.2.tgz\",\"integrity\":\"sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==\",\"requires\":{\"bytes\":\"3.1.2\",\"http-errors\":\"2.0.0\",\"iconv-lite\":\"0.4.24\",\"unpipe\":\"1.0.0\"},\"dependencies\":{\"http-errors\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmmirror.com/http-errors/-/http-errors-2.0.0.tgz\",\"integrity\":\"sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==\",\"requires\":{\"depd\":\"2.0.0\",\"inherits\":\"2.0.4\",\"setprototypeof\":\"1.2.0\",\"statuses\":\"2.0.1\",\"toidentifier\":\"1.0.1\"}},\"statuses\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmmirror.com/statuses/-/statuses-2.0.1.tgz\",\"integrity\":\"sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==\"}}},\"regenerate\":{\"version\":\"1.4.2\",\"resolved\":\"https://registry.npmmirror.com/regenerate/-/regenerate-1.4.2.tgz\",\"integrity\":\"sha512-zrceR/XhGYU/d/opr2EKO7aRHUeiBI8qjtfHqADTwZd6Szfy16la6kqD0MIUs5z5hx6AaKa+PixpPrR289+I0A==\",\"dev\":true},\"regenerate-unicode-properties\":{\"version\":\"10.1.0\",\"resolved\":\"https://registry.npmmirror.com/regenerate-unicode-properties/-/regenerate-unicode-properties-10.1.0.tgz\",\"integrity\":\"sha512-d1VudCLoIGitcU/hEg2QqvyGZQmdC0Lf8BqdOMXGFSvJP4bNV1+XqbPQeHHLD51Jh4QJJ225dlIFvY4Ly6MXmQ==\",\"dev\":true,\"requires\":{\"regenerate\":\"^1.4.2\"}},\"regenerator-runtime\":{\"version\":\"0.13.11\",\"resolved\":\"https://registry.npmmirror.com/regenerator-runtime/-/regenerator-runtime-0.13.11.tgz\",\"integrity\":\"sha512-kY1AZVr2Ra+t+piVaJ4gxaFaReZVH40AKNo7UCX6W+dEwBo/2oZJzqfuN1qLq1oL45o56cPaTXELwrTh8Fpggg==\",\"dev\":true},\"regenerator-transform\":{\"version\":\"0.15.1\",\"resolved\":\"https://registry.npmmirror.com/regenerator-transform/-/regenerator-transform-0.15.1.tgz\",\"integrity\":\"sha512-knzmNAcuyxV+gQCufkYcvOqX/qIIfHLv0u5x79kRxuGojfYVky1f15TzZEu2Avte8QGepvUNTnLskf8E6X6Vyg==\",\"dev\":true,\"requires\":{\"@babel/runtime\":\"^7.8.4\"}},\"regexp.prototype.flags\":{\"version\":\"1.5.0\",\"resolved\":\"https://registry.npmmirror.com/regexp.prototype.flags/-/regexp.prototype.flags-1.5.0.tgz\",\"integrity\":\"sha512-0SutC3pNudRKgquxGoRGIz946MZVHqbNfPjBdxeOhBrdgDKlRoXmYLQN9xRbrR09ZXWeGAdPuif7egofn6v5LA==\",\"dev\":true,\"requires\":{\"call-bind\":\"^1.0.2\",\"define-properties\":\"^1.2.0\",\"functions-have-names\":\"^1.2.3\"}},\"regexpu-core\":{\"version\":\"5.3.2\",\"resolved\":\"https://registry.npmmirror.com/regexpu-core/-/regexpu-core-5.3.2.tgz\",\"integrity\":\"sha512-RAM5FlZz+Lhmo7db9L298p2vHP5ZywrVXmVXpmAD9GuL5MPH6t9ROw1iA/wfHkQ76Qe7AaPF0nGuim96/IrQMQ==\",\"dev\":true,\"requires\":{\"@babel/regjsgen\":\"^0.8.0\",\"regenerate\":\"^1.4.2\",\"regenerate-unicode-properties\":\"^10.1.0\",\"regjsparser\":\"^0.9.1\",\"unicode-match-property-ecmascript\":\"^2.0.0\",\"unicode-match-property-value-ecmascript\":\"^2.1.0\"}},\"regjsparser\":{\"version\":\"0.9.1\",\"resolved\":\"https://registry.npmmirror.com/regjsparser/-/regjsparser-0.9.1.tgz\",\"integrity\":\"sha512-dQUtn90WanSNl+7mQKcXAgZxvUe7Z0SqXlgzv0za4LwiUhyzBC58yQO3liFoUgu8GiJVInAhJjkj1N0EtQ5nkQ==\",\"dev\":true,\"requires\":{\"jsesc\":\"~0.5.0\"},\"dependencies\":{\"jsesc\":{\"version\":\"0.5.0\",\"resolved\":\"https://registry.npmmirror.com/jsesc/-/jsesc-0.5.0.tgz\",\"integrity\":\"sha512-uZz5UnB7u4T9LvwmFqXii7pZSouaRPorGs5who1Ip7VO0wxanFvBL7GkM6dTHlgX+jhBApRetaWpnDabOeTcnA==\",\"dev\":true}}},\"resolve\":{\"version\":\"1.22.2\",\"resolved\":\"https://registry.npmmirror.com/resolve/-/resolve-1.22.2.tgz\",\"integrity\":\"sha512-Sb+mjNHOULsBv818T40qSPeRiuWLyaGMa5ewydRLFimneixmVy2zdivRl+AF6jaYPC8ERxGDmFSiqui6SfPd+g==\",\"dev\":true,\"requires\":{\"is-core-module\":\"^2.11.0\",\"path-parse\":\"^1.0.7\",\"supports-preserve-symlinks-flag\":\"^1.0.0\"}},\"resolve-path\":{\"version\":\"1.4.0\",\"resolved\":\"https://registry.npmmirror.com/resolve-path/-/resolve-path-1.4.0.tgz\",\"integrity\":\"sha512-i1xevIst/Qa+nA9olDxLWnLk8YZbi8R/7JPbCMcgyWaFR6bKWaexgJgEB5oc2PKMjYdrHynyz0NY+if+H98t1w==\",\"requires\":{\"http-errors\":\"~1.6.2\",\"path-is-absolute\":\"1.0.1\"},\"dependencies\":{\"depd\":{\"version\":\"1.1.2\",\"resolved\":\"https://registry.npmmirror.com/depd/-/depd-1.1.2.tgz\",\"integrity\":\"sha512-7emPTl6Dpo6JRXOXjLRxck+FlLRX5847cLKEn00PLAgc3g2hTZZgr+e4c2v6QpSmLeFP3n5yUo7ft6avBK/5jQ==\"},\"http-errors\":{\"version\":\"1.6.3\",\"resolved\":\"https://registry.npmmirror.com/http-errors/-/http-errors-1.6.3.tgz\",\"integrity\":\"sha512-lks+lVC8dgGyh97jxvxeYTWQFvh4uw4yC12gVl63Cg30sjPX4wuGcdkICVXDAESr6OJGjqGA8Iz5mkeN6zlD7A==\",\"requires\":{\"depd\":\"~1.1.2\",\"inherits\":\"2.0.3\",\"setprototypeof\":\"1.1.0\",\"statuses\":\">= 1.4.0 < 2\"}},\"inherits\":{\"version\":\"2.0.3\",\"resolved\":\"https://registry.npmmirror.com/inherits/-/inherits-2.0.3.tgz\",\"integrity\":\"sha512-x00IRNXNy63jwGkJmzPigoySHbaqpNuzKbBOmzK+g2OdZpQ9w+sxCN+VSB3ja7IAge2OP2qpfxTjeNcyjmW1uw==\"},\"setprototypeof\":{\"version\":\"1.1.0\",\"resolved\":\"https://registry.npmmirror.com/setprototypeof/-/setprototypeof-1.1.0.tgz\",\"integrity\":\"sha512-BvE/TwpZX4FXExxOxZyRGQQv651MSwmWKZGqvmPcRIjDqWub67kTKuIMx43cZZrS/cBBzwBcNDWoFxt2XEFIpQ==\"}}},\"safe-array-concat\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/safe-array-concat/-/safe-array-concat-1.0.0.tgz\",\"integrity\":\"sha512-9dVEFruWIsnie89yym+xWTAYASdpw3CJV7Li/6zBewGf9z2i1j31rP6jnY0pHEO4QZh6N0K11bFjWmdR8UGdPQ==\",\"dev\":true,\"requires\":{\"call-bind\":\"^1.0.2\",\"get-intrinsic\":\"^1.2.0\",\"has-symbols\":\"^1.0.3\",\"isarray\":\"^2.0.5\"}},\"safe-buffer\":{\"version\":\"5.2.1\",\"resolved\":\"https://registry.npmmirror.com/safe-buffer/-/safe-buffer-5.2.1.tgz\",\"integrity\":\"sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==\"},\"safe-regex-test\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/safe-regex-test/-/safe-regex-test-1.0.0.tgz\",\"integrity\":\"sha512-JBUUzyOgEwXQY1NuPtvcj/qcBDbDmEvWufhlnXZIm75DEHp+afM1r1ujJpJsV/gSM4t59tpDyPi1sd6ZaPFfsA==\",\"dev\":true,\"requires\":{\"call-bind\":\"^1.0.2\",\"get-intrinsic\":\"^1.1.3\",\"is-regex\":\"^1.1.4\"}},\"safer-buffer\":{\"version\":\"2.1.2\",\"resolved\":\"https://registry.npmmirror.com/safer-buffer/-/safer-buffer-2.1.2.tgz\",\"integrity\":\"sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==\"},\"saslprep\":{\"version\":\"1.0.3\",\"resolved\":\"https://registry.npmmirror.com/saslprep/-/saslprep-1.0.3.tgz\",\"integrity\":\"sha512-/MY/PEMbk2SuY5sScONwhUDsV2p77Znkb/q3nSVstq/yQzYJOH/Azh29p9oJLsl3LnQwSvZDKagDGBsBwSooag==\",\"optional\":true,\"requires\":{\"sparse-bitfield\":\"^3.0.3\"}},\"semver\":{\"version\":\"6.3.0\",\"resolved\":\"https://registry.npmmirror.com/semver/-/semver-6.3.0.tgz\",\"integrity\":\"sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==\",\"dev\":true},\"setprototypeof\":{\"version\":\"1.2.0\",\"resolved\":\"https://registry.npmmirror.com/setprototypeof/-/setprototypeof-1.2.0.tgz\",\"integrity\":\"sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==\"},\"shallow-clone\":{\"version\":\"3.0.1\",\"resolved\":\"https://registry.npmmirror.com/shallow-clone/-/shallow-clone-3.0.1.tgz\",\"integrity\":\"sha512-/6KqX+GVUdqPuPPd2LxDDxzX6CAbjJehAAOKlNpqqUpAqPM6HeL8f+o3a+JsyGjn2lv0WY8UsTgUJjU9Ok55NA==\",\"dev\":true,\"requires\":{\"kind-of\":\"^6.0.2\"}},\"side-channel\":{\"version\":\"1.0.4\",\"resolved\":\"https://registry.npmmirror.com/side-channel/-/side-channel-1.0.4.tgz\",\"integrity\":\"sha512-q5XPytqFEIKHkGdiMIrY10mvLRvnQh42/+GoBlFW3b2LXLE2xxJpZFdm94we0BaoV3RwJyGqg5wS7epxTv0Zvw==\",\"requires\":{\"call-bind\":\"^1.0.0\",\"get-intrinsic\":\"^1.0.2\",\"object-inspect\":\"^1.9.0\"}},\"sift\":{\"version\":\"16.0.1\",\"resolved\":\"https://registry.npmmirror.com/sift/-/sift-16.0.1.tgz\",\"integrity\":\"sha512-Wv6BjQ5zbhW7VFefWusVP33T/EM0vYikCaQ2qR8yULbsilAT8/wQaXvuQ3ptGLpoKx+lihJE3y2UTgKDyyNHZQ==\"},\"smart-buffer\":{\"version\":\"4.2.0\",\"resolved\":\"https://registry.npmmirror.com/smart-buffer/-/smart-buffer-4.2.0.tgz\",\"integrity\":\"sha512-94hK0Hh8rPqQl2xXc3HsaBoOXKV20MToPkcXvwbISWLEs+64sBq5kFgn2kJDHb1Pry9yrP0dxrCI9RRci7RXKg==\"},\"socks\":{\"version\":\"2.7.1\",\"resolved\":\"https://registry.npmmirror.com/socks/-/socks-2.7.1.tgz\",\"integrity\":\"sha512-7maUZy1N7uo6+WVEX6psASxtNlKaNVMlGQKkG/63nEDdLOWNbiUMoLK7X4uYoLhQstau72mLgfEWcXcwsaHbYQ==\",\"requires\":{\"ip\":\"^2.0.0\",\"smart-buffer\":\"^4.2.0\"}},\"source-map\":{\"version\":\"0.6.1\",\"resolved\":\"https://registry.npmmirror.com/source-map/-/source-map-0.6.1.tgz\",\"integrity\":\"sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==\",\"dev\":true},\"source-map-support\":{\"version\":\"0.5.21\",\"resolved\":\"https://registry.npmmirror.com/source-map-support/-/source-map-support-0.5.21.tgz\",\"integrity\":\"sha512-uBHU3L3czsIyYXKX88fdrGovxdSCoTGDRZ6SYXtSRxLZUzHg5P/66Ht6uoUlHu9EZod+inXhKo3qQgwXUT/y1w==\",\"dev\":true,\"requires\":{\"buffer-from\":\"^1.0.0\",\"source-map\":\"^0.6.0\"}},\"sparse-bitfield\":{\"version\":\"3.0.3\",\"resolved\":\"https://registry.npmmirror.com/sparse-bitfield/-/sparse-bitfield-3.0.3.tgz\",\"integrity\":\"sha512-kvzhi7vqKTfkh0PZU+2D2PIllw2ymqJKujUcyPMd9Y75Nv4nPbGJZXNhxsgdQab2BmlDct1YnfQCguEvHr7VsQ==\",\"optional\":true,\"requires\":{\"memory-pager\":\"^1.0.2\"}},\"statuses\":{\"version\":\"1.5.0\",\"resolved\":\"https://registry.npmmirror.com/statuses/-/statuses-1.5.0.tgz\",\"integrity\":\"sha512-OpZ3zP+jT1PI7I8nemJX4AKmAX070ZkYPVWV/AaKTJl+tXCTGyVdC1a4SL8RUQYEwk/f34ZX8UTykN68FwrqAA==\"},\"string.prototype.trim\":{\"version\":\"1.2.7\",\"resolved\":\"https://registry.npmmirror.com/string.prototype.trim/-/string.prototype.trim-1.2.7.tgz\",\"integrity\":\"sha512-p6TmeT1T3411M8Cgg9wBTMRtY2q9+PNy9EV1i2lIXUN/btt763oIfxwN3RR8VU6wHX8j/1CFy0L+YuThm6bgOg==\",\"dev\":true,\"requires\":{\"call-bind\":\"^1.0.2\",\"define-properties\":\"^1.1.4\",\"es-abstract\":\"^1.20.4\"}},\"string.prototype.trimend\":{\"version\":\"1.0.6\",\"resolved\":\"https://registry.npmmirror.com/string.prototype.trimend/-/string.prototype.trimend-1.0.6.tgz\",\"integrity\":\"sha512-JySq+4mrPf9EsDBEDYMOb/lM7XQLulwg5R/m1r0PXEFqrV0qHvl58sdTilSXtKOflCsK2E8jxf+GKC0T07RWwQ==\",\"dev\":true,\"requires\":{\"call-bind\":\"^1.0.2\",\"define-properties\":\"^1.1.4\",\"es-abstract\":\"^1.20.4\"}},\"string.prototype.trimstart\":{\"version\":\"1.0.6\",\"resolved\":\"https://registry.npmmirror.com/string.prototype.trimstart/-/string.prototype.trimstart-1.0.6.tgz\",\"integrity\":\"sha512-omqjMDaY92pbn5HOX7f9IccLA+U1tA9GvtU4JrodiXFfYB7jPzzHpRzpglLAjtUV6bB557zwClJezTqnAiYnQA==\",\"dev\":true,\"requires\":{\"call-bind\":\"^1.0.2\",\"define-properties\":\"^1.1.4\",\"es-abstract\":\"^1.20.4\"}},\"supports-color\":{\"version\":\"5.5.0\",\"resolved\":\"https://registry.npmmirror.com/supports-color/-/supports-color-5.5.0.tgz\",\"integrity\":\"sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==\",\"dev\":true,\"requires\":{\"has-flag\":\"^3.0.0\"}},\"supports-preserve-symlinks-flag\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz\",\"integrity\":\"sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==\",\"dev\":true},\"to-fast-properties\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmmirror.com/to-fast-properties/-/to-fast-properties-2.0.0.tgz\",\"integrity\":\"sha512-/OaKK0xYrs3DmxRYqL/yDc+FxFUVYhDlXMhRmv3z915w2HF1tnN1omB354j8VUGO/hbRzyD6Y3sA7v7GS/ceog==\",\"dev\":true},\"toidentifier\":{\"version\":\"1.0.1\",\"resolved\":\"https://registry.npmmirror.com/toidentifier/-/toidentifier-1.0.1.tgz\",\"integrity\":\"sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==\"},\"tr46\":{\"version\":\"3.0.0\",\"resolved\":\"https://registry.npmmirror.com/tr46/-/tr46-3.0.0.tgz\",\"integrity\":\"sha512-l7FvfAHlcmulp8kr+flpQZmVwtu7nfRV7NZujtN0OqES8EL4O4e0qqzL0DC5gAvx/ZC/9lk6rhcUwYvkBnBnYA==\",\"requires\":{\"punycode\":\"^2.1.1\"}},\"tsscmp\":{\"version\":\"1.0.6\",\"resolved\":\"https://registry.npmmirror.com/tsscmp/-/tsscmp-1.0.6.tgz\",\"integrity\":\"sha512-LxhtAkPDTkVCMQjt2h6eBVY28KCjikZqZfMcC15YBeNjkgUpdCfBu5HoiOTDu86v6smE8yOjyEktJ8hlbANHQA==\"},\"type-is\":{\"version\":\"1.6.18\",\"resolved\":\"https://registry.npmmirror.com/type-is/-/type-is-1.6.18.tgz\",\"integrity\":\"sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==\",\"requires\":{\"media-typer\":\"0.3.0\",\"mime-types\":\"~2.1.24\"}},\"typed-array-length\":{\"version\":\"1.0.4\",\"resolved\":\"https://registry.npmmirror.com/typed-array-length/-/typed-array-length-1.0.4.tgz\",\"integrity\":\"sha512-KjZypGq+I/H7HI5HlOoGHkWUUGq+Q0TPhQurLbyrVrvnKTBgzLhIJ7j6J/XTQOi0d1RjyZ0wdas8bKs2p0x3Ng==\",\"dev\":true,\"requires\":{\"call-bind\":\"^1.0.2\",\"for-each\":\"^0.3.3\",\"is-typed-array\":\"^1.1.9\"}},\"unbox-primitive\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/unbox-primitive/-/unbox-primitive-1.0.2.tgz\",\"integrity\":\"sha512-61pPlCD9h51VoreyJ0BReideM3MDKMKnh6+V9L08331ipq6Q8OFXZYiqP6n/tbHx4s5I9uRhcye6BrbkizkBDw==\",\"dev\":true,\"requires\":{\"call-bind\":\"^1.0.2\",\"has-bigints\":\"^1.0.2\",\"has-symbols\":\"^1.0.3\",\"which-boxed-primitive\":\"^1.0.2\"}},\"unicode-canonical-property-names-ecmascript\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmmirror.com/unicode-canonical-property-names-ecmascript/-/unicode-canonical-property-names-ecmascript-2.0.0.tgz\",\"integrity\":\"sha512-yY5PpDlfVIU5+y/BSCxAJRBIS1Zc2dDG3Ujq+sR0U+JjUevW2JhocOF+soROYDSaAezOzOKuyyixhD6mBknSmQ==\",\"dev\":true},\"unicode-match-property-ecmascript\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmmirror.com/unicode-match-property-ecmascript/-/unicode-match-property-ecmascript-2.0.0.tgz\",\"integrity\":\"sha512-5kaZCrbp5mmbz5ulBkDkbY0SsPOjKqVS35VpL9ulMPfSl0J0Xsm+9Evphv9CoIZFwre7aJoa94AY6seMKGVN5Q==\",\"dev\":true,\"requires\":{\"unicode-canonical-property-names-ecmascript\":\"^2.0.0\",\"unicode-property-aliases-ecmascript\":\"^2.0.0\"}},\"unicode-match-property-value-ecmascript\":{\"version\":\"2.1.0\",\"resolved\":\"https://registry.npmmirror.com/unicode-match-property-value-ecmascript/-/unicode-match-property-value-ecmascript-2.1.0.tgz\",\"integrity\":\"sha512-qxkjQt6qjg/mYscYMC0XKRn3Rh0wFPlfxB0xkt9CfyTvpX1Ra0+rAmdX2QyAobptSEvuy4RtpPRui6XkV+8wjA==\",\"dev\":true},\"unicode-property-aliases-ecmascript\":{\"version\":\"2.1.0\",\"resolved\":\"https://registry.npmmirror.com/unicode-property-aliases-ecmascript/-/unicode-property-aliases-ecmascript-2.1.0.tgz\",\"integrity\":\"sha512-6t3foTQI9qne+OZoVQB/8x8rk2k1eVy1gRXhV3oFQ5T6R1dqQ1xtin3XqSlx3+ATBkliTaR/hHyJBm+LVPNM8w==\",\"dev\":true},\"unpipe\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/unpipe/-/unpipe-1.0.0.tgz\",\"integrity\":\"sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==\"},\"update-browserslist-db\":{\"version\":\"1.0.11\",\"resolved\":\"https://registry.npmmirror.com/update-browserslist-db/-/update-browserslist-db-1.0.11.tgz\",\"integrity\":\"sha512-dCwEFf0/oT85M1fHBg4F0jtLwJrutGoHSQXCh7u4o2t1drG+c0a9Flnqww6XUKSfQMPpJBRjU8d4RXB09qtvaA==\",\"dev\":true,\"requires\":{\"escalade\":\"^3.1.1\",\"picocolors\":\"^1.0.0\"}},\"v8flags\":{\"version\":\"3.2.0\",\"resolved\":\"https://registry.npmmirror.com/v8flags/-/v8flags-3.2.0.tgz\",\"integrity\":\"sha512-mH8etigqMfiGWdeXpaaqGfs6BndypxusHHcv2qSHyZkGEznCd/qAXCWWRzeowtL54147cktFOC4P5y+kl8d8Jg==\",\"dev\":true,\"requires\":{\"homedir-polyfill\":\"^1.0.1\"}},\"vary\":{\"version\":\"1.1.2\",\"resolved\":\"https://registry.npmmirror.com/vary/-/vary-1.1.2.tgz\",\"integrity\":\"sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==\"},\"webidl-conversions\":{\"version\":\"7.0.0\",\"resolved\":\"https://registry.npmmirror.com/webidl-conversions/-/webidl-conversions-7.0.0.tgz\",\"integrity\":\"sha512-VwddBukDzu71offAQR975unBIGqfKZpM+8ZX6ySk8nYhVoo5CYaZyzt3YBvYtRtO+aoGlqxPg/B87NGVZ/fu6g==\"},\"whatwg-url\":{\"version\":\"11.0.0\",\"resolved\":\"https://registry.npmmirror.com/whatwg-url/-/whatwg-url-11.0.0.tgz\",\"integrity\":\"sha512-RKT8HExMpoYx4igMiVMY83lN6UeITKJlBQ+vR/8ZJ8OCdSiN3RwCq+9gH0+Xzj0+5IrM6i4j/6LuvzbZIQgEcQ==\",\"requires\":{\"tr46\":\"^3.0.0\",\"webidl-conversions\":\"^7.0.0\"}},\"which-boxed-primitive\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/which-boxed-primitive/-/which-boxed-primitive-1.0.2.tgz\",\"integrity\":\"sha512-bwZdv0AKLpplFY2KZRX6TvyuN7ojjr7lwkg6ml0roIy9YeuSr7JS372qlNW18UQYzgYK9ziGcerWqZOmEn9VNg==\",\"dev\":true,\"requires\":{\"is-bigint\":\"^1.0.1\",\"is-boolean-object\":\"^1.1.0\",\"is-number-object\":\"^1.0.4\",\"is-string\":\"^1.0.5\",\"is-symbol\":\"^1.0.3\"}},\"which-typed-array\":{\"version\":\"1.1.9\",\"resolved\":\"https://registry.npmmirror.com/which-typed-array/-/which-typed-array-1.1.9.tgz\",\"integrity\":\"sha512-w9c4xkx6mPidwp7180ckYWfMmvxpjlZuIudNtDf4N/tTAUB8VJbX25qZoAsrtGuYNnGw3pa0AXgbGKRB8/EceA==\",\"dev\":true,\"requires\":{\"available-typed-arrays\":\"^1.0.5\",\"call-bind\":\"^1.0.2\",\"for-each\":\"^0.3.3\",\"gopd\":\"^1.0.1\",\"has-tostringtag\":\"^1.0.0\",\"is-typed-array\":\"^1.1.10\"}},\"wrappy\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/wrappy/-/wrappy-1.0.2.tgz\",\"integrity\":\"sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==\"},\"yallist\":{\"version\":\"3.1.1\",\"resolved\":\"https://registry.npmmirror.com/yallist/-/yallist-3.1.1.tgz\",\"integrity\":\"sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==\",\"dev\":true},\"ylru\":{\"version\":\"1.3.2\",\"resolved\":\"https://registry.npmmirror.com/ylru/-/ylru-1.3.2.tgz\",\"integrity\":\"sha512-RXRJzMiK6U2ye0BlGGZnmpwJDPgakn6aNQ0A7gHRbD4I0uvK4TW6UqkK1V0pp9jskjJBAXd3dRrbzWkqJ+6cxA==\"},\"zod\":{\"version\":\"3.21.4\",\"resolved\":\"https://registry.npmmirror.com/zod/-/zod-3.21.4.tgz\",\"integrity\":\"sha512-m46AKbrzKVzOzs/DZgVnG5H55N1sv1M8qZU3A8RIKbs3mrACDNeIOeilDymVb2HdmP8uwshOCF4uJ8uM9rCqJw==\"}}}"},{"title":"","date":"2024-06-11T08:52:17.400Z","updated":"2024-06-11T08:52:17.400Z","comments":false,"path":"demo/2023面试准备/demo/webpack5/package-lock.json","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/webpack5/package-lock.json","excerpt":"","text":"{\"name\":\"webpack5\",\"version\":\"1.0.0\",\"lockfileVersion\":1,\"requires\":true,\"dependencies\":{\"@babel/code-frame\":{\"version\":\"7.21.4\",\"resolved\":\"https://registry.npmmirror.com/@babel/code-frame/-/code-frame-7.21.4.tgz\",\"integrity\":\"sha512-LYvhNKfwWSPpocw8GI7gpK2nq3HSDuEPC/uSYaALSJu9xjsalaaYFOq0Pwt5KmVqwEbZlDu81aLXwBOmD/Fv9g==\",\"dev\":true,\"requires\":{\"@babel/highlight\":\"^7.18.6\"}},\"@babel/helper-validator-identifier\":{\"version\":\"7.19.1\",\"resolved\":\"https://registry.npmmirror.com/@babel/helper-validator-identifier/-/helper-validator-identifier-7.19.1.tgz\",\"integrity\":\"sha512-awrNfaMtnHUr653GgGEs++LlAvW6w+DcPrOliSMXWCKo597CwL5Acf/wWdNkf/tfEQE3mjkeD1YOVZOUV/od1w==\",\"dev\":true},\"@babel/highlight\":{\"version\":\"7.18.6\",\"resolved\":\"https://registry.npmmirror.com/@babel/highlight/-/highlight-7.18.6.tgz\",\"integrity\":\"sha512-u7stbOuYjaPezCuLj29hNW1v64M2Md2qupEKP1fHc7WdOA3DgLh37suiSrZYY7haUB7iBeQZ9P1uiRF359do3g==\",\"dev\":true,\"requires\":{\"@babel/helper-validator-identifier\":\"^7.18.6\",\"chalk\":\"^2.0.0\",\"js-tokens\":\"^4.0.0\"}},\"@discoveryjs/json-ext\":{\"version\":\"0.5.7\",\"resolved\":\"https://registry.npmmirror.com/@discoveryjs/json-ext/-/json-ext-0.5.7.tgz\",\"integrity\":\"sha512-dBVuXR082gk3jsFp7Rd/JI4kytwGHecnCoTtXFb7DB6CNHp4rg5k1bhg0nWdLGLnOV71lmDzGQaLMy8iPLY0pw==\",\"dev\":true},\"@jest/schemas\":{\"version\":\"29.4.3\",\"resolved\":\"https://registry.npmmirror.com/@jest/schemas/-/schemas-29.4.3.tgz\",\"integrity\":\"sha512-VLYKXQmtmuEz6IxJsrZwzG9NvtkQsWNnWMsKxqWNu3+CnfzJQhp0WDDKWLVV9hLKr0l3SLLFRqcYHjhtyuDVxg==\",\"dev\":true,\"requires\":{\"@sinclair/typebox\":\"^0.25.16\"}},\"@jest/types\":{\"version\":\"29.5.0\",\"resolved\":\"https://registry.npmmirror.com/@jest/types/-/types-29.5.0.tgz\",\"integrity\":\"sha512-qbu7kN6czmVRc3xWFQcAN03RAUamgppVUdXrvl1Wr3jlNF93o9mJbGcDWrwGB6ht44u7efB1qCFgVQmca24Uog==\",\"dev\":true,\"requires\":{\"@jest/schemas\":\"^29.4.3\",\"@types/istanbul-lib-coverage\":\"^2.0.0\",\"@types/istanbul-reports\":\"^3.0.0\",\"@types/node\":\"*\",\"@types/yargs\":\"^17.0.8\",\"chalk\":\"^4.0.0\"},\"dependencies\":{\"ansi-styles\":{\"version\":\"4.3.0\",\"resolved\":\"https://registry.npmmirror.com/ansi-styles/-/ansi-styles-4.3.0.tgz\",\"integrity\":\"sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==\",\"dev\":true,\"requires\":{\"color-convert\":\"^2.0.1\"}},\"chalk\":{\"version\":\"4.1.2\",\"resolved\":\"https://registry.npmmirror.com/chalk/-/chalk-4.1.2.tgz\",\"integrity\":\"sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==\",\"dev\":true,\"requires\":{\"ansi-styles\":\"^4.1.0\",\"supports-color\":\"^7.1.0\"}},\"color-convert\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmmirror.com/color-convert/-/color-convert-2.0.1.tgz\",\"integrity\":\"sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==\",\"dev\":true,\"requires\":{\"color-name\":\"~1.1.4\"}},\"color-name\":{\"version\":\"1.1.4\",\"resolved\":\"https://registry.npmmirror.com/color-name/-/color-name-1.1.4.tgz\",\"integrity\":\"sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==\",\"dev\":true},\"supports-color\":{\"version\":\"7.2.0\",\"resolved\":\"https://registry.npmmirror.com/supports-color/-/supports-color-7.2.0.tgz\",\"integrity\":\"sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==\",\"dev\":true,\"requires\":{\"has-flag\":\"^4.0.0\"}}}},\"@jridgewell/gen-mapping\":{\"version\":\"0.3.3\",\"resolved\":\"https://registry.npmmirror.com/@jridgewell/gen-mapping/-/gen-mapping-0.3.3.tgz\",\"integrity\":\"sha512-HLhSWOLRi875zjjMG/r+Nv0oCW8umGb0BgEhyX3dDX3egwZtB8PqLnjz3yedt8R5StBrzcg4aBpnh8UA9D1BoQ==\",\"dev\":true,\"requires\":{\"@jridgewell/set-array\":\"^1.0.1\",\"@jridgewell/sourcemap-codec\":\"^1.4.10\",\"@jridgewell/trace-mapping\":\"^0.3.9\"}},\"@jridgewell/resolve-uri\":{\"version\":\"3.1.0\",\"resolved\":\"https://registry.npmmirror.com/@jridgewell/resolve-uri/-/resolve-uri-3.1.0.tgz\",\"integrity\":\"sha512-F2msla3tad+Mfht5cJq7LSXcdudKTWCVYUgw6pLFOOHSTtZlj6SWNYAp+AhuqLmWdBO2X5hPrLcu8cVP8fy28w==\",\"dev\":true},\"@jridgewell/set-array\":{\"version\":\"1.1.2\",\"resolved\":\"https://registry.npmmirror.com/@jridgewell/set-array/-/set-array-1.1.2.tgz\",\"integrity\":\"sha512-xnkseuNADM0gt2bs+BvhO0p78Mk762YnZdsuzFV018NoG1Sj1SCQvpSqa7XUaTam5vAGasABV9qXASMKnFMwMw==\",\"dev\":true},\"@jridgewell/source-map\":{\"version\":\"0.3.3\",\"resolved\":\"https://registry.npmmirror.com/@jridgewell/source-map/-/source-map-0.3.3.tgz\",\"integrity\":\"sha512-b+fsZXeLYi9fEULmfBrhxn4IrPlINf8fiNarzTof004v3lFdntdwa9PF7vFJqm3mg7s+ScJMxXaE3Acp1irZcg==\",\"dev\":true,\"requires\":{\"@jridgewell/gen-mapping\":\"^0.3.0\",\"@jridgewell/trace-mapping\":\"^0.3.9\"}},\"@jridgewell/sourcemap-codec\":{\"version\":\"1.4.14\",\"resolved\":\"https://registry.npmmirror.com/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.14.tgz\",\"integrity\":\"sha512-XPSJHWmi394fuUuzDnGz1wiKqWfo1yXecHQMRf2l6hztTO+nPru658AyDngaBe7isIxEkRsPR3FZh+s7iVa4Uw==\",\"dev\":true},\"@jridgewell/trace-mapping\":{\"version\":\"0.3.18\",\"resolved\":\"https://registry.npmmirror.com/@jridgewell/trace-mapping/-/trace-mapping-0.3.18.tgz\",\"integrity\":\"sha512-w+niJYzMHdd7USdiH2U6869nqhD2nbfZXND5Yp93qIbEmnDNk7PD48o+YchRVpzMU7M6jVCbenTR7PA1FLQ9pA==\",\"dev\":true,\"requires\":{\"@jridgewell/resolve-uri\":\"3.1.0\",\"@jridgewell/sourcemap-codec\":\"1.4.14\"}},\"@leichtgewicht/ip-codec\":{\"version\":\"2.0.4\",\"resolved\":\"https://registry.npmmirror.com/@leichtgewicht/ip-codec/-/ip-codec-2.0.4.tgz\",\"integrity\":\"sha512-Hcv+nVC0kZnQ3tD9GVu5xSMR4VVYOteQIr/hwFPVEvPdlXqgGEuRjiheChHgdM+JyqdgNcmzZOX/tnl0JOiI7A==\",\"dev\":true},\"@polka/url\":{\"version\":\"1.0.0-next.21\",\"resolved\":\"https://registry.npmmirror.com/@polka/url/-/url-1.0.0-next.21.tgz\",\"integrity\":\"sha512-a5Sab1C4/icpTZVzZc5Ghpz88yQtGOyNqYXcZgOssB2uuAr+wF/MvN6bgtW32q7HHrvBki+BsZ0OuNv6EV3K9g==\",\"dev\":true},\"@sinclair/typebox\":{\"version\":\"0.25.24\",\"resolved\":\"https://registry.npmmirror.com/@sinclair/typebox/-/typebox-0.25.24.tgz\",\"integrity\":\"sha512-XJfwUVUKDHF5ugKwIcxEgc9k8b7HbznCp6eUfWgu710hMPNIO4aw4/zB5RogDQz8nd6gyCDpU9O/m6qYEWY6yQ==\",\"dev\":true},\"@trysound/sax\":{\"version\":\"0.2.0\",\"resolved\":\"https://registry.npmmirror.com/@trysound/sax/-/sax-0.2.0.tgz\",\"integrity\":\"sha512-L7z9BgrNEcYyUYtF+HaEfiS5ebkh9jXqbszz7pC0hRBPaatV0XjSD3+eHrpqFemQfgwiFF0QPIarnIihIDn7OA==\",\"dev\":true},\"@types/body-parser\":{\"version\":\"1.19.2\",\"resolved\":\"https://registry.npmmirror.com/@types/body-parser/-/body-parser-1.19.2.tgz\",\"integrity\":\"sha512-ALYone6pm6QmwZoAgeyNksccT9Q4AWZQ6PvfwR37GT6r6FWUPguq6sUmNGSMV2Wr761oQoBxwGGa6DR5o1DC9g==\",\"dev\":true,\"requires\":{\"@types/connect\":\"*\",\"@types/node\":\"*\"}},\"@types/bonjour\":{\"version\":\"3.5.10\",\"resolved\":\"https://registry.npmmirror.com/@types/bonjour/-/bonjour-3.5.10.tgz\",\"integrity\":\"sha512-p7ienRMiS41Nu2/igbJxxLDWrSZ0WxM8UQgCeO9KhoVF7cOVFkrKsiDr1EsJIla8vV3oEEjGcz11jc5yimhzZw==\",\"dev\":true,\"requires\":{\"@types/node\":\"*\"}},\"@types/connect\":{\"version\":\"3.4.35\",\"resolved\":\"https://registry.npmmirror.com/@types/connect/-/connect-3.4.35.tgz\",\"integrity\":\"sha512-cdeYyv4KWoEgpBISTxWvqYsVy444DOqehiF3fM3ne10AmJ62RSyNkUnxMJXHQWRQQX2eR94m5y1IZyDwBjV9FQ==\",\"dev\":true,\"requires\":{\"@types/node\":\"*\"}},\"@types/connect-history-api-fallback\":{\"version\":\"1.5.0\",\"resolved\":\"https://registry.npmmirror.com/@types/connect-history-api-fallback/-/connect-history-api-fallback-1.5.0.tgz\",\"integrity\":\"sha512-4x5FkPpLipqwthjPsF7ZRbOv3uoLUFkTA9G9v583qi4pACvq0uTELrB8OLUzPWUI4IJIyvM85vzkV1nyiI2Lig==\",\"dev\":true,\"requires\":{\"@types/express-serve-static-core\":\"*\",\"@types/node\":\"*\"}},\"@types/eslint\":{\"version\":\"8.37.0\",\"resolved\":\"https://registry.npmmirror.com/@types/eslint/-/eslint-8.37.0.tgz\",\"integrity\":\"sha512-Piet7dG2JBuDIfohBngQ3rCt7MgO9xCO4xIMKxBThCq5PNRB91IjlJ10eJVwfoNtvTErmxLzwBZ7rHZtbOMmFQ==\",\"dev\":true,\"requires\":{\"@types/estree\":\"*\",\"@types/json-schema\":\"*\"}},\"@types/eslint-scope\":{\"version\":\"3.7.4\",\"resolved\":\"https://registry.npmmirror.com/@types/eslint-scope/-/eslint-scope-3.7.4.tgz\",\"integrity\":\"sha512-9K4zoImiZc3HlIp6AVUDE4CWYx22a+lhSZMYNpbjW04+YF0KWj4pJXnEMjdnFTiQibFFmElcsasJXDbdI/EPhA==\",\"dev\":true,\"requires\":{\"@types/eslint\":\"*\",\"@types/estree\":\"*\"}},\"@types/estree\":{\"version\":\"1.0.1\",\"resolved\":\"https://registry.npmmirror.com/@types/estree/-/estree-1.0.1.tgz\",\"integrity\":\"sha512-LG4opVs2ANWZ1TJoKc937iMmNstM/d0ae1vNbnBvBhqCSezgVUOzcLCqbI5elV8Vy6WKwKjaqR+zO9VKirBBCA==\",\"dev\":true},\"@types/express\":{\"version\":\"4.17.17\",\"resolved\":\"https://registry.npmmirror.com/@types/express/-/express-4.17.17.tgz\",\"integrity\":\"sha512-Q4FmmuLGBG58btUnfS1c1r/NQdlp3DMfGDGig8WhfpA2YRUtEkxAjkZb0yvplJGYdF1fsQ81iMDcH24sSCNC/Q==\",\"dev\":true,\"requires\":{\"@types/body-parser\":\"*\",\"@types/express-serve-static-core\":\"^4.17.33\",\"@types/qs\":\"*\",\"@types/serve-static\":\"*\"}},\"@types/express-serve-static-core\":{\"version\":\"4.17.35\",\"resolved\":\"https://registry.npmmirror.com/@types/express-serve-static-core/-/express-serve-static-core-4.17.35.tgz\",\"integrity\":\"sha512-wALWQwrgiB2AWTT91CB62b6Yt0sNHpznUXeZEcnPU3DRdlDIz74x8Qg1UUYKSVFi+va5vKOLYRBI1bRKiLLKIg==\",\"dev\":true,\"requires\":{\"@types/node\":\"*\",\"@types/qs\":\"*\",\"@types/range-parser\":\"*\",\"@types/send\":\"*\"}},\"@types/glob\":{\"version\":\"7.2.0\",\"resolved\":\"https://registry.npmmirror.com/@types/glob/-/glob-7.2.0.tgz\",\"integrity\":\"sha512-ZUxbzKl0IfJILTS6t7ip5fQQM/J3TJYubDm3nMbgubNNYS62eXeUpoLUC8/7fJNiFYHTrGPQn7hspDUzIHX3UA==\",\"dev\":true,\"requires\":{\"@types/minimatch\":\"*\",\"@types/node\":\"*\"}},\"@types/html-minifier-terser\":{\"version\":\"6.1.0\",\"resolved\":\"https://registry.npmmirror.com/@types/html-minifier-terser/-/html-minifier-terser-6.1.0.tgz\",\"integrity\":\"sha512-oh/6byDPnL1zeNXFrDXFLyZjkr1MsBG667IM792caf1L2UPOOMf65NFzjUH/ltyfwjAGfs1rsX1eftK0jC/KIg==\",\"dev\":true},\"@types/http-proxy\":{\"version\":\"1.17.11\",\"resolved\":\"https://registry.npmmirror.com/@types/http-proxy/-/http-proxy-1.17.11.tgz\",\"integrity\":\"sha512-HC8G7c1WmaF2ekqpnFq626xd3Zz0uvaqFmBJNRZCGEZCXkvSdJoNFn/8Ygbd9fKNQj8UzLdCETaI0UWPAjK7IA==\",\"dev\":true,\"requires\":{\"@types/node\":\"*\"}},\"@types/istanbul-lib-coverage\":{\"version\":\"2.0.4\",\"resolved\":\"https://registry.npmmirror.com/@types/istanbul-lib-coverage/-/istanbul-lib-coverage-2.0.4.tgz\",\"integrity\":\"sha512-z/QT1XN4K4KYuslS23k62yDIDLwLFkzxOuMplDtObz0+y7VqJCaO2o+SPwHCvLFZh7xazvvoor2tA/hPz9ee7g==\",\"dev\":true},\"@types/istanbul-lib-report\":{\"version\":\"3.0.0\",\"resolved\":\"https://registry.npmmirror.com/@types/istanbul-lib-report/-/istanbul-lib-report-3.0.0.tgz\",\"integrity\":\"sha512-plGgXAPfVKFoYfa9NpYDAkseG+g6Jr294RqeqcqDixSbU34MZVJRi/P+7Y8GDpzkEwLaGZZOpKIEmeVZNtKsrg==\",\"dev\":true,\"requires\":{\"@types/istanbul-lib-coverage\":\"*\"}},\"@types/istanbul-reports\":{\"version\":\"3.0.1\",\"resolved\":\"https://registry.npmmirror.com/@types/istanbul-reports/-/istanbul-reports-3.0.1.tgz\",\"integrity\":\"sha512-c3mAZEuK0lvBp8tmuL74XRKn1+y2dcwOUpH7x4WrF6gk1GIgiluDRgMYQtw2OFcBvAJWlt6ASU3tSqxp0Uu0Aw==\",\"dev\":true,\"requires\":{\"@types/istanbul-lib-report\":\"*\"}},\"@types/json-schema\":{\"version\":\"7.0.11\",\"resolved\":\"https://registry.npmmirror.com/@types/json-schema/-/json-schema-7.0.11.tgz\",\"integrity\":\"sha512-wOuvG1SN4Us4rez+tylwwwCV1psiNVOkJeM3AUWUNWg/jDQY2+HE/444y5gc+jBmRqASOm2Oeh5c1axHobwRKQ==\",\"dev\":true},\"@types/mime\":{\"version\":\"1.3.2\",\"resolved\":\"https://registry.npmmirror.com/@types/mime/-/mime-1.3.2.tgz\",\"integrity\":\"sha512-YATxVxgRqNH6nHEIsvg6k2Boc1JHI9ZbH5iWFFv/MTkchz3b1ieGDa5T0a9RznNdI0KhVbdbWSN+KWWrQZRxTw==\",\"dev\":true},\"@types/minimatch\":{\"version\":\"5.1.2\",\"resolved\":\"https://registry.npmmirror.com/@types/minimatch/-/minimatch-5.1.2.tgz\",\"integrity\":\"sha512-K0VQKziLUWkVKiRVrx4a40iPaxTUefQmjtkQofBkYRcoaaL/8rhwDWww9qWbrgicNOgnpIsMxyNIUM4+n6dUIA==\",\"dev\":true},\"@types/node\":{\"version\":\"20.1.3\",\"resolved\":\"https://registry.npmmirror.com/@types/node/-/node-20.1.3.tgz\",\"integrity\":\"sha512-NP2yfZpgmf2eDRPmgGq+fjGjSwFgYbihA8/gK+ey23qT9RkxsgNTZvGOEpXgzIGqesTYkElELLgtKoMQTys5vA==\",\"dev\":true},\"@types/parse-json\":{\"version\":\"4.0.0\",\"resolved\":\"https://registry.npmmirror.com/@types/parse-json/-/parse-json-4.0.0.tgz\",\"integrity\":\"sha512-//oorEZjL6sbPcKUaCdIGlIUeH26mgzimjBB77G6XRgnDl/L5wOnpyBGRe/Mmf5CVW3PwEBE1NjiMZ/ssFh4wA==\",\"dev\":true},\"@types/qs\":{\"version\":\"6.9.7\",\"resolved\":\"https://registry.npmmirror.com/@types/qs/-/qs-6.9.7.tgz\",\"integrity\":\"sha512-FGa1F62FT09qcrueBA6qYTrJPVDzah9a+493+o2PCXsesWHIn27G98TsSMs3WPNbZIEj4+VJf6saSFpvD+3Zsw==\",\"dev\":true},\"@types/range-parser\":{\"version\":\"1.2.4\",\"resolved\":\"https://registry.npmmirror.com/@types/range-parser/-/range-parser-1.2.4.tgz\",\"integrity\":\"sha512-EEhsLsD6UsDM1yFhAvy0Cjr6VwmpMWqFBCb9w07wVugF7w9nfajxLuVmngTIpgS6svCnm6Vaw+MZhoDCKnOfsw==\",\"dev\":true},\"@types/retry\":{\"version\":\"0.12.0\",\"resolved\":\"https://registry.npmmirror.com/@types/retry/-/retry-0.12.0.tgz\",\"integrity\":\"sha512-wWKOClTTiizcZhXnPY4wikVAwmdYHp8q6DmC+EJUzAMsycb7HB32Kh9RN4+0gExjmPmZSAQjgURXIGATPegAvA==\",\"dev\":true},\"@types/send\":{\"version\":\"0.17.1\",\"resolved\":\"https://registry.npmmirror.com/@types/send/-/send-0.17.1.tgz\",\"integrity\":\"sha512-Cwo8LE/0rnvX7kIIa3QHCkcuF21c05Ayb0ZfxPiv0W8VRiZiNW/WuRupHKpqqGVGf7SUA44QSOUKaEd9lIrd/Q==\",\"dev\":true,\"requires\":{\"@types/mime\":\"^1\",\"@types/node\":\"*\"}},\"@types/serve-index\":{\"version\":\"1.9.1\",\"resolved\":\"https://registry.npmmirror.com/@types/serve-index/-/serve-index-1.9.1.tgz\",\"integrity\":\"sha512-d/Hs3nWDxNL2xAczmOVZNj92YZCS6RGxfBPjKzuu/XirCgXdpKEb88dYNbrYGint6IVWLNP+yonwVAuRC0T2Dg==\",\"dev\":true,\"requires\":{\"@types/express\":\"*\"}},\"@types/serve-static\":{\"version\":\"1.15.1\",\"resolved\":\"https://registry.npmmirror.com/@types/serve-static/-/serve-static-1.15.1.tgz\",\"integrity\":\"sha512-NUo5XNiAdULrJENtJXZZ3fHtfMolzZwczzBbnAeBbqBwG+LaG6YaJtuwzwGSQZ2wsCrxjEhNNjAkKigy3n8teQ==\",\"dev\":true,\"requires\":{\"@types/mime\":\"*\",\"@types/node\":\"*\"}},\"@types/sockjs\":{\"version\":\"0.3.33\",\"resolved\":\"https://registry.npmmirror.com/@types/sockjs/-/sockjs-0.3.33.tgz\",\"integrity\":\"sha512-f0KEEe05NvUnat+boPTZ0dgaLZ4SfSouXUgv5noUiefG2ajgKjmETo9ZJyuqsl7dfl2aHlLJUiki6B4ZYldiiw==\",\"dev\":true,\"requires\":{\"@types/node\":\"*\"}},\"@types/ws\":{\"version\":\"8.5.4\",\"resolved\":\"https://registry.npmmirror.com/@types/ws/-/ws-8.5.4.tgz\",\"integrity\":\"sha512-zdQDHKUgcX/zBc4GrwsE/7dVdAD8JR4EuiAXiiUhhfyIJXXb2+PrGshFyeXWQPMmmZ2XxgaqclgpIC7eTXc1mg==\",\"dev\":true,\"requires\":{\"@types/node\":\"*\"}},\"@types/yargs\":{\"version\":\"17.0.24\",\"resolved\":\"https://registry.npmmirror.com/@types/yargs/-/yargs-17.0.24.tgz\",\"integrity\":\"sha512-6i0aC7jV6QzQB8ne1joVZ0eSFIstHsCrobmOtghM11yGlH0j43FKL2UhWdELkyps0zuf7qVTUVCCR+tgSlyLLw==\",\"dev\":true,\"requires\":{\"@types/yargs-parser\":\"*\"}},\"@types/yargs-parser\":{\"version\":\"21.0.0\",\"resolved\":\"https://registry.npmmirror.com/@types/yargs-parser/-/yargs-parser-21.0.0.tgz\",\"integrity\":\"sha512-iO9ZQHkZxHn4mSakYV0vFHAVDyEOIJQrV2uZ06HxEPcx+mt8swXoZHIbaaJ2crJYFfErySgktuTZ3BeLz+XmFA==\",\"dev\":true},\"@webassemblyjs/ast\":{\"version\":\"1.11.6\",\"resolved\":\"https://registry.npmmirror.com/@webassemblyjs/ast/-/ast-1.11.6.tgz\",\"integrity\":\"sha512-IN1xI7PwOvLPgjcf180gC1bqn3q/QaOCwYUahIOhbYUu8KA/3tw2RT/T0Gidi1l7Hhj5D/INhJxiICObqpMu4Q==\",\"dev\":true,\"requires\":{\"@webassemblyjs/helper-numbers\":\"1.11.6\",\"@webassemblyjs/helper-wasm-bytecode\":\"1.11.6\"}},\"@webassemblyjs/floating-point-hex-parser\":{\"version\":\"1.11.6\",\"resolved\":\"https://registry.npmmirror.com/@webassemblyjs/floating-point-hex-parser/-/floating-point-hex-parser-1.11.6.tgz\",\"integrity\":\"sha512-ejAj9hfRJ2XMsNHk/v6Fu2dGS+i4UaXBXGemOfQ/JfQ6mdQg/WXtwleQRLLS4OvfDhv8rYnVwH27YJLMyYsxhw==\",\"dev\":true},\"@webassemblyjs/helper-api-error\":{\"version\":\"1.11.6\",\"resolved\":\"https://registry.npmmirror.com/@webassemblyjs/helper-api-error/-/helper-api-error-1.11.6.tgz\",\"integrity\":\"sha512-o0YkoP4pVu4rN8aTJgAyj9hC2Sv5UlkzCHhxqWj8butaLvnpdc2jOwh4ewE6CX0txSfLn/UYaV/pheS2Txg//Q==\",\"dev\":true},\"@webassemblyjs/helper-buffer\":{\"version\":\"1.11.6\",\"resolved\":\"https://registry.npmmirror.com/@webassemblyjs/helper-buffer/-/helper-buffer-1.11.6.tgz\",\"integrity\":\"sha512-z3nFzdcp1mb8nEOFFk8DrYLpHvhKC3grJD2ardfKOzmbmJvEf/tPIqCY+sNcwZIY8ZD7IkB2l7/pqhUhqm7hLA==\",\"dev\":true},\"@webassemblyjs/helper-numbers\":{\"version\":\"1.11.6\",\"resolved\":\"https://registry.npmmirror.com/@webassemblyjs/helper-numbers/-/helper-numbers-1.11.6.tgz\",\"integrity\":\"sha512-vUIhZ8LZoIWHBohiEObxVm6hwP034jwmc9kuq5GdHZH0wiLVLIPcMCdpJzG4C11cHoQ25TFIQj9kaVADVX7N3g==\",\"dev\":true,\"requires\":{\"@webassemblyjs/floating-point-hex-parser\":\"1.11.6\",\"@webassemblyjs/helper-api-error\":\"1.11.6\",\"@xtuc/long\":\"4.2.2\"}},\"@webassemblyjs/helper-wasm-bytecode\":{\"version\":\"1.11.6\",\"resolved\":\"https://registry.npmmirror.com/@webassemblyjs/helper-wasm-bytecode/-/helper-wasm-bytecode-1.11.6.tgz\",\"integrity\":\"sha512-sFFHKwcmBprO9e7Icf0+gddyWYDViL8bpPjJJl0WHxCdETktXdmtWLGVzoHbqUcY4Be1LkNfwTmXOJUFZYSJdA==\",\"dev\":true},\"@webassemblyjs/helper-wasm-section\":{\"version\":\"1.11.6\",\"resolved\":\"https://registry.npmmirror.com/@webassemblyjs/helper-wasm-section/-/helper-wasm-section-1.11.6.tgz\",\"integrity\":\"sha512-LPpZbSOwTpEC2cgn4hTydySy1Ke+XEu+ETXuoyvuyezHO3Kjdu90KK95Sh9xTbmjrCsUwvWwCOQQNta37VrS9g==\",\"dev\":true,\"requires\":{\"@webassemblyjs/ast\":\"1.11.6\",\"@webassemblyjs/helper-buffer\":\"1.11.6\",\"@webassemblyjs/helper-wasm-bytecode\":\"1.11.6\",\"@webassemblyjs/wasm-gen\":\"1.11.6\"}},\"@webassemblyjs/ieee754\":{\"version\":\"1.11.6\",\"resolved\":\"https://registry.npmmirror.com/@webassemblyjs/ieee754/-/ieee754-1.11.6.tgz\",\"integrity\":\"sha512-LM4p2csPNvbij6U1f19v6WR56QZ8JcHg3QIJTlSwzFcmx6WSORicYj6I63f9yU1kEUtrpG+kjkiIAkevHpDXrg==\",\"dev\":true,\"requires\":{\"@xtuc/ieee754\":\"^1.2.0\"}},\"@webassemblyjs/leb128\":{\"version\":\"1.11.6\",\"resolved\":\"https://registry.npmmirror.com/@webassemblyjs/leb128/-/leb128-1.11.6.tgz\",\"integrity\":\"sha512-m7a0FhE67DQXgouf1tbN5XQcdWoNgaAuoULHIfGFIEVKA6tu/edls6XnIlkmS6FrXAquJRPni3ZZKjw6FSPjPQ==\",\"dev\":true,\"requires\":{\"@xtuc/long\":\"4.2.2\"}},\"@webassemblyjs/utf8\":{\"version\":\"1.11.6\",\"resolved\":\"https://registry.npmmirror.com/@webassemblyjs/utf8/-/utf8-1.11.6.tgz\",\"integrity\":\"sha512-vtXf2wTQ3+up9Zsg8sa2yWiQpzSsMyXj0qViVP6xKGCUT8p8YJ6HqI7l5eCnWx1T/FYdsv07HQs2wTFbbof/RA==\",\"dev\":true},\"@webassemblyjs/wasm-edit\":{\"version\":\"1.11.6\",\"resolved\":\"https://registry.npmmirror.com/@webassemblyjs/wasm-edit/-/wasm-edit-1.11.6.tgz\",\"integrity\":\"sha512-Ybn2I6fnfIGuCR+Faaz7YcvtBKxvoLV3Lebn1tM4o/IAJzmi9AWYIPWpyBfU8cC+JxAO57bk4+zdsTjJR+VTOw==\",\"dev\":true,\"requires\":{\"@webassemblyjs/ast\":\"1.11.6\",\"@webassemblyjs/helper-buffer\":\"1.11.6\",\"@webassemblyjs/helper-wasm-bytecode\":\"1.11.6\",\"@webassemblyjs/helper-wasm-section\":\"1.11.6\",\"@webassemblyjs/wasm-gen\":\"1.11.6\",\"@webassemblyjs/wasm-opt\":\"1.11.6\",\"@webassemblyjs/wasm-parser\":\"1.11.6\",\"@webassemblyjs/wast-printer\":\"1.11.6\"}},\"@webassemblyjs/wasm-gen\":{\"version\":\"1.11.6\",\"resolved\":\"https://registry.npmmirror.com/@webassemblyjs/wasm-gen/-/wasm-gen-1.11.6.tgz\",\"integrity\":\"sha512-3XOqkZP/y6B4F0PBAXvI1/bky7GryoogUtfwExeP/v7Nzwo1QLcq5oQmpKlftZLbT+ERUOAZVQjuNVak6UXjPA==\",\"dev\":true,\"requires\":{\"@webassemblyjs/ast\":\"1.11.6\",\"@webassemblyjs/helper-wasm-bytecode\":\"1.11.6\",\"@webassemblyjs/ieee754\":\"1.11.6\",\"@webassemblyjs/leb128\":\"1.11.6\",\"@webassemblyjs/utf8\":\"1.11.6\"}},\"@webassemblyjs/wasm-opt\":{\"version\":\"1.11.6\",\"resolved\":\"https://registry.npmmirror.com/@webassemblyjs/wasm-opt/-/wasm-opt-1.11.6.tgz\",\"integrity\":\"sha512-cOrKuLRE7PCe6AsOVl7WasYf3wbSo4CeOk6PkrjS7g57MFfVUF9u6ysQBBODX0LdgSvQqRiGz3CXvIDKcPNy4g==\",\"dev\":true,\"requires\":{\"@webassemblyjs/ast\":\"1.11.6\",\"@webassemblyjs/helper-buffer\":\"1.11.6\",\"@webassemblyjs/wasm-gen\":\"1.11.6\",\"@webassemblyjs/wasm-parser\":\"1.11.6\"}},\"@webassemblyjs/wasm-parser\":{\"version\":\"1.11.6\",\"resolved\":\"https://registry.npmmirror.com/@webassemblyjs/wasm-parser/-/wasm-parser-1.11.6.tgz\",\"integrity\":\"sha512-6ZwPeGzMJM3Dqp3hCsLgESxBGtT/OeCvCZ4TA1JUPYgmhAx38tTPR9JaKy0S5H3evQpO/h2uWs2j6Yc/fjkpTQ==\",\"dev\":true,\"requires\":{\"@webassemblyjs/ast\":\"1.11.6\",\"@webassemblyjs/helper-api-error\":\"1.11.6\",\"@webassemblyjs/helper-wasm-bytecode\":\"1.11.6\",\"@webassemblyjs/ieee754\":\"1.11.6\",\"@webassemblyjs/leb128\":\"1.11.6\",\"@webassemblyjs/utf8\":\"1.11.6\"}},\"@webassemblyjs/wast-printer\":{\"version\":\"1.11.6\",\"resolved\":\"https://registry.npmmirror.com/@webassemblyjs/wast-printer/-/wast-printer-1.11.6.tgz\",\"integrity\":\"sha512-JM7AhRcE+yW2GWYaKeHL5vt4xqee5N2WcezptmgyhNS+ScggqcT1OtXykhAb13Sn5Yas0j2uv9tHgrjwvzAP4A==\",\"dev\":true,\"requires\":{\"@webassemblyjs/ast\":\"1.11.6\",\"@xtuc/long\":\"4.2.2\"}},\"@webpack-cli/configtest\":{\"version\":\"2.1.0\",\"resolved\":\"https://registry.npmmirror.com/@webpack-cli/configtest/-/configtest-2.1.0.tgz\",\"integrity\":\"sha512-K/vuv72vpfSEZoo5KIU0a2FsEoYdW0DUMtMpB5X3LlUwshetMZRZRxB7sCsVji/lFaSxtQQ3aM9O4eMolXkU9w==\",\"dev\":true},\"@webpack-cli/info\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmmirror.com/@webpack-cli/info/-/info-2.0.1.tgz\",\"integrity\":\"sha512-fE1UEWTwsAxRhrJNikE7v4EotYflkEhBL7EbajfkPlf6E37/2QshOy/D48Mw8G5XMFlQtS6YV42vtbG9zBpIQA==\",\"dev\":true},\"@webpack-cli/serve\":{\"version\":\"2.0.4\",\"resolved\":\"https://registry.npmmirror.com/@webpack-cli/serve/-/serve-2.0.4.tgz\",\"integrity\":\"sha512-0xRgjgDLdz6G7+vvDLlaRpFatJaJ69uTalZLRSMX5B3VUrDmXcrVA3+6fXXQgmYz7bY9AAgs348XQdmtLsK41A==\",\"dev\":true},\"@xtuc/ieee754\":{\"version\":\"1.2.0\",\"resolved\":\"https://registry.npmmirror.com/@xtuc/ieee754/-/ieee754-1.2.0.tgz\",\"integrity\":\"sha512-DX8nKgqcGwsc0eJSqYt5lwP4DH5FlHnmuWWBRy7X0NcaGR0ZtuyeESgMwTYVEtxmsNGY+qit4QYT/MIYTOTPeA==\",\"dev\":true},\"@xtuc/long\":{\"version\":\"4.2.2\",\"resolved\":\"https://registry.npmmirror.com/@xtuc/long/-/long-4.2.2.tgz\",\"integrity\":\"sha512-NuHqBY1PB/D8xU6s/thBgOAiAP7HOYDQ32+BFZILJ8ivkUkAHQnWfn6WhL79Owj1qmUnoN/YPhktdIoucipkAQ==\",\"dev\":true},\"accepts\":{\"version\":\"1.3.8\",\"resolved\":\"https://registry.npmmirror.com/accepts/-/accepts-1.3.8.tgz\",\"integrity\":\"sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==\",\"dev\":true,\"requires\":{\"mime-types\":\"~2.1.34\",\"negotiator\":\"0.6.3\"}},\"acorn\":{\"version\":\"8.8.2\",\"resolved\":\"https://registry.npmmirror.com/acorn/-/acorn-8.8.2.tgz\",\"integrity\":\"sha512-xjIYgE8HBrkpd/sJqOGNspf8uHG+NOHGOw6a/Urj8taM2EXfdNAH2oFcPeIFfsv3+kz/mJrS5VuMqbNLjCa2vw==\",\"dev\":true},\"acorn-import-assertions\":{\"version\":\"1.8.0\",\"resolved\":\"https://registry.npmmirror.com/acorn-import-assertions/-/acorn-import-assertions-1.8.0.tgz\",\"integrity\":\"sha512-m7VZ3jwz4eK6A4Vtt8Ew1/mNbP24u0FhdyfA7fSvnJR6LMdfOYnmuIrrJAgrYfYJ10F/otaHTtrtrtmHdMNzEw==\",\"dev\":true},\"acorn-walk\":{\"version\":\"8.2.0\",\"resolved\":\"https://registry.npmmirror.com/acorn-walk/-/acorn-walk-8.2.0.tgz\",\"integrity\":\"sha512-k+iyHEuPgSw6SbuDpGQM+06HQUa04DZ3o+F6CSzXMvvI5KMvnaEqXe+YVe555R9nn6GPt404fos4wcgpw12SDA==\",\"dev\":true},\"ajv\":{\"version\":\"6.12.6\",\"resolved\":\"https://registry.npmmirror.com/ajv/-/ajv-6.12.6.tgz\",\"integrity\":\"sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==\",\"dev\":true,\"requires\":{\"fast-deep-equal\":\"^3.1.1\",\"fast-json-stable-stringify\":\"^2.0.0\",\"json-schema-traverse\":\"^0.4.1\",\"uri-js\":\"^4.2.2\"}},\"ajv-formats\":{\"version\":\"2.1.1\",\"resolved\":\"https://registry.npmmirror.com/ajv-formats/-/ajv-formats-2.1.1.tgz\",\"integrity\":\"sha512-Wx0Kx52hxE7C18hkMEggYlEifqWZtYaRgouJor+WMdPnQyEK13vgEWyVNup7SoeeoLMsr4kf5h6dOW11I15MUA==\",\"dev\":true,\"requires\":{\"ajv\":\"^8.0.0\"},\"dependencies\":{\"ajv\":{\"version\":\"8.12.0\",\"resolved\":\"https://registry.npmmirror.com/ajv/-/ajv-8.12.0.tgz\",\"integrity\":\"sha512-sRu1kpcO9yLtYxBKvqfTeh9KzZEwO3STyX1HT+4CaDzC6HpTGYhIhPIzj9XuKU7KYDwnaeh5hcOwjy1QuJzBPA==\",\"dev\":true,\"requires\":{\"fast-deep-equal\":\"^3.1.1\",\"json-schema-traverse\":\"^1.0.0\",\"require-from-string\":\"^2.0.2\",\"uri-js\":\"^4.2.2\"}},\"json-schema-traverse\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz\",\"integrity\":\"sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==\",\"dev\":true}}},\"ajv-keywords\":{\"version\":\"3.5.2\",\"resolved\":\"https://registry.npmmirror.com/ajv-keywords/-/ajv-keywords-3.5.2.tgz\",\"integrity\":\"sha512-5p6WTN0DdTGVQk6VjcEju19IgaHudalcfabD7yhDGeA6bcQnmL+CpveLJq/3hvfwd1aof6L386Ougkx6RfyMIQ==\",\"dev\":true},\"ansi-html-community\":{\"version\":\"0.0.8\",\"resolved\":\"https://registry.npmmirror.com/ansi-html-community/-/ansi-html-community-0.0.8.tgz\",\"integrity\":\"sha512-1APHAyr3+PCamwNw3bXCPp4HFLONZt/yIH0sZp0/469KWNTEy+qN5jQ3GVX6DMZ1UXAi34yVwtTeaG/HpBuuzw==\",\"dev\":true},\"ansi-regex\":{\"version\":\"5.0.1\",\"resolved\":\"https://registry.npmmirror.com/ansi-regex/-/ansi-regex-5.0.1.tgz\",\"integrity\":\"sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==\",\"dev\":true},\"ansi-styles\":{\"version\":\"3.2.1\",\"resolved\":\"https://registry.npmmirror.com/ansi-styles/-/ansi-styles-3.2.1.tgz\",\"integrity\":\"sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==\",\"dev\":true,\"requires\":{\"color-convert\":\"^1.9.0\"}},\"anymatch\":{\"version\":\"3.1.3\",\"resolved\":\"https://registry.npmmirror.com/anymatch/-/anymatch-3.1.3.tgz\",\"integrity\":\"sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==\",\"dev\":true,\"requires\":{\"normalize-path\":\"^3.0.0\",\"picomatch\":\"^2.0.4\"}},\"array-flatten\":{\"version\":\"2.1.2\",\"resolved\":\"https://registry.npmmirror.com/array-flatten/-/array-flatten-2.1.2.tgz\",\"integrity\":\"sha512-hNfzcOV8W4NdualtqBFPyVO+54DSJuZGY9qT4pRroB6S9e3iiido2ISIC5h9R2sPJ8H3FHCIiEnsv1lPXO3KtQ==\",\"dev\":true},\"array-union\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/array-union/-/array-union-1.0.2.tgz\",\"integrity\":\"sha512-Dxr6QJj/RdU/hCaBjOfxW+q6lyuVE6JFWIrAUpuOOhoJJoQ99cUn3igRaHVB5P9WrgFVN0FfArM3x0cueOU8ng==\",\"dev\":true,\"requires\":{\"array-uniq\":\"^1.0.1\"}},\"array-uniq\":{\"version\":\"1.0.3\",\"resolved\":\"https://registry.npmmirror.com/array-uniq/-/array-uniq-1.0.3.tgz\",\"integrity\":\"sha512-MNha4BWQ6JbwhFhj03YK552f7cb3AzoE8SzeljgChvL1dl3IcvggXVz1DilzySZkCja+CXuZbdW7yATchWn8/Q==\",\"dev\":true},\"autoprefixer\":{\"version\":\"10.2.5\",\"resolved\":\"https://registry.npmmirror.com/autoprefixer/-/autoprefixer-10.2.5.tgz\",\"integrity\":\"sha512-7H4AJZXvSsn62SqZyJCP+1AWwOuoYpUfK6ot9vm0e87XD6mT8lDywc9D9OTJPMULyGcvmIxzTAMeG2Cc+YX+fA==\",\"dev\":true,\"requires\":{\"browserslist\":\"^4.16.3\",\"caniuse-lite\":\"^1.0.30001196\",\"colorette\":\"^1.2.2\",\"fraction.js\":\"^4.0.13\",\"normalize-range\":\"^0.1.2\",\"postcss-value-parser\":\"^4.1.0\"},\"dependencies\":{\"colorette\":{\"version\":\"1.4.0\",\"resolved\":\"https://registry.npmmirror.com/colorette/-/colorette-1.4.0.tgz\",\"integrity\":\"sha512-Y2oEozpomLn7Q3HFP7dpww7AtMJplbM9lGZP6RDfHqmbeRjiwRg4n6VM6j4KLmRke85uWEI7JqF17f3pqdRA0g==\",\"dev\":true}}},\"balanced-match\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/balanced-match/-/balanced-match-1.0.2.tgz\",\"integrity\":\"sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==\",\"dev\":true},\"batch\":{\"version\":\"0.6.1\",\"resolved\":\"https://registry.npmmirror.com/batch/-/batch-0.6.1.tgz\",\"integrity\":\"sha512-x+VAiMRL6UPkx+kudNvxTl6hB2XNNCG2r+7wixVfIYwu/2HKRXimwQyaumLjMveWvT2Hkd/cAJw+QBMfJ/EKVw==\",\"dev\":true},\"big.js\":{\"version\":\"5.2.2\",\"resolved\":\"https://registry.npmmirror.com/big.js/-/big.js-5.2.2.tgz\",\"integrity\":\"sha512-vyL2OymJxmarO8gxMr0mhChsO9QGwhynfuu4+MHTAW6czfq9humCB7rKpUjDd9YUiDPU4mzpyupFSvOClAwbmQ==\",\"dev\":true},\"binary-extensions\":{\"version\":\"2.2.0\",\"resolved\":\"https://registry.npmmirror.com/binary-extensions/-/binary-extensions-2.2.0.tgz\",\"integrity\":\"sha512-jDctJ/IVQbZoJykoeHbhXpOlNBqGNcwXJKJog42E5HDPUwQTSdjCHdihjj0DlnheQ7blbT6dHOafNAiS8ooQKA==\",\"dev\":true},\"body-parser\":{\"version\":\"1.20.1\",\"resolved\":\"https://registry.npmmirror.com/body-parser/-/body-parser-1.20.1.tgz\",\"integrity\":\"sha512-jWi7abTbYwajOytWCQc37VulmWiRae5RyTpaCyDcS5/lMdtwSz5lOpDE67srw/HYe35f1z3fDQw+3txg7gNtWw==\",\"dev\":true,\"requires\":{\"bytes\":\"3.1.2\",\"content-type\":\"~1.0.4\",\"debug\":\"2.6.9\",\"depd\":\"2.0.0\",\"destroy\":\"1.2.0\",\"http-errors\":\"2.0.0\",\"iconv-lite\":\"0.4.24\",\"on-finished\":\"2.4.1\",\"qs\":\"6.11.0\",\"raw-body\":\"2.5.1\",\"type-is\":\"~1.6.18\",\"unpipe\":\"1.0.0\"},\"dependencies\":{\"bytes\":{\"version\":\"3.1.2\",\"resolved\":\"https://registry.npmmirror.com/bytes/-/bytes-3.1.2.tgz\",\"integrity\":\"sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==\",\"dev\":true}}},\"bonjour-service\":{\"version\":\"1.1.1\",\"resolved\":\"https://registry.npmmirror.com/bonjour-service/-/bonjour-service-1.1.1.tgz\",\"integrity\":\"sha512-Z/5lQRMOG9k7W+FkeGTNjh7htqn/2LMnfOvBZ8pynNZCM9MwkQkI3zeI4oz09uWdcgmgHugVvBqxGg4VQJ5PCg==\",\"dev\":true,\"requires\":{\"array-flatten\":\"^2.1.2\",\"dns-equal\":\"^1.0.0\",\"fast-deep-equal\":\"^3.1.3\",\"multicast-dns\":\"^7.2.5\"}},\"boolbase\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/boolbase/-/boolbase-1.0.0.tgz\",\"integrity\":\"sha512-JZOSA7Mo9sNGB8+UjSgzdLtokWAky1zbztM3WRLCbZ70/3cTANmQmOdR7y2g+J0e2WXywy1yS468tY+IruqEww==\",\"dev\":true},\"brace-expansion\":{\"version\":\"1.1.11\",\"resolved\":\"https://registry.npmmirror.com/brace-expansion/-/brace-expansion-1.1.11.tgz\",\"integrity\":\"sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==\",\"dev\":true,\"requires\":{\"balanced-match\":\"^1.0.0\",\"concat-map\":\"0.0.1\"}},\"braces\":{\"version\":\"3.0.2\",\"resolved\":\"https://registry.npmmirror.com/braces/-/braces-3.0.2.tgz\",\"integrity\":\"sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==\",\"dev\":true,\"requires\":{\"fill-range\":\"^7.0.1\"}},\"browserslist\":{\"version\":\"4.21.5\",\"resolved\":\"https://registry.npmmirror.com/browserslist/-/browserslist-4.21.5.tgz\",\"integrity\":\"sha512-tUkiguQGW7S3IhB7N+c2MV/HZPSCPAAiYBZXLsBhFB/PCy6ZKKsZrmBayHV9fdGV/ARIfJ14NkxKzRDjvp7L6w==\",\"dev\":true,\"requires\":{\"caniuse-lite\":\"^1.0.30001449\",\"electron-to-chromium\":\"^1.4.284\",\"node-releases\":\"^2.0.8\",\"update-browserslist-db\":\"^1.0.10\"}},\"buffer-from\":{\"version\":\"1.1.2\",\"resolved\":\"https://registry.npmmirror.com/buffer-from/-/buffer-from-1.1.2.tgz\",\"integrity\":\"sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==\",\"dev\":true},\"bytes\":{\"version\":\"3.0.0\",\"resolved\":\"https://registry.npmmirror.com/bytes/-/bytes-3.0.0.tgz\",\"integrity\":\"sha512-pMhOfFDPiv9t5jjIXkHosWmkSyQbvsgEVNkz0ERHbuLh2T/7j4Mqqpz523Fe8MVY89KC6Sh/QfS2sM+SjgFDcw==\",\"dev\":true},\"call-bind\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/call-bind/-/call-bind-1.0.2.tgz\",\"integrity\":\"sha512-7O+FbCihrB5WGbFYesctwmTKae6rOiIzmz1icreWJ+0aA7LJfuqhEso2T9ncpcFtzMQtzXf2QGGueWJGTYsqrA==\",\"dev\":true,\"requires\":{\"function-bind\":\"^1.1.1\",\"get-intrinsic\":\"^1.0.2\"}},\"callsites\":{\"version\":\"3.1.0\",\"resolved\":\"https://registry.npmmirror.com/callsites/-/callsites-3.1.0.tgz\",\"integrity\":\"sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==\",\"dev\":true},\"camel-case\":{\"version\":\"4.1.2\",\"resolved\":\"https://registry.npmmirror.com/camel-case/-/camel-case-4.1.2.tgz\",\"integrity\":\"sha512-gxGWBrTT1JuMx6R+o5PTXMmUnhnVzLQ9SNutD4YqKtI6ap897t3tKECYla6gCWEkplXnlNybEkZg9GEGxKFCgw==\",\"dev\":true,\"requires\":{\"pascal-case\":\"^3.1.2\",\"tslib\":\"^2.0.3\"}},\"caniuse-api\":{\"version\":\"3.0.0\",\"resolved\":\"https://registry.npmmirror.com/caniuse-api/-/caniuse-api-3.0.0.tgz\",\"integrity\":\"sha512-bsTwuIg/BZZK/vreVTYYbSWoe2F+71P7K5QGEX+pT250DZbfU1MQ5prOKpPR+LL6uWKK3KMwMCAS74QB3Um1uw==\",\"dev\":true,\"requires\":{\"browserslist\":\"^4.0.0\",\"caniuse-lite\":\"^1.0.0\",\"lodash.memoize\":\"^4.1.2\",\"lodash.uniq\":\"^4.5.0\"}},\"caniuse-lite\":{\"version\":\"1.0.30001486\",\"resolved\":\"https://registry.npmmirror.com/caniuse-lite/-/caniuse-lite-1.0.30001486.tgz\",\"integrity\":\"sha512-uv7/gXuHi10Whlj0pp5q/tsK/32J2QSqVRKQhs2j8VsDCjgyruAh/eEXHF822VqO9yT6iZKw3nRwZRSPBE9OQg==\",\"dev\":true},\"chalk\":{\"version\":\"2.4.2\",\"resolved\":\"https://registry.npmmirror.com/chalk/-/chalk-2.4.2.tgz\",\"integrity\":\"sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==\",\"dev\":true,\"requires\":{\"ansi-styles\":\"^3.2.1\",\"escape-string-regexp\":\"^1.0.5\",\"supports-color\":\"^5.3.0\"},\"dependencies\":{\"has-flag\":{\"version\":\"3.0.0\",\"resolved\":\"https://registry.npmmirror.com/has-flag/-/has-flag-3.0.0.tgz\",\"integrity\":\"sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==\",\"dev\":true},\"supports-color\":{\"version\":\"5.5.0\",\"resolved\":\"https://registry.npmmirror.com/supports-color/-/supports-color-5.5.0.tgz\",\"integrity\":\"sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==\",\"dev\":true,\"requires\":{\"has-flag\":\"^3.0.0\"}}}},\"chokidar\":{\"version\":\"3.5.3\",\"resolved\":\"https://registry.npmmirror.com/chokidar/-/chokidar-3.5.3.tgz\",\"integrity\":\"sha512-Dr3sfKRP6oTcjf2JmUmFJfeVMvXBdegxB0iVQ5eb2V10uFJUCAS8OByZdVAyVb8xXNz3GjjTgj9kLWsZTqE6kw==\",\"dev\":true,\"requires\":{\"anymatch\":\"~3.1.2\",\"braces\":\"~3.0.2\",\"fsevents\":\"~2.3.2\",\"glob-parent\":\"~5.1.2\",\"is-binary-path\":\"~2.1.0\",\"is-glob\":\"~4.0.1\",\"normalize-path\":\"~3.0.0\",\"readdirp\":\"~3.6.0\"}},\"chrome-trace-event\":{\"version\":\"1.0.3\",\"resolved\":\"https://registry.npmmirror.com/chrome-trace-event/-/chrome-trace-event-1.0.3.tgz\",\"integrity\":\"sha512-p3KULyQg4S7NIHixdwbGX+nFHkoBiA4YQmyWtjb8XngSKV124nJmRysgAeujbUVb15vh+RvFUfCPqU7rXk+hZg==\",\"dev\":true},\"ci-info\":{\"version\":\"3.8.0\",\"resolved\":\"https://registry.npmmirror.com/ci-info/-/ci-info-3.8.0.tgz\",\"integrity\":\"sha512-eXTggHWSooYhq49F2opQhuHWgzucfF2YgODK4e1566GQs5BIfP30B0oenwBJHfWxAs2fyPB1s7Mg949zLf61Yw==\",\"dev\":true},\"clean-css\":{\"version\":\"5.3.2\",\"resolved\":\"https://registry.npmmirror.com/clean-css/-/clean-css-5.3.2.tgz\",\"integrity\":\"sha512-JVJbM+f3d3Q704rF4bqQ5UUyTtuJ0JRKNbTKVEeujCCBoMdkEi+V+e8oktO9qGQNSvHrFTM6JZRXrUvGR1czww==\",\"dev\":true,\"requires\":{\"source-map\":\"~0.6.0\"}},\"clean-webpack-plugin\":{\"version\":\"4.0.0\",\"resolved\":\"https://registry.npmmirror.com/clean-webpack-plugin/-/clean-webpack-plugin-4.0.0.tgz\",\"integrity\":\"sha512-WuWE1nyTNAyW5T7oNyys2EN0cfP2fdRxhxnIQWiAp0bMabPdHhoGxM8A6YL2GhqwgrPnnaemVE7nv5XJ2Fhh2w==\",\"dev\":true,\"requires\":{\"del\":\"^4.1.1\"}},\"clone-deep\":{\"version\":\"4.0.1\",\"resolved\":\"https://registry.npmmirror.com/clone-deep/-/clone-deep-4.0.1.tgz\",\"integrity\":\"sha512-neHB9xuzh/wk0dIHweyAXv2aPGZIVk3pLMe+/RNzINf17fe0OG96QroktYAUm7SM1PBnzTabaLboqqxDyMU+SQ==\",\"dev\":true,\"requires\":{\"is-plain-object\":\"^2.0.4\",\"kind-of\":\"^6.0.2\",\"shallow-clone\":\"^3.0.0\"}},\"color-convert\":{\"version\":\"1.9.3\",\"resolved\":\"https://registry.npmmirror.com/color-convert/-/color-convert-1.9.3.tgz\",\"integrity\":\"sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==\",\"dev\":true,\"requires\":{\"color-name\":\"1.1.3\"}},\"color-name\":{\"version\":\"1.1.3\",\"resolved\":\"https://registry.npmmirror.com/color-name/-/color-name-1.1.3.tgz\",\"integrity\":\"sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==\",\"dev\":true},\"colord\":{\"version\":\"2.9.3\",\"resolved\":\"https://registry.npmmirror.com/colord/-/colord-2.9.3.tgz\",\"integrity\":\"sha512-jeC1axXpnb0/2nn/Y1LPuLdgXBLH7aDcHu4KEKfqw3CUhX7ZpfBSlPKyqXE6btIgEzfWtrX3/tyBCaCvXvMkOw==\",\"dev\":true},\"colorette\":{\"version\":\"2.0.20\",\"resolved\":\"https://registry.npmmirror.com/colorette/-/colorette-2.0.20.tgz\",\"integrity\":\"sha512-IfEDxwoWIjkeXL1eXcDiow4UbKjhLdq6/EuSVR9GMN7KVH3r9gQ83e73hsz1Nd1T3ijd5xv1wcWRYO+D6kCI2w==\",\"dev\":true},\"commander\":{\"version\":\"2.20.3\",\"resolved\":\"https://registry.npmmirror.com/commander/-/commander-2.20.3.tgz\",\"integrity\":\"sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ==\",\"dev\":true},\"compressible\":{\"version\":\"2.0.18\",\"resolved\":\"https://registry.npmmirror.com/compressible/-/compressible-2.0.18.tgz\",\"integrity\":\"sha512-AF3r7P5dWxL8MxyITRMlORQNaOA2IkAFaTr4k7BUumjPtRpGDTZpl0Pb1XCO6JeDCBdp126Cgs9sMxqSjgYyRg==\",\"dev\":true,\"requires\":{\"mime-db\":\">= 1.43.0 < 2\"}},\"compression\":{\"version\":\"1.7.4\",\"resolved\":\"https://registry.npmmirror.com/compression/-/compression-1.7.4.tgz\",\"integrity\":\"sha512-jaSIDzP9pZVS4ZfQ+TzvtiWhdpFhE2RDHz8QJkpX9SIpLq88VueF5jJw6t+6CUQcAoA6t+x89MLrWAqpfDE8iQ==\",\"dev\":true,\"requires\":{\"accepts\":\"~1.3.5\",\"bytes\":\"3.0.0\",\"compressible\":\"~2.0.16\",\"debug\":\"2.6.9\",\"on-headers\":\"~1.0.2\",\"safe-buffer\":\"5.1.2\",\"vary\":\"~1.1.2\"},\"dependencies\":{\"safe-buffer\":{\"version\":\"5.1.2\",\"resolved\":\"https://registry.npmmirror.com/safe-buffer/-/safe-buffer-5.1.2.tgz\",\"integrity\":\"sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==\",\"dev\":true}}},\"concat-map\":{\"version\":\"0.0.1\",\"resolved\":\"https://registry.npmmirror.com/concat-map/-/concat-map-0.0.1.tgz\",\"integrity\":\"sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==\",\"dev\":true},\"connect-history-api-fallback\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmmirror.com/connect-history-api-fallback/-/connect-history-api-fallback-2.0.0.tgz\",\"integrity\":\"sha512-U73+6lQFmfiNPrYbXqr6kZ1i1wiRqXnp2nhMsINseWXO8lDau0LGEffJ8kQi4EjLZympVgRdvqjAgiZ1tgzDDA==\",\"dev\":true},\"content-disposition\":{\"version\":\"0.5.4\",\"resolved\":\"https://registry.npmmirror.com/content-disposition/-/content-disposition-0.5.4.tgz\",\"integrity\":\"sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==\",\"dev\":true,\"requires\":{\"safe-buffer\":\"5.2.1\"}},\"content-type\":{\"version\":\"1.0.5\",\"resolved\":\"https://registry.npmmirror.com/content-type/-/content-type-1.0.5.tgz\",\"integrity\":\"sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==\",\"dev\":true},\"cookie\":{\"version\":\"0.5.0\",\"resolved\":\"https://registry.npmmirror.com/cookie/-/cookie-0.5.0.tgz\",\"integrity\":\"sha512-YZ3GUyn/o8gfKJlnlX7g7xq4gyO6OSuhGPKaaGssGB2qgDUS0gPgtTvoyZLTt9Ab6dC4hfc9dV5arkvc/OCmrw==\",\"dev\":true},\"cookie-signature\":{\"version\":\"1.0.6\",\"resolved\":\"https://registry.npmmirror.com/cookie-signature/-/cookie-signature-1.0.6.tgz\",\"integrity\":\"sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==\",\"dev\":true},\"core-util-is\":{\"version\":\"1.0.3\",\"resolved\":\"https://registry.npmmirror.com/core-util-is/-/core-util-is-1.0.3.tgz\",\"integrity\":\"sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ==\",\"dev\":true},\"cosmiconfig\":{\"version\":\"7.1.0\",\"resolved\":\"https://registry.npmmirror.com/cosmiconfig/-/cosmiconfig-7.1.0.tgz\",\"integrity\":\"sha512-AdmX6xUzdNASswsFtmwSt7Vj8po9IuqXm0UXz7QKPuEUmPB4XyjGfaAr2PSuELMwkRMVH1EpIkX5bTZGRB3eCA==\",\"dev\":true,\"requires\":{\"@types/parse-json\":\"^4.0.0\",\"import-fresh\":\"^3.2.1\",\"parse-json\":\"^5.0.0\",\"path-type\":\"^4.0.0\",\"yaml\":\"^1.10.0\"}},\"cross-env\":{\"version\":\"7.0.3\",\"resolved\":\"https://registry.npmmirror.com/cross-env/-/cross-env-7.0.3.tgz\",\"integrity\":\"sha512-+/HKd6EgcQCJGh2PSjZuUitQBQynKor4wrFbRg4DtAgS1aWO+gU52xpH7M9ScGgXSYmAVS9bIJ8EzuaGw0oNAw==\",\"dev\":true,\"requires\":{\"cross-spawn\":\"^7.0.1\"}},\"cross-spawn\":{\"version\":\"7.0.3\",\"resolved\":\"https://registry.npmmirror.com/cross-spawn/-/cross-spawn-7.0.3.tgz\",\"integrity\":\"sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==\",\"dev\":true,\"requires\":{\"path-key\":\"^3.1.0\",\"shebang-command\":\"^2.0.0\",\"which\":\"^2.0.1\"}},\"css-declaration-sorter\":{\"version\":\"6.4.0\",\"resolved\":\"https://registry.npmmirror.com/css-declaration-sorter/-/css-declaration-sorter-6.4.0.tgz\",\"integrity\":\"sha512-jDfsatwWMWN0MODAFuHszfjphEXfNw9JUAhmY4pLu3TyTU+ohUpsbVtbU+1MZn4a47D9kqh03i4eyOm+74+zew==\",\"dev\":true},\"css-loader\":{\"version\":\"6.7.3\",\"resolved\":\"https://registry.npmmirror.com/css-loader/-/css-loader-6.7.3.tgz\",\"integrity\":\"sha512-qhOH1KlBMnZP8FzRO6YCH9UHXQhVMcEGLyNdb7Hv2cpcmJbW0YrddO+tG1ab5nT41KpHIYGsbeHqxB9xPu1pKQ==\",\"dev\":true,\"requires\":{\"icss-utils\":\"^5.1.0\",\"postcss\":\"^8.4.19\",\"postcss-modules-extract-imports\":\"^3.0.0\",\"postcss-modules-local-by-default\":\"^4.0.0\",\"postcss-modules-scope\":\"^3.0.0\",\"postcss-modules-values\":\"^4.0.0\",\"postcss-value-parser\":\"^4.2.0\",\"semver\":\"^7.3.8\"}},\"css-minimizer-webpack-plugin\":{\"version\":\"5.0.0\",\"resolved\":\"https://registry.npmmirror.com/css-minimizer-webpack-plugin/-/css-minimizer-webpack-plugin-5.0.0.tgz\",\"integrity\":\"sha512-1wZ/PYvg+ZKwi5FX6YrvbB31jMAdurS+CmRQLwWCVSlfzJC85l/a6RVICqUHFa+jXyhilfnCyjafzJGbmz5tcA==\",\"dev\":true,\"requires\":{\"cssnano\":\"^6.0.0\",\"jest-worker\":\"^29.4.3\",\"postcss\":\"^8.4.21\",\"schema-utils\":\"^4.0.0\",\"serialize-javascript\":\"^6.0.1\",\"source-map\":\"^0.6.1\"},\"dependencies\":{\"ajv\":{\"version\":\"8.12.0\",\"resolved\":\"https://registry.npmmirror.com/ajv/-/ajv-8.12.0.tgz\",\"integrity\":\"sha512-sRu1kpcO9yLtYxBKvqfTeh9KzZEwO3STyX1HT+4CaDzC6HpTGYhIhPIzj9XuKU7KYDwnaeh5hcOwjy1QuJzBPA==\",\"dev\":true,\"requires\":{\"fast-deep-equal\":\"^3.1.1\",\"json-schema-traverse\":\"^1.0.0\",\"require-from-string\":\"^2.0.2\",\"uri-js\":\"^4.2.2\"}},\"ajv-keywords\":{\"version\":\"5.1.0\",\"resolved\":\"https://registry.npmmirror.com/ajv-keywords/-/ajv-keywords-5.1.0.tgz\",\"integrity\":\"sha512-YCS/JNFAUyr5vAuhk1DWm1CBxRHW9LbJ2ozWeemrIqpbsqKjHVxYPyi5GC0rjZIT5JxJ3virVTS8wk4i/Z+krw==\",\"dev\":true,\"requires\":{\"fast-deep-equal\":\"^3.1.3\"}},\"jest-worker\":{\"version\":\"29.5.0\",\"resolved\":\"https://registry.npmmirror.com/jest-worker/-/jest-worker-29.5.0.tgz\",\"integrity\":\"sha512-NcrQnevGoSp4b5kg+akIpthoAFHxPBcb5P6mYPY0fUNT+sSvmtu6jlkEle3anczUKIKEbMxFimk9oTP/tpIPgA==\",\"dev\":true,\"requires\":{\"@types/node\":\"*\",\"jest-util\":\"^29.5.0\",\"merge-stream\":\"^2.0.0\",\"supports-color\":\"^8.0.0\"}},\"json-schema-traverse\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz\",\"integrity\":\"sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==\",\"dev\":true},\"schema-utils\":{\"version\":\"4.1.0\",\"resolved\":\"https://registry.npmmirror.com/schema-utils/-/schema-utils-4.1.0.tgz\",\"integrity\":\"sha512-Jw+GZVbP5IggB2WAn6UHI02LBwGmsIeYN/lNbSMZyDziQ7jmtAUrqKqDja+W89YHVs+KL/3IkIMltAklqB1vAw==\",\"dev\":true,\"requires\":{\"@types/json-schema\":\"^7.0.9\",\"ajv\":\"^8.9.0\",\"ajv-formats\":\"^2.1.1\",\"ajv-keywords\":\"^5.1.0\"}}}},\"css-select\":{\"version\":\"4.3.0\",\"resolved\":\"https://registry.npmmirror.com/css-select/-/css-select-4.3.0.tgz\",\"integrity\":\"sha512-wPpOYtnsVontu2mODhA19JrqWxNsfdatRKd64kmpRbQgh1KtItko5sTnEpPdpSaJszTOhEMlF/RPz28qj4HqhQ==\",\"dev\":true,\"requires\":{\"boolbase\":\"^1.0.0\",\"css-what\":\"^6.0.1\",\"domhandler\":\"^4.3.1\",\"domutils\":\"^2.8.0\",\"nth-check\":\"^2.0.1\"}},\"css-tree\":{\"version\":\"2.3.1\",\"resolved\":\"https://registry.npmmirror.com/css-tree/-/css-tree-2.3.1.tgz\",\"integrity\":\"sha512-6Fv1DV/TYw//QF5IzQdqsNDjx/wc8TrMBZsqjL9eW01tWb7R7k/mq+/VXfJCl7SoD5emsJop9cOByJZfs8hYIw==\",\"dev\":true,\"requires\":{\"mdn-data\":\"2.0.30\",\"source-map-js\":\"^1.0.1\"}},\"css-what\":{\"version\":\"6.1.0\",\"resolved\":\"https://registry.npmmirror.com/css-what/-/css-what-6.1.0.tgz\",\"integrity\":\"sha512-HTUrgRJ7r4dsZKU6GjmpfRK1O76h97Z8MfS1G0FozR+oF2kG6Vfe8JE6zwrkbxigziPHinCJ+gCPjA9EaBDtRw==\",\"dev\":true},\"cssesc\":{\"version\":\"3.0.0\",\"resolved\":\"https://registry.npmmirror.com/cssesc/-/cssesc-3.0.0.tgz\",\"integrity\":\"sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==\",\"dev\":true},\"cssnano\":{\"version\":\"6.0.1\",\"resolved\":\"https://registry.npmmirror.com/cssnano/-/cssnano-6.0.1.tgz\",\"integrity\":\"sha512-fVO1JdJ0LSdIGJq68eIxOqFpIJrZqXUsBt8fkrBcztCQqAjQD51OhZp7tc0ImcbwXD4k7ny84QTV90nZhmqbkg==\",\"dev\":true,\"requires\":{\"cssnano-preset-default\":\"^6.0.1\",\"lilconfig\":\"^2.1.0\"}},\"cssnano-preset-default\":{\"version\":\"6.0.1\",\"resolved\":\"https://registry.npmmirror.com/cssnano-preset-default/-/cssnano-preset-default-6.0.1.tgz\",\"integrity\":\"sha512-7VzyFZ5zEB1+l1nToKyrRkuaJIx0zi/1npjvZfbBwbtNTzhLtlvYraK/7/uqmX2Wb2aQtd983uuGw79jAjLSuQ==\",\"dev\":true,\"requires\":{\"css-declaration-sorter\":\"^6.3.1\",\"cssnano-utils\":\"^4.0.0\",\"postcss-calc\":\"^9.0.0\",\"postcss-colormin\":\"^6.0.0\",\"postcss-convert-values\":\"^6.0.0\",\"postcss-discard-comments\":\"^6.0.0\",\"postcss-discard-duplicates\":\"^6.0.0\",\"postcss-discard-empty\":\"^6.0.0\",\"postcss-discard-overridden\":\"^6.0.0\",\"postcss-merge-longhand\":\"^6.0.0\",\"postcss-merge-rules\":\"^6.0.1\",\"postcss-minify-font-values\":\"^6.0.0\",\"postcss-minify-gradients\":\"^6.0.0\",\"postcss-minify-params\":\"^6.0.0\",\"postcss-minify-selectors\":\"^6.0.0\",\"postcss-normalize-charset\":\"^6.0.0\",\"postcss-normalize-display-values\":\"^6.0.0\",\"postcss-normalize-positions\":\"^6.0.0\",\"postcss-normalize-repeat-style\":\"^6.0.0\",\"postcss-normalize-string\":\"^6.0.0\",\"postcss-normalize-timing-functions\":\"^6.0.0\",\"postcss-normalize-unicode\":\"^6.0.0\",\"postcss-normalize-url\":\"^6.0.0\",\"postcss-normalize-whitespace\":\"^6.0.0\",\"postcss-ordered-values\":\"^6.0.0\",\"postcss-reduce-initial\":\"^6.0.0\",\"postcss-reduce-transforms\":\"^6.0.0\",\"postcss-svgo\":\"^6.0.0\",\"postcss-unique-selectors\":\"^6.0.0\"}},\"cssnano-utils\":{\"version\":\"4.0.0\",\"resolved\":\"https://registry.npmmirror.com/cssnano-utils/-/cssnano-utils-4.0.0.tgz\",\"integrity\":\"sha512-Z39TLP+1E0KUcd7LGyF4qMfu8ZufI0rDzhdyAMsa/8UyNUU8wpS0fhdBxbQbv32r64ea00h4878gommRVg2BHw==\",\"dev\":true},\"csso\":{\"version\":\"5.0.5\",\"resolved\":\"https://registry.npmmirror.com/csso/-/csso-5.0.5.tgz\",\"integrity\":\"sha512-0LrrStPOdJj+SPCCrGhzryycLjwcgUSHBtxNA8aIDxf0GLsRh1cKYhB00Gd1lDOS4yGH69+SNn13+TWbVHETFQ==\",\"dev\":true,\"requires\":{\"css-tree\":\"~2.2.0\"},\"dependencies\":{\"css-tree\":{\"version\":\"2.2.1\",\"resolved\":\"https://registry.npmmirror.com/css-tree/-/css-tree-2.2.1.tgz\",\"integrity\":\"sha512-OA0mILzGc1kCOCSJerOeqDxDQ4HOh+G8NbOJFOTgOCzpw7fCBubk0fEyxp8AgOL/jvLgYA/uV0cMbe43ElF1JA==\",\"dev\":true,\"requires\":{\"mdn-data\":\"2.0.28\",\"source-map-js\":\"^1.0.1\"}},\"mdn-data\":{\"version\":\"2.0.28\",\"resolved\":\"https://registry.npmmirror.com/mdn-data/-/mdn-data-2.0.28.tgz\",\"integrity\":\"sha512-aylIc7Z9y4yzHYAJNuESG3hfhC+0Ibp/MAMiaOZgNv4pmEdFyfZhhhny4MNiAfWdBQ1RQ2mfDWmM1x8SvGyp8g==\",\"dev\":true}}},\"debug\":{\"version\":\"2.6.9\",\"resolved\":\"https://registry.npmmirror.com/debug/-/debug-2.6.9.tgz\",\"integrity\":\"sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==\",\"dev\":true,\"requires\":{\"ms\":\"2.0.0\"}},\"default-gateway\":{\"version\":\"6.0.3\",\"resolved\":\"https://registry.npmmirror.com/default-gateway/-/default-gateway-6.0.3.tgz\",\"integrity\":\"sha512-fwSOJsbbNzZ/CUFpqFBqYfYNLj1NbMPm8MMCIzHjC83iSJRBEGmDUxU+WP661BaBQImeC2yHwXtz+P/O9o+XEg==\",\"dev\":true,\"requires\":{\"execa\":\"^5.0.0\"}},\"define-lazy-prop\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmmirror.com/define-lazy-prop/-/define-lazy-prop-2.0.0.tgz\",\"integrity\":\"sha512-Ds09qNh8yw3khSjiJjiUInaGX9xlqZDY7JVryGxdxV7NPeuqQfplOpQ66yJFZut3jLa5zOwkXw1g9EI2uKh4Og==\",\"dev\":true},\"del\":{\"version\":\"4.1.1\",\"resolved\":\"https://registry.npmmirror.com/del/-/del-4.1.1.tgz\",\"integrity\":\"sha512-QwGuEUouP2kVwQenAsOof5Fv8K9t3D8Ca8NxcXKrIpEHjTXK5J2nXLdP+ALI1cgv8wj7KuwBhTwBkOZSJKM5XQ==\",\"dev\":true,\"requires\":{\"@types/glob\":\"^7.1.1\",\"globby\":\"^6.1.0\",\"is-path-cwd\":\"^2.0.0\",\"is-path-in-cwd\":\"^2.0.0\",\"p-map\":\"^2.0.0\",\"pify\":\"^4.0.1\",\"rimraf\":\"^2.6.3\"}},\"depd\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmmirror.com/depd/-/depd-2.0.0.tgz\",\"integrity\":\"sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==\",\"dev\":true},\"destroy\":{\"version\":\"1.2.0\",\"resolved\":\"https://registry.npmmirror.com/destroy/-/destroy-1.2.0.tgz\",\"integrity\":\"sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==\",\"dev\":true},\"detect-node\":{\"version\":\"2.1.0\",\"resolved\":\"https://registry.npmmirror.com/detect-node/-/detect-node-2.1.0.tgz\",\"integrity\":\"sha512-T0NIuQpnTvFDATNuHN5roPwSBG83rFsuO+MXXH9/3N1eFbn4wcPjttvjMLEPWJ0RGUYgQE7cGgS3tNxbqCGM7g==\",\"dev\":true},\"dns-equal\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/dns-equal/-/dns-equal-1.0.0.tgz\",\"integrity\":\"sha512-z+paD6YUQsk+AbGCEM4PrOXSss5gd66QfcVBFTKR/HpFL9jCqikS94HYwKww6fQyO7IxrIIyUu+g0Ka9tUS2Cg==\",\"dev\":true},\"dns-packet\":{\"version\":\"5.6.0\",\"resolved\":\"https://registry.npmmirror.com/dns-packet/-/dns-packet-5.6.0.tgz\",\"integrity\":\"sha512-rza3UH1LwdHh9qyPXp8lkwpjSNk/AMD3dPytUoRoqnypDUhY0xvbdmVhWOfxO68frEfV9BU8V12Ez7ZsHGZpCQ==\",\"dev\":true,\"requires\":{\"@leichtgewicht/ip-codec\":\"^2.0.1\"}},\"dom-converter\":{\"version\":\"0.2.0\",\"resolved\":\"https://registry.npmmirror.com/dom-converter/-/dom-converter-0.2.0.tgz\",\"integrity\":\"sha512-gd3ypIPfOMr9h5jIKq8E3sHOTCjeirnl0WK5ZdS1AW0Odt0b1PaWaHdJ4Qk4klv+YB9aJBS7mESXjFoDQPu6DA==\",\"dev\":true,\"requires\":{\"utila\":\"~0.4\"}},\"dom-serializer\":{\"version\":\"1.4.1\",\"resolved\":\"https://registry.npmmirror.com/dom-serializer/-/dom-serializer-1.4.1.tgz\",\"integrity\":\"sha512-VHwB3KfrcOOkelEG2ZOfxqLZdfkil8PtJi4P8N2MMXucZq2yLp75ClViUlOVwyoHEDjYU433Aq+5zWP61+RGag==\",\"dev\":true,\"requires\":{\"domelementtype\":\"^2.0.1\",\"domhandler\":\"^4.2.0\",\"entities\":\"^2.0.0\"}},\"domelementtype\":{\"version\":\"2.3.0\",\"resolved\":\"https://registry.npmmirror.com/domelementtype/-/domelementtype-2.3.0.tgz\",\"integrity\":\"sha512-OLETBj6w0OsagBwdXnPdN0cnMfF9opN69co+7ZrbfPGrdpPVNBUj02spi6B1N7wChLQiPn4CSH/zJvXw56gmHw==\",\"dev\":true},\"domhandler\":{\"version\":\"4.3.1\",\"resolved\":\"https://registry.npmmirror.com/domhandler/-/domhandler-4.3.1.tgz\",\"integrity\":\"sha512-GrwoxYN+uWlzO8uhUXRl0P+kHE4GtVPfYzVLcUxPL7KNdHKj66vvlhiweIHqYYXWlw+T8iLMp42Lm67ghw4WMQ==\",\"dev\":true,\"requires\":{\"domelementtype\":\"^2.2.0\"}},\"domutils\":{\"version\":\"2.8.0\",\"resolved\":\"https://registry.npmmirror.com/domutils/-/domutils-2.8.0.tgz\",\"integrity\":\"sha512-w96Cjofp72M5IIhpjgobBimYEfoPjx1Vx0BSX9P30WBdZW2WIKU0T1Bd0kz2eNZ9ikjKgHbEyKx8BB6H1L3h3A==\",\"dev\":true,\"requires\":{\"dom-serializer\":\"^1.0.1\",\"domelementtype\":\"^2.2.0\",\"domhandler\":\"^4.2.0\"}},\"dot-case\":{\"version\":\"3.0.4\",\"resolved\":\"https://registry.npmmirror.com/dot-case/-/dot-case-3.0.4.tgz\",\"integrity\":\"sha512-Kv5nKlh6yRrdrGvxeJ2e5y2eRUpkUosIW4A2AS38zwSz27zu7ufDwQPi5Jhs3XAlGNetl3bmnGhQsMtkKJnj3w==\",\"dev\":true,\"requires\":{\"no-case\":\"^3.0.4\",\"tslib\":\"^2.0.3\"}},\"duplexer\":{\"version\":\"0.1.2\",\"resolved\":\"https://registry.npmmirror.com/duplexer/-/duplexer-0.1.2.tgz\",\"integrity\":\"sha512-jtD6YG370ZCIi/9GTaJKQxWTZD045+4R4hTk/x1UyoqadyJ9x9CgSi1RlVDQF8U2sxLLSnFkCaMihqljHIWgMg==\",\"dev\":true},\"ee-first\":{\"version\":\"1.1.1\",\"resolved\":\"https://registry.npmmirror.com/ee-first/-/ee-first-1.1.1.tgz\",\"integrity\":\"sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==\",\"dev\":true},\"electron-to-chromium\":{\"version\":\"1.4.392\",\"resolved\":\"https://registry.npmmirror.com/electron-to-chromium/-/electron-to-chromium-1.4.392.tgz\",\"integrity\":\"sha512-TXQOMW9tnhIms3jGy/lJctLjICOgyueZFJ1KUtm6DTQ+QpxX3p7ZBwB6syuZ9KBuT5S4XX7bgY1ECPgfxKUdOg==\",\"dev\":true},\"emojis-list\":{\"version\":\"3.0.0\",\"resolved\":\"https://registry.npmmirror.com/emojis-list/-/emojis-list-3.0.0.tgz\",\"integrity\":\"sha512-/kyM18EfinwXZbno9FyUGeFh87KC8HRQBQGildHZbEuRyWFOmv1U10o9BBp8XVZDVNNuQKyIGIu5ZYAAXJ0V2Q==\",\"dev\":true},\"encodeurl\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/encodeurl/-/encodeurl-1.0.2.tgz\",\"integrity\":\"sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==\",\"dev\":true},\"enhanced-resolve\":{\"version\":\"5.14.0\",\"resolved\":\"https://registry.npmmirror.com/enhanced-resolve/-/enhanced-resolve-5.14.0.tgz\",\"integrity\":\"sha512-+DCows0XNwLDcUhbFJPdlQEVnT2zXlCv7hPxemTz86/O+B/hCQ+mb7ydkPKiflpVraqLPCAfu7lDy+hBXueojw==\",\"dev\":true,\"requires\":{\"graceful-fs\":\"^4.2.4\",\"tapable\":\"^2.2.0\"}},\"entities\":{\"version\":\"2.2.0\",\"resolved\":\"https://registry.npmmirror.com/entities/-/entities-2.2.0.tgz\",\"integrity\":\"sha512-p92if5Nz619I0w+akJrLZH0MX0Pb5DX39XOwQTtXSdQQOaYH03S1uIQp4mhOZtAXrxq4ViO67YTiLBo2638o9A==\",\"dev\":true},\"envinfo\":{\"version\":\"7.8.1\",\"resolved\":\"https://registry.npmmirror.com/envinfo/-/envinfo-7.8.1.tgz\",\"integrity\":\"sha512-/o+BXHmB7ocbHEAs6F2EnG0ogybVVUdkRunTT2glZU9XAaGmhqskrvKwqXuDfNjEO0LZKWdejEEpnq8aM0tOaw==\",\"dev\":true},\"error-ex\":{\"version\":\"1.3.2\",\"resolved\":\"https://registry.npmmirror.com/error-ex/-/error-ex-1.3.2.tgz\",\"integrity\":\"sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==\",\"dev\":true,\"requires\":{\"is-arrayish\":\"^0.2.1\"}},\"es-module-lexer\":{\"version\":\"1.2.1\",\"resolved\":\"https://registry.npmmirror.com/es-module-lexer/-/es-module-lexer-1.2.1.tgz\",\"integrity\":\"sha512-9978wrXM50Y4rTMmW5kXIC09ZdXQZqkE4mxhwkd8VbzsGkXGPgV4zWuqQJgCEzYngdo2dYDa0l8xhX4fkSwJSg==\",\"dev\":true},\"escalade\":{\"version\":\"3.1.1\",\"resolved\":\"https://registry.npmmirror.com/escalade/-/escalade-3.1.1.tgz\",\"integrity\":\"sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==\",\"dev\":true},\"escape-html\":{\"version\":\"1.0.3\",\"resolved\":\"https://registry.npmmirror.com/escape-html/-/escape-html-1.0.3.tgz\",\"integrity\":\"sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==\",\"dev\":true},\"escape-string-regexp\":{\"version\":\"1.0.5\",\"resolved\":\"https://registry.npmmirror.com/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz\",\"integrity\":\"sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==\",\"dev\":true},\"eslint-scope\":{\"version\":\"5.1.1\",\"resolved\":\"https://registry.npmmirror.com/eslint-scope/-/eslint-scope-5.1.1.tgz\",\"integrity\":\"sha512-2NxwbF/hZ0KpepYN0cNbo+FN6XoK7GaHlQhgx/hIZl6Va0bF45RQOOwhLIy8lQDbuCiadSLCBnH2CFYquit5bw==\",\"dev\":true,\"requires\":{\"esrecurse\":\"^4.3.0\",\"estraverse\":\"^4.1.1\"}},\"esrecurse\":{\"version\":\"4.3.0\",\"resolved\":\"https://registry.npmmirror.com/esrecurse/-/esrecurse-4.3.0.tgz\",\"integrity\":\"sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==\",\"dev\":true,\"requires\":{\"estraverse\":\"^5.2.0\"},\"dependencies\":{\"estraverse\":{\"version\":\"5.3.0\",\"resolved\":\"https://registry.npmmirror.com/estraverse/-/estraverse-5.3.0.tgz\",\"integrity\":\"sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==\",\"dev\":true}}},\"estraverse\":{\"version\":\"4.3.0\",\"resolved\":\"https://registry.npmmirror.com/estraverse/-/estraverse-4.3.0.tgz\",\"integrity\":\"sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==\",\"dev\":true},\"etag\":{\"version\":\"1.8.1\",\"resolved\":\"https://registry.npmmirror.com/etag/-/etag-1.8.1.tgz\",\"integrity\":\"sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==\",\"dev\":true},\"eventemitter3\":{\"version\":\"4.0.7\",\"resolved\":\"https://registry.npmmirror.com/eventemitter3/-/eventemitter3-4.0.7.tgz\",\"integrity\":\"sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw==\",\"dev\":true},\"events\":{\"version\":\"3.3.0\",\"resolved\":\"https://registry.npmmirror.com/events/-/events-3.3.0.tgz\",\"integrity\":\"sha512-mQw+2fkQbALzQ7V0MY0IqdnXNOeTtP4r0lN9z7AAawCXgqea7bDii20AYrIBrFd/Hx0M2Ocz6S111CaFkUcb0Q==\",\"dev\":true},\"execa\":{\"version\":\"5.1.1\",\"resolved\":\"https://registry.npmmirror.com/execa/-/execa-5.1.1.tgz\",\"integrity\":\"sha512-8uSpZZocAZRBAPIEINJj3Lo9HyGitllczc27Eh5YYojjMFMn8yHMDMaUHE2Jqfq05D/wucwI4JGURyXt1vchyg==\",\"dev\":true,\"requires\":{\"cross-spawn\":\"^7.0.3\",\"get-stream\":\"^6.0.0\",\"human-signals\":\"^2.1.0\",\"is-stream\":\"^2.0.0\",\"merge-stream\":\"^2.0.0\",\"npm-run-path\":\"^4.0.1\",\"onetime\":\"^5.1.2\",\"signal-exit\":\"^3.0.3\",\"strip-final-newline\":\"^2.0.0\"}},\"express\":{\"version\":\"4.18.2\",\"resolved\":\"https://registry.npmmirror.com/express/-/express-4.18.2.tgz\",\"integrity\":\"sha512-5/PsL6iGPdfQ/lKM1UuielYgv3BUoJfz1aUwU9vHZ+J7gyvwdQXFEBIEIaxeGf0GIcreATNyBExtalisDbuMqQ==\",\"dev\":true,\"requires\":{\"accepts\":\"~1.3.8\",\"array-flatten\":\"1.1.1\",\"body-parser\":\"1.20.1\",\"content-disposition\":\"0.5.4\",\"content-type\":\"~1.0.4\",\"cookie\":\"0.5.0\",\"cookie-signature\":\"1.0.6\",\"debug\":\"2.6.9\",\"depd\":\"2.0.0\",\"encodeurl\":\"~1.0.2\",\"escape-html\":\"~1.0.3\",\"etag\":\"~1.8.1\",\"finalhandler\":\"1.2.0\",\"fresh\":\"0.5.2\",\"http-errors\":\"2.0.0\",\"merge-descriptors\":\"1.0.1\",\"methods\":\"~1.1.2\",\"on-finished\":\"2.4.1\",\"parseurl\":\"~1.3.3\",\"path-to-regexp\":\"0.1.7\",\"proxy-addr\":\"~2.0.7\",\"qs\":\"6.11.0\",\"range-parser\":\"~1.2.1\",\"safe-buffer\":\"5.2.1\",\"send\":\"0.18.0\",\"serve-static\":\"1.15.0\",\"setprototypeof\":\"1.2.0\",\"statuses\":\"2.0.1\",\"type-is\":\"~1.6.18\",\"utils-merge\":\"1.0.1\",\"vary\":\"~1.1.2\"},\"dependencies\":{\"array-flatten\":{\"version\":\"1.1.1\",\"resolved\":\"https://registry.npmmirror.com/array-flatten/-/array-flatten-1.1.1.tgz\",\"integrity\":\"sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==\",\"dev\":true}}},\"fast-deep-equal\":{\"version\":\"3.1.3\",\"resolved\":\"https://registry.npmmirror.com/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz\",\"integrity\":\"sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==\",\"dev\":true},\"fast-json-stable-stringify\":{\"version\":\"2.1.0\",\"resolved\":\"https://registry.npmmirror.com/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz\",\"integrity\":\"sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==\",\"dev\":true},\"fastest-levenshtein\":{\"version\":\"1.0.16\",\"resolved\":\"https://registry.npmmirror.com/fastest-levenshtein/-/fastest-levenshtein-1.0.16.tgz\",\"integrity\":\"sha512-eRnCtTTtGZFpQCwhJiUOuxPQWRXVKYDn0b2PeHfXL6/Zi53SLAzAHfVhVWK2AryC/WH05kGfxhFIPvTF0SXQzg==\",\"dev\":true},\"faye-websocket\":{\"version\":\"0.11.4\",\"resolved\":\"https://registry.npmmirror.com/faye-websocket/-/faye-websocket-0.11.4.tgz\",\"integrity\":\"sha512-CzbClwlXAuiRQAlUyfqPgvPoNKTckTPGfwZV4ZdAhVcP2lh9KUxJg2b5GkE7XbjKQ3YJnQ9z6D9ntLAlB+tP8g==\",\"dev\":true,\"requires\":{\"websocket-driver\":\">=0.5.1\"}},\"file-loader\":{\"version\":\"6.2.0\",\"resolved\":\"https://registry.npmmirror.com/file-loader/-/file-loader-6.2.0.tgz\",\"integrity\":\"sha512-qo3glqyTa61Ytg4u73GultjHGjdRyig3tG6lPtyX/jOEJvHif9uB0/OCI2Kif6ctF3caQTW2G5gym21oAsI4pw==\",\"dev\":true,\"requires\":{\"loader-utils\":\"^2.0.0\",\"schema-utils\":\"^3.0.0\"}},\"fill-range\":{\"version\":\"7.0.1\",\"resolved\":\"https://registry.npmmirror.com/fill-range/-/fill-range-7.0.1.tgz\",\"integrity\":\"sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==\",\"dev\":true,\"requires\":{\"to-regex-range\":\"^5.0.1\"}},\"finalhandler\":{\"version\":\"1.2.0\",\"resolved\":\"https://registry.npmmirror.com/finalhandler/-/finalhandler-1.2.0.tgz\",\"integrity\":\"sha512-5uXcUVftlQMFnWC9qu/svkWv3GTd2PfUhK/3PLkYNAe7FbqJMt3515HaxE6eRL74GdsriiwujiawdaB1BpEISg==\",\"dev\":true,\"requires\":{\"debug\":\"2.6.9\",\"encodeurl\":\"~1.0.2\",\"escape-html\":\"~1.0.3\",\"on-finished\":\"2.4.1\",\"parseurl\":\"~1.3.3\",\"statuses\":\"2.0.1\",\"unpipe\":\"~1.0.0\"}},\"find-up\":{\"version\":\"4.1.0\",\"resolved\":\"https://registry.npmmirror.com/find-up/-/find-up-4.1.0.tgz\",\"integrity\":\"sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==\",\"dev\":true,\"requires\":{\"locate-path\":\"^5.0.0\",\"path-exists\":\"^4.0.0\"}},\"follow-redirects\":{\"version\":\"1.15.2\",\"resolved\":\"https://registry.npmmirror.com/follow-redirects/-/follow-redirects-1.15.2.tgz\",\"integrity\":\"sha512-VQLG33o04KaQ8uYi2tVNbdrWp1QWxNNea+nmIB4EVM28v0hmP17z7aG1+wAkNzVq4KeXTq3221ye5qTJP91JwA==\",\"dev\":true},\"forwarded\":{\"version\":\"0.2.0\",\"resolved\":\"https://registry.npmmirror.com/forwarded/-/forwarded-0.2.0.tgz\",\"integrity\":\"sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==\",\"dev\":true},\"fraction.js\":{\"version\":\"4.2.0\",\"resolved\":\"https://registry.npmmirror.com/fraction.js/-/fraction.js-4.2.0.tgz\",\"integrity\":\"sha512-MhLuK+2gUcnZe8ZHlaaINnQLl0xRIGRfcGk2yl8xoQAfHrSsL3rYu6FCmBdkdbhc9EPlwyGHewaRsvwRMJtAlA==\",\"dev\":true},\"fresh\":{\"version\":\"0.5.2\",\"resolved\":\"https://registry.npmmirror.com/fresh/-/fresh-0.5.2.tgz\",\"integrity\":\"sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==\",\"dev\":true},\"fs-monkey\":{\"version\":\"1.0.3\",\"resolved\":\"https://registry.npmmirror.com/fs-monkey/-/fs-monkey-1.0.3.tgz\",\"integrity\":\"sha512-cybjIfiiE+pTWicSCLFHSrXZ6EilF30oh91FDP9S2B051prEa7QWfrVTQm10/dDpswBDXZugPa1Ogu8Yh+HV0Q==\",\"dev\":true},\"fs.realpath\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/fs.realpath/-/fs.realpath-1.0.0.tgz\",\"integrity\":\"sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==\",\"dev\":true},\"fsevents\":{\"version\":\"2.3.2\",\"resolved\":\"https://registry.npmmirror.com/fsevents/-/fsevents-2.3.2.tgz\",\"integrity\":\"sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==\",\"dev\":true,\"optional\":true},\"function-bind\":{\"version\":\"1.1.1\",\"resolved\":\"https://registry.npmmirror.com/function-bind/-/function-bind-1.1.1.tgz\",\"integrity\":\"sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A==\",\"dev\":true},\"get-intrinsic\":{\"version\":\"1.2.0\",\"resolved\":\"https://registry.npmmirror.com/get-intrinsic/-/get-intrinsic-1.2.0.tgz\",\"integrity\":\"sha512-L049y6nFOuom5wGyRc3/gdTLO94dySVKRACj1RmJZBQXlbTMhtNIgkWkUHq+jYmZvKf14EW1EoJnnjbmoHij0Q==\",\"dev\":true,\"requires\":{\"function-bind\":\"^1.1.1\",\"has\":\"^1.0.3\",\"has-symbols\":\"^1.0.3\"}},\"get-stream\":{\"version\":\"6.0.1\",\"resolved\":\"https://registry.npmmirror.com/get-stream/-/get-stream-6.0.1.tgz\",\"integrity\":\"sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==\",\"dev\":true},\"glob\":{\"version\":\"7.2.3\",\"resolved\":\"https://registry.npmmirror.com/glob/-/glob-7.2.3.tgz\",\"integrity\":\"sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==\",\"dev\":true,\"requires\":{\"fs.realpath\":\"^1.0.0\",\"inflight\":\"^1.0.4\",\"inherits\":\"2\",\"minimatch\":\"^3.1.1\",\"once\":\"^1.3.0\",\"path-is-absolute\":\"^1.0.0\"}},\"glob-parent\":{\"version\":\"5.1.2\",\"resolved\":\"https://registry.npmmirror.com/glob-parent/-/glob-parent-5.1.2.tgz\",\"integrity\":\"sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==\",\"dev\":true,\"requires\":{\"is-glob\":\"^4.0.1\"}},\"glob-to-regexp\":{\"version\":\"0.4.1\",\"resolved\":\"https://registry.npmmirror.com/glob-to-regexp/-/glob-to-regexp-0.4.1.tgz\",\"integrity\":\"sha512-lkX1HJXwyMcprw/5YUZc2s7DrpAiHB21/V+E1rHUrVNokkvB6bqMzT0VfV6/86ZNabt1k14YOIaT7nDvOX3Iiw==\",\"dev\":true},\"globby\":{\"version\":\"6.1.0\",\"resolved\":\"https://registry.npmmirror.com/globby/-/globby-6.1.0.tgz\",\"integrity\":\"sha512-KVbFv2TQtbzCoxAnfD6JcHZTYCzyliEaaeM/gH8qQdkKr5s0OP9scEgvdcngyk7AVdY6YVW/TJHd+lQ/Df3Daw==\",\"dev\":true,\"requires\":{\"array-union\":\"^1.0.1\",\"glob\":\"^7.0.3\",\"object-assign\":\"^4.0.1\",\"pify\":\"^2.0.0\",\"pinkie-promise\":\"^2.0.0\"},\"dependencies\":{\"pify\":{\"version\":\"2.3.0\",\"resolved\":\"https://registry.npmmirror.com/pify/-/pify-2.3.0.tgz\",\"integrity\":\"sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog==\",\"dev\":true}}},\"graceful-fs\":{\"version\":\"4.2.11\",\"resolved\":\"https://registry.npmmirror.com/graceful-fs/-/graceful-fs-4.2.11.tgz\",\"integrity\":\"sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==\",\"dev\":true},\"gzip-size\":{\"version\":\"6.0.0\",\"resolved\":\"https://registry.npmmirror.com/gzip-size/-/gzip-size-6.0.0.tgz\",\"integrity\":\"sha512-ax7ZYomf6jqPTQ4+XCpUGyXKHk5WweS+e05MBO4/y3WJ5RkmPXNKvX+bx1behVILVwr6JSQvZAku021CHPXG3Q==\",\"dev\":true,\"requires\":{\"duplexer\":\"^0.1.2\"}},\"handle-thing\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmmirror.com/handle-thing/-/handle-thing-2.0.1.tgz\",\"integrity\":\"sha512-9Qn4yBxelxoh2Ow62nP+Ka/kMnOXRi8BXnRaUwezLNhqelnN49xKz4F/dPP8OYLxLxq6JDtZb2i9XznUQbNPTg==\",\"dev\":true},\"has\":{\"version\":\"1.0.3\",\"resolved\":\"https://registry.npmmirror.com/has/-/has-1.0.3.tgz\",\"integrity\":\"sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==\",\"dev\":true,\"requires\":{\"function-bind\":\"^1.1.1\"}},\"has-flag\":{\"version\":\"4.0.0\",\"resolved\":\"https://registry.npmmirror.com/has-flag/-/has-flag-4.0.0.tgz\",\"integrity\":\"sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==\",\"dev\":true},\"has-symbols\":{\"version\":\"1.0.3\",\"resolved\":\"https://registry.npmmirror.com/has-symbols/-/has-symbols-1.0.3.tgz\",\"integrity\":\"sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A==\",\"dev\":true},\"he\":{\"version\":\"1.2.0\",\"resolved\":\"https://registry.npmmirror.com/he/-/he-1.2.0.tgz\",\"integrity\":\"sha512-F/1DnUGPopORZi0ni+CvrCgHQ5FyEAHRLSApuYWMmrbSwoN2Mn/7k+Gl38gJnR7yyDZk6WLXwiGod1JOWNDKGw==\",\"dev\":true},\"hpack.js\":{\"version\":\"2.1.6\",\"resolved\":\"https://registry.npmmirror.com/hpack.js/-/hpack.js-2.1.6.tgz\",\"integrity\":\"sha512-zJxVehUdMGIKsRaNt7apO2Gqp0BdqW5yaiGHXXmbpvxgBYVZnAql+BJb4RO5ad2MgpbZKn5G6nMnegrH1FcNYQ==\",\"dev\":true,\"requires\":{\"inherits\":\"^2.0.1\",\"obuf\":\"^1.0.0\",\"readable-stream\":\"^2.0.1\",\"wbuf\":\"^1.1.0\"},\"dependencies\":{\"readable-stream\":{\"version\":\"2.3.8\",\"resolved\":\"https://registry.npmmirror.com/readable-stream/-/readable-stream-2.3.8.tgz\",\"integrity\":\"sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==\",\"dev\":true,\"requires\":{\"core-util-is\":\"~1.0.0\",\"inherits\":\"~2.0.3\",\"isarray\":\"~1.0.0\",\"process-nextick-args\":\"~2.0.0\",\"safe-buffer\":\"~5.1.1\",\"string_decoder\":\"~1.1.1\",\"util-deprecate\":\"~1.0.1\"}},\"safe-buffer\":{\"version\":\"5.1.2\",\"resolved\":\"https://registry.npmmirror.com/safe-buffer/-/safe-buffer-5.1.2.tgz\",\"integrity\":\"sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==\",\"dev\":true}}},\"html-entities\":{\"version\":\"2.3.3\",\"resolved\":\"https://registry.npmmirror.com/html-entities/-/html-entities-2.3.3.tgz\",\"integrity\":\"sha512-DV5Ln36z34NNTDgnz0EWGBLZENelNAtkiFA4kyNOG2tDI6Mz1uSWiq1wAKdyjnJwyDiDO7Fa2SO1CTxPXL8VxA==\",\"dev\":true},\"html-minifier-terser\":{\"version\":\"6.1.0\",\"resolved\":\"https://registry.npmmirror.com/html-minifier-terser/-/html-minifier-terser-6.1.0.tgz\",\"integrity\":\"sha512-YXxSlJBZTP7RS3tWnQw74ooKa6L9b9i9QYXY21eUEvhZ3u9XLfv6OnFsQq6RxkhHygsaUMvYsZRV5rU/OVNZxw==\",\"dev\":true,\"requires\":{\"camel-case\":\"^4.1.2\",\"clean-css\":\"^5.2.2\",\"commander\":\"^8.3.0\",\"he\":\"^1.2.0\",\"param-case\":\"^3.0.4\",\"relateurl\":\"^0.2.7\",\"terser\":\"^5.10.0\"},\"dependencies\":{\"commander\":{\"version\":\"8.3.0\",\"resolved\":\"https://registry.npmmirror.com/commander/-/commander-8.3.0.tgz\",\"integrity\":\"sha512-OkTL9umf+He2DZkUq8f8J9of7yL6RJKI24dVITBmNfZBmri9zYZQrKkuXiKhyfPSu8tUhnVBB1iKXevvnlR4Ww==\",\"dev\":true}}},\"html-webpack-plugin\":{\"version\":\"5.5.1\",\"resolved\":\"https://registry.npmmirror.com/html-webpack-plugin/-/html-webpack-plugin-5.5.1.tgz\",\"integrity\":\"sha512-cTUzZ1+NqjGEKjmVgZKLMdiFg3m9MdRXkZW2OEe69WYVi5ONLMmlnSZdXzGGMOq0C8jGDrL6EWyEDDUioHO/pA==\",\"dev\":true,\"requires\":{\"@types/html-minifier-terser\":\"^6.0.0\",\"html-minifier-terser\":\"^6.0.2\",\"lodash\":\"^4.17.21\",\"pretty-error\":\"^4.0.0\",\"tapable\":\"^2.0.0\"}},\"htmlparser2\":{\"version\":\"6.1.0\",\"resolved\":\"https://registry.npmmirror.com/htmlparser2/-/htmlparser2-6.1.0.tgz\",\"integrity\":\"sha512-gyyPk6rgonLFEDGoeRgQNaEUvdJ4ktTmmUh/h2t7s+M8oPpIPxgNACWa+6ESR57kXstwqPiCut0V8NRpcwgU7A==\",\"dev\":true,\"requires\":{\"domelementtype\":\"^2.0.1\",\"domhandler\":\"^4.0.0\",\"domutils\":\"^2.5.2\",\"entities\":\"^2.0.0\"}},\"http-deceiver\":{\"version\":\"1.2.7\",\"resolved\":\"https://registry.npmmirror.com/http-deceiver/-/http-deceiver-1.2.7.tgz\",\"integrity\":\"sha512-LmpOGxTfbpgtGVxJrj5k7asXHCgNZp5nLfp+hWc8QQRqtb7fUy6kRY3BO1h9ddF6yIPYUARgxGOwB42DnxIaNw==\",\"dev\":true},\"http-errors\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmmirror.com/http-errors/-/http-errors-2.0.0.tgz\",\"integrity\":\"sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==\",\"dev\":true,\"requires\":{\"depd\":\"2.0.0\",\"inherits\":\"2.0.4\",\"setprototypeof\":\"1.2.0\",\"statuses\":\"2.0.1\",\"toidentifier\":\"1.0.1\"}},\"http-parser-js\":{\"version\":\"0.5.8\",\"resolved\":\"https://registry.npmmirror.com/http-parser-js/-/http-parser-js-0.5.8.tgz\",\"integrity\":\"sha512-SGeBX54F94Wgu5RH3X5jsDtf4eHyRogWX1XGT3b4HuW3tQPM4AaBzoUji/4AAJNXCEOWZ5O0DgZmJw1947gD5Q==\",\"dev\":true},\"http-proxy\":{\"version\":\"1.18.1\",\"resolved\":\"https://registry.npmmirror.com/http-proxy/-/http-proxy-1.18.1.tgz\",\"integrity\":\"sha512-7mz/721AbnJwIVbnaSv1Cz3Am0ZLT/UBwkC92VlxhXv/k/BBQfM2fXElQNC27BVGr0uwUpplYPQM9LnaBMR5NQ==\",\"dev\":true,\"requires\":{\"eventemitter3\":\"^4.0.0\",\"follow-redirects\":\"^1.0.0\",\"requires-port\":\"^1.0.0\"}},\"http-proxy-middleware\":{\"version\":\"2.0.6\",\"resolved\":\"https://registry.npmmirror.com/http-proxy-middleware/-/http-proxy-middleware-2.0.6.tgz\",\"integrity\":\"sha512-ya/UeJ6HVBYxrgYotAZo1KvPWlgB48kUJLDePFeneHsVujFaW5WNj2NgWCAE//B1Dl02BIfYlpNgBy8Kf8Rjmw==\",\"dev\":true,\"requires\":{\"@types/http-proxy\":\"^1.17.8\",\"http-proxy\":\"^1.18.1\",\"is-glob\":\"^4.0.1\",\"is-plain-obj\":\"^3.0.0\",\"micromatch\":\"^4.0.2\"}},\"human-signals\":{\"version\":\"2.1.0\",\"resolved\":\"https://registry.npmmirror.com/human-signals/-/human-signals-2.1.0.tgz\",\"integrity\":\"sha512-B4FFZ6q/T2jhhksgkbEW3HBvWIfDW85snkQgawt07S7J5QXTk6BkNV+0yAeZrM5QpMAdYlocGoljn0sJ/WQkFw==\",\"dev\":true},\"iconv-lite\":{\"version\":\"0.4.24\",\"resolved\":\"https://registry.npmmirror.com/iconv-lite/-/iconv-lite-0.4.24.tgz\",\"integrity\":\"sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==\",\"dev\":true,\"requires\":{\"safer-buffer\":\">= 2.1.2 < 3\"}},\"icss-utils\":{\"version\":\"5.1.0\",\"resolved\":\"https://registry.npmmirror.com/icss-utils/-/icss-utils-5.1.0.tgz\",\"integrity\":\"sha512-soFhflCVWLfRNOPU3iv5Z9VUdT44xFRbzjLsEzSr5AQmgqPMTHdU3PMT1Cf1ssx8fLNJDA1juftYl+PUcv3MqA==\",\"dev\":true},\"import-fresh\":{\"version\":\"3.3.0\",\"resolved\":\"https://registry.npmmirror.com/import-fresh/-/import-fresh-3.3.0.tgz\",\"integrity\":\"sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==\",\"dev\":true,\"requires\":{\"parent-module\":\"^1.0.0\",\"resolve-from\":\"^4.0.0\"},\"dependencies\":{\"resolve-from\":{\"version\":\"4.0.0\",\"resolved\":\"https://registry.npmmirror.com/resolve-from/-/resolve-from-4.0.0.tgz\",\"integrity\":\"sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==\",\"dev\":true}}},\"import-local\":{\"version\":\"3.1.0\",\"resolved\":\"https://registry.npmmirror.com/import-local/-/import-local-3.1.0.tgz\",\"integrity\":\"sha512-ASB07uLtnDs1o6EHjKpX34BKYDSqnFerfTOJL2HvMqF70LnxpjkzDB8J44oT9pu4AMPkQwf8jl6szgvNd2tRIg==\",\"dev\":true,\"requires\":{\"pkg-dir\":\"^4.2.0\",\"resolve-cwd\":\"^3.0.0\"}},\"inflight\":{\"version\":\"1.0.6\",\"resolved\":\"https://registry.npmmirror.com/inflight/-/inflight-1.0.6.tgz\",\"integrity\":\"sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==\",\"dev\":true,\"requires\":{\"once\":\"^1.3.0\",\"wrappy\":\"1\"}},\"inherits\":{\"version\":\"2.0.4\",\"resolved\":\"https://registry.npmmirror.com/inherits/-/inherits-2.0.4.tgz\",\"integrity\":\"sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==\",\"dev\":true},\"interpret\":{\"version\":\"3.1.1\",\"resolved\":\"https://registry.npmmirror.com/interpret/-/interpret-3.1.1.tgz\",\"integrity\":\"sha512-6xwYfHbajpoF0xLW+iwLkhwgvLoZDfjYfoFNu8ftMoXINzwuymNLd9u/KmwtdT2GbR+/Cz66otEGEVVUHX9QLQ==\",\"dev\":true},\"ipaddr.js\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmmirror.com/ipaddr.js/-/ipaddr.js-2.0.1.tgz\",\"integrity\":\"sha512-1qTgH9NG+IIJ4yfKs2e6Pp1bZg8wbDbKHT21HrLIeYBTRLgMYKnMTPAuI3Lcs61nfx5h1xlXnbJtH1kX5/d/ng==\",\"dev\":true},\"is-arrayish\":{\"version\":\"0.2.1\",\"resolved\":\"https://registry.npmmirror.com/is-arrayish/-/is-arrayish-0.2.1.tgz\",\"integrity\":\"sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==\",\"dev\":true},\"is-binary-path\":{\"version\":\"2.1.0\",\"resolved\":\"https://registry.npmmirror.com/is-binary-path/-/is-binary-path-2.1.0.tgz\",\"integrity\":\"sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==\",\"dev\":true,\"requires\":{\"binary-extensions\":\"^2.0.0\"}},\"is-core-module\":{\"version\":\"2.12.0\",\"resolved\":\"https://registry.npmmirror.com/is-core-module/-/is-core-module-2.12.0.tgz\",\"integrity\":\"sha512-RECHCBCd/viahWmwj6enj19sKbHfJrddi/6cBDsNTKbNq0f7VeaUkBo60BqzvPqo/W54ChS62Z5qyun7cfOMqQ==\",\"dev\":true,\"requires\":{\"has\":\"^1.0.3\"}},\"is-docker\":{\"version\":\"2.2.1\",\"resolved\":\"https://registry.npmmirror.com/is-docker/-/is-docker-2.2.1.tgz\",\"integrity\":\"sha512-F+i2BKsFrH66iaUFc0woD8sLy8getkwTwtOBjvs56Cx4CgJDeKQeqfz8wAYiSb8JOprWhHH5p77PbmYCvvUuXQ==\",\"dev\":true},\"is-extglob\":{\"version\":\"2.1.1\",\"resolved\":\"https://registry.npmmirror.com/is-extglob/-/is-extglob-2.1.1.tgz\",\"integrity\":\"sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==\",\"dev\":true},\"is-glob\":{\"version\":\"4.0.3\",\"resolved\":\"https://registry.npmmirror.com/is-glob/-/is-glob-4.0.3.tgz\",\"integrity\":\"sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==\",\"dev\":true,\"requires\":{\"is-extglob\":\"^2.1.1\"}},\"is-number\":{\"version\":\"7.0.0\",\"resolved\":\"https://registry.npmmirror.com/is-number/-/is-number-7.0.0.tgz\",\"integrity\":\"sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==\",\"dev\":true},\"is-path-cwd\":{\"version\":\"2.2.0\",\"resolved\":\"https://registry.npmmirror.com/is-path-cwd/-/is-path-cwd-2.2.0.tgz\",\"integrity\":\"sha512-w942bTcih8fdJPJmQHFzkS76NEP8Kzzvmw92cXsazb8intwLqPibPPdXf4ANdKV3rYMuuQYGIWtvz9JilB3NFQ==\",\"dev\":true},\"is-path-in-cwd\":{\"version\":\"2.1.0\",\"resolved\":\"https://registry.npmmirror.com/is-path-in-cwd/-/is-path-in-cwd-2.1.0.tgz\",\"integrity\":\"sha512-rNocXHgipO+rvnP6dk3zI20RpOtrAM/kzbB258Uw5BWr3TpXi861yzjo16Dn4hUox07iw5AyeMLHWsujkjzvRQ==\",\"dev\":true,\"requires\":{\"is-path-inside\":\"^2.1.0\"}},\"is-path-inside\":{\"version\":\"2.1.0\",\"resolved\":\"https://registry.npmmirror.com/is-path-inside/-/is-path-inside-2.1.0.tgz\",\"integrity\":\"sha512-wiyhTzfDWsvwAW53OBWF5zuvaOGlZ6PwYxAbPVDhpm+gM09xKQGjBq/8uYN12aDvMxnAnq3dxTyoSoRNmg5YFg==\",\"dev\":true,\"requires\":{\"path-is-inside\":\"^1.0.2\"}},\"is-plain-obj\":{\"version\":\"3.0.0\",\"resolved\":\"https://registry.npmmirror.com/is-plain-obj/-/is-plain-obj-3.0.0.tgz\",\"integrity\":\"sha512-gwsOE28k+23GP1B6vFl1oVh/WOzmawBrKwo5Ev6wMKzPkaXaCDIQKzLnvsA42DRlbVTWorkgTKIviAKCWkfUwA==\",\"dev\":true},\"is-plain-object\":{\"version\":\"2.0.4\",\"resolved\":\"https://registry.npmmirror.com/is-plain-object/-/is-plain-object-2.0.4.tgz\",\"integrity\":\"sha512-h5PpgXkWitc38BBMYawTYMWJHFZJVnBquFE57xFpjB8pJFiF6gZ+bU+WyI/yqXiFR5mdLsgYNaPe8uao6Uv9Og==\",\"dev\":true,\"requires\":{\"isobject\":\"^3.0.1\"}},\"is-stream\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmmirror.com/is-stream/-/is-stream-2.0.1.tgz\",\"integrity\":\"sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==\",\"dev\":true},\"is-wsl\":{\"version\":\"2.2.0\",\"resolved\":\"https://registry.npmmirror.com/is-wsl/-/is-wsl-2.2.0.tgz\",\"integrity\":\"sha512-fKzAra0rGJUUBwGBgNkHZuToZcn+TtXHpeCgmkMJMMYx1sQDYaCSyjJBSCa2nH1DGm7s3n1oBnohoVTBaN7Lww==\",\"dev\":true,\"requires\":{\"is-docker\":\"^2.0.0\"}},\"isarray\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/isarray/-/isarray-1.0.0.tgz\",\"integrity\":\"sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==\",\"dev\":true},\"isexe\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmmirror.com/isexe/-/isexe-2.0.0.tgz\",\"integrity\":\"sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==\",\"dev\":true},\"isobject\":{\"version\":\"3.0.1\",\"resolved\":\"https://registry.npmmirror.com/isobject/-/isobject-3.0.1.tgz\",\"integrity\":\"sha512-WhB9zCku7EGTj/HQQRz5aUQEUeoQZH2bWcltRErOpymJ4boYE6wL9Tbr23krRPSZ+C5zqNSrSw+Cc7sZZ4b7vg==\",\"dev\":true},\"jest-util\":{\"version\":\"29.5.0\",\"resolved\":\"https://registry.npmmirror.com/jest-util/-/jest-util-29.5.0.tgz\",\"integrity\":\"sha512-RYMgG/MTadOr5t8KdhejfvUU82MxsCu5MF6KuDUHl+NuwzUt+Sm6jJWxTJVrDR1j5M/gJVCPKQEpWXY+yIQ6lQ==\",\"dev\":true,\"requires\":{\"@jest/types\":\"^29.5.0\",\"@types/node\":\"*\",\"chalk\":\"^4.0.0\",\"ci-info\":\"^3.2.0\",\"graceful-fs\":\"^4.2.9\",\"picomatch\":\"^2.2.3\"},\"dependencies\":{\"ansi-styles\":{\"version\":\"4.3.0\",\"resolved\":\"https://registry.npmmirror.com/ansi-styles/-/ansi-styles-4.3.0.tgz\",\"integrity\":\"sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==\",\"dev\":true,\"requires\":{\"color-convert\":\"^2.0.1\"}},\"chalk\":{\"version\":\"4.1.2\",\"resolved\":\"https://registry.npmmirror.com/chalk/-/chalk-4.1.2.tgz\",\"integrity\":\"sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==\",\"dev\":true,\"requires\":{\"ansi-styles\":\"^4.1.0\",\"supports-color\":\"^7.1.0\"}},\"color-convert\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmmirror.com/color-convert/-/color-convert-2.0.1.tgz\",\"integrity\":\"sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==\",\"dev\":true,\"requires\":{\"color-name\":\"~1.1.4\"}},\"color-name\":{\"version\":\"1.1.4\",\"resolved\":\"https://registry.npmmirror.com/color-name/-/color-name-1.1.4.tgz\",\"integrity\":\"sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==\",\"dev\":true},\"supports-color\":{\"version\":\"7.2.0\",\"resolved\":\"https://registry.npmmirror.com/supports-color/-/supports-color-7.2.0.tgz\",\"integrity\":\"sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==\",\"dev\":true,\"requires\":{\"has-flag\":\"^4.0.0\"}}}},\"jest-worker\":{\"version\":\"27.5.1\",\"resolved\":\"https://registry.npmmirror.com/jest-worker/-/jest-worker-27.5.1.tgz\",\"integrity\":\"sha512-7vuh85V5cdDofPyxn58nrPjBktZo0u9x1g8WtjQol+jZDaE+fhN+cIvTj11GndBnMnyfrUOG1sZQxCdjKh+DKg==\",\"dev\":true,\"requires\":{\"@types/node\":\"*\",\"merge-stream\":\"^2.0.0\",\"supports-color\":\"^8.0.0\"}},\"js-tokens\":{\"version\":\"4.0.0\",\"resolved\":\"https://registry.npmmirror.com/js-tokens/-/js-tokens-4.0.0.tgz\",\"integrity\":\"sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==\",\"dev\":true},\"json-parse-even-better-errors\":{\"version\":\"2.3.1\",\"resolved\":\"https://registry.npmmirror.com/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz\",\"integrity\":\"sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==\",\"dev\":true},\"json-schema-traverse\":{\"version\":\"0.4.1\",\"resolved\":\"https://registry.npmmirror.com/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz\",\"integrity\":\"sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==\",\"dev\":true},\"json5\":{\"version\":\"2.2.3\",\"resolved\":\"https://registry.npmmirror.com/json5/-/json5-2.2.3.tgz\",\"integrity\":\"sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==\",\"dev\":true},\"kind-of\":{\"version\":\"6.0.3\",\"resolved\":\"https://registry.npmmirror.com/kind-of/-/kind-of-6.0.3.tgz\",\"integrity\":\"sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==\",\"dev\":true},\"klona\":{\"version\":\"2.0.6\",\"resolved\":\"https://registry.npmmirror.com/klona/-/klona-2.0.6.tgz\",\"integrity\":\"sha512-dhG34DXATL5hSxJbIexCft8FChFXtmskoZYnoPWjXQuebWYCNkVeV3KkGegCK9CP1oswI/vQibS2GY7Em/sJJA==\",\"dev\":true},\"launch-editor\":{\"version\":\"2.6.0\",\"resolved\":\"https://registry.npmmirror.com/launch-editor/-/launch-editor-2.6.0.tgz\",\"integrity\":\"sha512-JpDCcQnyAAzZZaZ7vEiSqL690w7dAEyLao+KC96zBplnYbJS7TYNjvM3M7y3dGz+v7aIsJk3hllWuc0kWAjyRQ==\",\"dev\":true,\"requires\":{\"picocolors\":\"^1.0.0\",\"shell-quote\":\"^1.7.3\"}},\"lilconfig\":{\"version\":\"2.1.0\",\"resolved\":\"https://registry.npmmirror.com/lilconfig/-/lilconfig-2.1.0.tgz\",\"integrity\":\"sha512-utWOt/GHzuUxnLKxB6dk81RoOeoNeHgbrXiuGk4yyF5qlRz+iIVWu56E2fqGHFrXz0QNUhLB/8nKqvRH66JKGQ==\",\"dev\":true},\"lines-and-columns\":{\"version\":\"1.2.4\",\"resolved\":\"https://registry.npmmirror.com/lines-and-columns/-/lines-and-columns-1.2.4.tgz\",\"integrity\":\"sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==\",\"dev\":true},\"loader-runner\":{\"version\":\"4.3.0\",\"resolved\":\"https://registry.npmmirror.com/loader-runner/-/loader-runner-4.3.0.tgz\",\"integrity\":\"sha512-3R/1M+yS3j5ou80Me59j7F9IMs4PXs3VqRrm0TU3AbKPxlmpoY1TNscJV/oGJXo8qCatFGTfDbY6W6ipGOYXfg==\",\"dev\":true},\"loader-utils\":{\"version\":\"2.0.4\",\"resolved\":\"https://registry.npmmirror.com/loader-utils/-/loader-utils-2.0.4.tgz\",\"integrity\":\"sha512-xXqpXoINfFhgua9xiqD8fPFHgkoq1mmmpE92WlDbm9rNRd/EbRb+Gqf908T2DMfuHjjJlksiK2RbHVOdD/MqSw==\",\"dev\":true,\"requires\":{\"big.js\":\"^5.2.2\",\"emojis-list\":\"^3.0.0\",\"json5\":\"^2.1.2\"}},\"locate-path\":{\"version\":\"5.0.0\",\"resolved\":\"https://registry.npmmirror.com/locate-path/-/locate-path-5.0.0.tgz\",\"integrity\":\"sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==\",\"dev\":true,\"requires\":{\"p-locate\":\"^4.1.0\"}},\"lodash\":{\"version\":\"4.17.21\",\"resolved\":\"https://registry.npmmirror.com/lodash/-/lodash-4.17.21.tgz\",\"integrity\":\"sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==\"},\"lodash.memoize\":{\"version\":\"4.1.2\",\"resolved\":\"https://registry.npmmirror.com/lodash.memoize/-/lodash.memoize-4.1.2.tgz\",\"integrity\":\"sha512-t7j+NzmgnQzTAYXcsHYLgimltOV1MXHtlOWf6GjL9Kj8GK5FInw5JotxvbOs+IvV1/Dzo04/fCGfLVs7aXb4Ag==\",\"dev\":true},\"lodash.uniq\":{\"version\":\"4.5.0\",\"resolved\":\"https://registry.npmmirror.com/lodash.uniq/-/lodash.uniq-4.5.0.tgz\",\"integrity\":\"sha512-xfBaXQd9ryd9dlSDvnvI0lvxfLJlYAZzXomUYzLKtUeOQvOP5piqAWuGtrhWeqaXK9hhoM/iyJc5AV+XfsX3HQ==\",\"dev\":true},\"lower-case\":{\"version\":\"2.0.2\",\"resolved\":\"https://registry.npmmirror.com/lower-case/-/lower-case-2.0.2.tgz\",\"integrity\":\"sha512-7fm3l3NAF9WfN6W3JOmf5drwpVqX78JtoGJ3A6W0a6ZnldM41w2fV5D490psKFTpMds8TJse/eHLFFsNHHjHgg==\",\"dev\":true,\"requires\":{\"tslib\":\"^2.0.3\"}},\"lru-cache\":{\"version\":\"6.0.0\",\"resolved\":\"https://registry.npmmirror.com/lru-cache/-/lru-cache-6.0.0.tgz\",\"integrity\":\"sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==\",\"dev\":true,\"requires\":{\"yallist\":\"^4.0.0\"}},\"mdn-data\":{\"version\":\"2.0.30\",\"resolved\":\"https://registry.npmmirror.com/mdn-data/-/mdn-data-2.0.30.tgz\",\"integrity\":\"sha512-GaqWWShW4kv/G9IEucWScBx9G1/vsFZZJUO+tD26M8J8z3Kw5RDQjaoZe03YAClgeS/SWPOcb4nkFBTEi5DUEA==\",\"dev\":true},\"media-typer\":{\"version\":\"0.3.0\",\"resolved\":\"https://registry.npmmirror.com/media-typer/-/media-typer-0.3.0.tgz\",\"integrity\":\"sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==\",\"dev\":true},\"memfs\":{\"version\":\"3.5.1\",\"resolved\":\"https://registry.npmmirror.com/memfs/-/memfs-3.5.1.tgz\",\"integrity\":\"sha512-UWbFJKvj5k+nETdteFndTpYxdeTMox/ULeqX5k/dpaQJCCFmj5EeKv3dBcyO2xmkRAx2vppRu5dVG7SOtsGOzA==\",\"dev\":true,\"requires\":{\"fs-monkey\":\"^1.0.3\"}},\"merge-descriptors\":{\"version\":\"1.0.1\",\"resolved\":\"https://registry.npmmirror.com/merge-descriptors/-/merge-descriptors-1.0.1.tgz\",\"integrity\":\"sha512-cCi6g3/Zr1iqQi6ySbseM1Xvooa98N0w31jzUYrXPX2xqObmFGHJ0tQ5u74H3mVh7wLouTseZyYIq39g8cNp1w==\",\"dev\":true},\"merge-stream\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmmirror.com/merge-stream/-/merge-stream-2.0.0.tgz\",\"integrity\":\"sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==\",\"dev\":true},\"methods\":{\"version\":\"1.1.2\",\"resolved\":\"https://registry.npmmirror.com/methods/-/methods-1.1.2.tgz\",\"integrity\":\"sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==\",\"dev\":true},\"micromatch\":{\"version\":\"4.0.5\",\"resolved\":\"https://registry.npmmirror.com/micromatch/-/micromatch-4.0.5.tgz\",\"integrity\":\"sha512-DMy+ERcEW2q8Z2Po+WNXuw3c5YaUSFjAO5GsJqfEl7UjvtIuFKO6ZrKvcItdy98dwFI2N1tg3zNIdKaQT+aNdA==\",\"dev\":true,\"requires\":{\"braces\":\"^3.0.2\",\"picomatch\":\"^2.3.1\"}},\"mime\":{\"version\":\"1.6.0\",\"resolved\":\"https://registry.npmmirror.com/mime/-/mime-1.6.0.tgz\",\"integrity\":\"sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==\",\"dev\":true},\"mime-db\":{\"version\":\"1.52.0\",\"resolved\":\"https://registry.npmmirror.com/mime-db/-/mime-db-1.52.0.tgz\",\"integrity\":\"sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==\",\"dev\":true},\"mime-types\":{\"version\":\"2.1.35\",\"resolved\":\"https://registry.npmmirror.com/mime-types/-/mime-types-2.1.35.tgz\",\"integrity\":\"sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==\",\"dev\":true,\"requires\":{\"mime-db\":\"1.52.0\"}},\"mimic-fn\":{\"version\":\"2.1.0\",\"resolved\":\"https://registry.npmmirror.com/mimic-fn/-/mimic-fn-2.1.0.tgz\",\"integrity\":\"sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==\",\"dev\":true},\"mini-css-extract-plugin\":{\"version\":\"2.7.5\",\"resolved\":\"https://registry.npmmirror.com/mini-css-extract-plugin/-/mini-css-extract-plugin-2.7.5.tgz\",\"integrity\":\"sha512-9HaR++0mlgom81s95vvNjxkg52n2b5s//3ZTI1EtzFb98awsLSivs2LMsVqnQ3ay0PVhqWcGNyDaTE961FOcjQ==\",\"dev\":true,\"requires\":{\"schema-utils\":\"^4.0.0\"},\"dependencies\":{\"ajv\":{\"version\":\"8.12.0\",\"resolved\":\"https://registry.npmmirror.com/ajv/-/ajv-8.12.0.tgz\",\"integrity\":\"sha512-sRu1kpcO9yLtYxBKvqfTeh9KzZEwO3STyX1HT+4CaDzC6HpTGYhIhPIzj9XuKU7KYDwnaeh5hcOwjy1QuJzBPA==\",\"dev\":true,\"requires\":{\"fast-deep-equal\":\"^3.1.1\",\"json-schema-traverse\":\"^1.0.0\",\"require-from-string\":\"^2.0.2\",\"uri-js\":\"^4.2.2\"}},\"ajv-keywords\":{\"version\":\"5.1.0\",\"resolved\":\"https://registry.npmmirror.com/ajv-keywords/-/ajv-keywords-5.1.0.tgz\",\"integrity\":\"sha512-YCS/JNFAUyr5vAuhk1DWm1CBxRHW9LbJ2ozWeemrIqpbsqKjHVxYPyi5GC0rjZIT5JxJ3virVTS8wk4i/Z+krw==\",\"dev\":true,\"requires\":{\"fast-deep-equal\":\"^3.1.3\"}},\"json-schema-traverse\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz\",\"integrity\":\"sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==\",\"dev\":true},\"schema-utils\":{\"version\":\"4.0.1\",\"resolved\":\"https://registry.npmmirror.com/schema-utils/-/schema-utils-4.0.1.tgz\",\"integrity\":\"sha512-lELhBAAly9NowEsX0yZBlw9ahZG+sK/1RJ21EpzdYHKEs13Vku3LJ+MIPhh4sMs0oCCeufZQEQbMekiA4vuVIQ==\",\"dev\":true,\"requires\":{\"@types/json-schema\":\"^7.0.9\",\"ajv\":\"^8.9.0\",\"ajv-formats\":\"^2.1.1\",\"ajv-keywords\":\"^5.1.0\"}}}},\"minimalistic-assert\":{\"version\":\"1.0.1\",\"resolved\":\"https://registry.npmmirror.com/minimalistic-assert/-/minimalistic-assert-1.0.1.tgz\",\"integrity\":\"sha512-UtJcAD4yEaGtjPezWuO9wC4nwUnVH/8/Im3yEHQP4b67cXlD/Qr9hdITCU1xDbSEXg2XKNaP8jsReV7vQd00/A==\",\"dev\":true},\"minimatch\":{\"version\":\"3.1.2\",\"resolved\":\"https://registry.npmmirror.com/minimatch/-/minimatch-3.1.2.tgz\",\"integrity\":\"sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==\",\"dev\":true,\"requires\":{\"brace-expansion\":\"^1.1.7\"}},\"mrmime\":{\"version\":\"1.0.1\",\"resolved\":\"https://registry.npmmirror.com/mrmime/-/mrmime-1.0.1.tgz\",\"integrity\":\"sha512-hzzEagAgDyoU1Q6yg5uI+AorQgdvMCur3FcKf7NhMKWsaYg+RnbTyHRa/9IlLF9rf455MOCtcqqrQQ83pPP7Uw==\",\"dev\":true},\"ms\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmmirror.com/ms/-/ms-2.0.0.tgz\",\"integrity\":\"sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==\",\"dev\":true},\"multicast-dns\":{\"version\":\"7.2.5\",\"resolved\":\"https://registry.npmmirror.com/multicast-dns/-/multicast-dns-7.2.5.tgz\",\"integrity\":\"sha512-2eznPJP8z2BFLX50tf0LuODrpINqP1RVIm/CObbTcBRITQgmC/TjcREF1NeTBzIcR5XO/ukWo+YHOjBbFwIupg==\",\"dev\":true,\"requires\":{\"dns-packet\":\"^5.2.2\",\"thunky\":\"^1.0.2\"}},\"nanoid\":{\"version\":\"3.3.6\",\"resolved\":\"https://registry.npmmirror.com/nanoid/-/nanoid-3.3.6.tgz\",\"integrity\":\"sha512-BGcqMMJuToF7i1rt+2PWSNVnWIkGCU78jBG3RxO/bZlnZPK2Cmi2QaffxGO/2RvWi9sL+FAiRiXMgsyxQ1DIDA==\",\"dev\":true},\"negotiator\":{\"version\":\"0.6.3\",\"resolved\":\"https://registry.npmmirror.com/negotiator/-/negotiator-0.6.3.tgz\",\"integrity\":\"sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==\",\"dev\":true},\"neo-async\":{\"version\":\"2.6.2\",\"resolved\":\"https://registry.npmmirror.com/neo-async/-/neo-async-2.6.2.tgz\",\"integrity\":\"sha512-Yd3UES5mWCSqR+qNT93S3UoYUkqAZ9lLg8a7g9rimsWmYGK8cVToA4/sF3RrshdyV3sAGMXVUmpMYOw+dLpOuw==\",\"dev\":true},\"no-case\":{\"version\":\"3.0.4\",\"resolved\":\"https://registry.npmmirror.com/no-case/-/no-case-3.0.4.tgz\",\"integrity\":\"sha512-fgAN3jGAh+RoxUGZHTSOLJIqUc2wmoBwGR4tbpNAKmmovFoWq0OdRkb0VkldReO2a2iBT/OEulG9XSUc10r3zg==\",\"dev\":true,\"requires\":{\"lower-case\":\"^2.0.2\",\"tslib\":\"^2.0.3\"}},\"node-forge\":{\"version\":\"1.3.1\",\"resolved\":\"https://registry.npmmirror.com/node-forge/-/node-forge-1.3.1.tgz\",\"integrity\":\"sha512-dPEtOeMvF9VMcYV/1Wb8CPoVAXtp6MKMlcbAt4ddqmGqUJ6fQZFXkNZNkNlfevtNkGtaSoXf/vNNNSvgrdXwtA==\",\"dev\":true},\"node-releases\":{\"version\":\"2.0.10\",\"resolved\":\"https://registry.npmmirror.com/node-releases/-/node-releases-2.0.10.tgz\",\"integrity\":\"sha512-5GFldHPXVG/YZmFzJvKK2zDSzPKhEp0+ZR5SVaoSag9fsL5YgHbUHDfnG5494ISANDcK4KwPXAx2xqVEydmd7w==\",\"dev\":true},\"normalize-path\":{\"version\":\"3.0.0\",\"resolved\":\"https://registry.npmmirror.com/normalize-path/-/normalize-path-3.0.0.tgz\",\"integrity\":\"sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==\",\"dev\":true},\"normalize-range\":{\"version\":\"0.1.2\",\"resolved\":\"https://registry.npmmirror.com/normalize-range/-/normalize-range-0.1.2.tgz\",\"integrity\":\"sha512-bdok/XvKII3nUpklnV6P2hxtMNrCboOjAcyBuQnWEhO665FwrSNRxU+AqpsyvO6LgGYPspN+lu5CLtw4jPRKNA==\",\"dev\":true},\"npm-run-path\":{\"version\":\"4.0.1\",\"resolved\":\"https://registry.npmmirror.com/npm-run-path/-/npm-run-path-4.0.1.tgz\",\"integrity\":\"sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw==\",\"dev\":true,\"requires\":{\"path-key\":\"^3.0.0\"}},\"nth-check\":{\"version\":\"2.1.1\",\"resolved\":\"https://registry.npmmirror.com/nth-check/-/nth-check-2.1.1.tgz\",\"integrity\":\"sha512-lqjrjmaOoAnWfMmBPL+XNnynZh2+swxiX3WUE0s4yEHI6m+AwrK2UZOimIRl3X/4QctVqS8AiZjFqyOGrMXb/w==\",\"dev\":true,\"requires\":{\"boolbase\":\"^1.0.0\"}},\"object-assign\":{\"version\":\"4.1.1\",\"resolved\":\"https://registry.npmmirror.com/object-assign/-/object-assign-4.1.1.tgz\",\"integrity\":\"sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==\",\"dev\":true},\"object-inspect\":{\"version\":\"1.12.3\",\"resolved\":\"https://registry.npmmirror.com/object-inspect/-/object-inspect-1.12.3.tgz\",\"integrity\":\"sha512-geUvdk7c+eizMNUDkRpW1wJwgfOiOeHbxBR/hLXK1aT6zmVSO0jsQcs7fj6MGw89jC/cjGfLcNOrtMYtGqm81g==\",\"dev\":true},\"obuf\":{\"version\":\"1.1.2\",\"resolved\":\"https://registry.npmmirror.com/obuf/-/obuf-1.1.2.tgz\",\"integrity\":\"sha512-PX1wu0AmAdPqOL1mWhqmlOd8kOIZQwGZw6rh7uby9fTc5lhaOWFLX3I6R1hrF9k3zUY40e6igsLGkDXK92LJNg==\",\"dev\":true},\"on-finished\":{\"version\":\"2.4.1\",\"resolved\":\"https://registry.npmmirror.com/on-finished/-/on-finished-2.4.1.tgz\",\"integrity\":\"sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==\",\"dev\":true,\"requires\":{\"ee-first\":\"1.1.1\"}},\"on-headers\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/on-headers/-/on-headers-1.0.2.tgz\",\"integrity\":\"sha512-pZAE+FJLoyITytdqK0U5s+FIpjN0JP3OzFi/u8Rx+EV5/W+JTWGXG8xFzevE7AjBfDqHv/8vL8qQsIhHnqRkrA==\",\"dev\":true},\"once\":{\"version\":\"1.4.0\",\"resolved\":\"https://registry.npmmirror.com/once/-/once-1.4.0.tgz\",\"integrity\":\"sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==\",\"dev\":true,\"requires\":{\"wrappy\":\"1\"}},\"onetime\":{\"version\":\"5.1.2\",\"resolved\":\"https://registry.npmmirror.com/onetime/-/onetime-5.1.2.tgz\",\"integrity\":\"sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==\",\"dev\":true,\"requires\":{\"mimic-fn\":\"^2.1.0\"}},\"open\":{\"version\":\"8.4.2\",\"resolved\":\"https://registry.npmmirror.com/open/-/open-8.4.2.tgz\",\"integrity\":\"sha512-7x81NCL719oNbsq/3mh+hVrAWmFuEYUqrq/Iw3kUzH8ReypT9QQ0BLoJS7/G9k6N81XjW4qHWtjWwe/9eLy1EQ==\",\"dev\":true,\"requires\":{\"define-lazy-prop\":\"^2.0.0\",\"is-docker\":\"^2.1.1\",\"is-wsl\":\"^2.2.0\"}},\"opener\":{\"version\":\"1.5.2\",\"resolved\":\"https://registry.npmmirror.com/opener/-/opener-1.5.2.tgz\",\"integrity\":\"sha512-ur5UIdyw5Y7yEj9wLzhqXiy6GZ3Mwx0yGI+5sMn2r0N0v3cKJvUmFH5yPP+WXh9e0xfyzyJX95D8l088DNFj7A==\",\"dev\":true},\"p-limit\":{\"version\":\"2.3.0\",\"resolved\":\"https://registry.npmmirror.com/p-limit/-/p-limit-2.3.0.tgz\",\"integrity\":\"sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==\",\"dev\":true,\"requires\":{\"p-try\":\"^2.0.0\"}},\"p-locate\":{\"version\":\"4.1.0\",\"resolved\":\"https://registry.npmmirror.com/p-locate/-/p-locate-4.1.0.tgz\",\"integrity\":\"sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==\",\"dev\":true,\"requires\":{\"p-limit\":\"^2.2.0\"}},\"p-map\":{\"version\":\"2.1.0\",\"resolved\":\"https://registry.npmmirror.com/p-map/-/p-map-2.1.0.tgz\",\"integrity\":\"sha512-y3b8Kpd8OAN444hxfBbFfj1FY/RjtTd8tzYwhUqNYXx0fXx2iX4maP4Qr6qhIKbQXI02wTLAda4fYUbDagTUFw==\",\"dev\":true},\"p-retry\":{\"version\":\"4.6.2\",\"resolved\":\"https://registry.npmmirror.com/p-retry/-/p-retry-4.6.2.tgz\",\"integrity\":\"sha512-312Id396EbJdvRONlngUx0NydfrIQ5lsYu0znKVUzVvArzEIt08V1qhtyESbGVd1FGX7UKtiFp5uwKZdM8wIuQ==\",\"dev\":true,\"requires\":{\"@types/retry\":\"0.12.0\",\"retry\":\"^0.13.1\"}},\"p-try\":{\"version\":\"2.2.0\",\"resolved\":\"https://registry.npmmirror.com/p-try/-/p-try-2.2.0.tgz\",\"integrity\":\"sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==\",\"dev\":true},\"param-case\":{\"version\":\"3.0.4\",\"resolved\":\"https://registry.npmmirror.com/param-case/-/param-case-3.0.4.tgz\",\"integrity\":\"sha512-RXlj7zCYokReqWpOPH9oYivUzLYZ5vAPIfEmCTNViosC78F8F0H9y7T7gG2M39ymgutxF5gcFEsyZQSph9Bp3A==\",\"dev\":true,\"requires\":{\"dot-case\":\"^3.0.4\",\"tslib\":\"^2.0.3\"}},\"parent-module\":{\"version\":\"1.0.1\",\"resolved\":\"https://registry.npmmirror.com/parent-module/-/parent-module-1.0.1.tgz\",\"integrity\":\"sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==\",\"dev\":true,\"requires\":{\"callsites\":\"^3.0.0\"}},\"parse-json\":{\"version\":\"5.2.0\",\"resolved\":\"https://registry.npmmirror.com/parse-json/-/parse-json-5.2.0.tgz\",\"integrity\":\"sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==\",\"dev\":true,\"requires\":{\"@babel/code-frame\":\"^7.0.0\",\"error-ex\":\"^1.3.1\",\"json-parse-even-better-errors\":\"^2.3.0\",\"lines-and-columns\":\"^1.1.6\"}},\"parseurl\":{\"version\":\"1.3.3\",\"resolved\":\"https://registry.npmmirror.com/parseurl/-/parseurl-1.3.3.tgz\",\"integrity\":\"sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==\",\"dev\":true},\"pascal-case\":{\"version\":\"3.1.2\",\"resolved\":\"https://registry.npmmirror.com/pascal-case/-/pascal-case-3.1.2.tgz\",\"integrity\":\"sha512-uWlGT3YSnK9x3BQJaOdcZwrnV6hPpd8jFH1/ucpiLRPh/2zCVJKS19E4GvYHvaCcACn3foXZ0cLB9Wrx1KGe5g==\",\"dev\":true,\"requires\":{\"no-case\":\"^3.0.4\",\"tslib\":\"^2.0.3\"}},\"path-exists\":{\"version\":\"4.0.0\",\"resolved\":\"https://registry.npmmirror.com/path-exists/-/path-exists-4.0.0.tgz\",\"integrity\":\"sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==\",\"dev\":true},\"path-is-absolute\":{\"version\":\"1.0.1\",\"resolved\":\"https://registry.npmmirror.com/path-is-absolute/-/path-is-absolute-1.0.1.tgz\",\"integrity\":\"sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==\",\"dev\":true},\"path-is-inside\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/path-is-inside/-/path-is-inside-1.0.2.tgz\",\"integrity\":\"sha512-DUWJr3+ULp4zXmol/SZkFf3JGsS9/SIv+Y3Rt93/UjPpDpklB5f1er4O3POIbUuUJ3FXgqte2Q7SrU6zAqwk8w==\",\"dev\":true},\"path-key\":{\"version\":\"3.1.1\",\"resolved\":\"https://registry.npmmirror.com/path-key/-/path-key-3.1.1.tgz\",\"integrity\":\"sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==\",\"dev\":true},\"path-parse\":{\"version\":\"1.0.7\",\"resolved\":\"https://registry.npmmirror.com/path-parse/-/path-parse-1.0.7.tgz\",\"integrity\":\"sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==\",\"dev\":true},\"path-to-regexp\":{\"version\":\"0.1.7\",\"resolved\":\"https://registry.npmmirror.com/path-to-regexp/-/path-to-regexp-0.1.7.tgz\",\"integrity\":\"sha512-5DFkuoqlv1uYQKxy8omFBeJPQcdoE07Kv2sferDCrAq1ohOU+MSDswDIbnx3YAM60qIOnYa53wBhXW0EbMonrQ==\",\"dev\":true},\"path-type\":{\"version\":\"4.0.0\",\"resolved\":\"https://registry.npmmirror.com/path-type/-/path-type-4.0.0.tgz\",\"integrity\":\"sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==\",\"dev\":true},\"picocolors\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/picocolors/-/picocolors-1.0.0.tgz\",\"integrity\":\"sha512-1fygroTLlHu66zi26VoTDv8yRgm0Fccecssto+MhsZ0D/DGW2sm8E8AjW7NU5VVTRt5GxbeZ5qBuJr+HyLYkjQ==\",\"dev\":true},\"picomatch\":{\"version\":\"2.3.1\",\"resolved\":\"https://registry.npmmirror.com/picomatch/-/picomatch-2.3.1.tgz\",\"integrity\":\"sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==\",\"dev\":true},\"pify\":{\"version\":\"4.0.1\",\"resolved\":\"https://registry.npmmirror.com/pify/-/pify-4.0.1.tgz\",\"integrity\":\"sha512-uB80kBFb/tfd68bVleG9T5GGsGPjJrLAUpR5PZIrhBnIaRTQRjqdJSsIKkOP6OAIFbj7GOrcudc5pNjZ+geV2g==\",\"dev\":true},\"pinkie\":{\"version\":\"2.0.4\",\"resolved\":\"https://registry.npmmirror.com/pinkie/-/pinkie-2.0.4.tgz\",\"integrity\":\"sha512-MnUuEycAemtSaeFSjXKW/aroV7akBbY+Sv+RkyqFjgAe73F+MR0TBWKBRDkmfWq/HiFmdavfZ1G7h4SPZXaCSg==\",\"dev\":true},\"pinkie-promise\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmmirror.com/pinkie-promise/-/pinkie-promise-2.0.1.tgz\",\"integrity\":\"sha512-0Gni6D4UcLTbv9c57DfxDGdr41XfgUjqWZu492f0cIGr16zDU06BWP/RAEvOuo7CQ0CNjHaLlM59YJJFm3NWlw==\",\"dev\":true,\"requires\":{\"pinkie\":\"^2.0.0\"}},\"pkg-dir\":{\"version\":\"4.2.0\",\"resolved\":\"https://registry.npmmirror.com/pkg-dir/-/pkg-dir-4.2.0.tgz\",\"integrity\":\"sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ==\",\"dev\":true,\"requires\":{\"find-up\":\"^4.0.0\"}},\"postcss\":{\"version\":\"8.4.23\",\"resolved\":\"https://registry.npmmirror.com/postcss/-/postcss-8.4.23.tgz\",\"integrity\":\"sha512-bQ3qMcpF6A/YjR55xtoTr0jGOlnPOKAIMdOWiv0EIT6HVPEaJiJB4NLljSbiHoC2RX7DN5Uvjtpbg1NPdwv1oA==\",\"dev\":true,\"requires\":{\"nanoid\":\"^3.3.6\",\"picocolors\":\"^1.0.0\",\"source-map-js\":\"^1.0.2\"}},\"postcss-calc\":{\"version\":\"9.0.1\",\"resolved\":\"https://registry.npmmirror.com/postcss-calc/-/postcss-calc-9.0.1.tgz\",\"integrity\":\"sha512-TipgjGyzP5QzEhsOZUaIkeO5mKeMFpebWzRogWG/ysonUlnHcq5aJe0jOjpfzUU8PeSaBQnrE8ehR0QA5vs8PQ==\",\"dev\":true,\"requires\":{\"postcss-selector-parser\":\"^6.0.11\",\"postcss-value-parser\":\"^4.2.0\"}},\"postcss-colormin\":{\"version\":\"6.0.0\",\"resolved\":\"https://registry.npmmirror.com/postcss-colormin/-/postcss-colormin-6.0.0.tgz\",\"integrity\":\"sha512-EuO+bAUmutWoZYgHn2T1dG1pPqHU6L4TjzPlu4t1wZGXQ/fxV16xg2EJmYi0z+6r+MGV1yvpx1BHkUaRrPa2bw==\",\"dev\":true,\"requires\":{\"browserslist\":\"^4.21.4\",\"caniuse-api\":\"^3.0.0\",\"colord\":\"^2.9.1\",\"postcss-value-parser\":\"^4.2.0\"}},\"postcss-convert-values\":{\"version\":\"6.0.0\",\"resolved\":\"https://registry.npmmirror.com/postcss-convert-values/-/postcss-convert-values-6.0.0.tgz\",\"integrity\":\"sha512-U5D8QhVwqT++ecmy8rnTb+RL9n/B806UVaS3m60lqle4YDFcpbS3ae5bTQIh3wOGUSDHSEtMYLs/38dNG7EYFw==\",\"dev\":true,\"requires\":{\"browserslist\":\"^4.21.4\",\"postcss-value-parser\":\"^4.2.0\"}},\"postcss-discard-comments\":{\"version\":\"6.0.0\",\"resolved\":\"https://registry.npmmirror.com/postcss-discard-comments/-/postcss-discard-comments-6.0.0.tgz\",\"integrity\":\"sha512-p2skSGqzPMZkEQvJsgnkBhCn8gI7NzRH2683EEjrIkoMiwRELx68yoUJ3q3DGSGuQ8Ug9Gsn+OuDr46yfO+eFw==\",\"dev\":true},\"postcss-discard-duplicates\":{\"version\":\"6.0.0\",\"resolved\":\"https://registry.npmmirror.com/postcss-discard-duplicates/-/postcss-discard-duplicates-6.0.0.tgz\",\"integrity\":\"sha512-bU1SXIizMLtDW4oSsi5C/xHKbhLlhek/0/yCnoMQany9k3nPBq+Ctsv/9oMmyqbR96HYHxZcHyK2HR5P/mqoGA==\",\"dev\":true},\"postcss-discard-empty\":{\"version\":\"6.0.0\",\"resolved\":\"https://registry.npmmirror.com/postcss-discard-empty/-/postcss-discard-empty-6.0.0.tgz\",\"integrity\":\"sha512-b+h1S1VT6dNhpcg+LpyiUrdnEZfICF0my7HAKgJixJLW7BnNmpRH34+uw/etf5AhOlIhIAuXApSzzDzMI9K/gQ==\",\"dev\":true},\"postcss-discard-overridden\":{\"version\":\"6.0.0\",\"resolved\":\"https://registry.npmmirror.com/postcss-discard-overridden/-/postcss-discard-overridden-6.0.0.tgz\",\"integrity\":\"sha512-4VELwssYXDFigPYAZ8vL4yX4mUepF/oCBeeIT4OXsJPYOtvJumyz9WflmJWTfDwCUcpDR+z0zvCWBXgTx35SVw==\",\"dev\":true},\"postcss-loader\":{\"version\":\"5.1.0\",\"resolved\":\"https://registry.npmmirror.com/postcss-loader/-/postcss-loader-5.1.0.tgz\",\"integrity\":\"sha512-tGgKZF6Ntn16zIWXt7yKV19L0rISaozHPCfdPt+aHOnTZrreeqVR6hCkFhZYfJ6KgpyIFRkKuW8ygHtUid4GlA==\",\"dev\":true,\"requires\":{\"cosmiconfig\":\"^7.0.0\",\"klona\":\"^2.0.4\",\"semver\":\"^7.3.4\"}},\"postcss-merge-longhand\":{\"version\":\"6.0.0\",\"resolved\":\"https://registry.npmmirror.com/postcss-merge-longhand/-/postcss-merge-longhand-6.0.0.tgz\",\"integrity\":\"sha512-4VSfd1lvGkLTLYcxFuISDtWUfFS4zXe0FpF149AyziftPFQIWxjvFSKhA4MIxMe4XM3yTDgQMbSNgzIVxChbIg==\",\"dev\":true,\"requires\":{\"postcss-value-parser\":\"^4.2.0\",\"stylehacks\":\"^6.0.0\"}},\"postcss-merge-rules\":{\"version\":\"6.0.1\",\"resolved\":\"https://registry.npmmirror.com/postcss-merge-rules/-/postcss-merge-rules-6.0.1.tgz\",\"integrity\":\"sha512-a4tlmJIQo9SCjcfiCcCMg/ZCEe0XTkl/xK0XHBs955GWg9xDX3NwP9pwZ78QUOWB8/0XCjZeJn98Dae0zg6AAw==\",\"dev\":true,\"requires\":{\"browserslist\":\"^4.21.4\",\"caniuse-api\":\"^3.0.0\",\"cssnano-utils\":\"^4.0.0\",\"postcss-selector-parser\":\"^6.0.5\"}},\"postcss-minify-font-values\":{\"version\":\"6.0.0\",\"resolved\":\"https://registry.npmmirror.com/postcss-minify-font-values/-/postcss-minify-font-values-6.0.0.tgz\",\"integrity\":\"sha512-zNRAVtyh5E8ndZEYXA4WS8ZYsAp798HiIQ1V2UF/C/munLp2r1UGHwf1+6JFu7hdEhJFN+W1WJQKBrtjhFgEnA==\",\"dev\":true,\"requires\":{\"postcss-value-parser\":\"^4.2.0\"}},\"postcss-minify-gradients\":{\"version\":\"6.0.0\",\"resolved\":\"https://registry.npmmirror.com/postcss-minify-gradients/-/postcss-minify-gradients-6.0.0.tgz\",\"integrity\":\"sha512-wO0F6YfVAR+K1xVxF53ueZJza3L+R3E6cp0VwuXJQejnNUH0DjcAFe3JEBeTY1dLwGa0NlDWueCA1VlEfiKgAA==\",\"dev\":true,\"requires\":{\"colord\":\"^2.9.1\",\"cssnano-utils\":\"^4.0.0\",\"postcss-value-parser\":\"^4.2.0\"}},\"postcss-minify-params\":{\"version\":\"6.0.0\",\"resolved\":\"https://registry.npmmirror.com/postcss-minify-params/-/postcss-minify-params-6.0.0.tgz\",\"integrity\":\"sha512-Fz/wMQDveiS0n5JPcvsMeyNXOIMrwF88n7196puSuQSWSa+/Ofc1gDOSY2xi8+A4PqB5dlYCKk/WfqKqsI+ReQ==\",\"dev\":true,\"requires\":{\"browserslist\":\"^4.21.4\",\"cssnano-utils\":\"^4.0.0\",\"postcss-value-parser\":\"^4.2.0\"}},\"postcss-minify-selectors\":{\"version\":\"6.0.0\",\"resolved\":\"https://registry.npmmirror.com/postcss-minify-selectors/-/postcss-minify-selectors-6.0.0.tgz\",\"integrity\":\"sha512-ec/q9JNCOC2CRDNnypipGfOhbYPuUkewGwLnbv6omue/PSASbHSU7s6uSQ0tcFRVv731oMIx8k0SP4ZX6be/0g==\",\"dev\":true,\"requires\":{\"postcss-selector-parser\":\"^6.0.5\"}},\"postcss-modules-extract-imports\":{\"version\":\"3.0.0\",\"resolved\":\"https://registry.npmmirror.com/postcss-modules-extract-imports/-/postcss-modules-extract-imports-3.0.0.tgz\",\"integrity\":\"sha512-bdHleFnP3kZ4NYDhuGlVK+CMrQ/pqUm8bx/oGL93K6gVwiclvX5x0n76fYMKuIGKzlABOy13zsvqjb0f92TEXw==\",\"dev\":true},\"postcss-modules-local-by-default\":{\"version\":\"4.0.0\",\"resolved\":\"https://registry.npmmirror.com/postcss-modules-local-by-default/-/postcss-modules-local-by-default-4.0.0.tgz\",\"integrity\":\"sha512-sT7ihtmGSF9yhm6ggikHdV0hlziDTX7oFoXtuVWeDd3hHObNkcHRo9V3yg7vCAY7cONyxJC/XXCmmiHHcvX7bQ==\",\"dev\":true,\"requires\":{\"icss-utils\":\"^5.0.0\",\"postcss-selector-parser\":\"^6.0.2\",\"postcss-value-parser\":\"^4.1.0\"}},\"postcss-modules-scope\":{\"version\":\"3.0.0\",\"resolved\":\"https://registry.npmmirror.com/postcss-modules-scope/-/postcss-modules-scope-3.0.0.tgz\",\"integrity\":\"sha512-hncihwFA2yPath8oZ15PZqvWGkWf+XUfQgUGamS4LqoP1anQLOsOJw0vr7J7IwLpoY9fatA2qiGUGmuZL0Iqlg==\",\"dev\":true,\"requires\":{\"postcss-selector-parser\":\"^6.0.4\"}},\"postcss-modules-values\":{\"version\":\"4.0.0\",\"resolved\":\"https://registry.npmmirror.com/postcss-modules-values/-/postcss-modules-values-4.0.0.tgz\",\"integrity\":\"sha512-RDxHkAiEGI78gS2ofyvCsu7iycRv7oqw5xMWn9iMoR0N/7mf9D50ecQqUo5BZ9Zh2vH4bCUR/ktCqbB9m8vJjQ==\",\"dev\":true,\"requires\":{\"icss-utils\":\"^5.0.0\"}},\"postcss-normalize-charset\":{\"version\":\"6.0.0\",\"resolved\":\"https://registry.npmmirror.com/postcss-normalize-charset/-/postcss-normalize-charset-6.0.0.tgz\",\"integrity\":\"sha512-cqundwChbu8yO/gSWkuFDmKrCZ2vJzDAocheT2JTd0sFNA4HMGoKMfbk2B+J0OmO0t5GUkiAkSM5yF2rSLUjgQ==\",\"dev\":true},\"postcss-normalize-display-values\":{\"version\":\"6.0.0\",\"resolved\":\"https://registry.npmmirror.com/postcss-normalize-display-values/-/postcss-normalize-display-values-6.0.0.tgz\",\"integrity\":\"sha512-Qyt5kMrvy7dJRO3OjF7zkotGfuYALETZE+4lk66sziWSPzlBEt7FrUshV6VLECkI4EN8Z863O6Nci4NXQGNzYw==\",\"dev\":true,\"requires\":{\"postcss-value-parser\":\"^4.2.0\"}},\"postcss-normalize-positions\":{\"version\":\"6.0.0\",\"resolved\":\"https://registry.npmmirror.com/postcss-normalize-positions/-/postcss-normalize-positions-6.0.0.tgz\",\"integrity\":\"sha512-mPCzhSV8+30FZyWhxi6UoVRYd3ZBJgTRly4hOkaSifo0H+pjDYcii/aVT4YE6QpOil15a5uiv6ftnY3rm0igPg==\",\"dev\":true,\"requires\":{\"postcss-value-parser\":\"^4.2.0\"}},\"postcss-normalize-repeat-style\":{\"version\":\"6.0.0\",\"resolved\":\"https://registry.npmmirror.com/postcss-normalize-repeat-style/-/postcss-normalize-repeat-style-6.0.0.tgz\",\"integrity\":\"sha512-50W5JWEBiOOAez2AKBh4kRFm2uhrT3O1Uwdxz7k24aKtbD83vqmcVG7zoIwo6xI2FZ/HDlbrCopXhLeTpQib1A==\",\"dev\":true,\"requires\":{\"postcss-value-parser\":\"^4.2.0\"}},\"postcss-normalize-string\":{\"version\":\"6.0.0\",\"resolved\":\"https://registry.npmmirror.com/postcss-normalize-string/-/postcss-normalize-string-6.0.0.tgz\",\"integrity\":\"sha512-KWkIB7TrPOiqb8ZZz6homet2KWKJwIlysF5ICPZrXAylGe2hzX/HSf4NTX2rRPJMAtlRsj/yfkrWGavFuB+c0w==\",\"dev\":true,\"requires\":{\"postcss-value-parser\":\"^4.2.0\"}},\"postcss-normalize-timing-functions\":{\"version\":\"6.0.0\",\"resolved\":\"https://registry.npmmirror.com/postcss-normalize-timing-functions/-/postcss-normalize-timing-functions-6.0.0.tgz\",\"integrity\":\"sha512-tpIXWciXBp5CiFs8sem90IWlw76FV4oi6QEWfQwyeREVwUy39VSeSqjAT7X0Qw650yAimYW5gkl2Gd871N5SQg==\",\"dev\":true,\"requires\":{\"postcss-value-parser\":\"^4.2.0\"}},\"postcss-normalize-unicode\":{\"version\":\"6.0.0\",\"resolved\":\"https://registry.npmmirror.com/postcss-normalize-unicode/-/postcss-normalize-unicode-6.0.0.tgz\",\"integrity\":\"sha512-ui5crYkb5ubEUDugDc786L/Me+DXp2dLg3fVJbqyAl0VPkAeALyAijF2zOsnZyaS1HyfPuMH0DwyY18VMFVNkg==\",\"dev\":true,\"requires\":{\"browserslist\":\"^4.21.4\",\"postcss-value-parser\":\"^4.2.0\"}},\"postcss-normalize-url\":{\"version\":\"6.0.0\",\"resolved\":\"https://registry.npmmirror.com/postcss-normalize-url/-/postcss-normalize-url-6.0.0.tgz\",\"integrity\":\"sha512-98mvh2QzIPbb02YDIrYvAg4OUzGH7s1ZgHlD3fIdTHLgPLRpv1ZTKJDnSAKr4Rt21ZQFzwhGMXxpXlfrUBKFHw==\",\"dev\":true,\"requires\":{\"postcss-value-parser\":\"^4.2.0\"}},\"postcss-normalize-whitespace\":{\"version\":\"6.0.0\",\"resolved\":\"https://registry.npmmirror.com/postcss-normalize-whitespace/-/postcss-normalize-whitespace-6.0.0.tgz\",\"integrity\":\"sha512-7cfE1AyLiK0+ZBG6FmLziJzqQCpTQY+8XjMhMAz8WSBSCsCNNUKujgIgjCAmDT3cJ+3zjTXFkoD15ZPsckArVw==\",\"dev\":true,\"requires\":{\"postcss-value-parser\":\"^4.2.0\"}},\"postcss-ordered-values\":{\"version\":\"6.0.0\",\"resolved\":\"https://registry.npmmirror.com/postcss-ordered-values/-/postcss-ordered-values-6.0.0.tgz\",\"integrity\":\"sha512-K36XzUDpvfG/nWkjs6d1hRBydeIxGpKS2+n+ywlKPzx1nMYDYpoGbcjhj5AwVYJK1qV2/SDoDEnHzlPD6s3nMg==\",\"dev\":true,\"requires\":{\"cssnano-utils\":\"^4.0.0\",\"postcss-value-parser\":\"^4.2.0\"}},\"postcss-reduce-initial\":{\"version\":\"6.0.0\",\"resolved\":\"https://registry.npmmirror.com/postcss-reduce-initial/-/postcss-reduce-initial-6.0.0.tgz\",\"integrity\":\"sha512-s2UOnidpVuXu6JiiI5U+fV2jamAw5YNA9Fdi/GRK0zLDLCfXmSGqQtzpUPtfN66RtCbb9fFHoyZdQaxOB3WxVA==\",\"dev\":true,\"requires\":{\"browserslist\":\"^4.21.4\",\"caniuse-api\":\"^3.0.0\"}},\"postcss-reduce-transforms\":{\"version\":\"6.0.0\",\"resolved\":\"https://registry.npmmirror.com/postcss-reduce-transforms/-/postcss-reduce-transforms-6.0.0.tgz\",\"integrity\":\"sha512-FQ9f6xM1homnuy1wLe9lP1wujzxnwt1EwiigtWwuyf8FsqqXUDUp2Ulxf9A5yjlUOTdCJO6lonYjg1mgqIIi2w==\",\"dev\":true,\"requires\":{\"postcss-value-parser\":\"^4.2.0\"}},\"postcss-selector-parser\":{\"version\":\"6.0.12\",\"resolved\":\"https://registry.npmmirror.com/postcss-selector-parser/-/postcss-selector-parser-6.0.12.tgz\",\"integrity\":\"sha512-NdxGCAZdRrwVI1sy59+Wzrh+pMMHxapGnpfenDVlMEXoOcvt4pGE0JLK9YY2F5dLxcFYA/YbVQKhcGU+FtSYQg==\",\"dev\":true,\"requires\":{\"cssesc\":\"^3.0.0\",\"util-deprecate\":\"^1.0.2\"}},\"postcss-svgo\":{\"version\":\"6.0.0\",\"resolved\":\"https://registry.npmmirror.com/postcss-svgo/-/postcss-svgo-6.0.0.tgz\",\"integrity\":\"sha512-r9zvj/wGAoAIodn84dR/kFqwhINp5YsJkLoujybWG59grR/IHx+uQ2Zo+IcOwM0jskfYX3R0mo+1Kip1VSNcvw==\",\"dev\":true,\"requires\":{\"postcss-value-parser\":\"^4.2.0\",\"svgo\":\"^3.0.2\"}},\"postcss-unique-selectors\":{\"version\":\"6.0.0\",\"resolved\":\"https://registry.npmmirror.com/postcss-unique-selectors/-/postcss-unique-selectors-6.0.0.tgz\",\"integrity\":\"sha512-EPQzpZNxOxP7777t73RQpZE5e9TrnCrkvp7AH7a0l89JmZiPnS82y216JowHXwpBCQitfyxrof9TK3rYbi7/Yw==\",\"dev\":true,\"requires\":{\"postcss-selector-parser\":\"^6.0.5\"}},\"postcss-value-parser\":{\"version\":\"4.2.0\",\"resolved\":\"https://registry.npmmirror.com/postcss-value-parser/-/postcss-value-parser-4.2.0.tgz\",\"integrity\":\"sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==\",\"dev\":true},\"pretty-error\":{\"version\":\"4.0.0\",\"resolved\":\"https://registry.npmmirror.com/pretty-error/-/pretty-error-4.0.0.tgz\",\"integrity\":\"sha512-AoJ5YMAcXKYxKhuJGdcvse+Voc6v1RgnsR3nWcYU7q4t6z0Q6T86sv5Zq8VIRbOWWFpvdGE83LtdSMNd+6Y0xw==\",\"dev\":true,\"requires\":{\"lodash\":\"^4.17.20\",\"renderkid\":\"^3.0.0\"}},\"process-nextick-args\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmmirror.com/process-nextick-args/-/process-nextick-args-2.0.1.tgz\",\"integrity\":\"sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==\",\"dev\":true},\"proxy-addr\":{\"version\":\"2.0.7\",\"resolved\":\"https://registry.npmmirror.com/proxy-addr/-/proxy-addr-2.0.7.tgz\",\"integrity\":\"sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==\",\"dev\":true,\"requires\":{\"forwarded\":\"0.2.0\",\"ipaddr.js\":\"1.9.1\"},\"dependencies\":{\"ipaddr.js\":{\"version\":\"1.9.1\",\"resolved\":\"https://registry.npmmirror.com/ipaddr.js/-/ipaddr.js-1.9.1.tgz\",\"integrity\":\"sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==\",\"dev\":true}}},\"punycode\":{\"version\":\"2.3.0\",\"resolved\":\"https://registry.npmmirror.com/punycode/-/punycode-2.3.0.tgz\",\"integrity\":\"sha512-rRV+zQD8tVFys26lAGR9WUuS4iUAngJScM+ZRSKtvl5tKeZ2t5bvdNFdNHBW9FWR4guGHlgmsZ1G7BSm2wTbuA==\",\"dev\":true},\"qs\":{\"version\":\"6.11.0\",\"resolved\":\"https://registry.npmmirror.com/qs/-/qs-6.11.0.tgz\",\"integrity\":\"sha512-MvjoMCJwEarSbUYk5O+nmoSzSutSsTwF85zcHPQ9OrlFoZOYIjaqBAJIqIXjptyD5vThxGq52Xu/MaJzRkIk4Q==\",\"dev\":true,\"requires\":{\"side-channel\":\"^1.0.4\"}},\"randombytes\":{\"version\":\"2.1.0\",\"resolved\":\"https://registry.npmmirror.com/randombytes/-/randombytes-2.1.0.tgz\",\"integrity\":\"sha512-vYl3iOX+4CKUWuxGi9Ukhie6fsqXqS9FE2Zaic4tNFD2N2QQaXOMFbuKK4QmDHC0JO6B1Zp41J0LpT0oR68amQ==\",\"dev\":true,\"requires\":{\"safe-buffer\":\"^5.1.0\"}},\"range-parser\":{\"version\":\"1.2.1\",\"resolved\":\"https://registry.npmmirror.com/range-parser/-/range-parser-1.2.1.tgz\",\"integrity\":\"sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==\",\"dev\":true},\"raw-body\":{\"version\":\"2.5.1\",\"resolved\":\"https://registry.npmmirror.com/raw-body/-/raw-body-2.5.1.tgz\",\"integrity\":\"sha512-qqJBtEyVgS0ZmPGdCFPWJ3FreoqvG4MVQln/kCgF7Olq95IbOp0/BWyMwbdtn4VTvkM8Y7khCQ2Xgk/tcrCXig==\",\"dev\":true,\"requires\":{\"bytes\":\"3.1.2\",\"http-errors\":\"2.0.0\",\"iconv-lite\":\"0.4.24\",\"unpipe\":\"1.0.0\"},\"dependencies\":{\"bytes\":{\"version\":\"3.1.2\",\"resolved\":\"https://registry.npmmirror.com/bytes/-/bytes-3.1.2.tgz\",\"integrity\":\"sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==\",\"dev\":true}}},\"readable-stream\":{\"version\":\"3.6.2\",\"resolved\":\"https://registry.npmmirror.com/readable-stream/-/readable-stream-3.6.2.tgz\",\"integrity\":\"sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==\",\"dev\":true,\"requires\":{\"inherits\":\"^2.0.3\",\"string_decoder\":\"^1.1.1\",\"util-deprecate\":\"^1.0.1\"}},\"readdirp\":{\"version\":\"3.6.0\",\"resolved\":\"https://registry.npmmirror.com/readdirp/-/readdirp-3.6.0.tgz\",\"integrity\":\"sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==\",\"dev\":true,\"requires\":{\"picomatch\":\"^2.2.1\"}},\"rechoir\":{\"version\":\"0.8.0\",\"resolved\":\"https://registry.npmmirror.com/rechoir/-/rechoir-0.8.0.tgz\",\"integrity\":\"sha512-/vxpCXddiX8NGfGO/mTafwjq4aFa/71pvamip0++IQk3zG8cbCj0fifNPrjjF1XMXUne91jL9OoxmdykoEtifQ==\",\"dev\":true,\"requires\":{\"resolve\":\"^1.20.0\"}},\"relateurl\":{\"version\":\"0.2.7\",\"resolved\":\"https://registry.npmmirror.com/relateurl/-/relateurl-0.2.7.tgz\",\"integrity\":\"sha512-G08Dxvm4iDN3MLM0EsP62EDV9IuhXPR6blNz6Utcp7zyV3tr4HVNINt6MpaRWbxoOHT3Q7YN2P+jaHX8vUbgog==\",\"dev\":true},\"renderkid\":{\"version\":\"3.0.0\",\"resolved\":\"https://registry.npmmirror.com/renderkid/-/renderkid-3.0.0.tgz\",\"integrity\":\"sha512-q/7VIQA8lmM1hF+jn+sFSPWGlMkSAeNYcPLmDQx2zzuiDfaLrOmumR8iaUKlenFgh0XRPIUeSPlH3A+AW3Z5pg==\",\"dev\":true,\"requires\":{\"css-select\":\"^4.1.3\",\"dom-converter\":\"^0.2.0\",\"htmlparser2\":\"^6.1.0\",\"lodash\":\"^4.17.21\",\"strip-ansi\":\"^6.0.1\"}},\"require-from-string\":{\"version\":\"2.0.2\",\"resolved\":\"https://registry.npmmirror.com/require-from-string/-/require-from-string-2.0.2.tgz\",\"integrity\":\"sha512-Xf0nWe6RseziFMu+Ap9biiUbmplq6S9/p+7w7YXP/JBHhrUDDUhwa+vANyubuqfZWTveU//DYVGsDG7RKL/vEw==\",\"dev\":true},\"requires-port\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/requires-port/-/requires-port-1.0.0.tgz\",\"integrity\":\"sha512-KigOCHcocU3XODJxsu8i/j8T9tzT4adHiecwORRQ0ZZFcp7ahwXuRU1m+yuO90C5ZUyGeGfocHDI14M3L3yDAQ==\",\"dev\":true},\"resolve\":{\"version\":\"1.22.2\",\"resolved\":\"https://registry.npmmirror.com/resolve/-/resolve-1.22.2.tgz\",\"integrity\":\"sha512-Sb+mjNHOULsBv818T40qSPeRiuWLyaGMa5ewydRLFimneixmVy2zdivRl+AF6jaYPC8ERxGDmFSiqui6SfPd+g==\",\"dev\":true,\"requires\":{\"is-core-module\":\"^2.11.0\",\"path-parse\":\"^1.0.7\",\"supports-preserve-symlinks-flag\":\"^1.0.0\"}},\"resolve-cwd\":{\"version\":\"3.0.0\",\"resolved\":\"https://registry.npmmirror.com/resolve-cwd/-/resolve-cwd-3.0.0.tgz\",\"integrity\":\"sha512-OrZaX2Mb+rJCpH/6CpSqt9xFVpN++x01XnN2ie9g6P5/3xelLAkXWVADpdz1IHD/KFfEXyE6V0U01OQ3UO2rEg==\",\"dev\":true,\"requires\":{\"resolve-from\":\"^5.0.0\"}},\"resolve-from\":{\"version\":\"5.0.0\",\"resolved\":\"https://registry.npmmirror.com/resolve-from/-/resolve-from-5.0.0.tgz\",\"integrity\":\"sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==\",\"dev\":true},\"retry\":{\"version\":\"0.13.1\",\"resolved\":\"https://registry.npmmirror.com/retry/-/retry-0.13.1.tgz\",\"integrity\":\"sha512-XQBQ3I8W1Cge0Seh+6gjj03LbmRFWuoszgK9ooCpwYIrhhoO80pfq4cUkU5DkknwfOfFteRwlZ56PYOGYyFWdg==\",\"dev\":true},\"rimraf\":{\"version\":\"2.7.1\",\"resolved\":\"https://registry.npmmirror.com/rimraf/-/rimraf-2.7.1.tgz\",\"integrity\":\"sha512-uWjbaKIK3T1OSVptzX7Nl6PvQ3qAGtKEtVRjRuazjfL3Bx5eI409VZSqgND+4UNnmzLVdPj9FqFJNPqBZFve4w==\",\"dev\":true,\"requires\":{\"glob\":\"^7.1.3\"}},\"safe-buffer\":{\"version\":\"5.2.1\",\"resolved\":\"https://registry.npmmirror.com/safe-buffer/-/safe-buffer-5.2.1.tgz\",\"integrity\":\"sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==\",\"dev\":true},\"safer-buffer\":{\"version\":\"2.1.2\",\"resolved\":\"https://registry.npmmirror.com/safer-buffer/-/safer-buffer-2.1.2.tgz\",\"integrity\":\"sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==\",\"dev\":true},\"sass\":{\"version\":\"1.32.8\",\"resolved\":\"https://registry.npmmirror.com/sass/-/sass-1.32.8.tgz\",\"integrity\":\"sha512-Sl6mIeGpzjIUZqvKnKETfMf0iDAswD9TNlv13A7aAF3XZlRPMq4VvJWBC2N2DXbp94MQVdNSFG6LfF/iOXrPHQ==\",\"dev\":true,\"requires\":{\"chokidar\":\">=2.0.0 = 1.4.0 < 2\"}},\"inherits\":{\"version\":\"2.0.3\",\"resolved\":\"https://registry.npmmirror.com/inherits/-/inherits-2.0.3.tgz\",\"integrity\":\"sha512-x00IRNXNy63jwGkJmzPigoySHbaqpNuzKbBOmzK+g2OdZpQ9w+sxCN+VSB3ja7IAge2OP2qpfxTjeNcyjmW1uw==\",\"dev\":true},\"setprototypeof\":{\"version\":\"1.1.0\",\"resolved\":\"https://registry.npmmirror.com/setprototypeof/-/setprototypeof-1.1.0.tgz\",\"integrity\":\"sha512-BvE/TwpZX4FXExxOxZyRGQQv651MSwmWKZGqvmPcRIjDqWub67kTKuIMx43cZZrS/cBBzwBcNDWoFxt2XEFIpQ==\",\"dev\":true},\"statuses\":{\"version\":\"1.5.0\",\"resolved\":\"https://registry.npmmirror.com/statuses/-/statuses-1.5.0.tgz\",\"integrity\":\"sha512-OpZ3zP+jT1PI7I8nemJX4AKmAX070ZkYPVWV/AaKTJl+tXCTGyVdC1a4SL8RUQYEwk/f34ZX8UTykN68FwrqAA==\",\"dev\":true}}},\"serve-static\":{\"version\":\"1.15.0\",\"resolved\":\"https://registry.npmmirror.com/serve-static/-/serve-static-1.15.0.tgz\",\"integrity\":\"sha512-XGuRDNjXUijsUL0vl6nSD7cwURuzEgglbOaFuZM9g3kwDXOWVTck0jLzjPzGD+TazWbboZYu52/9/XPdUgne9g==\",\"dev\":true,\"requires\":{\"encodeurl\":\"~1.0.2\",\"escape-html\":\"~1.0.3\",\"parseurl\":\"~1.3.3\",\"send\":\"0.18.0\"}},\"setprototypeof\":{\"version\":\"1.2.0\",\"resolved\":\"https://registry.npmmirror.com/setprototypeof/-/setprototypeof-1.2.0.tgz\",\"integrity\":\"sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==\",\"dev\":true},\"shallow-clone\":{\"version\":\"3.0.1\",\"resolved\":\"https://registry.npmmirror.com/shallow-clone/-/shallow-clone-3.0.1.tgz\",\"integrity\":\"sha512-/6KqX+GVUdqPuPPd2LxDDxzX6CAbjJehAAOKlNpqqUpAqPM6HeL8f+o3a+JsyGjn2lv0WY8UsTgUJjU9Ok55NA==\",\"dev\":true,\"requires\":{\"kind-of\":\"^6.0.2\"}},\"shebang-command\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmmirror.com/shebang-command/-/shebang-command-2.0.0.tgz\",\"integrity\":\"sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==\",\"dev\":true,\"requires\":{\"shebang-regex\":\"^3.0.0\"}},\"shebang-regex\":{\"version\":\"3.0.0\",\"resolved\":\"https://registry.npmmirror.com/shebang-regex/-/shebang-regex-3.0.0.tgz\",\"integrity\":\"sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==\",\"dev\":true},\"shell-quote\":{\"version\":\"1.8.1\",\"resolved\":\"https://registry.npmmirror.com/shell-quote/-/shell-quote-1.8.1.tgz\",\"integrity\":\"sha512-6j1W9l1iAs/4xYBI1SYOVZyFcCis9b4KCLQ8fgAGG07QvzaRLVVRQvAy85yNmmZSjYjg4MWh4gNvlPujU/5LpA==\",\"dev\":true},\"side-channel\":{\"version\":\"1.0.4\",\"resolved\":\"https://registry.npmmirror.com/side-channel/-/side-channel-1.0.4.tgz\",\"integrity\":\"sha512-q5XPytqFEIKHkGdiMIrY10mvLRvnQh42/+GoBlFW3b2LXLE2xxJpZFdm94we0BaoV3RwJyGqg5wS7epxTv0Zvw==\",\"dev\":true,\"requires\":{\"call-bind\":\"^1.0.0\",\"get-intrinsic\":\"^1.0.2\",\"object-inspect\":\"^1.9.0\"}},\"signal-exit\":{\"version\":\"3.0.7\",\"resolved\":\"https://registry.npmmirror.com/signal-exit/-/signal-exit-3.0.7.tgz\",\"integrity\":\"sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==\",\"dev\":true},\"sirv\":{\"version\":\"1.0.19\",\"resolved\":\"https://registry.npmmirror.com/sirv/-/sirv-1.0.19.tgz\",\"integrity\":\"sha512-JuLThK3TnZG1TAKDwNIqNq6QA2afLOCcm+iE8D1Kj3GA40pSPsxQjjJl0J8X3tsR7T+CP1GavpzLwYkgVLWrZQ==\",\"dev\":true,\"requires\":{\"@polka/url\":\"^1.0.0-next.20\",\"mrmime\":\"^1.0.0\",\"totalist\":\"^1.0.0\"}},\"sockjs\":{\"version\":\"0.3.24\",\"resolved\":\"https://registry.npmmirror.com/sockjs/-/sockjs-0.3.24.tgz\",\"integrity\":\"sha512-GJgLTZ7vYb/JtPSSZ10hsOYIvEYsjbNU+zPdIHcUaWVNUEPivzxku31865sSSud0Da0W4lEeOPlmw93zLQchuQ==\",\"dev\":true,\"requires\":{\"faye-websocket\":\"^0.11.3\",\"uuid\":\"^8.3.2\",\"websocket-driver\":\"^0.7.4\"}},\"source-map\":{\"version\":\"0.6.1\",\"resolved\":\"https://registry.npmmirror.com/source-map/-/source-map-0.6.1.tgz\",\"integrity\":\"sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==\",\"dev\":true},\"source-map-js\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/source-map-js/-/source-map-js-1.0.2.tgz\",\"integrity\":\"sha512-R0XvVJ9WusLiqTCEiGCmICCMplcCkIwwR11mOSD9CR5u+IXYdiseeEuXCVAjS54zqwkLcPNnmU4OeJ6tUrWhDw==\",\"dev\":true},\"source-map-support\":{\"version\":\"0.5.21\",\"resolved\":\"https://registry.npmmirror.com/source-map-support/-/source-map-support-0.5.21.tgz\",\"integrity\":\"sha512-uBHU3L3czsIyYXKX88fdrGovxdSCoTGDRZ6SYXtSRxLZUzHg5P/66Ht6uoUlHu9EZod+inXhKo3qQgwXUT/y1w==\",\"dev\":true,\"requires\":{\"buffer-from\":\"^1.0.0\",\"source-map\":\"^0.6.0\"}},\"spdy\":{\"version\":\"4.0.2\",\"resolved\":\"https://registry.npmmirror.com/spdy/-/spdy-4.0.2.tgz\",\"integrity\":\"sha512-r46gZQZQV+Kl9oItvl1JZZqJKGr+oEkB08A6BzkiR7593/7IbtuncXHd2YoYeTsG4157ZssMu9KYvUHLcjcDoA==\",\"dev\":true,\"requires\":{\"debug\":\"^4.1.0\",\"handle-thing\":\"^2.0.0\",\"http-deceiver\":\"^1.2.7\",\"select-hose\":\"^2.0.0\",\"spdy-transport\":\"^3.0.0\"},\"dependencies\":{\"debug\":{\"version\":\"4.3.4\",\"resolved\":\"https://registry.npmmirror.com/debug/-/debug-4.3.4.tgz\",\"integrity\":\"sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==\",\"dev\":true,\"requires\":{\"ms\":\"2.1.2\"}},\"ms\":{\"version\":\"2.1.2\",\"resolved\":\"https://registry.npmmirror.com/ms/-/ms-2.1.2.tgz\",\"integrity\":\"sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==\",\"dev\":true}}},\"spdy-transport\":{\"version\":\"3.0.0\",\"resolved\":\"https://registry.npmmirror.com/spdy-transport/-/spdy-transport-3.0.0.tgz\",\"integrity\":\"sha512-hsLVFE5SjA6TCisWeJXFKniGGOpBgMLmerfO2aCyCU5s7nJ/rpAepqmFifv/GCbSbueEeAJJnmSQ2rKC/g8Fcw==\",\"dev\":true,\"requires\":{\"debug\":\"^4.1.0\",\"detect-node\":\"^2.0.4\",\"hpack.js\":\"^2.1.6\",\"obuf\":\"^1.1.2\",\"readable-stream\":\"^3.0.6\",\"wbuf\":\"^1.7.3\"},\"dependencies\":{\"debug\":{\"version\":\"4.3.4\",\"resolved\":\"https://registry.npmmirror.com/debug/-/debug-4.3.4.tgz\",\"integrity\":\"sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==\",\"dev\":true,\"requires\":{\"ms\":\"2.1.2\"}},\"ms\":{\"version\":\"2.1.2\",\"resolved\":\"https://registry.npmmirror.com/ms/-/ms-2.1.2.tgz\",\"integrity\":\"sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==\",\"dev\":true}}},\"speed-measure-webpack-plugin\":{\"version\":\"1.5.0\",\"resolved\":\"https://registry.npmmirror.com/speed-measure-webpack-plugin/-/speed-measure-webpack-plugin-1.5.0.tgz\",\"integrity\":\"sha512-Re0wX5CtM6gW7bZA64ONOfEPEhwbiSF/vz6e2GvadjuaPrQcHTQdRGsD8+BE7iUOysXH8tIenkPCQBEcspXsNg==\",\"dev\":true,\"requires\":{\"chalk\":\"^4.1.0\"},\"dependencies\":{\"ansi-styles\":{\"version\":\"4.3.0\",\"resolved\":\"https://registry.npmmirror.com/ansi-styles/-/ansi-styles-4.3.0.tgz\",\"integrity\":\"sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==\",\"dev\":true,\"requires\":{\"color-convert\":\"^2.0.1\"}},\"chalk\":{\"version\":\"4.1.2\",\"resolved\":\"https://registry.npmmirror.com/chalk/-/chalk-4.1.2.tgz\",\"integrity\":\"sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==\",\"dev\":true,\"requires\":{\"ansi-styles\":\"^4.1.0\",\"supports-color\":\"^7.1.0\"}},\"color-convert\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmmirror.com/color-convert/-/color-convert-2.0.1.tgz\",\"integrity\":\"sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==\",\"dev\":true,\"requires\":{\"color-name\":\"~1.1.4\"}},\"color-name\":{\"version\":\"1.1.4\",\"resolved\":\"https://registry.npmmirror.com/color-name/-/color-name-1.1.4.tgz\",\"integrity\":\"sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==\",\"dev\":true},\"supports-color\":{\"version\":\"7.2.0\",\"resolved\":\"https://registry.npmmirror.com/supports-color/-/supports-color-7.2.0.tgz\",\"integrity\":\"sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==\",\"dev\":true,\"requires\":{\"has-flag\":\"^4.0.0\"}}}},\"statuses\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmmirror.com/statuses/-/statuses-2.0.1.tgz\",\"integrity\":\"sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==\",\"dev\":true},\"string_decoder\":{\"version\":\"1.1.1\",\"resolved\":\"https://registry.npmmirror.com/string_decoder/-/string_decoder-1.1.1.tgz\",\"integrity\":\"sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==\",\"dev\":true,\"requires\":{\"safe-buffer\":\"~5.1.0\"},\"dependencies\":{\"safe-buffer\":{\"version\":\"5.1.2\",\"resolved\":\"https://registry.npmmirror.com/safe-buffer/-/safe-buffer-5.1.2.tgz\",\"integrity\":\"sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==\",\"dev\":true}}},\"strip-ansi\":{\"version\":\"6.0.1\",\"resolved\":\"https://registry.npmmirror.com/strip-ansi/-/strip-ansi-6.0.1.tgz\",\"integrity\":\"sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==\",\"dev\":true,\"requires\":{\"ansi-regex\":\"^5.0.1\"}},\"strip-final-newline\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmmirror.com/strip-final-newline/-/strip-final-newline-2.0.0.tgz\",\"integrity\":\"sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA==\",\"dev\":true},\"style-loader\":{\"version\":\"3.3.2\",\"resolved\":\"https://registry.npmmirror.com/style-loader/-/style-loader-3.3.2.tgz\",\"integrity\":\"sha512-RHs/vcrKdQK8wZliteNK4NKzxvLBzpuHMqYmUVWeKa6MkaIQ97ZTOS0b+zapZhy6GcrgWnvWYCMHRirC3FsUmw==\",\"dev\":true},\"stylehacks\":{\"version\":\"6.0.0\",\"resolved\":\"https://registry.npmmirror.com/stylehacks/-/stylehacks-6.0.0.tgz\",\"integrity\":\"sha512-+UT589qhHPwz6mTlCLSt/vMNTJx8dopeJlZAlBMJPWA3ORqu6wmQY7FBXf+qD+FsqoBJODyqNxOUP3jdntFRdw==\",\"dev\":true,\"requires\":{\"browserslist\":\"^4.21.4\",\"postcss-selector-parser\":\"^6.0.4\"}},\"supports-color\":{\"version\":\"8.1.1\",\"resolved\":\"https://registry.npmmirror.com/supports-color/-/supports-color-8.1.1.tgz\",\"integrity\":\"sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==\",\"dev\":true,\"requires\":{\"has-flag\":\"^4.0.0\"}},\"supports-preserve-symlinks-flag\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz\",\"integrity\":\"sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==\",\"dev\":true},\"svgo\":{\"version\":\"3.0.2\",\"resolved\":\"https://registry.npmmirror.com/svgo/-/svgo-3.0.2.tgz\",\"integrity\":\"sha512-Z706C1U2pb1+JGP48fbazf3KxHrWOsLme6Rv7imFBn5EnuanDW1GPaA/P1/dvObE670JDePC3mnj0k0B7P0jjQ==\",\"dev\":true,\"requires\":{\"@trysound/sax\":\"0.2.0\",\"commander\":\"^7.2.0\",\"css-select\":\"^5.1.0\",\"css-tree\":\"^2.2.1\",\"csso\":\"^5.0.5\",\"picocolors\":\"^1.0.0\"},\"dependencies\":{\"commander\":{\"version\":\"7.2.0\",\"resolved\":\"https://registry.npmmirror.com/commander/-/commander-7.2.0.tgz\",\"integrity\":\"sha512-QrWXB+ZQSVPmIWIhtEO9H+gwHaMGYiF5ChvoJ+K9ZGHG/sVsa6yiesAD1GC/x46sET00Xlwo1u49RVVVzvcSkw==\",\"dev\":true},\"css-select\":{\"version\":\"5.1.0\",\"resolved\":\"https://registry.npmmirror.com/css-select/-/css-select-5.1.0.tgz\",\"integrity\":\"sha512-nwoRF1rvRRnnCqqY7updORDsuqKzqYJ28+oSMaJMMgOauh3fvwHqMS7EZpIPqK8GL+g9mKxF1vP/ZjSeNjEVHg==\",\"dev\":true,\"requires\":{\"boolbase\":\"^1.0.0\",\"css-what\":\"^6.1.0\",\"domhandler\":\"^5.0.2\",\"domutils\":\"^3.0.1\",\"nth-check\":\"^2.0.1\"}},\"dom-serializer\":{\"version\":\"2.0.0\",\"resolved\":\"https://registry.npmmirror.com/dom-serializer/-/dom-serializer-2.0.0.tgz\",\"integrity\":\"sha512-wIkAryiqt/nV5EQKqQpo3SToSOV9J0DnbJqwK7Wv/Trc92zIAYZ4FlMu+JPFW1DfGFt81ZTCGgDEabffXeLyJg==\",\"dev\":true,\"requires\":{\"domelementtype\":\"^2.3.0\",\"domhandler\":\"^5.0.2\",\"entities\":\"^4.2.0\"}},\"domhandler\":{\"version\":\"5.0.3\",\"resolved\":\"https://registry.npmmirror.com/domhandler/-/domhandler-5.0.3.tgz\",\"integrity\":\"sha512-cgwlv/1iFQiFnU96XXgROh8xTeetsnJiDsTc7TYCLFd9+/WNkIqPTxiM/8pSd8VIrhXGTf1Ny1q1hquVqDJB5w==\",\"dev\":true,\"requires\":{\"domelementtype\":\"^2.3.0\"}},\"domutils\":{\"version\":\"3.1.0\",\"resolved\":\"https://registry.npmmirror.com/domutils/-/domutils-3.1.0.tgz\",\"integrity\":\"sha512-H78uMmQtI2AhgDJjWeQmHwJJ2bLPD3GMmO7Zja/ZZh84wkm+4ut+IUnUdRa8uCGX88DiVx1j6FRe1XfxEgjEZA==\",\"dev\":true,\"requires\":{\"dom-serializer\":\"^2.0.0\",\"domelementtype\":\"^2.3.0\",\"domhandler\":\"^5.0.3\"}},\"entities\":{\"version\":\"4.5.0\",\"resolved\":\"https://registry.npmmirror.com/entities/-/entities-4.5.0.tgz\",\"integrity\":\"sha512-V0hjH4dGPh9Ao5p0MoRY6BVqtwCjhz6vI5LT8AJ55H+4g9/4vbHx1I54fS0XuclLhDHArPQCiMjDxjaL8fPxhw==\",\"dev\":true}}},\"tapable\":{\"version\":\"2.2.1\",\"resolved\":\"https://registry.npmmirror.com/tapable/-/tapable-2.2.1.tgz\",\"integrity\":\"sha512-GNzQvQTOIP6RyTfE2Qxb8ZVlNmw0n88vp1szwWRimP02mnTsx3Wtn5qRdqY9w2XduFNUgvOwhNnQsjwCp+kqaQ==\",\"dev\":true},\"terser\":{\"version\":\"5.17.3\",\"resolved\":\"https://registry.npmmirror.com/terser/-/terser-5.17.3.tgz\",\"integrity\":\"sha512-AudpAZKmZHkG9jueayypz4duuCFJMMNGRMwaPvQKWfxKedh8Z2x3OCoDqIIi1xx5+iwx1u6Au8XQcc9Lke65Yg==\",\"dev\":true,\"requires\":{\"@jridgewell/source-map\":\"^0.3.2\",\"acorn\":\"^8.5.0\",\"commander\":\"^2.20.0\",\"source-map-support\":\"~0.5.20\"}},\"terser-webpack-plugin\":{\"version\":\"5.3.8\",\"resolved\":\"https://registry.npmmirror.com/terser-webpack-plugin/-/terser-webpack-plugin-5.3.8.tgz\",\"integrity\":\"sha512-WiHL3ElchZMsK27P8uIUh4604IgJyAW47LVXGbEoB21DbQcZ+OuMpGjVYnEUaqcWM6dO8uS2qUbA7LSCWqvsbg==\",\"dev\":true,\"requires\":{\"@jridgewell/trace-mapping\":\"^0.3.17\",\"jest-worker\":\"^27.4.5\",\"schema-utils\":\"^3.1.1\",\"serialize-javascript\":\"^6.0.1\",\"terser\":\"^5.16.8\"}},\"thunky\":{\"version\":\"1.1.0\",\"resolved\":\"https://registry.npmmirror.com/thunky/-/thunky-1.1.0.tgz\",\"integrity\":\"sha512-eHY7nBftgThBqOyHGVN+l8gF0BucP09fMo0oO/Lb0w1OF80dJv+lDVpXG60WMQvkcxAkNybKsrEIE3ZtKGmPrA==\",\"dev\":true},\"to-regex-range\":{\"version\":\"5.0.1\",\"resolved\":\"https://registry.npmmirror.com/to-regex-range/-/to-regex-range-5.0.1.tgz\",\"integrity\":\"sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==\",\"dev\":true,\"requires\":{\"is-number\":\"^7.0.0\"}},\"toidentifier\":{\"version\":\"1.0.1\",\"resolved\":\"https://registry.npmmirror.com/toidentifier/-/toidentifier-1.0.1.tgz\",\"integrity\":\"sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==\",\"dev\":true},\"totalist\":{\"version\":\"1.1.0\",\"resolved\":\"https://registry.npmmirror.com/totalist/-/totalist-1.1.0.tgz\",\"integrity\":\"sha512-gduQwd1rOdDMGxFG1gEvhV88Oirdo2p+KjoYFU7k2g+i7n6AFFbDQ5kMPUsW0pNbfQsB/cwXvT1i4Bue0s9g5g==\",\"dev\":true},\"tslib\":{\"version\":\"2.5.0\",\"resolved\":\"https://registry.npmmirror.com/tslib/-/tslib-2.5.0.tgz\",\"integrity\":\"sha512-336iVw3rtn2BUK7ORdIAHTyxHGRIHVReokCR3XjbckJMK7ms8FysBfhLR8IXnAgy7T0PTPNBWKiH514FOW/WSg==\",\"dev\":true},\"type-is\":{\"version\":\"1.6.18\",\"resolved\":\"https://registry.npmmirror.com/type-is/-/type-is-1.6.18.tgz\",\"integrity\":\"sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==\",\"dev\":true,\"requires\":{\"media-typer\":\"0.3.0\",\"mime-types\":\"~2.1.24\"}},\"unpipe\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/unpipe/-/unpipe-1.0.0.tgz\",\"integrity\":\"sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==\",\"dev\":true},\"update-browserslist-db\":{\"version\":\"1.0.11\",\"resolved\":\"https://registry.npmmirror.com/update-browserslist-db/-/update-browserslist-db-1.0.11.tgz\",\"integrity\":\"sha512-dCwEFf0/oT85M1fHBg4F0jtLwJrutGoHSQXCh7u4o2t1drG+c0a9Flnqww6XUKSfQMPpJBRjU8d4RXB09qtvaA==\",\"dev\":true,\"requires\":{\"escalade\":\"^3.1.1\",\"picocolors\":\"^1.0.0\"}},\"uri-js\":{\"version\":\"4.4.1\",\"resolved\":\"https://registry.npmmirror.com/uri-js/-/uri-js-4.4.1.tgz\",\"integrity\":\"sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==\",\"dev\":true,\"requires\":{\"punycode\":\"^2.1.0\"}},\"util-deprecate\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/util-deprecate/-/util-deprecate-1.0.2.tgz\",\"integrity\":\"sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==\",\"dev\":true},\"utila\":{\"version\":\"0.4.0\",\"resolved\":\"https://registry.npmmirror.com/utila/-/utila-0.4.0.tgz\",\"integrity\":\"sha512-Z0DbgELS9/L/75wZbro8xAnT50pBVFQZ+hUEueGDU5FN51YSCYM+jdxsfCiHjwNP/4LCDD0i/graKpeBnOXKRA==\",\"dev\":true},\"utils-merge\":{\"version\":\"1.0.1\",\"resolved\":\"https://registry.npmmirror.com/utils-merge/-/utils-merge-1.0.1.tgz\",\"integrity\":\"sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==\",\"dev\":true},\"uuid\":{\"version\":\"8.3.2\",\"resolved\":\"https://registry.npmmirror.com/uuid/-/uuid-8.3.2.tgz\",\"integrity\":\"sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==\",\"dev\":true},\"vary\":{\"version\":\"1.1.2\",\"resolved\":\"https://registry.npmmirror.com/vary/-/vary-1.1.2.tgz\",\"integrity\":\"sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==\",\"dev\":true},\"watchpack\":{\"version\":\"2.4.0\",\"resolved\":\"https://registry.npmmirror.com/watchpack/-/watchpack-2.4.0.tgz\",\"integrity\":\"sha512-Lcvm7MGST/4fup+ifyKi2hjyIAwcdI4HRgtvTpIUxBRhB+RFtUh8XtDOxUfctVCnhVi+QQj49i91OyvzkJl6cg==\",\"dev\":true,\"requires\":{\"glob-to-regexp\":\"^0.4.1\",\"graceful-fs\":\"^4.1.2\"}},\"wbuf\":{\"version\":\"1.7.3\",\"resolved\":\"https://registry.npmmirror.com/wbuf/-/wbuf-1.7.3.tgz\",\"integrity\":\"sha512-O84QOnr0icsbFGLS0O3bI5FswxzRr8/gHwWkDlQFskhSPryQXvrTMxjxGP4+iWYoauLoBvfDpkrOauZ+0iZpDA==\",\"dev\":true,\"requires\":{\"minimalistic-assert\":\"^1.0.0\"}},\"webpack\":{\"version\":\"5.82.1\",\"resolved\":\"https://registry.npmmirror.com/webpack/-/webpack-5.82.1.tgz\",\"integrity\":\"sha512-C6uiGQJ+Gt4RyHXXYt+v9f+SN1v83x68URwgxNQ98cvH8kxiuywWGP4XeNZ1paOzZ63aY3cTciCEQJNFUljlLw==\",\"dev\":true,\"requires\":{\"@types/eslint-scope\":\"^3.7.3\",\"@types/estree\":\"^1.0.0\",\"@webassemblyjs/ast\":\"^1.11.5\",\"@webassemblyjs/wasm-edit\":\"^1.11.5\",\"@webassemblyjs/wasm-parser\":\"^1.11.5\",\"acorn\":\"^8.7.1\",\"acorn-import-assertions\":\"^1.7.6\",\"browserslist\":\"^4.14.5\",\"chrome-trace-event\":\"^1.0.2\",\"enhanced-resolve\":\"^5.14.0\",\"es-module-lexer\":\"^1.2.1\",\"eslint-scope\":\"5.1.1\",\"events\":\"^3.2.0\",\"glob-to-regexp\":\"^0.4.1\",\"graceful-fs\":\"^4.2.9\",\"json-parse-even-better-errors\":\"^2.3.1\",\"loader-runner\":\"^4.2.0\",\"mime-types\":\"^2.1.27\",\"neo-async\":\"^2.6.2\",\"schema-utils\":\"^3.1.2\",\"tapable\":\"^2.1.1\",\"terser-webpack-plugin\":\"^5.3.7\",\"watchpack\":\"^2.4.0\",\"webpack-sources\":\"^3.2.3\"}},\"webpack-bundle-analyzer\":{\"version\":\"4.9.0\",\"resolved\":\"https://registry.npmmirror.com/webpack-bundle-analyzer/-/webpack-bundle-analyzer-4.9.0.tgz\",\"integrity\":\"sha512-+bXGmO1LyiNx0i9enBu3H8mv42sj/BJWhZNFwjz92tVnBa9J3JMGo2an2IXlEleoDOPn/Hofl5hr/xCpObUDtw==\",\"dev\":true,\"requires\":{\"@discoveryjs/json-ext\":\"0.5.7\",\"acorn\":\"^8.0.4\",\"acorn-walk\":\"^8.0.0\",\"chalk\":\"^4.1.0\",\"commander\":\"^7.2.0\",\"gzip-size\":\"^6.0.0\",\"lodash\":\"^4.17.20\",\"opener\":\"^1.5.2\",\"sirv\":\"^1.0.7\",\"ws\":\"^7.3.1\"},\"dependencies\":{\"ansi-styles\":{\"version\":\"4.3.0\",\"resolved\":\"https://registry.npmmirror.com/ansi-styles/-/ansi-styles-4.3.0.tgz\",\"integrity\":\"sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==\",\"dev\":true,\"requires\":{\"color-convert\":\"^2.0.1\"}},\"chalk\":{\"version\":\"4.1.2\",\"resolved\":\"https://registry.npmmirror.com/chalk/-/chalk-4.1.2.tgz\",\"integrity\":\"sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==\",\"dev\":true,\"requires\":{\"ansi-styles\":\"^4.1.0\",\"supports-color\":\"^7.1.0\"}},\"color-convert\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmmirror.com/color-convert/-/color-convert-2.0.1.tgz\",\"integrity\":\"sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==\",\"dev\":true,\"requires\":{\"color-name\":\"~1.1.4\"}},\"color-name\":{\"version\":\"1.1.4\",\"resolved\":\"https://registry.npmmirror.com/color-name/-/color-name-1.1.4.tgz\",\"integrity\":\"sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==\",\"dev\":true},\"commander\":{\"version\":\"7.2.0\",\"resolved\":\"https://registry.npmmirror.com/commander/-/commander-7.2.0.tgz\",\"integrity\":\"sha512-QrWXB+ZQSVPmIWIhtEO9H+gwHaMGYiF5ChvoJ+K9ZGHG/sVsa6yiesAD1GC/x46sET00Xlwo1u49RVVVzvcSkw==\",\"dev\":true},\"supports-color\":{\"version\":\"7.2.0\",\"resolved\":\"https://registry.npmmirror.com/supports-color/-/supports-color-7.2.0.tgz\",\"integrity\":\"sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==\",\"dev\":true,\"requires\":{\"has-flag\":\"^4.0.0\"}},\"ws\":{\"version\":\"7.5.9\",\"resolved\":\"https://registry.npmmirror.com/ws/-/ws-7.5.9.tgz\",\"integrity\":\"sha512-F+P9Jil7UiSKSkppIiD94dN07AwvFixvLIj1Og1Rl9GGMuNipJnV9JzjD6XuqmAeiswGvUmNLjr5cFuXwNS77Q==\",\"dev\":true}}},\"webpack-cli\":{\"version\":\"5.1.1\",\"resolved\":\"https://registry.npmmirror.com/webpack-cli/-/webpack-cli-5.1.1.tgz\",\"integrity\":\"sha512-OLJwVMoXnXYH2ncNGU8gxVpUtm3ybvdioiTvHgUyBuyMLKiVvWy+QObzBsMtp5pH7qQoEuWgeEUQ/sU3ZJFzAw==\",\"dev\":true,\"requires\":{\"@discoveryjs/json-ext\":\"^0.5.0\",\"@webpack-cli/configtest\":\"^2.1.0\",\"@webpack-cli/info\":\"^2.0.1\",\"@webpack-cli/serve\":\"^2.0.4\",\"colorette\":\"^2.0.14\",\"commander\":\"^10.0.1\",\"cross-spawn\":\"^7.0.3\",\"envinfo\":\"^7.7.3\",\"fastest-levenshtein\":\"^1.0.12\",\"import-local\":\"^3.0.2\",\"interpret\":\"^3.1.1\",\"rechoir\":\"^0.8.0\",\"webpack-merge\":\"^5.7.3\"},\"dependencies\":{\"commander\":{\"version\":\"10.0.1\",\"resolved\":\"https://registry.npmmirror.com/commander/-/commander-10.0.1.tgz\",\"integrity\":\"sha512-y4Mg2tXshplEbSGzx7amzPwKKOCGuoSRP/CjEdwwk0FOGlUbq6lKuoyDZTNZkmxHdJtp54hdfY/JUrdL7Xfdug==\",\"dev\":true}}},\"webpack-dev-middleware\":{\"version\":\"5.3.3\",\"resolved\":\"https://registry.npmmirror.com/webpack-dev-middleware/-/webpack-dev-middleware-5.3.3.tgz\",\"integrity\":\"sha512-hj5CYrY0bZLB+eTO+x/j67Pkrquiy7kWepMHmUMoPsmcUaeEnQJqFzHJOyxgWlq746/wUuA64p9ta34Kyb01pA==\",\"dev\":true,\"requires\":{\"colorette\":\"^2.0.10\",\"memfs\":\"^3.4.3\",\"mime-types\":\"^2.1.31\",\"range-parser\":\"^1.2.1\",\"schema-utils\":\"^4.0.0\"},\"dependencies\":{\"ajv\":{\"version\":\"8.12.0\",\"resolved\":\"https://registry.npmmirror.com/ajv/-/ajv-8.12.0.tgz\",\"integrity\":\"sha512-sRu1kpcO9yLtYxBKvqfTeh9KzZEwO3STyX1HT+4CaDzC6HpTGYhIhPIzj9XuKU7KYDwnaeh5hcOwjy1QuJzBPA==\",\"dev\":true,\"requires\":{\"fast-deep-equal\":\"^3.1.1\",\"json-schema-traverse\":\"^1.0.0\",\"require-from-string\":\"^2.0.2\",\"uri-js\":\"^4.2.2\"}},\"ajv-keywords\":{\"version\":\"5.1.0\",\"resolved\":\"https://registry.npmmirror.com/ajv-keywords/-/ajv-keywords-5.1.0.tgz\",\"integrity\":\"sha512-YCS/JNFAUyr5vAuhk1DWm1CBxRHW9LbJ2ozWeemrIqpbsqKjHVxYPyi5GC0rjZIT5JxJ3virVTS8wk4i/Z+krw==\",\"dev\":true,\"requires\":{\"fast-deep-equal\":\"^3.1.3\"}},\"json-schema-traverse\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz\",\"integrity\":\"sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==\",\"dev\":true},\"schema-utils\":{\"version\":\"4.0.1\",\"resolved\":\"https://registry.npmmirror.com/schema-utils/-/schema-utils-4.0.1.tgz\",\"integrity\":\"sha512-lELhBAAly9NowEsX0yZBlw9ahZG+sK/1RJ21EpzdYHKEs13Vku3LJ+MIPhh4sMs0oCCeufZQEQbMekiA4vuVIQ==\",\"dev\":true,\"requires\":{\"@types/json-schema\":\"^7.0.9\",\"ajv\":\"^8.9.0\",\"ajv-formats\":\"^2.1.1\",\"ajv-keywords\":\"^5.1.0\"}}}},\"webpack-dev-server\":{\"version\":\"4.15.0\",\"resolved\":\"https://registry.npmmirror.com/webpack-dev-server/-/webpack-dev-server-4.15.0.tgz\",\"integrity\":\"sha512-HmNB5QeSl1KpulTBQ8UT4FPrByYyaLxpJoQ0+s7EvUrMc16m0ZS1sgb1XGqzmgCPk0c9y+aaXxn11tbLzuM7NQ==\",\"dev\":true,\"requires\":{\"@types/bonjour\":\"^3.5.9\",\"@types/connect-history-api-fallback\":\"^1.3.5\",\"@types/express\":\"^4.17.13\",\"@types/serve-index\":\"^1.9.1\",\"@types/serve-static\":\"^1.13.10\",\"@types/sockjs\":\"^0.3.33\",\"@types/ws\":\"^8.5.1\",\"ansi-html-community\":\"^0.0.8\",\"bonjour-service\":\"^1.0.11\",\"chokidar\":\"^3.5.3\",\"colorette\":\"^2.0.10\",\"compression\":\"^1.7.4\",\"connect-history-api-fallback\":\"^2.0.0\",\"default-gateway\":\"^6.0.3\",\"express\":\"^4.17.3\",\"graceful-fs\":\"^4.2.6\",\"html-entities\":\"^2.3.2\",\"http-proxy-middleware\":\"^2.0.3\",\"ipaddr.js\":\"^2.0.1\",\"launch-editor\":\"^2.6.0\",\"open\":\"^8.0.9\",\"p-retry\":\"^4.5.0\",\"rimraf\":\"^3.0.2\",\"schema-utils\":\"^4.0.0\",\"selfsigned\":\"^2.1.1\",\"serve-index\":\"^1.9.1\",\"sockjs\":\"^0.3.24\",\"spdy\":\"^4.0.2\",\"webpack-dev-middleware\":\"^5.3.1\",\"ws\":\"^8.13.0\"},\"dependencies\":{\"ajv\":{\"version\":\"8.12.0\",\"resolved\":\"https://registry.npmmirror.com/ajv/-/ajv-8.12.0.tgz\",\"integrity\":\"sha512-sRu1kpcO9yLtYxBKvqfTeh9KzZEwO3STyX1HT+4CaDzC6HpTGYhIhPIzj9XuKU7KYDwnaeh5hcOwjy1QuJzBPA==\",\"dev\":true,\"requires\":{\"fast-deep-equal\":\"^3.1.1\",\"json-schema-traverse\":\"^1.0.0\",\"require-from-string\":\"^2.0.2\",\"uri-js\":\"^4.2.2\"}},\"ajv-keywords\":{\"version\":\"5.1.0\",\"resolved\":\"https://registry.npmmirror.com/ajv-keywords/-/ajv-keywords-5.1.0.tgz\",\"integrity\":\"sha512-YCS/JNFAUyr5vAuhk1DWm1CBxRHW9LbJ2ozWeemrIqpbsqKjHVxYPyi5GC0rjZIT5JxJ3virVTS8wk4i/Z+krw==\",\"dev\":true,\"requires\":{\"fast-deep-equal\":\"^3.1.3\"}},\"json-schema-traverse\":{\"version\":\"1.0.0\",\"resolved\":\"https://registry.npmmirror.com/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz\",\"integrity\":\"sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==\",\"dev\":true},\"rimraf\":{\"version\":\"3.0.2\",\"resolved\":\"https://registry.npmmirror.com/rimraf/-/rimraf-3.0.2.tgz\",\"integrity\":\"sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==\",\"dev\":true,\"requires\":{\"glob\":\"^7.1.3\"}},\"schema-utils\":{\"version\":\"4.0.1\",\"resolved\":\"https://registry.npmmirror.com/schema-utils/-/schema-utils-4.0.1.tgz\",\"integrity\":\"sha512-lELhBAAly9NowEsX0yZBlw9ahZG+sK/1RJ21EpzdYHKEs13Vku3LJ+MIPhh4sMs0oCCeufZQEQbMekiA4vuVIQ==\",\"dev\":true,\"requires\":{\"@types/json-schema\":\"^7.0.9\",\"ajv\":\"^8.9.0\",\"ajv-formats\":\"^2.1.1\",\"ajv-keywords\":\"^5.1.0\"}}}},\"webpack-merge\":{\"version\":\"5.8.0\",\"resolved\":\"https://registry.npmmirror.com/webpack-merge/-/webpack-merge-5.8.0.tgz\",\"integrity\":\"sha512-/SaI7xY0831XwP6kzuwhKWVKDP9t1QY1h65lAFLbZqMPIuYcD9QAW4u9STIbU9kaJbPBB/geU/gLr1wDjOhQ+Q==\",\"dev\":true,\"requires\":{\"clone-deep\":\"^4.0.1\",\"wildcard\":\"^2.0.0\"}},\"webpack-sources\":{\"version\":\"3.2.3\",\"resolved\":\"https://registry.npmmirror.com/webpack-sources/-/webpack-sources-3.2.3.tgz\",\"integrity\":\"sha512-/DyMEOrDgLKKIG0fmvtz+4dUX/3Ghozwgm6iPp8KRhvn+eQf9+Q7GWxVNMk3+uCPWfdXYC4ExGBckIXdFEfH1w==\",\"dev\":true},\"websocket-driver\":{\"version\":\"0.7.4\",\"resolved\":\"https://registry.npmmirror.com/websocket-driver/-/websocket-driver-0.7.4.tgz\",\"integrity\":\"sha512-b17KeDIQVjvb0ssuSDF2cYXSg2iztliJ4B9WdsuB6J952qCPKmnVq4DyW5motImXHDC1cBT/1UezrJVsKw5zjg==\",\"dev\":true,\"requires\":{\"http-parser-js\":\">=0.5.1\",\"safe-buffer\":\">=5.1.0\",\"websocket-extensions\":\">=0.1.1\"}},\"websocket-extensions\":{\"version\":\"0.1.4\",\"resolved\":\"https://registry.npmmirror.com/websocket-extensions/-/websocket-extensions-0.1.4.tgz\",\"integrity\":\"sha512-OqedPIGOfsDlo31UNwYbCFMSaO9m9G/0faIHj5/dZFDMFqPTcx6UwqyOy3COEaEOg/9VsGIpdqn62W5KhoKSpg==\",\"dev\":true},\"which\":{\"version\":\"2.0.2\",\"resolved\":\"https://registry.npmmirror.com/which/-/which-2.0.2.tgz\",\"integrity\":\"sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==\",\"dev\":true,\"requires\":{\"isexe\":\"^2.0.0\"}},\"wildcard\":{\"version\":\"2.0.1\",\"resolved\":\"https://registry.npmmirror.com/wildcard/-/wildcard-2.0.1.tgz\",\"integrity\":\"sha512-CC1bOL87PIWSBhDcTrdeLo6eGT7mCFtrg0uIJtqJUFyK+eJnzl8A1niH56uu7KMa5XFrtiV+AQuHO3n7DsHnLQ==\",\"dev\":true},\"wrappy\":{\"version\":\"1.0.2\",\"resolved\":\"https://registry.npmmirror.com/wrappy/-/wrappy-1.0.2.tgz\",\"integrity\":\"sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==\",\"dev\":true},\"ws\":{\"version\":\"8.13.0\",\"resolved\":\"https://registry.npmmirror.com/ws/-/ws-8.13.0.tgz\",\"integrity\":\"sha512-x9vcZYTrFPC7aSIbj7sRCYo7L/Xb8Iy+pW0ng0wt2vCJv7M9HOMy0UoN3rr+IFC7hb7vXoqS+P9ktyLLLhO+LA==\",\"dev\":true},\"yallist\":{\"version\":\"4.0.0\",\"resolved\":\"https://registry.npmmirror.com/yallist/-/yallist-4.0.0.tgz\",\"integrity\":\"sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==\",\"dev\":true},\"yaml\":{\"version\":\"1.10.2\",\"resolved\":\"https://registry.npmmirror.com/yaml/-/yaml-1.10.2.tgz\",\"integrity\":\"sha512-r3vXyErRCYJ7wg28yvBY5VSoAF8ZvlcW9/BwUzEtUsjvX/DKs24dIkuwjtuprwJJHsbyUbLApepYTR1BN4uHrg==\",\"dev\":true}}}"},{"title":"","date":"2024-06-11T08:52:17.370Z","updated":"2024-06-11T08:52:17.370Z","comments":false,"path":"demo/2023面试准备/demo/Vue2/vue@2.7.14.js","permalink":"http://yoursite.com/demo/2023%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/demo/Vue2/vue@2.7.14.js","excerpt":"","text":"/*! * Vue.js v2.7.14 * (c) 2014-2022 Evan You * Released under the MIT License. */ (function (global, factory) { typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Vue = factory()); })(this, (function () { 'use strict'; var emptyObject = Object.freeze({}); var isArray = Array.isArray; // These helpers produce better VM code in JS engines due to their // explicitness and function inlining. function isUndef(v) { return v === undefined || v === null; } function isDef(v) { return v !== undefined && v !== null; } function isTrue(v) { return v === true; } function isFalse(v) { return v === false; } /** * Check if value is primitive. */ function isPrimitive(value) { return (typeof value === 'string' || typeof value === 'number' || // $flow-disable-line typeof value === 'symbol' || typeof value === 'boolean'); } function isFunction(value) { return typeof value === 'function'; } /** * Quick object check - this is primarily used to tell * objects from primitive values when we know the value * is a JSON-compliant type. */ function isObject(obj) { return obj !== null && typeof obj === 'object'; } /** * Get the raw type string of a value, e.g., [object Object]. */ var _toString = Object.prototype.toString; function toRawType(value) { return _toString.call(value).slice(8, -1); } /** * Strict object type check. Only returns true * for plain JavaScript objects. */ function isPlainObject(obj) { return _toString.call(obj) === '[object Object]'; } function isRegExp(v) { return _toString.call(v) === '[object RegExp]'; } /** * Check if val is a valid array index. */ function isValidArrayIndex(val) { var n = parseFloat(String(val)); return n >= 0 && Math.floor(n) === n && isFinite(val); } function isPromise(val) { return (isDef(val) && typeof val.then === 'function' && typeof val.catch === 'function'); } /** * Convert a value to a string that is actually rendered. */ function toString(val) { return val == null ? '' : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString) ? JSON.stringify(val, null, 2) : String(val); } /** * Convert an input value to a number for persistence. * If the conversion fails, return original string. */ function toNumber(val) { var n = parseFloat(val); return isNaN(n) ? val : n; } /** * Make a map and return a function for checking if a key * is in that map. */ function makeMap(str, expectsLowerCase) { var map = Object.create(null); var list = str.split(','); for (var i = 0; i < list.length; i++) { map[list[i]] = true; } return expectsLowerCase ? function (val) { return map[val.toLowerCase()]; } : function (val) { return map[val]; }; } /** * Check if a tag is a built-in tag. */ var isBuiltInTag = makeMap('slot,component', true); /** * Check if an attribute is a reserved attribute. */ var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is'); /** * Remove an item from an array. */ function remove$2(arr, item) { var len = arr.length; if (len) { // fast path for the only / last item if (item === arr[len - 1]) { arr.length = len - 1; return; } var index = arr.indexOf(item); if (index > -1) { return arr.splice(index, 1); } } } /** * Check whether an object has the property. */ var hasOwnProperty = Object.prototype.hasOwnProperty; function hasOwn(obj, key) { return hasOwnProperty.call(obj, key); } /** * Create a cached version of a pure function. */ function cached(fn) { var cache = Object.create(null); return function cachedFn(str) { var hit = cache[str]; return hit || (cache[str] = fn(str)); }; } /** * Camelize a hyphen-delimited string. */ var camelizeRE = /-(\\w)/g; var camelize = cached(function (str) { return str.replace(camelizeRE, function (_, c) { return (c ? c.toUpperCase() : ''); }); }); /** * Capitalize a string. */ var capitalize = cached(function (str) { return str.charAt(0).toUpperCase() + str.slice(1); }); /** * Hyphenate a camelCase string. */ var hyphenateRE = /\\B([A-Z])/g; var hyphenate = cached(function (str) { return str.replace(hyphenateRE, '-$1').toLowerCase(); }); /** * Simple bind polyfill for environments that do not support it, * e.g., PhantomJS 1.x. Technically, we don't need this anymore * since native bind is now performant enough in most browsers. * But removing it would mean breaking code that was able to run in * PhantomJS 1.x, so this must be kept for backward compatibility. */ /* istanbul ignore next */ function polyfillBind(fn, ctx) { function boundFn(a) { var l = arguments.length; return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx); } boundFn._length = fn.length; return boundFn; } function nativeBind(fn, ctx) { return fn.bind(ctx); } // @ts-expect-error bind cannot be `undefined` var bind$1 = Function.prototype.bind ? nativeBind : polyfillBind; /** * Convert an Array-like object to a real Array. */ function toArray(list, start) { start = start || 0; var i = list.length - start; var ret = new Array(i); while (i--) { ret[i] = list[i + start]; } return ret; } /** * Mix properties into target object. */ function extend(to, _from) { for (var key in _from) { to[key] = _from[key]; } return to; } /** * Merge an Array of Objects into a single Object. */ function toObject(arr) { var res = {}; for (var i = 0; i < arr.length; i++) { if (arr[i]) { extend(res, arr[i]); } } return res; } /* eslint-disable no-unused-vars */ /** * Perform no operation. * Stubbing args to make Flow happy without leaving useless transpiled code * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/). */ function noop(a, b, c) { } /** * Always return false. */ var no = function (a, b, c) { return false; }; /* eslint-enable no-unused-vars */ /** * Return the same value. */ var identity = function (_) { return _; }; /** * Generate a string containing static keys from compiler modules. */ function genStaticKeys$1(modules) { return modules .reduce(function (keys, m) { return keys.concat(m.staticKeys || []); }, []) .join(','); } /** * Check if two values are loosely equal - that is, * if they are plain objects, do they have the same shape? */ function looseEqual(a, b) { if (a === b) return true; var isObjectA = isObject(a); var isObjectB = isObject(b); if (isObjectA && isObjectB) { try { var isArrayA = Array.isArray(a); var isArrayB = Array.isArray(b); if (isArrayA && isArrayB) { return (a.length === b.length && a.every(function (e, i) { return looseEqual(e, b[i]); })); } else if (a instanceof Date && b instanceof Date) { return a.getTime() === b.getTime(); } else if (!isArrayA && !isArrayB) { var keysA = Object.keys(a); var keysB = Object.keys(b); return (keysA.length === keysB.length && keysA.every(function (key) { return looseEqual(a[key], b[key]); })); } else { /* istanbul ignore next */ return false; } } catch (e) { /* istanbul ignore next */ return false; } } else if (!isObjectA && !isObjectB) { return String(a) === String(b); } else { return false; } } /** * Return the first index at which a loosely equal value can be * found in the array (if value is a plain object, the array must * contain an object of the same shape), or -1 if it is not present. */ function looseIndexOf(arr, val) { for (var i = 0; i < arr.length; i++) { if (looseEqual(arr[i], val)) return i; } return -1; } /** * Ensure a function is called only once. */ function once(fn) { var called = false; return function () { if (!called) { called = true; fn.apply(this, arguments); } }; } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is#polyfill function hasChanged(x, y) { if (x === y) { return x === 0 && 1 / x !== 1 / y; } else { return x === x || y === y; } } var SSR_ATTR = 'data-server-rendered'; var ASSET_TYPES = ['component', 'directive', 'filter']; var LIFECYCLE_HOOKS = [ 'beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeDestroy', 'destroyed', 'activated', 'deactivated', 'errorCaptured', 'serverPrefetch', 'renderTracked', 'renderTriggered' ]; var config = { /** * Option merge strategies (used in core/util/options) */ // $flow-disable-line optionMergeStrategies: Object.create(null), /** * Whether to suppress warnings. */ silent: false, /** * Show production mode tip message on boot? */ productionTip: true, /** * Whether to enable devtools */ devtools: true, /** * Whether to record perf */ performance: false, /** * Error handler for watcher errors */ errorHandler: null, /** * Warn handler for watcher warns */ warnHandler: null, /** * Ignore certain custom elements */ ignoredElements: [], /** * Custom user key aliases for v-on */ // $flow-disable-line keyCodes: Object.create(null), /** * Check if a tag is reserved so that it cannot be registered as a * component. This is platform-dependent and may be overwritten. */ isReservedTag: no, /** * Check if an attribute is reserved so that it cannot be used as a component * prop. This is platform-dependent and may be overwritten. */ isReservedAttr: no, /** * Check if a tag is an unknown element. * Platform-dependent. */ isUnknownElement: no, /** * Get the namespace of an element */ getTagNamespace: noop, /** * Parse the real tag name for the specific platform. */ parsePlatformTagName: identity, /** * Check if an attribute must be bound using property, e.g. value * Platform-dependent. */ mustUseProp: no, /** * Perform updates asynchronously. Intended to be used by Vue Test Utils * This will significantly reduce performance if set to false. */ async: true, /** * Exposed for legacy reasons */ _lifecycleHooks: LIFECYCLE_HOOKS }; /** * unicode letters used for parsing html tags, component names and property paths. * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname * skipping \\u10000-\\uEFFFF due to it freezing up PhantomJS */ var unicodeRegExp = /a-zA-Z\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD/; /** * Check if a string starts with $ or _ */ function isReserved(str) { var c = (str + '').charCodeAt(0); return c === 0x24 || c === 0x5f; } /** * Define a property. */ function def(obj, key, val, enumerable) { Object.defineProperty(obj, key, { value: val, enumerable: !!enumerable, writable: true, configurable: true }); } /** * Parse simple path. */ var bailRE = new RegExp(\"[^\".concat(unicodeRegExp.source, \".$_\\\\d]\")); function parsePath(path) { if (bailRE.test(path)) { return; } var segments = path.split('.'); return function (obj) { for (var i = 0; i < segments.length; i++) { if (!obj) return; obj = obj[segments[i]]; } return obj; }; } // can we use __proto__? var hasProto = '__proto__' in {}; // Browser environment sniffing var inBrowser = typeof window !== 'undefined'; var UA = inBrowser && window.navigator.userAgent.toLowerCase(); var isIE = UA && /msie|trident/.test(UA); var isIE9 = UA && UA.indexOf('msie 9.0') > 0; var isEdge = UA && UA.indexOf('edge/') > 0; UA && UA.indexOf('android') > 0; var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA); UA && /chrome\\/\\d+/.test(UA) && !isEdge; UA && /phantomjs/.test(UA); var isFF = UA && UA.match(/firefox\\/(\\d+)/); // Firefox has a \"watch\" function on Object.prototype... // @ts-expect-error firebox support var nativeWatch = {}.watch; var supportsPassive = false; if (inBrowser) { try { var opts = {}; Object.defineProperty(opts, 'passive', { get: function () { /* istanbul ignore next */ supportsPassive = true; } }); // https://github.com/facebook/flow/issues/285 window.addEventListener('test-passive', null, opts); } catch (e) { } } // this needs to be lazy-evaled because vue may be required before // vue-server-renderer can set VUE_ENV var _isServer; var isServerRendering = function () { if (_isServer === undefined) { /* istanbul ignore if */ if (!inBrowser && typeof global !== 'undefined') { // detect presence of vue-server-renderer and avoid // Webpack shimming the process _isServer = global['process'] && global['process'].env.VUE_ENV === 'server'; } else { _isServer = false; } } return _isServer; }; // detect devtools var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__; /* istanbul ignore next */ function isNative(Ctor) { return typeof Ctor === 'function' && /native code/.test(Ctor.toString()); } var hasSymbol = typeof Symbol !== 'undefined' && isNative(Symbol) && typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys); var _Set; // $flow-disable-line /* istanbul ignore if */ if (typeof Set !== 'undefined' && isNative(Set)) { // use native Set when available. _Set = Set; } else { // a non-standard Set polyfill that only works with primitive keys. _Set = /** @class */ (function () { function Set() { this.set = Object.create(null); } Set.prototype.has = function (key) { return this.set[key] === true; }; Set.prototype.add = function (key) { this.set[key] = true; }; Set.prototype.clear = function () { this.set = Object.create(null); }; return Set; }()); } var currentInstance = null; /** * This is exposed for compatibility with v3 (e.g. some functions in VueUse * relies on it). Do not use this internally, just use `currentInstance`. * * @internal this function needs manual type declaration because it relies * on previously manually authored types from Vue 2 */ function getCurrentInstance() { return currentInstance && { proxy: currentInstance }; } /** * @internal */ function setCurrentInstance(vm) { if (vm === void 0) { vm = null; } if (!vm) currentInstance && currentInstance._scope.off(); currentInstance = vm; vm && vm._scope.on(); } /** * @internal */ var VNode = /** @class */ (function () { function VNode(tag, data, children, text, elm, context, componentOptions, asyncFactory) { this.tag = tag; this.data = data; this.children = children; this.text = text; this.elm = elm; this.ns = undefined; this.context = context; this.fnContext = undefined; this.fnOptions = undefined; this.fnScopeId = undefined; this.key = data && data.key; this.componentOptions = componentOptions; this.componentInstance = undefined; this.parent = undefined; this.raw = false; this.isStatic = false; this.isRootInsert = true; this.isComment = false; this.isCloned = false; this.isOnce = false; this.asyncFactory = asyncFactory; this.asyncMeta = undefined; this.isAsyncPlaceholder = false; } Object.defineProperty(VNode.prototype, \"child\", { // DEPRECATED: alias for componentInstance for backwards compat. /* istanbul ignore next */ get: function () { return this.componentInstance; }, enumerable: false, configurable: true }); return VNode; }()); var createEmptyVNode = function (text) { if (text === void 0) { text = ''; } var node = new VNode(); node.text = text; node.isComment = true; return node; }; function createTextVNode(val) { return new VNode(undefined, undefined, undefined, String(val)); } // optimized shallow clone // used for static nodes and slot nodes because they may be reused across // multiple renders, cloning them avoids errors when DOM manipulations rely // on their elm reference. function cloneVNode(vnode) { var cloned = new VNode(vnode.tag, vnode.data, // #7975 // clone children array to avoid mutating original in case of cloning // a child. vnode.children && vnode.children.slice(), vnode.text, vnode.elm, vnode.context, vnode.componentOptions, vnode.asyncFactory); cloned.ns = vnode.ns; cloned.isStatic = vnode.isStatic; cloned.key = vnode.key; cloned.isComment = vnode.isComment; cloned.fnContext = vnode.fnContext; cloned.fnOptions = vnode.fnOptions; cloned.fnScopeId = vnode.fnScopeId; cloned.asyncMeta = vnode.asyncMeta; cloned.isCloned = true; return cloned; } /* not type checking this file because flow doesn't play well with Proxy */ var initProxy; { var allowedGlobals_1 = makeMap('Infinity,undefined,NaN,isFinite,isNaN,' + 'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' + 'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,' + 'require' // for Webpack/Browserify ); var warnNonPresent_1 = function (target, key) { warn$2(\"Property or method \\\"\".concat(key, \"\\\" is not defined on the instance but \") + 'referenced during render. Make sure that this property is reactive, ' + 'either in the data option, or for class-based components, by ' + 'initializing the property. ' + 'See: https://v2.vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.', target); }; var warnReservedPrefix_1 = function (target, key) { warn$2(\"Property \\\"\".concat(key, \"\\\" must be accessed with \\\"$data.\").concat(key, \"\\\" because \") + 'properties starting with \"$\" or \"_\" are not proxied in the Vue instance to ' + 'prevent conflicts with Vue internals. ' + 'See: https://v2.vuejs.org/v2/api/#data', target); }; var hasProxy_1 = typeof Proxy !== 'undefined' && isNative(Proxy); if (hasProxy_1) { var isBuiltInModifier_1 = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact'); config.keyCodes = new Proxy(config.keyCodes, { set: function (target, key, value) { if (isBuiltInModifier_1(key)) { warn$2(\"Avoid overwriting built-in modifier in config.keyCodes: .\".concat(key)); return false; } else { target[key] = value; return true; } } }); } var hasHandler_1 = { has: function (target, key) { var has = key in target; var isAllowed = allowedGlobals_1(key) || (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data)); if (!has && !isAllowed) { if (key in target.$data) warnReservedPrefix_1(target, key); else warnNonPresent_1(target, key); } return has || !isAllowed; } }; var getHandler_1 = { get: function (target, key) { if (typeof key === 'string' && !(key in target)) { if (key in target.$data) warnReservedPrefix_1(target, key); else warnNonPresent_1(target, key); } return target[key]; } }; initProxy = function initProxy(vm) { if (hasProxy_1) { // determine which proxy handler to use var options = vm.$options; var handlers = options.render && options.render._withStripped ? getHandler_1 : hasHandler_1; vm._renderProxy = new Proxy(vm, handlers); } else { vm._renderProxy = vm; } }; } /****************************************************************************** Copyright (c) Microsoft Corporation. Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. ***************************************************************************** */ var __assign = function() { __assign = Object.assign || function __assign(t) { for (var s, i = 1, n = arguments.length; i < n; i++) { s = arguments[i]; for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p]; } return t; }; return __assign.apply(this, arguments); }; var uid$2 = 0; var pendingCleanupDeps = []; var cleanupDeps = function () { for (var i = 0; i < pendingCleanupDeps.length; i++) { var dep = pendingCleanupDeps[i]; dep.subs = dep.subs.filter(function (s) { return s; }); dep._pending = false; } pendingCleanupDeps.length = 0; }; /** * A dep is an observable that can have multiple * directives subscribing to it. * @internal */ var Dep = /** @class */ (function () { function Dep() { // pending subs cleanup this._pending = false; this.id = uid$2++; this.subs = []; } Dep.prototype.addSub = function (sub) { this.subs.push(sub); }; Dep.prototype.removeSub = function (sub) { // #12696 deps with massive amount of subscribers are extremely slow to // clean up in Chromium // to workaround this, we unset the sub for now, and clear them on // next scheduler flush. this.subs[this.subs.indexOf(sub)] = null; if (!this._pending) { this._pending = true; pendingCleanupDeps.push(this); } }; Dep.prototype.depend = function (info) { if (Dep.target) { Dep.target.addDep(this); if (info && Dep.target.onTrack) { Dep.target.onTrack(__assign({ effect: Dep.target }, info)); } } }; Dep.prototype.notify = function (info) { // stabilize the subscriber list first var subs = this.subs.filter(function (s) { return s; }); if (!config.async) { // subs aren't sorted in scheduler if not running async // we need to sort them now to make sure they fire in correct // order subs.sort(function (a, b) { return a.id - b.id; }); } for (var i = 0, l = subs.length; i < l; i++) { var sub = subs[i]; if (info) { sub.onTrigger && sub.onTrigger(__assign({ effect: subs[i] }, info)); } sub.update(); } }; return Dep; }()); // The current target watcher being evaluated. // This is globally unique because only one watcher // can be evaluated at a time. Dep.target = null; var targetStack = []; function pushTarget(target) { targetStack.push(target); Dep.target = target; } function popTarget() { targetStack.pop(); Dep.target = targetStack[targetStack.length - 1]; } /* * not type checking this file because flow doesn't play well with * dynamically accessing methods on Array prototype */ var arrayProto = Array.prototype; var arrayMethods = Object.create(arrayProto); var methodsToPatch = [ 'push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse' ]; /** * Intercept mutating methods and emit events */ methodsToPatch.forEach(function (method) { // cache original method var original = arrayProto[method]; def(arrayMethods, method, function mutator() { var args = []; for (var _i = 0; _i < arguments.length; _i++) { args[_i] = arguments[_i]; } var result = original.apply(this, args); var ob = this.__ob__; var inserted; switch (method) { case 'push': case 'unshift': inserted = args; break; case 'splice': inserted = args.slice(2); break; } if (inserted) ob.observeArray(inserted); // notify change { ob.dep.notify({ type: \"array mutation\" /* TriggerOpTypes.ARRAY_MUTATION */, target: this, key: method }); } return result; }); }); var arrayKeys = Object.getOwnPropertyNames(arrayMethods); var NO_INIITIAL_VALUE = {}; /** * In some cases we may want to disable observation inside a component's * update computation. */ var shouldObserve = true; function toggleObserving(value) { shouldObserve = value; } // ssr mock dep var mockDep = { notify: noop, depend: noop, addSub: noop, removeSub: noop }; /** * Observer class that is attached to each observed * object. Once attached, the observer converts the target * object's property keys into getter/setters that * collect dependencies and dispatch updates. */ var Observer = /** @class */ (function () { function Observer(value, shallow, mock) { if (shallow === void 0) { shallow = false; } if (mock === void 0) { mock = false; } this.value = value; this.shallow = shallow; this.mock = mock; // this.value = value this.dep = mock ? mockDep : new Dep(); this.vmCount = 0; def(value, '__ob__', this); if (isArray(value)) { if (!mock) { if (hasProto) { value.__proto__ = arrayMethods; /* eslint-enable no-proto */ } else { for (var i = 0, l = arrayKeys.length; i < l; i++) { var key = arrayKeys[i]; def(value, key, arrayMethods[key]); } } } if (!shallow) { this.observeArray(value); } } else { /** * Walk through all properties and convert them into * getter/setters. This method should only be called when * value type is Object. */ var keys = Object.keys(value); for (var i = 0; i < keys.length; i++) { var key = keys[i]; defineReactive(value, key, NO_INIITIAL_VALUE, undefined, shallow, mock); } } } /** * Observe a list of Array items. */ Observer.prototype.observeArray = function (value) { for (var i = 0, l = value.length; i < l; i++) { observe(value[i], false, this.mock); } }; return Observer; }()); // helpers /** * Attempt to create an observer instance for a value, * returns the new observer if successfully observed, * or the existing observer if the value already has one. */ function observe(value, shallow, ssrMockReactivity) { if (value && hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) { return value.__ob__; } if (shouldObserve && (ssrMockReactivity || !isServerRendering()) && (isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value.__v_skip /* ReactiveFlags.SKIP */ && !isRef(value) && !(value instanceof VNode)) { return new Observer(value, shallow, ssrMockReactivity); } } /** * Define a reactive property on an Object. */ function defineReactive(obj, key, val, customSetter, shallow, mock) { var dep = new Dep(); var property = Object.getOwnPropertyDescriptor(obj, key); if (property && property.configurable === false) { return; } // cater for pre-defined getter/setters var getter = property && property.get; var setter = property && property.set; if ((!getter || setter) && (val === NO_INIITIAL_VALUE || arguments.length === 2)) { val = obj[key]; } var childOb = !shallow && observe(val, false, mock); Object.defineProperty(obj, key, { enumerable: true, configurable: true, get: function reactiveGetter() { var value = getter ? getter.call(obj) : val; if (Dep.target) { { dep.depend({ target: obj, type: \"get\" /* TrackOpTypes.GET */, key: key }); } if (childOb) { childOb.dep.depend(); if (isArray(value)) { dependArray(value); } } } return isRef(value) && !shallow ? value.value : value; }, set: function reactiveSetter(newVal) { var value = getter ? getter.call(obj) : val; if (!hasChanged(value, newVal)) { return; } if (customSetter) { customSetter(); } if (setter) { setter.call(obj, newVal); } else if (getter) { // #7981: for accessor properties without setter return; } else if (!shallow && isRef(value) && !isRef(newVal)) { value.value = newVal; return; } else { val = newVal; } childOb = !shallow && observe(newVal, false, mock); { dep.notify({ type: \"set\" /* TriggerOpTypes.SET */, target: obj, key: key, newValue: newVal, oldValue: value }); } } }); return dep; } function set(target, key, val) { if ((isUndef(target) || isPrimitive(target))) { warn$2(\"Cannot set reactive property on undefined, null, or primitive value: \".concat(target)); } if (isReadonly(target)) { warn$2(\"Set operation on key \\\"\".concat(key, \"\\\" failed: target is readonly.\")); return; } var ob = target.__ob__; if (isArray(target) && isValidArrayIndex(key)) { target.length = Math.max(target.length, key); target.splice(key, 1, val); // when mocking for SSR, array methods are not hijacked if (ob && !ob.shallow && ob.mock) { observe(val, false, true); } return val; } if (key in target && !(key in Object.prototype)) { target[key] = val; return val; } if (target._isVue || (ob && ob.vmCount)) { warn$2('Avoid adding reactive properties to a Vue instance or its root $data ' + 'at runtime - declare it upfront in the data option.'); return val; } if (!ob) { target[key] = val; return val; } defineReactive(ob.value, key, val, undefined, ob.shallow, ob.mock); { ob.dep.notify({ type: \"add\" /* TriggerOpTypes.ADD */, target: target, key: key, newValue: val, oldValue: undefined }); } return val; } function del(target, key) { if ((isUndef(target) || isPrimitive(target))) { warn$2(\"Cannot delete reactive property on undefined, null, or primitive value: \".concat(target)); } if (isArray(target) && isValidArrayIndex(key)) { target.splice(key, 1); return; } var ob = target.__ob__; if (target._isVue || (ob && ob.vmCount)) { warn$2('Avoid deleting properties on a Vue instance or its root $data ' + '- just set it to null.'); return; } if (isReadonly(target)) { warn$2(\"Delete operation on key \\\"\".concat(key, \"\\\" failed: target is readonly.\")); return; } if (!hasOwn(target, key)) { return; } delete target[key]; if (!ob) { return; } { ob.dep.notify({ type: \"delete\" /* TriggerOpTypes.DELETE */, target: target, key: key }); } } /** * Collect dependencies on array elements when the array is touched, since * we cannot intercept array element access like property getters. */ function dependArray(value) { for (var e = void 0, i = 0, l = value.length; i < l; i++) { e = value[i]; if (e && e.__ob__) { e.__ob__.dep.depend(); } if (isArray(e)) { dependArray(e); } } } function reactive(target) { makeReactive(target, false); return target; } /** * Return a shallowly-reactive copy of the original object, where only the root * level properties are reactive. It also does not auto-unwrap refs (even at the * root level). */ function shallowReactive(target) { makeReactive(target, true); def(target, \"__v_isShallow\" /* ReactiveFlags.IS_SHALLOW */, true); return target; } function makeReactive(target, shallow) { // if trying to observe a readonly proxy, return the readonly version. if (!isReadonly(target)) { { if (isArray(target)) { warn$2(\"Avoid using Array as root value for \".concat(shallow ? \"shallowReactive()\" : \"reactive()\", \" as it cannot be tracked in watch() or watchEffect(). Use \").concat(shallow ? \"shallowRef()\" : \"ref()\", \" instead. This is a Vue-2-only limitation.\")); } var existingOb = target && target.__ob__; if (existingOb && existingOb.shallow !== shallow) { warn$2(\"Target is already a \".concat(existingOb.shallow ? \"\" : \"non-\", \"shallow reactive object, and cannot be converted to \").concat(shallow ? \"\" : \"non-\", \"shallow.\")); } } var ob = observe(target, shallow, isServerRendering() /* ssr mock reactivity */); if (!ob) { if (target == null || isPrimitive(target)) { warn$2(\"value cannot be made reactive: \".concat(String(target))); } if (isCollectionType(target)) { warn$2(\"Vue 2 does not support reactive collection types such as Map or Set.\"); } } } } function isReactive(value) { if (isReadonly(value)) { return isReactive(value[\"__v_raw\" /* ReactiveFlags.RAW */]); } return !!(value && value.__ob__); } function isShallow(value) { return !!(value && value.__v_isShallow); } function isReadonly(value) { return !!(value && value.__v_isReadonly); } function isProxy(value) { return isReactive(value) || isReadonly(value); } function toRaw(observed) { var raw = observed && observed[\"__v_raw\" /* ReactiveFlags.RAW */]; return raw ? toRaw(raw) : observed; } function markRaw(value) { // non-extensible objects won't be observed anyway if (Object.isExtensible(value)) { def(value, \"__v_skip\" /* ReactiveFlags.SKIP */, true); } return value; } /** * @internal */ function isCollectionType(value) { var type = toRawType(value); return (type === 'Map' || type === 'WeakMap' || type === 'Set' || type === 'WeakSet'); } /** * @internal */ var RefFlag = \"__v_isRef\"; function isRef(r) { return !!(r && r.__v_isRef === true); } function ref$1(value) { return createRef(value, false); } function shallowRef(value) { return createRef(value, true); } function createRef(rawValue, shallow) { if (isRef(rawValue)) { return rawValue; } var ref = {}; def(ref, RefFlag, true); def(ref, \"__v_isShallow\" /* ReactiveFlags.IS_SHALLOW */, shallow); def(ref, 'dep', defineReactive(ref, 'value', rawValue, null, shallow, isServerRendering())); return ref; } function triggerRef(ref) { if (!ref.dep) { warn$2(\"received object is not a triggerable ref.\"); } { ref.dep && ref.dep.notify({ type: \"set\" /* TriggerOpTypes.SET */, target: ref, key: 'value' }); } } function unref(ref) { return isRef(ref) ? ref.value : ref; } function proxyRefs(objectWithRefs) { if (isReactive(objectWithRefs)) { return objectWithRefs; } var proxy = {}; var keys = Object.keys(objectWithRefs); for (var i = 0; i < keys.length; i++) { proxyWithRefUnwrap(proxy, objectWithRefs, keys[i]); } return proxy; } function proxyWithRefUnwrap(target, source, key) { Object.defineProperty(target, key, { enumerable: true, configurable: true, get: function () { var val = source[key]; if (isRef(val)) { return val.value; } else { var ob = val && val.__ob__; if (ob) ob.dep.depend(); return val; } }, set: function (value) { var oldValue = source[key]; if (isRef(oldValue) && !isRef(value)) { oldValue.value = value; } else { source[key] = value; } } }); } function customRef(factory) { var dep = new Dep(); var _a = factory(function () { { dep.depend({ target: ref, type: \"get\" /* TrackOpTypes.GET */, key: 'value' }); } }, function () { { dep.notify({ target: ref, type: \"set\" /* TriggerOpTypes.SET */, key: 'value' }); } }), get = _a.get, set = _a.set; var ref = { get value() { return get(); }, set value(newVal) { set(newVal); } }; def(ref, RefFlag, true); return ref; } function toRefs(object) { if (!isReactive(object)) { warn$2(\"toRefs() expects a reactive object but received a plain one.\"); } var ret = isArray(object) ? new Array(object.length) : {}; for (var key in object) { ret[key] = toRef(object, key); } return ret; } function toRef(object, key, defaultValue) { var val = object[key]; if (isRef(val)) { return val; } var ref = { get value() { var val = object[key]; return val === undefined ? defaultValue : val; }, set value(newVal) { object[key] = newVal; } }; def(ref, RefFlag, true); return ref; } var rawToReadonlyFlag = \"__v_rawToReadonly\"; var rawToShallowReadonlyFlag = \"__v_rawToShallowReadonly\"; function readonly(target) { return createReadonly(target, false); } function createReadonly(target, shallow) { if (!isPlainObject(target)) { { if (isArray(target)) { warn$2(\"Vue 2 does not support readonly arrays.\"); } else if (isCollectionType(target)) { warn$2(\"Vue 2 does not support readonly collection types such as Map or Set.\"); } else { warn$2(\"value cannot be made readonly: \".concat(typeof target)); } } return target; } if (!Object.isExtensible(target)) { warn$2(\"Vue 2 does not support creating readonly proxy for non-extensible object.\"); } // already a readonly object if (isReadonly(target)) { return target; } // already has a readonly proxy var existingFlag = shallow ? rawToShallowReadonlyFlag : rawToReadonlyFlag; var existingProxy = target[existingFlag]; if (existingProxy) { return existingProxy; } var proxy = Object.create(Object.getPrototypeOf(target)); def(target, existingFlag, proxy); def(proxy, \"__v_isReadonly\" /* ReactiveFlags.IS_READONLY */, true); def(proxy, \"__v_raw\" /* ReactiveFlags.RAW */, target); if (isRef(target)) { def(proxy, RefFlag, true); } if (shallow || isShallow(target)) { def(proxy, \"__v_isShallow\" /* ReactiveFlags.IS_SHALLOW */, true); } var keys = Object.keys(target); for (var i = 0; i < keys.length; i++) { defineReadonlyProperty(proxy, target, keys[i], shallow); } return proxy; } function defineReadonlyProperty(proxy, target, key, shallow) { Object.defineProperty(proxy, key, { enumerable: true, configurable: true, get: function () { var val = target[key]; return shallow || !isPlainObject(val) ? val : readonly(val); }, set: function () { warn$2(\"Set operation on key \\\"\".concat(key, \"\\\" failed: target is readonly.\")); } }); } /** * Returns a reactive-copy of the original object, where only the root level * properties are readonly, and does NOT unwrap refs nor recursively convert * returned properties. * This is used for creating the props proxy object for stateful components. */ function shallowReadonly(target) { return createReadonly(target, true); } function computed(getterOrOptions, debugOptions) { var getter; var setter; var onlyGetter = isFunction(getterOrOptions); if (onlyGetter) { getter = getterOrOptions; setter = function () { warn$2('Write operation failed: computed value is readonly'); } ; } else { getter = getterOrOptions.get; setter = getterOrOptions.set; } var watcher = isServerRendering() ? null : new Watcher(currentInstance, getter, noop, { lazy: true }); if (watcher && debugOptions) { watcher.onTrack = debugOptions.onTrack; watcher.onTrigger = debugOptions.onTrigger; } var ref = { // some libs rely on the presence effect for checking computed refs // from normal refs, but the implementation doesn't matter effect: watcher, get value() { if (watcher) { if (watcher.dirty) { watcher.evaluate(); } if (Dep.target) { if (Dep.target.onTrack) { Dep.target.onTrack({ effect: Dep.target, target: ref, type: \"get\" /* TrackOpTypes.GET */, key: 'value' }); } watcher.depend(); } return watcher.value; } else { return getter(); } }, set value(newVal) { setter(newVal); } }; def(ref, RefFlag, true); def(ref, \"__v_isReadonly\" /* ReactiveFlags.IS_READONLY */, onlyGetter); return ref; } var mark; var measure; { var perf_1 = inBrowser && window.performance; /* istanbul ignore if */ if (perf_1 && // @ts-ignore perf_1.mark && // @ts-ignore perf_1.measure && // @ts-ignore perf_1.clearMarks && // @ts-ignore perf_1.clearMeasures) { mark = function (tag) { return perf_1.mark(tag); }; measure = function (name, startTag, endTag) { perf_1.measure(name, startTag, endTag); perf_1.clearMarks(startTag); perf_1.clearMarks(endTag); // perf.clearMeasures(name) }; } } var normalizeEvent = cached(function (name) { var passive = name.charAt(0) === '&'; name = passive ? name.slice(1) : name; var once = name.charAt(0) === '~'; // Prefixed last, checked first name = once ? name.slice(1) : name; var capture = name.charAt(0) === '!'; name = capture ? name.slice(1) : name; return { name: name, once: once, capture: capture, passive: passive }; }); function createFnInvoker(fns, vm) { function invoker() { var fns = invoker.fns; if (isArray(fns)) { var cloned = fns.slice(); for (var i = 0; i < cloned.length; i++) { invokeWithErrorHandling(cloned[i], null, arguments, vm, \"v-on handler\"); } } else { // return handler return value for single handlers return invokeWithErrorHandling(fns, null, arguments, vm, \"v-on handler\"); } } invoker.fns = fns; return invoker; } function updateListeners(on, oldOn, add, remove, createOnceHandler, vm) { var name, cur, old, event; for (name in on) { cur = on[name]; old = oldOn[name]; event = normalizeEvent(name); if (isUndef(cur)) { warn$2(\"Invalid handler for event \\\"\".concat(event.name, \"\\\": got \") + String(cur), vm); } else if (isUndef(old)) { if (isUndef(cur.fns)) { cur = on[name] = createFnInvoker(cur, vm); } if (isTrue(event.once)) { cur = on[name] = createOnceHandler(event.name, cur, event.capture); } add(event.name, cur, event.capture, event.passive, event.params); } else if (cur !== old) { old.fns = cur; on[name] = old; } } for (name in oldOn) { if (isUndef(on[name])) { event = normalizeEvent(name); remove(event.name, oldOn[name], event.capture); } } } function mergeVNodeHook(def, hookKey, hook) { if (def instanceof VNode) { def = def.data.hook || (def.data.hook = {}); } var invoker; var oldHook = def[hookKey]; function wrappedHook() { hook.apply(this, arguments); // important: remove merged hook to ensure it's called only once // and prevent memory leak remove$2(invoker.fns, wrappedHook); } if (isUndef(oldHook)) { // no existing hook invoker = createFnInvoker([wrappedHook]); } else { /* istanbul ignore if */ if (isDef(oldHook.fns) && isTrue(oldHook.merged)) { // already a merged invoker invoker = oldHook; invoker.fns.push(wrappedHook); } else { // existing plain hook invoker = createFnInvoker([oldHook, wrappedHook]); } } invoker.merged = true; def[hookKey] = invoker; } function extractPropsFromVNodeData(data, Ctor, tag) { // we are only extracting raw values here. // validation and default values are handled in the child // component itself. var propOptions = Ctor.options.props; if (isUndef(propOptions)) { return; } var res = {}; var attrs = data.attrs, props = data.props; if (isDef(attrs) || isDef(props)) { for (var key in propOptions) { var altKey = hyphenate(key); { var keyInLowerCase = key.toLowerCase(); if (key !== keyInLowerCase && attrs && hasOwn(attrs, keyInLowerCase)) { tip(\"Prop \\\"\".concat(keyInLowerCase, \"\\\" is passed to component \") + \"\".concat(formatComponentName( // @ts-expect-error tag is string tag || Ctor), \", but the declared prop name is\") + \" \\\"\".concat(key, \"\\\". \") + \"Note that HTML attributes are case-insensitive and camelCased \" + \"props need to use their kebab-case equivalents when using in-DOM \" + \"templates. You should probably use \\\"\".concat(altKey, \"\\\" instead of \\\"\").concat(key, \"\\\".\")); } } checkProp(res, props, key, altKey, true) || checkProp(res, attrs, key, altKey, false); } } return res; } function checkProp(res, hash, key, altKey, preserve) { if (isDef(hash)) { if (hasOwn(hash, key)) { res[key] = hash[key]; if (!preserve) { delete hash[key]; } return true; } else if (hasOwn(hash, altKey)) { res[key] = hash[altKey]; if (!preserve) { delete hash[altKey]; } return true; } } return false; } // The template compiler attempts to minimize the need for normalization by // statically analyzing the template at compile time. // // For plain HTML markup, normalization can be completely skipped because the // generated render function is guaranteed to return Array. There are // two cases where extra normalization is needed: // 1. When the children contains components - because a functional component // may return an Array instead of a single root. In this case, just a simple // normalization is needed - if any child is an Array, we flatten the whole // thing with Array.prototype.concat. It is guaranteed to be only 1-level deep // because functional components already normalize their own children. function simpleNormalizeChildren(children) { for (var i = 0; i < children.length; i++) { if (isArray(children[i])) { return Array.prototype.concat.apply([], children); } } return children; } // 2. When the children contains constructs that always generated nested Arrays, // e.g. , , v-for, or when the children is provided by user // with hand-written render functions / JSX. In such cases a full normalization // is needed to cater to all possible types of children values. function normalizeChildren(children) { return isPrimitive(children) ? [createTextVNode(children)] : isArray(children) ? normalizeArrayChildren(children) : undefined; } function isTextNode(node) { return isDef(node) && isDef(node.text) && isFalse(node.isComment); } function normalizeArrayChildren(children, nestedIndex) { var res = []; var i, c, lastIndex, last; for (i = 0; i < children.length; i++) { c = children[i]; if (isUndef(c) || typeof c === 'boolean') continue; lastIndex = res.length - 1; last = res[lastIndex]; // nested if (isArray(c)) { if (c.length > 0) { c = normalizeArrayChildren(c, \"\".concat(nestedIndex || '', \"_\").concat(i)); // merge adjacent text nodes if (isTextNode(c[0]) && isTextNode(last)) { res[lastIndex] = createTextVNode(last.text + c[0].text); c.shift(); } res.push.apply(res, c); } } else if (isPrimitive(c)) { if (isTextNode(last)) { // merge adjacent text nodes // this is necessary for SSR hydration because text nodes are // essentially merged when rendered to HTML strings res[lastIndex] = createTextVNode(last.text + c); } else if (c !== '') { // convert primitive to vnode res.push(createTextVNode(c)); } } else { if (isTextNode(c) && isTextNode(last)) { // merge adjacent text nodes res[lastIndex] = createTextVNode(last.text + c.text); } else { // default key for nested array children (likely generated by v-for) if (isTrue(children._isVList) && isDef(c.tag) && isUndef(c.key) && isDef(nestedIndex)) { c.key = \"__vlist\".concat(nestedIndex, \"_\").concat(i, \"__\"); } res.push(c); } } } return res; } var SIMPLE_NORMALIZE = 1; var ALWAYS_NORMALIZE = 2; // wrapper function for providing a more flexible interface // without getting yelled at by flow function createElement$1(context, tag, data, children, normalizationType, alwaysNormalize) { if (isArray(data) || isPrimitive(data)) { normalizationType = children; children = data; data = undefined; } if (isTrue(alwaysNormalize)) { normalizationType = ALWAYS_NORMALIZE; } return _createElement(context, tag, data, children, normalizationType); } function _createElement(context, tag, data, children, normalizationType) { if (isDef(data) && isDef(data.__ob__)) { warn$2(\"Avoid using observed data object as vnode data: \".concat(JSON.stringify(data), \"\\n\") + 'Always create fresh vnode data objects in each render!', context); return createEmptyVNode(); } // object syntax in v-bind if (isDef(data) && isDef(data.is)) { tag = data.is; } if (!tag) { // in case of component :is set to falsy value return createEmptyVNode(); } // warn against non-primitive key if (isDef(data) && isDef(data.key) && !isPrimitive(data.key)) { warn$2('Avoid using non-primitive value as key, ' + 'use string/number value instead.', context); } // support single function children as default scoped slot if (isArray(children) && isFunction(children[0])) { data = data || {}; data.scopedSlots = { default: children[0] }; children.length = 0; } if (normalizationType === ALWAYS_NORMALIZE) { children = normalizeChildren(children); } else if (normalizationType === SIMPLE_NORMALIZE) { children = simpleNormalizeChildren(children); } var vnode, ns; if (typeof tag === 'string') { var Ctor = void 0; ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag); if (config.isReservedTag(tag)) { // platform built-in elements if (isDef(data) && isDef(data.nativeOn) && data.tag !== 'component') { warn$2(\"The .native modifier for v-on is only valid on components but it was used on .\"), context); } vnode = new VNode(config.parsePlatformTagName(tag), data, children, undefined, undefined, context); } else if ((!data || !data.pre) && isDef((Ctor = resolveAsset(context.$options, 'components', tag)))) { // component vnode = createComponent(Ctor, data, context, children, tag); } else { // unknown or unlisted namespaced elements // check at runtime because it may get assigned a namespace when its // parent normalizes children vnode = new VNode(tag, data, children, undefined, undefined, context); } } else { // direct component options / constructor vnode = createComponent(tag, data, context, children); } if (isArray(vnode)) { return vnode; } else if (isDef(vnode)) { if (isDef(ns)) applyNS(vnode, ns); if (isDef(data)) registerDeepBindings(data); return vnode; } else { return createEmptyVNode(); } } function applyNS(vnode, ns, force) { vnode.ns = ns; if (vnode.tag === 'foreignObject') { // use default namespace inside foreignObject ns = undefined; force = true; } if (isDef(vnode.children)) { for (var i = 0, l = vnode.children.length; i < l; i++) { var child = vnode.children[i]; if (isDef(child.tag) && (isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) { applyNS(child, ns, force); } } } } // ref #5318 // necessary to ensure parent re-render when deep bindings like :style and // :class are used on slot nodes function registerDeepBindings(data) { if (isObject(data.style)) { traverse(data.style); } if (isObject(data.class)) { traverse(data.class); } } /** * Runtime helper for rendering v-for lists. */ function renderList(val, render) { var ret = null, i, l, keys, key; if (isArray(val) || typeof val === 'string') { ret = new Array(val.length); for (i = 0, l = val.length; i < l; i++) { ret[i] = render(val[i], i); } } else if (typeof val === 'number') { ret = new Array(val); for (i = 0; i < val; i++) { ret[i] = render(i + 1, i); } } else if (isObject(val)) { if (hasSymbol && val[Symbol.iterator]) { ret = []; var iterator = val[Symbol.iterator](); var result = iterator.next(); while (!result.done) { ret.push(render(result.value, ret.length)); result = iterator.next(); } } else { keys = Object.keys(val); ret = new Array(keys.length); for (i = 0, l = keys.length; i < l; i++) { key = keys[i]; ret[i] = render(val[key], key, i); } } } if (!isDef(ret)) { ret = []; } ret._isVList = true; return ret; } /** * Runtime helper for rendering */ function renderSlot(name, fallbackRender, props, bindObject) { var scopedSlotFn = this.$scopedSlots[name]; var nodes; if (scopedSlotFn) { // scoped slot props = props || {}; if (bindObject) { if (!isObject(bindObject)) { warn$2('slot v-bind without argument expects an Object', this); } props = extend(extend({}, bindObject), props); } nodes = scopedSlotFn(props) || (isFunction(fallbackRender) ? fallbackRender() : fallbackRender); } else { nodes = this.$slots[name] || (isFunction(fallbackRender) ? fallbackRender() : fallbackRender); } var target = props && props.slot; if (target) { return this.$createElement('template', { slot: target }, nodes); } else { return nodes; } } /** * Runtime helper for resolving filters */ function resolveFilter(id) { return resolveAsset(this.$options, 'filters', id, true) || identity; } function isKeyNotMatch(expect, actual) { if (isArray(expect)) { return expect.indexOf(actual) === -1; } else { return expect !== actual; } } /** * Runtime helper for checking keyCodes from config. * exposed as Vue.prototype._k * passing in eventKeyName as last argument separately for backwards compat */ function checkKeyCodes(eventKeyCode, key, builtInKeyCode, eventKeyName, builtInKeyName) { var mappedKeyCode = config.keyCodes[key] || builtInKeyCode; if (builtInKeyName && eventKeyName && !config.keyCodes[key]) { return isKeyNotMatch(builtInKeyName, eventKeyName); } else if (mappedKeyCode) { return isKeyNotMatch(mappedKeyCode, eventKeyCode); } else if (eventKeyName) { return hyphenate(eventKeyName) !== key; } return eventKeyCode === undefined; } /** * Runtime helper for merging v-bind=\"object\" into a VNode's data. */ function bindObjectProps(data, tag, value, asProp, isSync) { if (value) { if (!isObject(value)) { warn$2('v-bind without argument expects an Object or Array value', this); } else { if (isArray(value)) { value = toObject(value); } var hash = void 0; var _loop_1 = function (key) { if (key === 'class' || key === 'style' || isReservedAttribute(key)) { hash = data; } else { var type = data.attrs && data.attrs.type; hash = asProp || config.mustUseProp(tag, type, key) ? data.domProps || (data.domProps = {}) : data.attrs || (data.attrs = {}); } var camelizedKey = camelize(key); var hyphenatedKey = hyphenate(key); if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) { hash[key] = value[key]; if (isSync) { var on = data.on || (data.on = {}); on[\"update:\".concat(key)] = function ($event) { value[key] = $event; }; } } }; for (var key in value) { _loop_1(key); } } } return data; } /** * Runtime helper for rendering static trees. */ function renderStatic(index, isInFor) { var cached = this._staticTrees || (this._staticTrees = []); var tree = cached[index]; // if has already-rendered static tree and not inside v-for, // we can reuse the same tree. if (tree && !isInFor) { return tree; } // otherwise, render a fresh tree. tree = cached[index] = this.$options.staticRenderFns[index].call(this._renderProxy, this._c, this // for render fns generated for functional component templates ); markStatic$1(tree, \"__static__\".concat(index), false); return tree; } /** * Runtime helper for v-once. * Effectively it means marking the node as static with a unique key. */ function markOnce(tree, index, key) { markStatic$1(tree, \"__once__\".concat(index).concat(key ? \"_\".concat(key) : \"\"), true); return tree; } function markStatic$1(tree, key, isOnce) { if (isArray(tree)) { for (var i = 0; i < tree.length; i++) { if (tree[i] && typeof tree[i] !== 'string') { markStaticNode(tree[i], \"\".concat(key, \"_\").concat(i), isOnce); } } } else { markStaticNode(tree, key, isOnce); } } function markStaticNode(node, key, isOnce) { node.isStatic = true; node.key = key; node.isOnce = isOnce; } function bindObjectListeners(data, value) { if (value) { if (!isPlainObject(value)) { warn$2('v-on without argument expects an Object value', this); } else { var on = (data.on = data.on ? extend({}, data.on) : {}); for (var key in value) { var existing = on[key]; var ours = value[key]; on[key] = existing ? [].concat(existing, ours) : ours; } } } return data; } function resolveScopedSlots(fns, res, // the following are added in 2.6 hasDynamicKeys, contentHashKey) { res = res || { $stable: !hasDynamicKeys }; for (var i = 0; i < fns.length; i++) { var slot = fns[i]; if (isArray(slot)) { resolveScopedSlots(slot, res, hasDynamicKeys); } else if (slot) { // marker for reverse proxying v-slot without scope on this.$slots // @ts-expect-error if (slot.proxy) { // @ts-expect-error slot.fn.proxy = true; } res[slot.key] = slot.fn; } } if (contentHashKey) { res.$key = contentHashKey; } return res; } // helper to process dynamic keys for dynamic arguments in v-bind and v-on. function bindDynamicKeys(baseObj, values) { for (var i = 0; i < values.length; i += 2) { var key = values[i]; if (typeof key === 'string' && key) { baseObj[values[i]] = values[i + 1]; } else if (key !== '' && key !== null) { // null is a special value for explicitly removing a binding warn$2(\"Invalid value for dynamic directive argument (expected string or null): \".concat(key), this); } } return baseObj; } // helper to dynamically append modifier runtime markers to event names. // ensure only append when value is already string, otherwise it will be cast // to string and cause the type check to miss. function prependModifier(value, symbol) { return typeof value === 'string' ? symbol + value : value; } function installRenderHelpers(target) { target._o = markOnce; target._n = toNumber; target._s = toString; target._l = renderList; target._t = renderSlot; target._q = looseEqual; target._i = looseIndexOf; target._m = renderStatic; target._f = resolveFilter; target._k = checkKeyCodes; target._b = bindObjectProps; target._v = createTextVNode; target._e = createEmptyVNode; target._u = resolveScopedSlots; target._g = bindObjectListeners; target._d = bindDynamicKeys; target._p = prependModifier; } /** * Runtime helper for resolving raw children VNodes into a slot object. */ function resolveSlots(children, context) { if (!children || !children.length) { return {}; } var slots = {}; for (var i = 0, l = children.length; i < l; i++) { var child = children[i]; var data = child.data; // remove slot attribute if the node is resolved as a Vue slot node if (data && data.attrs && data.attrs.slot) { delete data.attrs.slot; } // named slots should only be respected if the vnode was rendered in the // same context. if ((child.context === context || child.fnContext === context) && data && data.slot != null) { var name_1 = data.slot; var slot = slots[name_1] || (slots[name_1] = []); if (child.tag === 'template') { slot.push.apply(slot, child.children || []); } else { slot.push(child); } } else { (slots.default || (slots.default = [])).push(child); } } // ignore slots that contains only whitespace for (var name_2 in slots) { if (slots[name_2].every(isWhitespace)) { delete slots[name_2]; } } return slots; } function isWhitespace(node) { return (node.isComment && !node.asyncFactory) || node.text === ' '; } function isAsyncPlaceholder(node) { // @ts-expect-error not really boolean type return node.isComment && node.asyncFactory; } function normalizeScopedSlots(ownerVm, scopedSlots, normalSlots, prevScopedSlots) { var res; var hasNormalSlots = Object.keys(normalSlots).length > 0; var isStable = scopedSlots ? !!scopedSlots.$stable : !hasNormalSlots; var key = scopedSlots && scopedSlots.$key; if (!scopedSlots) { res = {}; } else if (scopedSlots._normalized) { // fast path 1: child component re-render only, parent did not change return scopedSlots._normalized; } else if (isStable && prevScopedSlots && prevScopedSlots !== emptyObject && key === prevScopedSlots.$key && !hasNormalSlots && !prevScopedSlots.$hasNormal) { // fast path 2: stable scoped slots w/ no normal slots to proxy, // only need to normalize once return prevScopedSlots; } else { res = {}; for (var key_1 in scopedSlots) { if (scopedSlots[key_1] && key_1[0] !== '$') { res[key_1] = normalizeScopedSlot(ownerVm, normalSlots, key_1, scopedSlots[key_1]); } } } // expose normal slots on scopedSlots for (var key_2 in normalSlots) { if (!(key_2 in res)) { res[key_2] = proxyNormalSlot(normalSlots, key_2); } } // avoriaz seems to mock a non-extensible $scopedSlots object // and when that is passed down this would cause an error if (scopedSlots && Object.isExtensible(scopedSlots)) { scopedSlots._normalized = res; } def(res, '$stable', isStable); def(res, '$key', key); def(res, '$hasNormal', hasNormalSlots); return res; } function normalizeScopedSlot(vm, normalSlots, key, fn) { var normalized = function () { var cur = currentInstance; setCurrentInstance(vm); var res = arguments.length ? fn.apply(null, arguments) : fn({}); res = res && typeof res === 'object' && !isArray(res) ? [res] // single vnode : normalizeChildren(res); var vnode = res && res[0]; setCurrentInstance(cur); return res && (!vnode || (res.length === 1 && vnode.isComment && !isAsyncPlaceholder(vnode))) // #9658, #10391 ? undefined : res; }; // this is a slot using the new v-slot syntax without scope. although it is // compiled as a scoped slot, render fn users would expect it to be present // on this.$slots because the usage is semantically a normal slot. if (fn.proxy) { Object.defineProperty(normalSlots, key, { get: normalized, enumerable: true, configurable: true }); } return normalized; } function proxyNormalSlot(slots, key) { return function () { return slots[key]; }; } function initSetup(vm) { var options = vm.$options; var setup = options.setup; if (setup) { var ctx = (vm._setupContext = createSetupContext(vm)); setCurrentInstance(vm); pushTarget(); var setupResult = invokeWithErrorHandling(setup, null, [vm._props || shallowReactive({}), ctx], vm, \"setup\"); popTarget(); setCurrentInstance(); if (isFunction(setupResult)) { // render function // @ts-ignore options.render = setupResult; } else if (isObject(setupResult)) { // bindings if (setupResult instanceof VNode) { warn$2(\"setup() should not return VNodes directly - \" + \"return a render function instead.\"); } vm._setupState = setupResult; // __sfc indicates compiled bindings from if (!setupResult.__sfc) { for (var key in setupResult) { if (!isReserved(key)) { proxyWithRefUnwrap(vm, setupResult, key); } else { warn$2(\"Avoid using variables that start with _ or $ in setup().\"); } } } else { // exposed for compiled render fn var proxy = (vm._setupProxy = {}); for (var key in setupResult) { if (key !== '__sfc') { proxyWithRefUnwrap(proxy, setupResult, key); } } } } else if (setupResult !== undefined) { warn$2(\"setup() should return an object. Received: \".concat(setupResult === null ? 'null' : typeof setupResult)); } } } function createSetupContext(vm) { var exposeCalled = false; return { get attrs() { if (!vm._attrsProxy) { var proxy = (vm._attrsProxy = {}); def(proxy, '_v_attr_proxy', true); syncSetupProxy(proxy, vm.$attrs, emptyObject, vm, '$attrs'); } return vm._attrsProxy; }, get listeners() { if (!vm._listenersProxy) { var proxy = (vm._listenersProxy = {}); syncSetupProxy(proxy, vm.$listeners, emptyObject, vm, '$listeners'); } return vm._listenersProxy; }, get slots() { return initSlotsProxy(vm); }, emit: bind$1(vm.$emit, vm), expose: function (exposed) { { if (exposeCalled) { warn$2(\"expose() should be called only once per setup().\", vm); } exposeCalled = true; } if (exposed) { Object.keys(exposed).forEach(function (key) { return proxyWithRefUnwrap(vm, exposed, key); }); } } }; } function syncSetupProxy(to, from, prev, instance, type) { var changed = false; for (var key in from) { if (!(key in to)) { changed = true; defineProxyAttr(to, key, instance, type); } else if (from[key] !== prev[key]) { changed = true; } } for (var key in to) { if (!(key in from)) { changed = true; delete to[key]; } } return changed; } function defineProxyAttr(proxy, key, instance, type) { Object.defineProperty(proxy, key, { enumerable: true, configurable: true, get: function () { return instance[type][key]; } }); } function initSlotsProxy(vm) { if (!vm._slotsProxy) { syncSetupSlots((vm._slotsProxy = {}), vm.$scopedSlots); } return vm._slotsProxy; } function syncSetupSlots(to, from) { for (var key in from) { to[key] = from[key]; } for (var key in to) { if (!(key in from)) { delete to[key]; } } } /** * @internal use manual type def because public setup context type relies on * legacy VNode types */ function useSlots() { return getContext().slots; } /** * @internal use manual type def because public setup context type relies on * legacy VNode types */ function useAttrs() { return getContext().attrs; } /** * Vue 2 only * @internal use manual type def because public setup context type relies on * legacy VNode types */ function useListeners() { return getContext().listeners; } function getContext() { if (!currentInstance) { warn$2(\"useContext() called without active instance.\"); } var vm = currentInstance; return vm._setupContext || (vm._setupContext = createSetupContext(vm)); } /** * Runtime helper for merging default declarations. Imported by compiled code * only. * @internal */ function mergeDefaults(raw, defaults) { var props = isArray(raw) ? raw.reduce(function (normalized, p) { return ((normalized[p] = {}), normalized); }, {}) : raw; for (var key in defaults) { var opt = props[key]; if (opt) { if (isArray(opt) || isFunction(opt)) { props[key] = { type: opt, default: defaults[key] }; } else { opt.default = defaults[key]; } } else if (opt === null) { props[key] = { default: defaults[key] }; } else { warn$2(\"props default key \\\"\".concat(key, \"\\\" has no corresponding declaration.\")); } } return props; } function initRender(vm) { vm._vnode = null; // the root of the child tree vm._staticTrees = null; // v-once cached trees var options = vm.$options; var parentVnode = (vm.$vnode = options._parentVnode); // the placeholder node in parent tree var renderContext = parentVnode && parentVnode.context; vm.$slots = resolveSlots(options._renderChildren, renderContext); vm.$scopedSlots = parentVnode ? normalizeScopedSlots(vm.$parent, parentVnode.data.scopedSlots, vm.$slots) : emptyObject; // bind the createElement fn to this instance // so that we get proper render context inside it. // args order: tag, data, children, normalizationType, alwaysNormalize // internal version is used by render functions compiled from templates // @ts-expect-error vm._c = function (a, b, c, d) { return createElement$1(vm, a, b, c, d, false); }; // normalization is always applied for the public version, used in // user-written render functions. // @ts-expect-error vm.$createElement = function (a, b, c, d) { return createElement$1(vm, a, b, c, d, true); }; // $attrs & $listeners are exposed for easier HOC creation. // they need to be reactive so that HOCs using them are always updated var parentData = parentVnode && parentVnode.data; /* istanbul ignore else */ { defineReactive(vm, '$attrs', (parentData && parentData.attrs) || emptyObject, function () { !isUpdatingChildComponent && warn$2(\"$attrs is readonly.\", vm); }, true); defineReactive(vm, '$listeners', options._parentListeners || emptyObject, function () { !isUpdatingChildComponent && warn$2(\"$listeners is readonly.\", vm); }, true); } } var currentRenderingInstance = null; function renderMixin(Vue) { // install runtime convenience helpers installRenderHelpers(Vue.prototype); Vue.prototype.$nextTick = function (fn) { return nextTick(fn, this); }; Vue.prototype._render = function () { var vm = this; var _a = vm.$options, render = _a.render, _parentVnode = _a._parentVnode; if (_parentVnode && vm._isMounted) { vm.$scopedSlots = normalizeScopedSlots(vm.$parent, _parentVnode.data.scopedSlots, vm.$slots, vm.$scopedSlots); if (vm._slotsProxy) { syncSetupSlots(vm._slotsProxy, vm.$scopedSlots); } } // set parent vnode. this allows render functions to have access // to the data on the placeholder node. vm.$vnode = _parentVnode; // render self var vnode; try { // There's no need to maintain a stack because all render fns are called // separately from one another. Nested component's render fns are called // when parent component is patched. setCurrentInstance(vm); currentRenderingInstance = vm; vnode = render.call(vm._renderProxy, vm.$createElement); } catch (e) { handleError(e, vm, \"render\"); // return error render result, // or previous vnode to prevent render error causing blank component /* istanbul ignore else */ if (vm.$options.renderError) { try { vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e); } catch (e) { handleError(e, vm, \"renderError\"); vnode = vm._vnode; } } else { vnode = vm._vnode; } } finally { currentRenderingInstance = null; setCurrentInstance(); } // if the returned array contains only a single node, allow it if (isArray(vnode) && vnode.length === 1) { vnode = vnode[0]; } // return empty vnode in case the render function errored out if (!(vnode instanceof VNode)) { if (isArray(vnode)) { warn$2('Multiple root nodes returned from render function. Render function ' + 'should return a single root node.', vm); } vnode = createEmptyVNode(); } // set parent vnode.parent = _parentVnode; return vnode; }; } function ensureCtor(comp, base) { if (comp.__esModule || (hasSymbol && comp[Symbol.toStringTag] === 'Module')) { comp = comp.default; } return isObject(comp) ? base.extend(comp) : comp; } function createAsyncPlaceholder(factory, data, context, children, tag) { var node = createEmptyVNode(); node.asyncFactory = factory; node.asyncMeta = { data: data, context: context, children: children, tag: tag }; return node; } function resolveAsyncComponent(factory, baseCtor) { if (isTrue(factory.error) && isDef(factory.errorComp)) { return factory.errorComp; } if (isDef(factory.resolved)) { return factory.resolved; } var owner = currentRenderingInstance; if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) { // already pending factory.owners.push(owner); } if (isTrue(factory.loading) && isDef(factory.loadingComp)) { return factory.loadingComp; } if (owner && !isDef(factory.owners)) { var owners_1 = (factory.owners = [owner]); var sync_1 = true; var timerLoading_1 = null; var timerTimeout_1 = null; owner.$on('hook:destroyed', function () { return remove$2(owners_1, owner); }); var forceRender_1 = function (renderCompleted) { for (var i = 0, l = owners_1.length; i < l; i++) { owners_1[i].$forceUpdate(); } if (renderCompleted) { owners_1.length = 0; if (timerLoading_1 !== null) { clearTimeout(timerLoading_1); timerLoading_1 = null; } if (timerTimeout_1 !== null) { clearTimeout(timerTimeout_1); timerTimeout_1 = null; } } }; var resolve = once(function (res) { // cache resolved factory.resolved = ensureCtor(res, baseCtor); // invoke callbacks only if this is not a synchronous resolve // (async resolves are shimmed as synchronous during SSR) if (!sync_1) { forceRender_1(true); } else { owners_1.length = 0; } }); var reject_1 = once(function (reason) { warn$2(\"Failed to resolve async component: \".concat(String(factory)) + (reason ? \"\\nReason: \".concat(reason) : '')); if (isDef(factory.errorComp)) { factory.error = true; forceRender_1(true); } }); var res_1 = factory(resolve, reject_1); if (isObject(res_1)) { if (isPromise(res_1)) { // () => Promise if (isUndef(factory.resolved)) { res_1.then(resolve, reject_1); } } else if (isPromise(res_1.component)) { res_1.component.then(resolve, reject_1); if (isDef(res_1.error)) { factory.errorComp = ensureCtor(res_1.error, baseCtor); } if (isDef(res_1.loading)) { factory.loadingComp = ensureCtor(res_1.loading, baseCtor); if (res_1.delay === 0) { factory.loading = true; } else { // @ts-expect-error NodeJS timeout type timerLoading_1 = setTimeout(function () { timerLoading_1 = null; if (isUndef(factory.resolved) && isUndef(factory.error)) { factory.loading = true; forceRender_1(false); } }, res_1.delay || 200); } } if (isDef(res_1.timeout)) { // @ts-expect-error NodeJS timeout type timerTimeout_1 = setTimeout(function () { timerTimeout_1 = null; if (isUndef(factory.resolved)) { reject_1(\"timeout (\".concat(res_1.timeout, \"ms)\") ); } }, res_1.timeout); } } } sync_1 = false; // return in case resolved synchronously return factory.loading ? factory.loadingComp : factory.resolved; } } function getFirstComponentChild(children) { if (isArray(children)) { for (var i = 0; i < children.length; i++) { var c = children[i]; if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) { return c; } } } } function initEvents(vm) { vm._events = Object.create(null); vm._hasHookEvent = false; // init parent attached events var listeners = vm.$options._parentListeners; if (listeners) { updateComponentListeners(vm, listeners); } } var target$1; function add$1(event, fn) { target$1.$on(event, fn); } function remove$1(event, fn) { target$1.$off(event, fn); } function createOnceHandler$1(event, fn) { var _target = target$1; return function onceHandler() { var res = fn.apply(null, arguments); if (res !== null) { _target.$off(event, onceHandler); } }; } function updateComponentListeners(vm, listeners, oldListeners) { target$1 = vm; updateListeners(listeners, oldListeners || {}, add$1, remove$1, createOnceHandler$1, vm); target$1 = undefined; } function eventsMixin(Vue) { var hookRE = /^hook:/; Vue.prototype.$on = function (event, fn) { var vm = this; if (isArray(event)) { for (var i = 0, l = event.length; i < l; i++) { vm.$on(event[i], fn); } } else { (vm._events[event] || (vm._events[event] = [])).push(fn); // optimize hook:event cost by using a boolean flag marked at registration // instead of a hash lookup if (hookRE.test(event)) { vm._hasHookEvent = true; } } return vm; }; Vue.prototype.$once = function (event, fn) { var vm = this; function on() { vm.$off(event, on); fn.apply(vm, arguments); } on.fn = fn; vm.$on(event, on); return vm; }; Vue.prototype.$off = function (event, fn) { var vm = this; // all if (!arguments.length) { vm._events = Object.create(null); return vm; } // array of events if (isArray(event)) { for (var i_1 = 0, l = event.length; i_1 < l; i_1++) { vm.$off(event[i_1], fn); } return vm; } // specific event var cbs = vm._events[event]; if (!cbs) { return vm; } if (!fn) { vm._events[event] = null; return vm; } // specific handler var cb; var i = cbs.length; while (i--) { cb = cbs[i]; if (cb === fn || cb.fn === fn) { cbs.splice(i, 1); break; } } return vm; }; Vue.prototype.$emit = function (event) { var vm = this; { var lowerCaseEvent = event.toLowerCase(); if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) { tip(\"Event \\\"\".concat(lowerCaseEvent, \"\\\" is emitted in component \") + \"\".concat(formatComponentName(vm), \" but the handler is registered for \\\"\").concat(event, \"\\\". \") + \"Note that HTML attributes are case-insensitive and you cannot use \" + \"v-on to listen to camelCase events when using in-DOM templates. \" + \"You should probably use \\\"\".concat(hyphenate(event), \"\\\" instead of \\\"\").concat(event, \"\\\".\")); } } var cbs = vm._events[event]; if (cbs) { cbs = cbs.length > 1 ? toArray(cbs) : cbs; var args = toArray(arguments, 1); var info = \"event handler for \\\"\".concat(event, \"\\\"\"); for (var i = 0, l = cbs.length; i < l; i++) { invokeWithErrorHandling(cbs[i], vm, args, vm, info); } } return vm; }; } var activeInstance = null; var isUpdatingChildComponent = false; function setActiveInstance(vm) { var prevActiveInstance = activeInstance; activeInstance = vm; return function () { activeInstance = prevActiveInstance; }; } function initLifecycle(vm) { var options = vm.$options; // locate first non-abstract parent var parent = options.parent; if (parent && !options.abstract) { while (parent.$options.abstract && parent.$parent) { parent = parent.$parent; } parent.$children.push(vm); } vm.$parent = parent; vm.$root = parent ? parent.$root : vm; vm.$children = []; vm.$refs = {}; vm._provided = parent ? parent._provided : Object.create(null); vm._watcher = null; vm._inactive = null; vm._directInactive = false; vm._isMounted = false; vm._isDestroyed = false; vm._isBeingDestroyed = false; } function lifecycleMixin(Vue) { Vue.prototype._update = function (vnode, hydrating) { var vm = this; var prevEl = vm.$el; var prevVnode = vm._vnode; var restoreActiveInstance = setActiveInstance(vm); vm._vnode = vnode; // Vue.prototype.__patch__ is injected in entry points // based on the rendering backend used. if (!prevVnode) { // initial render vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */); } else { // updates vm.$el = vm.__patch__(prevVnode, vnode); } restoreActiveInstance(); // update __vue__ reference if (prevEl) { prevEl.__vue__ = null; } if (vm.$el) { vm.$el.__vue__ = vm; } // if parent is an HOC, update its $el as well var wrapper = vm; while (wrapper && wrapper.$vnode && wrapper.$parent && wrapper.$vnode === wrapper.$parent._vnode) { wrapper.$parent.$el = wrapper.$el; wrapper = wrapper.$parent; } // updated hook is called by the scheduler to ensure that children are // updated in a parent's updated hook. }; Vue.prototype.$forceUpdate = function () { var vm = this; if (vm._watcher) { vm._watcher.update(); } }; Vue.prototype.$destroy = function () { var vm = this; if (vm._isBeingDestroyed) { return; } callHook$1(vm, 'beforeDestroy'); vm._isBeingDestroyed = true; // remove self from parent var parent = vm.$parent; if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) { remove$2(parent.$children, vm); } // teardown scope. this includes both the render watcher and other // watchers created vm._scope.stop(); // remove reference from data ob // frozen object may not have observer. if (vm._data.__ob__) { vm._data.__ob__.vmCount--; } // call the last hook... vm._isDestroyed = true; // invoke destroy hooks on current rendered tree vm.__patch__(vm._vnode, null); // fire destroyed hook callHook$1(vm, 'destroyed'); // turn off all instance listeners. vm.$off(); // remove __vue__ reference if (vm.$el) { vm.$el.__vue__ = null; } // release circular reference (#6759) if (vm.$vnode) { vm.$vnode.parent = null; } }; } function mountComponent(vm, el, hydrating) { vm.$el = el; if (!vm.$options.render) { // @ts-expect-error invalid type vm.$options.render = createEmptyVNode; { /* istanbul ignore if */ if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') || vm.$options.el || el) { warn$2('You are using the runtime-only build of Vue where the template ' + 'compiler is not available. Either pre-compile the templates into ' + 'render functions, or use the compiler-included build.', vm); } else { warn$2('Failed to mount component: template or render function not defined.', vm); } } } callHook$1(vm, 'beforeMount'); var updateComponent; /* istanbul ignore if */ if (config.performance && mark) { updateComponent = function () { var name = vm._name; var id = vm._uid; var startTag = \"vue-perf-start:\".concat(id); var endTag = \"vue-perf-end:\".concat(id); mark(startTag); var vnode = vm._render(); mark(endTag); measure(\"vue \".concat(name, \" render\"), startTag, endTag); mark(startTag); vm._update(vnode, hydrating); mark(endTag); measure(\"vue \".concat(name, \" patch\"), startTag, endTag); }; } else { updateComponent = function () { vm._update(vm._render(), hydrating); }; } var watcherOptions = { before: function () { if (vm._isMounted && !vm._isDestroyed) { callHook$1(vm, 'beforeUpdate'); } } }; { watcherOptions.onTrack = function (e) { return callHook$1(vm, 'renderTracked', [e]); }; watcherOptions.onTrigger = function (e) { return callHook$1(vm, 'renderTriggered', [e]); }; } // we set this to vm._watcher inside the watcher's constructor // since the watcher's initial patch may call $forceUpdate (e.g. inside child // component's mounted hook), which relies on vm._watcher being already defined new Watcher(vm, updateComponent, noop, watcherOptions, true /* isRenderWatcher */); hydrating = false; // flush buffer for flush: \"pre\" watchers queued in setup() var preWatchers = vm._preWatchers; if (preWatchers) { for (var i = 0; i < preWatchers.length; i++) { preWatchers[i].run(); } } // manually mounted instance, call mounted on self // mounted is called for render-created child components in its inserted hook if (vm.$vnode == null) { vm._isMounted = true; callHook$1(vm, 'mounted'); } return vm; } function updateChildComponent(vm, propsData, listeners, parentVnode, renderChildren) { { isUpdatingChildComponent = true; } // determine whether component has slot children // we need to do this before overwriting $options._renderChildren. // check if there are dynamic scopedSlots (hand-written or compiled but with // dynamic slot names). Static scoped slots compiled from template has the // \"$stable\" marker. var newScopedSlots = parentVnode.data.scopedSlots; var oldScopedSlots = vm.$scopedSlots; var hasDynamicScopedSlot = !!((newScopedSlots && !newScopedSlots.$stable) || (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) || (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key) || (!newScopedSlots && vm.$scopedSlots.$key)); // Any static slot children from the parent may have changed during parent's // update. Dynamic scoped slots may also have changed. In such cases, a forced // update is necessary to ensure correctness. var needsForceUpdate = !!(renderChildren || // has new static slots vm.$options._renderChildren || // has old static slots hasDynamicScopedSlot); var prevVNode = vm.$vnode; vm.$options._parentVnode = parentVnode; vm.$vnode = parentVnode; // update vm's placeholder node without re-render if (vm._vnode) { // update child tree's parent vm._vnode.parent = parentVnode; } vm.$options._renderChildren = renderChildren; // update $attrs and $listeners hash // these are also reactive so they may trigger child update if the child // used them during render var attrs = parentVnode.data.attrs || emptyObject; if (vm._attrsProxy) { // force update if attrs are accessed and has changed since it may be // passed to a child component. if (syncSetupProxy(vm._attrsProxy, attrs, (prevVNode.data && prevVNode.data.attrs) || emptyObject, vm, '$attrs')) { needsForceUpdate = true; } } vm.$attrs = attrs; // update listeners listeners = listeners || emptyObject; var prevListeners = vm.$options._parentListeners; if (vm._listenersProxy) { syncSetupProxy(vm._listenersProxy, listeners, prevListeners || emptyObject, vm, '$listeners'); } vm.$listeners = vm.$options._parentListeners = listeners; updateComponentListeners(vm, listeners, prevListeners); // update props if (propsData && vm.$options.props) { toggleObserving(false); var props = vm._props; var propKeys = vm.$options._propKeys || []; for (var i = 0; i < propKeys.length; i++) { var key = propKeys[i]; var propOptions = vm.$options.props; // wtf flow? props[key] = validateProp(key, propOptions, propsData, vm); } toggleObserving(true); // keep a copy of raw propsData vm.$options.propsData = propsData; } // resolve slots + force update if has children if (needsForceUpdate) { vm.$slots = resolveSlots(renderChildren, parentVnode.context); vm.$forceUpdate(); } { isUpdatingChildComponent = false; } } function isInInactiveTree(vm) { while (vm && (vm = vm.$parent)) { if (vm._inactive) return true; } return false; } function activateChildComponent(vm, direct) { if (direct) { vm._directInactive = false; if (isInInactiveTree(vm)) { return; } } else if (vm._directInactive) { return; } if (vm._inactive || vm._inactive === null) { vm._inactive = false; for (var i = 0; i < vm.$children.length; i++) { activateChildComponent(vm.$children[i]); } callHook$1(vm, 'activated'); } } function deactivateChildComponent(vm, direct) { if (direct) { vm._directInactive = true; if (isInInactiveTree(vm)) { return; } } if (!vm._inactive) { vm._inactive = true; for (var i = 0; i < vm.$children.length; i++) { deactivateChildComponent(vm.$children[i]); } callHook$1(vm, 'deactivated'); } } function callHook$1(vm, hook, args, setContext) { if (setContext === void 0) { setContext = true; } // #7573 disable dep collection when invoking lifecycle hooks pushTarget(); var prev = currentInstance; setContext && setCurrentInstance(vm); var handlers = vm.$options[hook]; var info = \"\".concat(hook, \" hook\"); if (handlers) { for (var i = 0, j = handlers.length; i < j; i++) { invokeWithErrorHandling(handlers[i], vm, args || null, vm, info); } } if (vm._hasHookEvent) { vm.$emit('hook:' + hook); } setContext && setCurrentInstance(prev); popTarget(); } var MAX_UPDATE_COUNT = 100; var queue = []; var activatedChildren = []; var has = {}; var circular = {}; var waiting = false; var flushing = false; var index$1 = 0; /** * Reset the scheduler's state. */ function resetSchedulerState() { index$1 = queue.length = activatedChildren.length = 0; has = {}; { circular = {}; } waiting = flushing = false; } // Async edge case #6566 requires saving the timestamp when event listeners are // attached. However, calling performance.now() has a perf overhead especially // if the page has thousands of event listeners. Instead, we take a timestamp // every time the scheduler flushes and use that for all event listeners // attached during that flush. var currentFlushTimestamp = 0; // Async edge case fix requires storing an event listener's attach timestamp. var getNow = Date.now; // Determine what event timestamp the browser is using. Annoyingly, the // timestamp can either be hi-res (relative to page load) or low-res // (relative to UNIX epoch), so in order to compare time we have to use the // same timestamp type when saving the flush timestamp. // All IE versions use low-res event timestamps, and have problematic clock // implementations (#9632) if (inBrowser && !isIE) { var performance_1 = window.performance; if (performance_1 && typeof performance_1.now === 'function' && getNow() > document.createEvent('Event').timeStamp) { // if the event timestamp, although evaluated AFTER the Date.now(), is // smaller than it, it means the event is using a hi-res timestamp, // and we need to use the hi-res version for event listener timestamps as // well. getNow = function () { return performance_1.now(); }; } } var sortCompareFn = function (a, b) { if (a.post) { if (!b.post) return 1; } else if (b.post) { return -1; } return a.id - b.id; }; /** * Flush both queues and run the watchers. */ function flushSchedulerQueue() { currentFlushTimestamp = getNow(); flushing = true; var watcher, id; // Sort queue before flush. // This ensures that: // 1. Components are updated from parent to child. (because parent is always // created before the child) // 2. A component's user watchers are run before its render watcher (because // user watchers are created before the render watcher) // 3. If a component is destroyed during a parent component's watcher run, // its watchers can be skipped. queue.sort(sortCompareFn); // do not cache length because more watchers might be pushed // as we run existing watchers for (index$1 = 0; index$1 < queue.length; index$1++) { watcher = queue[index$1]; if (watcher.before) { watcher.before(); } id = watcher.id; has[id] = null; watcher.run(); // in dev build, check and stop circular updates. if (has[id] != null) { circular[id] = (circular[id] || 0) + 1; if (circular[id] > MAX_UPDATE_COUNT) { warn$2('You may have an infinite update loop ' + (watcher.user ? \"in watcher with expression \\\"\".concat(watcher.expression, \"\\\"\") : \"in a component render function.\"), watcher.vm); break; } } } // keep copies of post queues before resetting state var activatedQueue = activatedChildren.slice(); var updatedQueue = queue.slice(); resetSchedulerState(); // call component updated and activated hooks callActivatedHooks(activatedQueue); callUpdatedHooks(updatedQueue); cleanupDeps(); // devtool hook /* istanbul ignore if */ if (devtools && config.devtools) { devtools.emit('flush'); } } function callUpdatedHooks(queue) { var i = queue.length; while (i--) { var watcher = queue[i]; var vm = watcher.vm; if (vm && vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) { callHook$1(vm, 'updated'); } } } /** * Queue a kept-alive component that was activated during patch. * The queue will be processed after the entire tree has been patched. */ function queueActivatedComponent(vm) { // setting _inactive to false here so that a render function can // rely on checking whether it's in an inactive tree (e.g. router-view) vm._inactive = false; activatedChildren.push(vm); } function callActivatedHooks(queue) { for (var i = 0; i < queue.length; i++) { queue[i]._inactive = true; activateChildComponent(queue[i], true /* true */); } } /** * Push a watcher into the watcher queue. * Jobs with duplicate IDs will be skipped unless it's * pushed when the queue is being flushed. */ function queueWatcher(watcher) { var id = watcher.id; if (has[id] != null) { return; } if (watcher === Dep.target && watcher.noRecurse) { return; } has[id] = true; if (!flushing) { queue.push(watcher); } else { // if already flushing, splice the watcher based on its id // if already past its id, it will be run next immediately. var i = queue.length - 1; while (i > index$1 && queue[i].id > watcher.id) { i--; } queue.splice(i + 1, 0, watcher); } // queue the flush if (!waiting) { waiting = true; if (!config.async) { flushSchedulerQueue(); return; } nextTick(flushSchedulerQueue); } } var WATCHER = \"watcher\"; var WATCHER_CB = \"\".concat(WATCHER, \" callback\"); var WATCHER_GETTER = \"\".concat(WATCHER, \" getter\"); var WATCHER_CLEANUP = \"\".concat(WATCHER, \" cleanup\"); // Simple effect. function watchEffect(effect, options) { return doWatch(effect, null, options); } function watchPostEffect(effect, options) { return doWatch(effect, null, (__assign(__assign({}, options), { flush: 'post' }) )); } function watchSyncEffect(effect, options) { return doWatch(effect, null, (__assign(__assign({}, options), { flush: 'sync' }) )); } // initial value for watchers to trigger on undefined initial values var INITIAL_WATCHER_VALUE = {}; // implementation function watch(source, cb, options) { if (typeof cb !== 'function') { warn$2(\"`watch(fn, options?)` signature has been moved to a separate API. \" + \"Use `watchEffect(fn, options?)` instead. `watch` now only \" + \"supports `watch(source, cb, options?) signature.\"); } return doWatch(source, cb, options); } function doWatch(source, cb, _a) { var _b = _a === void 0 ? emptyObject : _a, immediate = _b.immediate, deep = _b.deep, _c = _b.flush, flush = _c === void 0 ? 'pre' : _c, onTrack = _b.onTrack, onTrigger = _b.onTrigger; if (!cb) { if (immediate !== undefined) { warn$2(\"watch() \\\"immediate\\\" option is only respected when using the \" + \"watch(source, callback, options?) signature.\"); } if (deep !== undefined) { warn$2(\"watch() \\\"deep\\\" option is only respected when using the \" + \"watch(source, callback, options?) signature.\"); } } var warnInvalidSource = function (s) { warn$2(\"Invalid watch source: \".concat(s, \". A watch source can only be a getter/effect \") + \"function, a ref, a reactive object, or an array of these types.\"); }; var instance = currentInstance; var call = function (fn, type, args) { if (args === void 0) { args = null; } return invokeWithErrorHandling(fn, null, args, instance, type); }; var getter; var forceTrigger = false; var isMultiSource = false; if (isRef(source)) { getter = function () { return source.value; }; forceTrigger = isShallow(source); } else if (isReactive(source)) { getter = function () { source.__ob__.dep.depend(); return source; }; deep = true; } else if (isArray(source)) { isMultiSource = true; forceTrigger = source.some(function (s) { return isReactive(s) || isShallow(s); }); getter = function () { return source.map(function (s) { if (isRef(s)) { return s.value; } else if (isReactive(s)) { return traverse(s); } else if (isFunction(s)) { return call(s, WATCHER_GETTER); } else { warnInvalidSource(s); } }); }; } else if (isFunction(source)) { if (cb) { // getter with cb getter = function () { return call(source, WATCHER_GETTER); }; } else { // no cb -> simple effect getter = function () { if (instance && instance._isDestroyed) { return; } if (cleanup) { cleanup(); } return call(source, WATCHER, [onCleanup]); }; } } else { getter = noop; warnInvalidSource(source); } if (cb && deep) { var baseGetter_1 = getter; getter = function () { return traverse(baseGetter_1()); }; } var cleanup; var onCleanup = function (fn) { cleanup = watcher.onStop = function () { call(fn, WATCHER_CLEANUP); }; }; // in SSR there is no need to setup an actual effect, and it should be noop // unless it's eager if (isServerRendering()) { // we will also not call the invalidate callback (+ runner is not set up) onCleanup = noop; if (!cb) { getter(); } else if (immediate) { call(cb, WATCHER_CB, [ getter(), isMultiSource ? [] : undefined, onCleanup ]); } return noop; } var watcher = new Watcher(currentInstance, getter, noop, { lazy: true }); watcher.noRecurse = !cb; var oldValue = isMultiSource ? [] : INITIAL_WATCHER_VALUE; // overwrite default run watcher.run = function () { if (!watcher.active) { return; } if (cb) { // watch(source, cb) var newValue = watcher.get(); if (deep || forceTrigger || (isMultiSource ? newValue.some(function (v, i) { return hasChanged(v, oldValue[i]); }) : hasChanged(newValue, oldValue))) { // cleanup before running cb again if (cleanup) { cleanup(); } call(cb, WATCHER_CB, [ newValue, // pass undefined as the old value when it's changed for the first time oldValue === INITIAL_WATCHER_VALUE ? undefined : oldValue, onCleanup ]); oldValue = newValue; } } else { // watchEffect watcher.get(); } }; if (flush === 'sync') { watcher.update = watcher.run; } else if (flush === 'post') { watcher.post = true; watcher.update = function () { return queueWatcher(watcher); }; } else { // pre watcher.update = function () { if (instance && instance === currentInstance && !instance._isMounted) { // pre-watcher triggered before var buffer = instance._preWatchers || (instance._preWatchers = []); if (buffer.indexOf(watcher) < 0) buffer.push(watcher); } else { queueWatcher(watcher); } }; } { watcher.onTrack = onTrack; watcher.onTrigger = onTrigger; } // initial run if (cb) { if (immediate) { watcher.run(); } else { oldValue = watcher.get(); } } else if (flush === 'post' && instance) { instance.$once('hook:mounted', function () { return watcher.get(); }); } else { watcher.get(); } return function () { watcher.teardown(); }; } var activeEffectScope; var EffectScope = /** @class */ (function () { function EffectScope(detached) { if (detached === void 0) { detached = false; } this.detached = detached; /** * @internal */ this.active = true; /** * @internal */ this.effects = []; /** * @internal */ this.cleanups = []; this.parent = activeEffectScope; if (!detached && activeEffectScope) { this.index = (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(this) - 1; } } EffectScope.prototype.run = function (fn) { if (this.active) { var currentEffectScope = activeEffectScope; try { activeEffectScope = this; return fn(); } finally { activeEffectScope = currentEffectScope; } } else { warn$2(\"cannot run an inactive effect scope.\"); } }; /** * This should only be called on non-detached scopes * @internal */ EffectScope.prototype.on = function () { activeEffectScope = this; }; /** * This should only be called on non-detached scopes * @internal */ EffectScope.prototype.off = function () { activeEffectScope = this.parent; }; EffectScope.prototype.stop = function (fromParent) { if (this.active) { var i = void 0, l = void 0; for (i = 0, l = this.effects.length; i < l; i++) { this.effects[i].teardown(); } for (i = 0, l = this.cleanups.length; i < l; i++) { this.cleanups[i](); } if (this.scopes) { for (i = 0, l = this.scopes.length; i < l; i++) { this.scopes[i].stop(true); } } // nested scope, dereference from parent to avoid memory leaks if (!this.detached && this.parent && !fromParent) { // optimized O(1) removal var last = this.parent.scopes.pop(); if (last && last !== this) { this.parent.scopes[this.index] = last; last.index = this.index; } } this.parent = undefined; this.active = false; } }; return EffectScope; }()); function effectScope(detached) { return new EffectScope(detached); } /** * @internal */ function recordEffectScope(effect, scope) { if (scope === void 0) { scope = activeEffectScope; } if (scope && scope.active) { scope.effects.push(effect); } } function getCurrentScope() { return activeEffectScope; } function onScopeDispose(fn) { if (activeEffectScope) { activeEffectScope.cleanups.push(fn); } else { warn$2(\"onScopeDispose() is called when there is no active effect scope\" + \" to be associated with.\"); } } function provide(key, value) { if (!currentInstance) { { warn$2(\"provide() can only be used inside setup().\"); } } else { // TS doesn't allow symbol as index type resolveProvided(currentInstance)[key] = value; } } function resolveProvided(vm) { // by default an instance inherits its parent's provides object // but when it needs to provide values of its own, it creates its // own provides object using parent provides object as prototype. // this way in `inject` we can simply look up injections from direct // parent and let the prototype chain do the work. var existing = vm._provided; var parentProvides = vm.$parent && vm.$parent._provided; if (parentProvides === existing) { return (vm._provided = Object.create(parentProvides)); } else { return existing; } } function inject(key, defaultValue, treatDefaultAsFactory) { if (treatDefaultAsFactory === void 0) { treatDefaultAsFactory = false; } // fallback to `currentRenderingInstance` so that this can be called in // a functional component var instance = currentInstance; if (instance) { // #2400 // to support `app.use` plugins, // fallback to appContext's `provides` if the instance is at root var provides = instance.$parent && instance.$parent._provided; if (provides && key in provides) { // TS doesn't allow symbol as index type return provides[key]; } else if (arguments.length > 1) { return treatDefaultAsFactory && isFunction(defaultValue) ? defaultValue.call(instance) : defaultValue; } else { warn$2(\"injection \\\"\".concat(String(key), \"\\\" not found.\")); } } else { warn$2(\"inject() can only be used inside setup() or functional components.\"); } } /** * @internal this function needs manual public type declaration because it relies * on previously manually authored types from Vue 2 */ function h(type, props, children) { if (!currentInstance) { warn$2(\"globally imported h() can only be invoked when there is an active \" + \"component instance, e.g. synchronously in a component's render or setup function.\"); } return createElement$1(currentInstance, type, props, children, 2, true); } function handleError(err, vm, info) { // Deactivate deps tracking while processing error handler to avoid possible infinite rendering. // See: https://github.com/vuejs/vuex/issues/1505 pushTarget(); try { if (vm) { var cur = vm; while ((cur = cur.$parent)) { var hooks = cur.$options.errorCaptured; if (hooks) { for (var i = 0; i < hooks.length; i++) { try { var capture = hooks[i].call(cur, err, vm, info) === false; if (capture) return; } catch (e) { globalHandleError(e, cur, 'errorCaptured hook'); } } } } } globalHandleError(err, vm, info); } finally { popTarget(); } } function invokeWithErrorHandling(handler, context, args, vm, info) { var res; try { res = args ? handler.apply(context, args) : handler.call(context); if (res && !res._isVue && isPromise(res) && !res._handled) { res.catch(function (e) { return handleError(e, vm, info + \" (Promise/async)\"); }); res._handled = true; } } catch (e) { handleError(e, vm, info); } return res; } function globalHandleError(err, vm, info) { if (config.errorHandler) { try { return config.errorHandler.call(null, err, vm, info); } catch (e) { // if the user intentionally throws the original error in the handler, // do not log it twice if (e !== err) { logError(e, null, 'config.errorHandler'); } } } logError(err, vm, info); } function logError(err, vm, info) { { warn$2(\"Error in \".concat(info, \": \\\"\").concat(err.toString(), \"\\\"\"), vm); } /* istanbul ignore else */ if (inBrowser && typeof console !== 'undefined') { console.error(err); } else { throw err; } } /* globals MutationObserver */ var isUsingMicroTask = false; var callbacks = []; var pending = false; function flushCallbacks() { pending = false; var copies = callbacks.slice(0); callbacks.length = 0; for (var i = 0; i < copies.length; i++) { copies[i](); } } // Here we have async deferring wrappers using microtasks. // In 2.5 we used (macro) tasks (in combination with microtasks). // However, it has subtle problems when state is changed right before repaint // (e.g. #6813, out-in transitions). // Also, using (macro) tasks in event handler would cause some weird behaviors // that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109). // So we now use microtasks everywhere, again. // A major drawback of this tradeoff is that there are some scenarios // where microtasks have too high a priority and fire in between supposedly // sequential events (e.g. #4521, #6690, which have workarounds) // or even between bubbling of the same event (#6566). var timerFunc; // The nextTick behavior leverages the microtask queue, which can be accessed // via either native Promise.then or MutationObserver. // MutationObserver has wider support, however it is seriously bugged in // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It // completely stops working after triggering a few times... so, if native // Promise is available, we will use it: /* istanbul ignore next, $flow-disable-line */ if (typeof Promise !== 'undefined' && isNative(Promise)) { var p_1 = Promise.resolve(); timerFunc = function () { p_1.then(flushCallbacks); // In problematic UIWebViews, Promise.then doesn't completely break, but // it can get stuck in a weird state where callbacks are pushed into the // microtask queue but the queue isn't being flushed, until the browser // needs to do some other work, e.g. handle a timer. Therefore we can // \"force\" the microtask queue to be flushed by adding an empty timer. if (isIOS) setTimeout(noop); }; isUsingMicroTask = true; } else if (!isIE && typeof MutationObserver !== 'undefined' && (isNative(MutationObserver) || // PhantomJS and iOS 7.x MutationObserver.toString() === '[object MutationObserverConstructor]')) { // Use MutationObserver where native Promise is not available, // e.g. PhantomJS, iOS7, Android 4.4 // (#6466 MutationObserver is unreliable in IE11) var counter_1 = 1; var observer = new MutationObserver(flushCallbacks); var textNode_1 = document.createTextNode(String(counter_1)); observer.observe(textNode_1, { characterData: true }); timerFunc = function () { counter_1 = (counter_1 + 1) % 2; textNode_1.data = String(counter_1); }; isUsingMicroTask = true; } else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) { // Fallback to setImmediate. // Technically it leverages the (macro) task queue, // but it is still a better choice than setTimeout. timerFunc = function () { setImmediate(flushCallbacks); }; } else { // Fallback to setTimeout. timerFunc = function () { setTimeout(flushCallbacks, 0); }; } /** * @internal */ function nextTick(cb, ctx) { var _resolve; callbacks.push(function () { if (cb) { try { cb.call(ctx); } catch (e) { handleError(e, ctx, 'nextTick'); } } else if (_resolve) { _resolve(ctx); } }); if (!pending) { pending = true; timerFunc(); } // $flow-disable-line if (!cb && typeof Promise !== 'undefined') { return new Promise(function (resolve) { _resolve = resolve; }); } } function useCssModule(name) { /* istanbul ignore else */ { { warn$2(\"useCssModule() is not supported in the global build.\"); } return emptyObject; } } /** * Runtime helper for SFC's CSS variable injection feature. * @private */ function useCssVars(getter) { if (!inBrowser && !false) return; var instance = currentInstance; if (!instance) { warn$2(\"useCssVars is called without current active component instance.\"); return; } watchPostEffect(function () { var el = instance.$el; var vars = getter(instance, instance._setupProxy); if (el && el.nodeType === 1) { var style = el.style; for (var key in vars) { style.setProperty(\"--\".concat(key), vars[key]); } } }); } /** * v3-compatible async component API. * @internal the type is manually declared in /types/v3-define-async-component.d.ts * because it relies on existing manual types */ function defineAsyncComponent(source) { if (isFunction(source)) { source = { loader: source }; } var loader = source.loader, loadingComponent = source.loadingComponent, errorComponent = source.errorComponent, _a = source.delay, delay = _a === void 0 ? 200 : _a, timeout = source.timeout, // undefined = never times out _b = source.suspensible, // undefined = never times out suspensible = _b === void 0 ? false : _b, // in Vue 3 default is true userOnError = source.onError; if (suspensible) { warn$2(\"The suspensiblbe option for async components is not supported in Vue2. It is ignored.\"); } var pendingRequest = null; var retries = 0; var retry = function () { retries++; pendingRequest = null; return load(); }; var load = function () { var thisRequest; return (pendingRequest || (thisRequest = pendingRequest = loader() .catch(function (err) { err = err instanceof Error ? err : new Error(String(err)); if (userOnError) { return new Promise(function (resolve, reject) { var userRetry = function () { return resolve(retry()); }; var userFail = function () { return reject(err); }; userOnError(err, userRetry, userFail, retries + 1); }); } else { throw err; } }) .then(function (comp) { if (thisRequest !== pendingRequest && pendingRequest) { return pendingRequest; } if (!comp) { warn$2(\"Async component loader resolved to undefined. \" + \"If you are using retry(), make sure to return its return value.\"); } // interop module default if (comp && (comp.__esModule || comp[Symbol.toStringTag] === 'Module')) { comp = comp.default; } if (comp && !isObject(comp) && !isFunction(comp)) { throw new Error(\"Invalid async component load result: \".concat(comp)); } return comp; }))); }; return function () { var component = load(); return { component: component, delay: delay, timeout: timeout, error: errorComponent, loading: loadingComponent }; }; } function createLifeCycle(hookName) { return function (fn, target) { if (target === void 0) { target = currentInstance; } if (!target) { warn$2(\"\".concat(formatName(hookName), \" is called when there is no active component instance to be \") + \"associated with. \" + \"Lifecycle injection APIs can only be used during execution of setup().\"); return; } return injectHook(target, hookName, fn); }; } function formatName(name) { if (name === 'beforeDestroy') { name = 'beforeUnmount'; } else if (name === 'destroyed') { name = 'unmounted'; } return \"on\".concat(name[0].toUpperCase() + name.slice(1)); } function injectHook(instance, hookName, fn) { var options = instance.$options; options[hookName] = mergeLifecycleHook(options[hookName], fn); } var onBeforeMount = createLifeCycle('beforeMount'); var onMounted = createLifeCycle('mounted'); var onBeforeUpdate = createLifeCycle('beforeUpdate'); var onUpdated = createLifeCycle('updated'); var onBeforeUnmount = createLifeCycle('beforeDestroy'); var onUnmounted = createLifeCycle('destroyed'); var onActivated = createLifeCycle('activated'); var onDeactivated = createLifeCycle('deactivated'); var onServerPrefetch = createLifeCycle('serverPrefetch'); var onRenderTracked = createLifeCycle('renderTracked'); var onRenderTriggered = createLifeCycle('renderTriggered'); var injectErrorCapturedHook = createLifeCycle('errorCaptured'); function onErrorCaptured(hook, target) { if (target === void 0) { target = currentInstance; } injectErrorCapturedHook(hook, target); } /** * Note: also update dist/vue.runtime.mjs when adding new exports to this file. */ var version = '2.7.14'; /** * @internal type is manually declared in /types/v3-define-component.d.ts */ function defineComponent(options) { return options; } var vca = /*#__PURE__*/Object.freeze({ __proto__: null, version: version, defineComponent: defineComponent, ref: ref$1, shallowRef: shallowRef, isRef: isRef, toRef: toRef, toRefs: toRefs, unref: unref, proxyRefs: proxyRefs, customRef: customRef, triggerRef: triggerRef, reactive: reactive, isReactive: isReactive, isReadonly: isReadonly, isShallow: isShallow, isProxy: isProxy, shallowReactive: shallowReactive, markRaw: markRaw, toRaw: toRaw, readonly: readonly, shallowReadonly: shallowReadonly, computed: computed, watch: watch, watchEffect: watchEffect, watchPostEffect: watchPostEffect, watchSyncEffect: watchSyncEffect, EffectScope: EffectScope, effectScope: effectScope, onScopeDispose: onScopeDispose, getCurrentScope: getCurrentScope, provide: provide, inject: inject, h: h, getCurrentInstance: getCurrentInstance, useSlots: useSlots, useAttrs: useAttrs, useListeners: useListeners, mergeDefaults: mergeDefaults, nextTick: nextTick, set: set, del: del, useCssModule: useCssModule, useCssVars: useCssVars, defineAsyncComponent: defineAsyncComponent, onBeforeMount: onBeforeMount, onMounted: onMounted, onBeforeUpdate: onBeforeUpdate, onUpdated: onUpdated, onBeforeUnmount: onBeforeUnmount, onUnmounted: onUnmounted, onActivated: onActivated, onDeactivated: onDeactivated, onServerPrefetch: onServerPrefetch, onRenderTracked: onRenderTracked, onRenderTriggered: onRenderTriggered, onErrorCaptured: onErrorCaptured }); var seenObjects = new _Set(); /** * Recursively traverse an object to evoke all converted * getters, so that every nested property inside the object * is collected as a \"deep\" dependency. */ function traverse(val) { _traverse(val, seenObjects); seenObjects.clear(); return val; } function _traverse(val, seen) { var i, keys; var isA = isArray(val); if ((!isA && !isObject(val)) || val.__v_skip /* ReactiveFlags.SKIP */ || Object.isFrozen(val) || val instanceof VNode) { return; } if (val.__ob__) { var depId = val.__ob__.dep.id; if (seen.has(depId)) { return; } seen.add(depId); } if (isA) { i = val.length; while (i--) _traverse(val[i], seen); } else if (isRef(val)) { _traverse(val.value, seen); } else { keys = Object.keys(val); i = keys.length; while (i--) _traverse(val[keys[i]], seen); } } var uid$1 = 0; /** * A watcher parses an expression, collects dependencies, * and fires callback when the expression value changes. * This is used for both the $watch() api and directives. * @internal */ var Watcher = /** @class */ (function () { function Watcher(vm, expOrFn, cb, options, isRenderWatcher) { recordEffectScope(this, // if the active effect scope is manually created (not a component scope), // prioritize it activeEffectScope && !activeEffectScope._vm ? activeEffectScope : vm ? vm._scope : undefined); if ((this.vm = vm) && isRenderWatcher) { vm._watcher = this; } // options if (options) { this.deep = !!options.deep; this.user = !!options.user; this.lazy = !!options.lazy; this.sync = !!options.sync; this.before = options.before; { this.onTrack = options.onTrack; this.onTrigger = options.onTrigger; } } else { this.deep = this.user = this.lazy = this.sync = false; } this.cb = cb; this.id = ++uid$1; // uid for batching this.active = true; this.post = false; this.dirty = this.lazy; // for lazy watchers this.deps = []; this.newDeps = []; this.depIds = new _Set(); this.newDepIds = new _Set(); this.expression = expOrFn.toString() ; // parse expression for getter if (isFunction(expOrFn)) { this.getter = expOrFn; } else { this.getter = parsePath(expOrFn); if (!this.getter) { this.getter = noop; warn$2(\"Failed watching path: \\\"\".concat(expOrFn, \"\\\" \") + 'Watcher only accepts simple dot-delimited paths. ' + 'For full control, use a function instead.', vm); } } this.value = this.lazy ? undefined : this.get(); } /** * Evaluate the getter, and re-collect dependencies. */ Watcher.prototype.get = function () { pushTarget(this); var value; var vm = this.vm; try { value = this.getter.call(vm, vm); } catch (e) { if (this.user) { handleError(e, vm, \"getter for watcher \\\"\".concat(this.expression, \"\\\"\")); } else { throw e; } } finally { // \"touch\" every property so they are all tracked as // dependencies for deep watching if (this.deep) { traverse(value); } popTarget(); this.cleanupDeps(); } return value; }; /** * Add a dependency to this directive. */ Watcher.prototype.addDep = function (dep) { var id = dep.id; if (!this.newDepIds.has(id)) { this.newDepIds.add(id); this.newDeps.push(dep); if (!this.depIds.has(id)) { dep.addSub(this); } } }; /** * Clean up for dependency collection. */ Watcher.prototype.cleanupDeps = function () { var i = this.deps.length; while (i--) { var dep = this.deps[i]; if (!this.newDepIds.has(dep.id)) { dep.removeSub(this); } } var tmp = this.depIds; this.depIds = this.newDepIds; this.newDepIds = tmp; this.newDepIds.clear(); tmp = this.deps; this.deps = this.newDeps; this.newDeps = tmp; this.newDeps.length = 0; }; /** * Subscriber interface. * Will be called when a dependency changes. */ Watcher.prototype.update = function () { /* istanbul ignore else */ if (this.lazy) { this.dirty = true; } else if (this.sync) { this.run(); } else { queueWatcher(this); } }; /** * Scheduler job interface. * Will be called by the scheduler. */ Watcher.prototype.run = function () { if (this.active) { var value = this.get(); if (value !== this.value || // Deep watchers and watchers on Object/Arrays should fire even // when the value is the same, because the value may // have mutated. isObject(value) || this.deep) { // set new value var oldValue = this.value; this.value = value; if (this.user) { var info = \"callback for watcher \\\"\".concat(this.expression, \"\\\"\"); invokeWithErrorHandling(this.cb, this.vm, [value, oldValue], this.vm, info); } else { this.cb.call(this.vm, value, oldValue); } } } }; /** * Evaluate the value of the watcher. * This only gets called for lazy watchers. */ Watcher.prototype.evaluate = function () { this.value = this.get(); this.dirty = false; }; /** * Depend on all deps collected by this watcher. */ Watcher.prototype.depend = function () { var i = this.deps.length; while (i--) { this.deps[i].depend(); } }; /** * Remove self from all dependencies' subscriber list. */ Watcher.prototype.teardown = function () { if (this.vm && !this.vm._isBeingDestroyed) { remove$2(this.vm._scope.effects, this); } if (this.active) { var i = this.deps.length; while (i--) { this.deps[i].removeSub(this); } this.active = false; if (this.onStop) { this.onStop(); } } }; return Watcher; }()); var sharedPropertyDefinition = { enumerable: true, configurable: true, get: noop, set: noop }; function proxy(target, sourceKey, key) { sharedPropertyDefinition.get = function proxyGetter() { return this[sourceKey][key]; }; sharedPropertyDefinition.set = function proxySetter(val) { this[sourceKey][key] = val; }; Object.defineProperty(target, key, sharedPropertyDefinition); } function initState(vm) { var opts = vm.$options; if (opts.props) initProps$1(vm, opts.props); // Composition API initSetup(vm); if (opts.methods) initMethods(vm, opts.methods); if (opts.data) { initData(vm); } else { var ob = observe((vm._data = {})); ob && ob.vmCount++; } if (opts.computed) initComputed$1(vm, opts.computed); if (opts.watch && opts.watch !== nativeWatch) { initWatch(vm, opts.watch); } } function initProps$1(vm, propsOptions) { var propsData = vm.$options.propsData || {}; var props = (vm._props = shallowReactive({})); // cache prop keys so that future props updates can iterate using Array // instead of dynamic object key enumeration. var keys = (vm.$options._propKeys = []); var isRoot = !vm.$parent; // root instance props should be converted if (!isRoot) { toggleObserving(false); } var _loop_1 = function (key) { keys.push(key); var value = validateProp(key, propsOptions, propsData, vm); /* istanbul ignore else */ { var hyphenatedKey = hyphenate(key); if (isReservedAttribute(hyphenatedKey) || config.isReservedAttr(hyphenatedKey)) { warn$2(\"\\\"\".concat(hyphenatedKey, \"\\\" is a reserved attribute and cannot be used as component prop.\"), vm); } defineReactive(props, key, value, function () { if (!isRoot && !isUpdatingChildComponent) { warn$2(\"Avoid mutating a prop directly since the value will be \" + \"overwritten whenever the parent component re-renders. \" + \"Instead, use a data or computed property based on the prop's \" + \"value. Prop being mutated: \\\"\".concat(key, \"\\\"\"), vm); } }); } // static props are already proxied on the component's prototype // during Vue.extend(). We only need to proxy props defined at // instantiation here. if (!(key in vm)) { proxy(vm, \"_props\", key); } }; for (var key in propsOptions) { _loop_1(key); } toggleObserving(true); } function initData(vm) { var data = vm.$options.data; data = vm._data = isFunction(data) ? getData(data, vm) : data || {}; if (!isPlainObject(data)) { data = {}; warn$2('data functions should return an object:\\n' + 'https://v2.vuejs.org/v2/guide/components.html#data-Must-Be-a-Function', vm); } // proxy data on instance var keys = Object.keys(data); var props = vm.$options.props; var methods = vm.$options.methods; var i = keys.length; while (i--) { var key = keys[i]; { if (methods && hasOwn(methods, key)) { warn$2(\"Method \\\"\".concat(key, \"\\\" has already been defined as a data property.\"), vm); } } if (props && hasOwn(props, key)) { warn$2(\"The data property \\\"\".concat(key, \"\\\" is already declared as a prop. \") + \"Use prop default value instead.\", vm); } else if (!isReserved(key)) { proxy(vm, \"_data\", key); } } // observe data var ob = observe(data); ob && ob.vmCount++; } function getData(data, vm) { // #7573 disable dep collection when invoking data getters pushTarget(); try { return data.call(vm, vm); } catch (e) { handleError(e, vm, \"data()\"); return {}; } finally { popTarget(); } } var computedWatcherOptions = { lazy: true }; function initComputed$1(vm, computed) { // $flow-disable-line var watchers = (vm._computedWatchers = Object.create(null)); // computed properties are just getters during SSR var isSSR = isServerRendering(); for (var key in computed) { var userDef = computed[key]; var getter = isFunction(userDef) ? userDef : userDef.get; if (getter == null) { warn$2(\"Getter is missing for computed property \\\"\".concat(key, \"\\\".\"), vm); } if (!isSSR) { // create internal watcher for the computed property. watchers[key] = new Watcher(vm, getter || noop, noop, computedWatcherOptions); } // component-defined computed properties are already defined on the // component prototype. We only need to define computed properties defined // at instantiation here. if (!(key in vm)) { defineComputed(vm, key, userDef); } else { if (key in vm.$data) { warn$2(\"The computed property \\\"\".concat(key, \"\\\" is already defined in data.\"), vm); } else if (vm.$options.props && key in vm.$options.props) { warn$2(\"The computed property \\\"\".concat(key, \"\\\" is already defined as a prop.\"), vm); } else if (vm.$options.methods && key in vm.$options.methods) { warn$2(\"The computed property \\\"\".concat(key, \"\\\" is already defined as a method.\"), vm); } } } } function defineComputed(target, key, userDef) { var shouldCache = !isServerRendering(); if (isFunction(userDef)) { sharedPropertyDefinition.get = shouldCache ? createComputedGetter(key) : createGetterInvoker(userDef); sharedPropertyDefinition.set = noop; } else { sharedPropertyDefinition.get = userDef.get ? shouldCache && userDef.cache !== false ? createComputedGetter(key) : createGetterInvoker(userDef.get) : noop; sharedPropertyDefinition.set = userDef.set || noop; } if (sharedPropertyDefinition.set === noop) { sharedPropertyDefinition.set = function () { warn$2(\"Computed property \\\"\".concat(key, \"\\\" was assigned to but it has no setter.\"), this); }; } Object.defineProperty(target, key, sharedPropertyDefinition); } function createComputedGetter(key) { return function computedGetter() { var watcher = this._computedWatchers && this._computedWatchers[key]; if (watcher) { if (watcher.dirty) { watcher.evaluate(); } if (Dep.target) { if (Dep.target.onTrack) { Dep.target.onTrack({ effect: Dep.target, target: this, type: \"get\" /* TrackOpTypes.GET */, key: key }); } watcher.depend(); } return watcher.value; } }; } function createGetterInvoker(fn) { return function computedGetter() { return fn.call(this, this); }; } function initMethods(vm, methods) { var props = vm.$options.props; for (var key in methods) { { if (typeof methods[key] !== 'function') { warn$2(\"Method \\\"\".concat(key, \"\\\" has type \\\"\").concat(typeof methods[key], \"\\\" in the component definition. \") + \"Did you reference the function correctly?\", vm); } if (props && hasOwn(props, key)) { warn$2(\"Method \\\"\".concat(key, \"\\\" has already been defined as a prop.\"), vm); } if (key in vm && isReserved(key)) { warn$2(\"Method \\\"\".concat(key, \"\\\" conflicts with an existing Vue instance method. \") + \"Avoid defining component methods that start with _ or $.\"); } } vm[key] = typeof methods[key] !== 'function' ? noop : bind$1(methods[key], vm); } } function initWatch(vm, watch) { for (var key in watch) { var handler = watch[key]; if (isArray(handler)) { for (var i = 0; i < handler.length; i++) { createWatcher(vm, key, handler[i]); } } else { createWatcher(vm, key, handler); } } } function createWatcher(vm, expOrFn, handler, options) { if (isPlainObject(handler)) { options = handler; handler = handler.handler; } if (typeof handler === 'string') { handler = vm[handler]; } return vm.$watch(expOrFn, handler, options); } function stateMixin(Vue) { // flow somehow has problems with directly declared definition object // when using Object.defineProperty, so we have to procedurally build up // the object here. var dataDef = {}; dataDef.get = function () { return this._data; }; var propsDef = {}; propsDef.get = function () { return this._props; }; { dataDef.set = function () { warn$2('Avoid replacing instance root $data. ' + 'Use nested data properties instead.', this); }; propsDef.set = function () { warn$2(\"$props is readonly.\", this); }; } Object.defineProperty(Vue.prototype, '$data', dataDef); Object.defineProperty(Vue.prototype, '$props', propsDef); Vue.prototype.$set = set; Vue.prototype.$delete = del; Vue.prototype.$watch = function (expOrFn, cb, options) { var vm = this; if (isPlainObject(cb)) { return createWatcher(vm, expOrFn, cb, options); } options = options || {}; options.user = true; var watcher = new Watcher(vm, expOrFn, cb, options); if (options.immediate) { var info = \"callback for immediate watcher \\\"\".concat(watcher.expression, \"\\\"\"); pushTarget(); invokeWithErrorHandling(cb, vm, [watcher.value], vm, info); popTarget(); } return function unwatchFn() { watcher.teardown(); }; }; } function initProvide(vm) { var provideOption = vm.$options.provide; if (provideOption) { var provided = isFunction(provideOption) ? provideOption.call(vm) : provideOption; if (!isObject(provided)) { return; } var source = resolveProvided(vm); // IE9 doesn't support Object.getOwnPropertyDescriptors so we have to // iterate the keys ourselves. var keys = hasSymbol ? Reflect.ownKeys(provided) : Object.keys(provided); for (var i = 0; i < keys.length; i++) { var key = keys[i]; Object.defineProperty(source, key, Object.getOwnPropertyDescriptor(provided, key)); } } } function initInjections(vm) { var result = resolveInject(vm.$options.inject, vm); if (result) { toggleObserving(false); Object.keys(result).forEach(function (key) { /* istanbul ignore else */ { defineReactive(vm, key, result[key], function () { warn$2(\"Avoid mutating an injected value directly since the changes will be \" + \"overwritten whenever the provided component re-renders. \" + \"injection being mutated: \\\"\".concat(key, \"\\\"\"), vm); }); } }); toggleObserving(true); } } function resolveInject(inject, vm) { if (inject) { // inject is :any because flow is not smart enough to figure out cached var result = Object.create(null); var keys = hasSymbol ? Reflect.ownKeys(inject) : Object.keys(inject); for (var i = 0; i < keys.length; i++) { var key = keys[i]; // #6574 in case the inject object is observed... if (key === '__ob__') continue; var provideKey = inject[key].from; if (provideKey in vm._provided) { result[key] = vm._provided[provideKey]; } else if ('default' in inject[key]) { var provideDefault = inject[key].default; result[key] = isFunction(provideDefault) ? provideDefault.call(vm) : provideDefault; } else { warn$2(\"Injection \\\"\".concat(key, \"\\\" not found\"), vm); } } return result; } } var uid = 0; function initMixin$1(Vue) { Vue.prototype._init = function (options) { var vm = this; // a uid vm._uid = uid++; var startTag, endTag; /* istanbul ignore if */ if (config.performance && mark) { startTag = \"vue-perf-start:\".concat(vm._uid); endTag = \"vue-perf-end:\".concat(vm._uid); mark(startTag); } // a flag to mark this as a Vue instance without having to do instanceof // check vm._isVue = true; // avoid instances from being observed vm.__v_skip = true; // effect scope vm._scope = new EffectScope(true /* detached */); vm._scope._vm = true; // merge options if (options && options._isComponent) { // optimize internal component instantiation // since dynamic options merging is pretty slow, and none of the // internal component options needs special treatment. initInternalComponent(vm, options); } else { vm.$options = mergeOptions(resolveConstructorOptions(vm.constructor), options || {}, vm); } /* istanbul ignore else */ { initProxy(vm); } // expose real self vm._self = vm; initLifecycle(vm); initEvents(vm); initRender(vm); callHook$1(vm, 'beforeCreate', undefined, false /* setContext */); initInjections(vm); // resolve injections before data/props initState(vm); initProvide(vm); // resolve provide after data/props callHook$1(vm, 'created'); /* istanbul ignore if */ if (config.performance && mark) { vm._name = formatComponentName(vm, false); mark(endTag); measure(\"vue \".concat(vm._name, \" init\"), startTag, endTag); } if (vm.$options.el) { vm.$mount(vm.$options.el); } }; } function initInternalComponent(vm, options) { var opts = (vm.$options = Object.create(vm.constructor.options)); // doing this because it's faster than dynamic enumeration. var parentVnode = options._parentVnode; opts.parent = options.parent; opts._parentVnode = parentVnode; var vnodeComponentOptions = parentVnode.componentOptions; opts.propsData = vnodeComponentOptions.propsData; opts._parentListeners = vnodeComponentOptions.listeners; opts._renderChildren = vnodeComponentOptions.children; opts._componentTag = vnodeComponentOptions.tag; if (options.render) { opts.render = options.render; opts.staticRenderFns = options.staticRenderFns; } } function resolveConstructorOptions(Ctor) { var options = Ctor.options; if (Ctor.super) { var superOptions = resolveConstructorOptions(Ctor.super); var cachedSuperOptions = Ctor.superOptions; if (superOptions !== cachedSuperOptions) { // super option changed, // need to resolve new options. Ctor.superOptions = superOptions; // check if there are any late-modified/attached options (#4976) var modifiedOptions = resolveModifiedOptions(Ctor); // update base extend options if (modifiedOptions) { extend(Ctor.extendOptions, modifiedOptions); } options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions); if (options.name) { options.components[options.name] = Ctor; } } } return options; } function resolveModifiedOptions(Ctor) { var modified; var latest = Ctor.options; var sealed = Ctor.sealedOptions; for (var key in latest) { if (latest[key] !== sealed[key]) { if (!modified) modified = {}; modified[key] = latest[key]; } } return modified; } function FunctionalRenderContext(data, props, children, parent, Ctor) { var _this = this; var options = Ctor.options; // ensure the createElement function in functional components // gets a unique context - this is necessary for correct named slot check var contextVm; if (hasOwn(parent, '_uid')) { contextVm = Object.create(parent); contextVm._original = parent; } else { // the context vm passed in is a functional context as well. // in this case we want to make sure we are able to get a hold to the // real context instance. contextVm = parent; // @ts-ignore parent = parent._original; } var isCompiled = isTrue(options._compiled); var needNormalization = !isCompiled; this.data = data; this.props = props; this.children = children; this.parent = parent; this.listeners = data.on || emptyObject; this.injections = resolveInject(options.inject, parent); this.slots = function () { if (!_this.$slots) { normalizeScopedSlots(parent, data.scopedSlots, (_this.$slots = resolveSlots(children, parent))); } return _this.$slots; }; Object.defineProperty(this, 'scopedSlots', { enumerable: true, get: function () { return normalizeScopedSlots(parent, data.scopedSlots, this.slots()); } }); // support for compiled functional template if (isCompiled) { // exposing $options for renderStatic() this.$options = options; // pre-resolve slots for renderSlot() this.$slots = this.slots(); this.$scopedSlots = normalizeScopedSlots(parent, data.scopedSlots, this.$slots); } if (options._scopeId) { this._c = function (a, b, c, d) { var vnode = createElement$1(contextVm, a, b, c, d, needNormalization); if (vnode && !isArray(vnode)) { vnode.fnScopeId = options._scopeId; vnode.fnContext = parent; } return vnode; }; } else { this._c = function (a, b, c, d) { return createElement$1(contextVm, a, b, c, d, needNormalization); }; } } installRenderHelpers(FunctionalRenderContext.prototype); function createFunctionalComponent(Ctor, propsData, data, contextVm, children) { var options = Ctor.options; var props = {}; var propOptions = options.props; if (isDef(propOptions)) { for (var key in propOptions) { props[key] = validateProp(key, propOptions, propsData || emptyObject); } } else { if (isDef(data.attrs)) mergeProps(props, data.attrs); if (isDef(data.props)) mergeProps(props, data.props); } var renderContext = new FunctionalRenderContext(data, props, children, contextVm, Ctor); var vnode = options.render.call(null, renderContext._c, renderContext); if (vnode instanceof VNode) { return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext); } else if (isArray(vnode)) { var vnodes = normalizeChildren(vnode) || []; var res = new Array(vnodes.length); for (var i = 0; i < vnodes.length; i++) { res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext); } return res; } } function cloneAndMarkFunctionalResult(vnode, data, contextVm, options, renderContext) { // #7817 clone node before setting fnContext, otherwise if the node is reused // (e.g. it was from a cached normal slot) the fnContext causes named slots // that should not be matched to match. var clone = cloneVNode(vnode); clone.fnContext = contextVm; clone.fnOptions = options; { (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext; } if (data.slot) { (clone.data || (clone.data = {})).slot = data.slot; } return clone; } function mergeProps(to, from) { for (var key in from) { to[camelize(key)] = from[key]; } } function getComponentName(options) { return options.name || options.__name || options._componentTag; } // inline hooks to be invoked on component VNodes during patch var componentVNodeHooks = { init: function (vnode, hydrating) { if (vnode.componentInstance && !vnode.componentInstance._isDestroyed && vnode.data.keepAlive) { // kept-alive components, treat as a patch var mountedNode = vnode; // work around flow componentVNodeHooks.prepatch(mountedNode, mountedNode); } else { var child = (vnode.componentInstance = createComponentInstanceForVnode(vnode, activeInstance)); child.$mount(hydrating ? vnode.elm : undefined, hydrating); } }, prepatch: function (oldVnode, vnode) { var options = vnode.componentOptions; var child = (vnode.componentInstance = oldVnode.componentInstance); updateChildComponent(child, options.propsData, // updated props options.listeners, // updated listeners vnode, // new parent vnode options.children // new children ); }, insert: function (vnode) { var context = vnode.context, componentInstance = vnode.componentInstance; if (!componentInstance._isMounted) { componentInstance._isMounted = true; callHook$1(componentInstance, 'mounted'); } if (vnode.data.keepAlive) { if (context._isMounted) { // vue-router#1212 // During updates, a kept-alive component's child components may // change, so directly walking the tree here may call activated hooks // on incorrect children. Instead we push them into a queue which will // be processed after the whole patch process ended. queueActivatedComponent(componentInstance); } else { activateChildComponent(componentInstance, true /* direct */); } } }, destroy: function (vnode) { var componentInstance = vnode.componentInstance; if (!componentInstance._isDestroyed) { if (!vnode.data.keepAlive) { componentInstance.$destroy(); } else { deactivateChildComponent(componentInstance, true /* direct */); } } } }; var hooksToMerge = Object.keys(componentVNodeHooks); function createComponent(Ctor, data, context, children, tag) { if (isUndef(Ctor)) { return; } var baseCtor = context.$options._base; // plain options object: turn it into a constructor if (isObject(Ctor)) { Ctor = baseCtor.extend(Ctor); } // if at this stage it's not a constructor or an async component factory, // reject. if (typeof Ctor !== 'function') { { warn$2(\"Invalid Component definition: \".concat(String(Ctor)), context); } return; } // async component var asyncFactory; // @ts-expect-error if (isUndef(Ctor.cid)) { asyncFactory = Ctor; Ctor = resolveAsyncComponent(asyncFactory, baseCtor); if (Ctor === undefined) { // return a placeholder node for async component, which is rendered // as a comment node but preserves all the raw information for the node. // the information will be used for async server-rendering and hydration. return createAsyncPlaceholder(asyncFactory, data, context, children, tag); } } data = data || {}; // resolve constructor options in case global mixins are applied after // component constructor creation resolveConstructorOptions(Ctor); // transform component v-model data into props & events if (isDef(data.model)) { // @ts-expect-error transformModel(Ctor.options, data); } // extract props // @ts-expect-error var propsData = extractPropsFromVNodeData(data, Ctor, tag); // functional component // @ts-expect-error if (isTrue(Ctor.options.functional)) { return createFunctionalComponent(Ctor, propsData, data, context, children); } // extract listeners, since these needs to be treated as // child component listeners instead of DOM listeners var listeners = data.on; // replace with listeners with .native modifier // so it gets processed during parent component patch. data.on = data.nativeOn; // @ts-expect-error if (isTrue(Ctor.options.abstract)) { // abstract components do not keep anything // other than props & listeners & slot // work around flow var slot = data.slot; data = {}; if (slot) { data.slot = slot; } } // install component management hooks onto the placeholder node installComponentHooks(data); // return a placeholder vnode // @ts-expect-error var name = getComponentName(Ctor.options) || tag; var vnode = new VNode( // @ts-expect-error \"vue-component-\".concat(Ctor.cid).concat(name ? \"-\".concat(name) : ''), data, undefined, undefined, undefined, context, // @ts-expect-error { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children }, asyncFactory); return vnode; } function createComponentInstanceForVnode( // we know it's MountedComponentVNode but flow doesn't vnode, // activeInstance in lifecycle state parent) { var options = { _isComponent: true, _parentVnode: vnode, parent: parent }; // check inline-template render functions var inlineTemplate = vnode.data.inlineTemplate; if (isDef(inlineTemplate)) { options.render = inlineTemplate.render; options.staticRenderFns = inlineTemplate.staticRenderFns; } return new vnode.componentOptions.Ctor(options); } function installComponentHooks(data) { var hooks = data.hook || (data.hook = {}); for (var i = 0; i < hooksToMerge.length; i++) { var key = hooksToMerge[i]; var existing = hooks[key]; var toMerge = componentVNodeHooks[key]; // @ts-expect-error if (existing !== toMerge && !(existing && existing._merged)) { hooks[key] = existing ? mergeHook(toMerge, existing) : toMerge; } } } function mergeHook(f1, f2) { var merged = function (a, b) { // flow complains about extra args which is why we use any f1(a, b); f2(a, b); }; merged._merged = true; return merged; } // transform component v-model info (value and callback) into // prop and event handler respectively. function transformModel(options, data) { var prop = (options.model && options.model.prop) || 'value'; var event = (options.model && options.model.event) || 'input'; (data.attrs || (data.attrs = {}))[prop] = data.model.value; var on = data.on || (data.on = {}); var existing = on[event]; var callback = data.model.callback; if (isDef(existing)) { if (isArray(existing) ? existing.indexOf(callback) === -1 : existing !== callback) { on[event] = [callback].concat(existing); } } else { on[event] = callback; } } var warn$2 = noop; var tip = noop; var generateComponentTrace; // work around flow check var formatComponentName; { var hasConsole_1 = typeof console !== 'undefined'; var classifyRE_1 = /(?:^|[-_])(\\w)/g; var classify_1 = function (str) { return str.replace(classifyRE_1, function (c) { return c.toUpperCase(); }).replace(/[-_]/g, ''); }; warn$2 = function (msg, vm) { if (vm === void 0) { vm = currentInstance; } var trace = vm ? generateComponentTrace(vm) : ''; if (config.warnHandler) { config.warnHandler.call(null, msg, vm, trace); } else if (hasConsole_1 && !config.silent) { console.error(\"[Vue warn]: \".concat(msg).concat(trace)); } }; tip = function (msg, vm) { if (hasConsole_1 && !config.silent) { console.warn(\"[Vue tip]: \".concat(msg) + (vm ? generateComponentTrace(vm) : '')); } }; formatComponentName = function (vm, includeFile) { if (vm.$root === vm) { return ''; } var options = isFunction(vm) && vm.cid != null ? vm.options : vm._isVue ? vm.$options || vm.constructor.options : vm; var name = getComponentName(options); var file = options.__file; if (!name && file) { var match = file.match(/([^/\\\\]+)\\.vue$/); name = match && match[1]; } return ((name ? \"\") : \"\") + (file && includeFile !== false ? \" at \".concat(file) : '')); }; var repeat_1 = function (str, n) { var res = ''; while (n) { if (n % 2 === 1) res += str; if (n > 1) str += str; n >>= 1; } return res; }; generateComponentTrace = function (vm) { if (vm._isVue && vm.$parent) { var tree = []; var currentRecursiveSequence = 0; while (vm) { if (tree.length > 0) { var last = tree[tree.length - 1]; if (last.constructor === vm.constructor) { currentRecursiveSequence++; vm = vm.$parent; continue; } else if (currentRecursiveSequence > 0) { tree[tree.length - 1] = [last, currentRecursiveSequence]; currentRecursiveSequence = 0; } } tree.push(vm); vm = vm.$parent; } return ('\\n\\nfound in\\n\\n' + tree .map(function (vm, i) { return \"\".concat(i === 0 ? '---> ' : repeat_1(' ', 5 + i * 2)).concat(isArray(vm) ? \"\".concat(formatComponentName(vm[0]), \"... (\").concat(vm[1], \" recursive calls)\") : formatComponentName(vm)); }) .join('\\n')); } else { return \"\\n\\n(found in \".concat(formatComponentName(vm), \")\"); } }; } /** * Option overwriting strategies are functions that handle * how to merge a parent option value and a child option * value into the final value. */ var strats = config.optionMergeStrategies; /** * Options with restrictions */ { strats.el = strats.propsData = function (parent, child, vm, key) { if (!vm) { warn$2(\"option \\\"\".concat(key, \"\\\" can only be used during instance \") + 'creation with the `new` keyword.'); } return defaultStrat(parent, child); }; } /** * Helper that recursively merges two data objects together. */ function mergeData(to, from, recursive) { if (recursive === void 0) { recursive = true; } if (!from) return to; var key, toVal, fromVal; var keys = hasSymbol ? Reflect.ownKeys(from) : Object.keys(from); for (var i = 0; i < keys.length; i++) { key = keys[i]; // in case the object is already observed... if (key === '__ob__') continue; toVal = to[key]; fromVal = from[key]; if (!recursive || !hasOwn(to, key)) { set(to, key, fromVal); } else if (toVal !== fromVal && isPlainObject(toVal) && isPlainObject(fromVal)) { mergeData(toVal, fromVal); } } return to; } /** * Data */ function mergeDataOrFn(parentVal, childVal, vm) { if (!vm) { // in a Vue.extend merge, both should be functions if (!childVal) { return parentVal; } if (!parentVal) { return childVal; } // when parentVal & childVal are both present, // we need to return a function that returns the // merged result of both functions... no need to // check if parentVal is a function here because // it has to be a function to pass previous merges. return function mergedDataFn() { return mergeData(isFunction(childVal) ? childVal.call(this, this) : childVal, isFunction(parentVal) ? parentVal.call(this, this) : parentVal); }; } else { return function mergedInstanceDataFn() { // instance merge var instanceData = isFunction(childVal) ? childVal.call(vm, vm) : childVal; var defaultData = isFunction(parentVal) ? parentVal.call(vm, vm) : parentVal; if (instanceData) { return mergeData(instanceData, defaultData); } else { return defaultData; } }; } } strats.data = function (parentVal, childVal, vm) { if (!vm) { if (childVal && typeof childVal !== 'function') { warn$2('The \"data\" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm); return parentVal; } return mergeDataOrFn(parentVal, childVal); } return mergeDataOrFn(parentVal, childVal, vm); }; /** * Hooks and props are merged as arrays. */ function mergeLifecycleHook(parentVal, childVal) { var res = childVal ? parentVal ? parentVal.concat(childVal) : isArray(childVal) ? childVal : [childVal] : parentVal; return res ? dedupeHooks(res) : res; } function dedupeHooks(hooks) { var res = []; for (var i = 0; i < hooks.length; i++) { if (res.indexOf(hooks[i]) === -1) { res.push(hooks[i]); } } return res; } LIFECYCLE_HOOKS.forEach(function (hook) { strats[hook] = mergeLifecycleHook; }); /** * Assets * * When a vm is present (instance creation), we need to do * a three-way merge between constructor options, instance * options and parent options. */ function mergeAssets(parentVal, childVal, vm, key) { var res = Object.create(parentVal || null); if (childVal) { assertObjectType(key, childVal, vm); return extend(res, childVal); } else { return res; } } ASSET_TYPES.forEach(function (type) { strats[type + 's'] = mergeAssets; }); /** * Watchers. * * Watchers hashes should not overwrite one * another, so we merge them as arrays. */ strats.watch = function (parentVal, childVal, vm, key) { // work around Firefox's Object.prototype.watch... //@ts-expect-error work around if (parentVal === nativeWatch) parentVal = undefined; //@ts-expect-error work around if (childVal === nativeWatch) childVal = undefined; /* istanbul ignore if */ if (!childVal) return Object.create(parentVal || null); { assertObjectType(key, childVal, vm); } if (!parentVal) return childVal; var ret = {}; extend(ret, parentVal); for (var key_1 in childVal) { var parent_1 = ret[key_1]; var child = childVal[key_1]; if (parent_1 && !isArray(parent_1)) { parent_1 = [parent_1]; } ret[key_1] = parent_1 ? parent_1.concat(child) : isArray(child) ? child : [child]; } return ret; }; /** * Other object hashes. */ strats.props = strats.methods = strats.inject = strats.computed = function (parentVal, childVal, vm, key) { if (childVal && true) { assertObjectType(key, childVal, vm); } if (!parentVal) return childVal; var ret = Object.create(null); extend(ret, parentVal); if (childVal) extend(ret, childVal); return ret; }; strats.provide = function (parentVal, childVal) { if (!parentVal) return childVal; return function () { var ret = Object.create(null); mergeData(ret, isFunction(parentVal) ? parentVal.call(this) : parentVal); if (childVal) { mergeData(ret, isFunction(childVal) ? childVal.call(this) : childVal, false // non-recursive ); } return ret; }; }; /** * Default strategy. */ var defaultStrat = function (parentVal, childVal) { return childVal === undefined ? parentVal : childVal; }; /** * Validate component names */ function checkComponents(options) { for (var key in options.components) { validateComponentName(key); } } function validateComponentName(name) { if (!new RegExp(\"^[a-zA-Z][\\\\-\\\\.0-9_\".concat(unicodeRegExp.source, \"]*$\")).test(name)) { warn$2('Invalid component name: \"' + name + '\". Component names ' + 'should conform to valid custom element name in html5 specification.'); } if (isBuiltInTag(name) || config.isReservedTag(name)) { warn$2('Do not use built-in or reserved HTML elements as component ' + 'id: ' + name); } } /** * Ensure all props option syntax are normalized into the * Object-based format. */ function normalizeProps(options, vm) { var props = options.props; if (!props) return; var res = {}; var i, val, name; if (isArray(props)) { i = props.length; while (i--) { val = props[i]; if (typeof val === 'string') { name = camelize(val); res[name] = { type: null }; } else { warn$2('props must be strings when using array syntax.'); } } } else if (isPlainObject(props)) { for (var key in props) { val = props[key]; name = camelize(key); res[name] = isPlainObject(val) ? val : { type: val }; } } else { warn$2(\"Invalid value for option \\\"props\\\": expected an Array or an Object, \" + \"but got \".concat(toRawType(props), \".\"), vm); } options.props = res; } /** * Normalize all injections into Object-based format */ function normalizeInject(options, vm) { var inject = options.inject; if (!inject) return; var normalized = (options.inject = {}); if (isArray(inject)) { for (var i = 0; i < inject.length; i++) { normalized[inject[i]] = { from: inject[i] }; } } else if (isPlainObject(inject)) { for (var key in inject) { var val = inject[key]; normalized[key] = isPlainObject(val) ? extend({ from: key }, val) : { from: val }; } } else { warn$2(\"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" + \"but got \".concat(toRawType(inject), \".\"), vm); } } /** * Normalize raw function directives into object format. */ function normalizeDirectives$1(options) { var dirs = options.directives; if (dirs) { for (var key in dirs) { var def = dirs[key]; if (isFunction(def)) { dirs[key] = { bind: def, update: def }; } } } } function assertObjectType(name, value, vm) { if (!isPlainObject(value)) { warn$2(\"Invalid value for option \\\"\".concat(name, \"\\\": expected an Object, \") + \"but got \".concat(toRawType(value), \".\"), vm); } } /** * Merge two option objects into a new one. * Core utility used in both instantiation and inheritance. */ function mergeOptions(parent, child, vm) { { checkComponents(child); } if (isFunction(child)) { // @ts-expect-error child = child.options; } normalizeProps(child, vm); normalizeInject(child, vm); normalizeDirectives$1(child); // Apply extends and mixins on the child options, // but only if it is a raw options object that isn't // the result of another mergeOptions call. // Only merged options has the _base property. if (!child._base) { if (child.extends) { parent = mergeOptions(parent, child.extends, vm); } if (child.mixins) { for (var i = 0, l = child.mixins.length; i < l; i++) { parent = mergeOptions(parent, child.mixins[i], vm); } } } var options = {}; var key; for (key in parent) { mergeField(key); } for (key in child) { if (!hasOwn(parent, key)) { mergeField(key); } } function mergeField(key) { var strat = strats[key] || defaultStrat; options[key] = strat(parent[key], child[key], vm, key); } return options; } /** * Resolve an asset. * This function is used because child instances need access * to assets defined in its ancestor chain. */ function resolveAsset(options, type, id, warnMissing) { /* istanbul ignore if */ if (typeof id !== 'string') { return; } var assets = options[type]; // check local registration variations first if (hasOwn(assets, id)) return assets[id]; var camelizedId = camelize(id); if (hasOwn(assets, camelizedId)) return assets[camelizedId]; var PascalCaseId = capitalize(camelizedId); if (hasOwn(assets, PascalCaseId)) return assets[PascalCaseId]; // fallback to prototype chain var res = assets[id] || assets[camelizedId] || assets[PascalCaseId]; if (warnMissing && !res) { warn$2('Failed to resolve ' + type.slice(0, -1) + ': ' + id); } return res; } function validateProp(key, propOptions, propsData, vm) { var prop = propOptions[key]; var absent = !hasOwn(propsData, key); var value = propsData[key]; // boolean casting var booleanIndex = getTypeIndex(Boolean, prop.type); if (booleanIndex > -1) { if (absent && !hasOwn(prop, 'default')) { value = false; } else if (value === '' || value === hyphenate(key)) { // only cast empty string / same name to boolean if // boolean has higher priority var stringIndex = getTypeIndex(String, prop.type); if (stringIndex < 0 || booleanIndex < stringIndex) { value = true; } } } // check default value if (value === undefined) { value = getPropDefaultValue(vm, prop, key); // since the default value is a fresh copy, // make sure to observe it. var prevShouldObserve = shouldObserve; toggleObserving(true); observe(value); toggleObserving(prevShouldObserve); } { assertProp(prop, key, value, vm, absent); } return value; } /** * Get the default value of a prop. */ function getPropDefaultValue(vm, prop, key) { // no default, return undefined if (!hasOwn(prop, 'default')) { return undefined; } var def = prop.default; // warn against non-factory defaults for Object & Array if (isObject(def)) { warn$2('Invalid default value for prop \"' + key + '\": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm); } // the raw prop value was also undefined from previous render, // return previous default value to avoid unnecessary watcher trigger if (vm && vm.$options.propsData && vm.$options.propsData[key] === undefined && vm._props[key] !== undefined) { return vm._props[key]; } // call factory function for non-Function types // a value is Function if its prototype is function even across different execution context return isFunction(def) && getType(prop.type) !== 'Function' ? def.call(vm) : def; } /** * Assert whether a prop is valid. */ function assertProp(prop, name, value, vm, absent) { if (prop.required && absent) { warn$2('Missing required prop: \"' + name + '\"', vm); return; } if (value == null && !prop.required) { return; } var type = prop.type; var valid = !type || type === true; var expectedTypes = []; if (type) { if (!isArray(type)) { type = [type]; } for (var i = 0; i < type.length && !valid; i++) { var assertedType = assertType(value, type[i], vm); expectedTypes.push(assertedType.expectedType || ''); valid = assertedType.valid; } } var haveExpectedTypes = expectedTypes.some(function (t) { return t; }); if (!valid && haveExpectedTypes) { warn$2(getInvalidTypeMessage(name, value, expectedTypes), vm); return; } var validator = prop.validator; if (validator) { if (!validator(value)) { warn$2('Invalid prop: custom validator check failed for prop \"' + name + '\".', vm); } } } var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol|BigInt)$/; function assertType(value, type, vm) { var valid; var expectedType = getType(type); if (simpleCheckRE.test(expectedType)) { var t = typeof value; valid = t === expectedType.toLowerCase(); // for primitive wrapper objects if (!valid && t === 'object') { valid = value instanceof type; } } else if (expectedType === 'Object') { valid = isPlainObject(value); } else if (expectedType === 'Array') { valid = isArray(value); } else { try { valid = value instanceof type; } catch (e) { warn$2('Invalid prop type: \"' + String(type) + '\" is not a constructor', vm); valid = false; } } return { valid: valid, expectedType: expectedType }; } var functionTypeCheckRE = /^\\s*function (\\w+)/; /** * Use function string name to check built-in types, * because a simple equality check will fail when running * across different vms / iframes. */ function getType(fn) { var match = fn && fn.toString().match(functionTypeCheckRE); return match ? match[1] : ''; } function isSameType(a, b) { return getType(a) === getType(b); } function getTypeIndex(type, expectedTypes) { if (!isArray(expectedTypes)) { return isSameType(expectedTypes, type) ? 0 : -1; } for (var i = 0, len = expectedTypes.length; i < len; i++) { if (isSameType(expectedTypes[i], type)) { return i; } } return -1; } function getInvalidTypeMessage(name, value, expectedTypes) { var message = \"Invalid prop: type check failed for prop \\\"\".concat(name, \"\\\".\") + \" Expected \".concat(expectedTypes.map(capitalize).join(', ')); var expectedType = expectedTypes[0]; var receivedType = toRawType(value); // check if we need to specify expected value if (expectedTypes.length === 1 && isExplicable(expectedType) && isExplicable(typeof value) && !isBoolean(expectedType, receivedType)) { message += \" with value \".concat(styleValue(value, expectedType)); } message += \", got \".concat(receivedType, \" \"); // check if we need to specify received value if (isExplicable(receivedType)) { message += \"with value \".concat(styleValue(value, receivedType), \".\"); } return message; } function styleValue(value, type) { if (type === 'String') { return \"\\\"\".concat(value, \"\\\"\"); } else if (type === 'Number') { return \"\".concat(Number(value)); } else { return \"\".concat(value); } } var EXPLICABLE_TYPES = ['string', 'number', 'boolean']; function isExplicable(value) { return EXPLICABLE_TYPES.some(function (elem) { return value.toLowerCase() === elem; }); } function isBoolean() { var args = []; for (var _i = 0; _i < arguments.length; _i++) { args[_i] = arguments[_i]; } return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; }); } function Vue(options) { if (!(this instanceof Vue)) { warn$2('Vue is a constructor and should be called with the `new` keyword'); } this._init(options); } //@ts-expect-error Vue has function type initMixin$1(Vue); //@ts-expect-error Vue has function type stateMixin(Vue); //@ts-expect-error Vue has function type eventsMixin(Vue); //@ts-expect-error Vue has function type lifecycleMixin(Vue); //@ts-expect-error Vue has function type renderMixin(Vue); function initUse(Vue) { Vue.use = function (plugin) { var installedPlugins = this._installedPlugins || (this._installedPlugins = []); if (installedPlugins.indexOf(plugin) > -1) { return this; } // additional parameters var args = toArray(arguments, 1); args.unshift(this); if (isFunction(plugin.install)) { plugin.install.apply(plugin, args); } else if (isFunction(plugin)) { plugin.apply(null, args); } installedPlugins.push(plugin); return this; }; } function initMixin(Vue) { Vue.mixin = function (mixin) { this.options = mergeOptions(this.options, mixin); return this; }; } function initExtend(Vue) { /** * Each instance constructor, including Vue, has a unique * cid. This enables us to create wrapped \"child * constructors\" for prototypal inheritance and cache them. */ Vue.cid = 0; var cid = 1; /** * Class inheritance */ Vue.extend = function (extendOptions) { extendOptions = extendOptions || {}; var Super = this; var SuperId = Super.cid; var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {}); if (cachedCtors[SuperId]) { return cachedCtors[SuperId]; } var name = getComponentName(extendOptions) || getComponentName(Super.options); if (name) { validateComponentName(name); } var Sub = function VueComponent(options) { this._init(options); }; Sub.prototype = Object.create(Super.prototype); Sub.prototype.constructor = Sub; Sub.cid = cid++; Sub.options = mergeOptions(Super.options, extendOptions); Sub['super'] = Super; // For props and computed properties, we define the proxy getters on // the Vue instances at extension time, on the extended prototype. This // avoids Object.defineProperty calls for each instance created. if (Sub.options.props) { initProps(Sub); } if (Sub.options.computed) { initComputed(Sub); } // allow further extension/mixin/plugin usage Sub.extend = Super.extend; Sub.mixin = Super.mixin; Sub.use = Super.use; // create asset registers, so extended classes // can have their private assets too. ASSET_TYPES.forEach(function (type) { Sub[type] = Super[type]; }); // enable recursive self-lookup if (name) { Sub.options.components[name] = Sub; } // keep a reference to the super options at extension time. // later at instantiation we can check if Super's options have // been updated. Sub.superOptions = Super.options; Sub.extendOptions = extendOptions; Sub.sealedOptions = extend({}, Sub.options); // cache constructor cachedCtors[SuperId] = Sub; return Sub; }; } function initProps(Comp) { var props = Comp.options.props; for (var key in props) { proxy(Comp.prototype, \"_props\", key); } } function initComputed(Comp) { var computed = Comp.options.computed; for (var key in computed) { defineComputed(Comp.prototype, key, computed[key]); } } function initAssetRegisters(Vue) { /** * Create asset registration methods. */ ASSET_TYPES.forEach(function (type) { // @ts-expect-error function is not exact same type Vue[type] = function (id, definition) { if (!definition) { return this.options[type + 's'][id]; } else { /* istanbul ignore if */ if (type === 'component') { validateComponentName(id); } if (type === 'component' && isPlainObject(definition)) { // @ts-expect-error definition.name = definition.name || id; definition = this.options._base.extend(definition); } if (type === 'directive' && isFunction(definition)) { definition = { bind: definition, update: definition }; } this.options[type + 's'][id] = definition; return definition; } }; }); } function _getComponentName(opts) { return opts && (getComponentName(opts.Ctor.options) || opts.tag); } function matches(pattern, name) { if (isArray(pattern)) { return pattern.indexOf(name) > -1; } else if (typeof pattern === 'string') { return pattern.split(',').indexOf(name) > -1; } else if (isRegExp(pattern)) { return pattern.test(name); } /* istanbul ignore next */ return false; } function pruneCache(keepAliveInstance, filter) { var cache = keepAliveInstance.cache, keys = keepAliveInstance.keys, _vnode = keepAliveInstance._vnode; for (var key in cache) { var entry = cache[key]; if (entry) { var name_1 = entry.name; if (name_1 && !filter(name_1)) { pruneCacheEntry(cache, key, keys, _vnode); } } } } function pruneCacheEntry(cache, key, keys, current) { var entry = cache[key]; if (entry && (!current || entry.tag !== current.tag)) { // @ts-expect-error can be undefined entry.componentInstance.$destroy(); } cache[key] = null; remove$2(keys, key); } var patternTypes = [String, RegExp, Array]; // TODO defineComponent var KeepAlive = { name: 'keep-alive', abstract: true, props: { include: patternTypes, exclude: patternTypes, max: [String, Number] }, methods: { cacheVNode: function () { var _a = this, cache = _a.cache, keys = _a.keys, vnodeToCache = _a.vnodeToCache, keyToCache = _a.keyToCache; if (vnodeToCache) { var tag = vnodeToCache.tag, componentInstance = vnodeToCache.componentInstance, componentOptions = vnodeToCache.componentOptions; cache[keyToCache] = { name: _getComponentName(componentOptions), tag: tag, componentInstance: componentInstance }; keys.push(keyToCache); // prune oldest entry if (this.max && keys.length > parseInt(this.max)) { pruneCacheEntry(cache, keys[0], keys, this._vnode); } this.vnodeToCache = null; } } }, created: function () { this.cache = Object.create(null); this.keys = []; }, destroyed: function () { for (var key in this.cache) { pruneCacheEntry(this.cache, key, this.keys); } }, mounted: function () { var _this = this; this.cacheVNode(); this.$watch('include', function (val) { pruneCache(_this, function (name) { return matches(val, name); }); }); this.$watch('exclude', function (val) { pruneCache(_this, function (name) { return !matches(val, name); }); }); }, updated: function () { this.cacheVNode(); }, render: function () { var slot = this.$slots.default; var vnode = getFirstComponentChild(slot); var componentOptions = vnode && vnode.componentOptions; if (componentOptions) { // check pattern var name_2 = _getComponentName(componentOptions); var _a = this, include = _a.include, exclude = _a.exclude; if ( // not included (include && (!name_2 || !matches(include, name_2))) || // excluded (exclude && name_2 && matches(exclude, name_2))) { return vnode; } var _b = this, cache = _b.cache, keys = _b.keys; var key = vnode.key == null ? // same constructor may get registered as different local components // so cid alone is not enough (#3269) componentOptions.Ctor.cid + (componentOptions.tag ? \"::\".concat(componentOptions.tag) : '') : vnode.key; if (cache[key]) { vnode.componentInstance = cache[key].componentInstance; // make current key freshest remove$2(keys, key); keys.push(key); } else { // delay setting the cache until update this.vnodeToCache = vnode; this.keyToCache = key; } // @ts-expect-error can vnode.data can be undefined vnode.data.keepAlive = true; } return vnode || (slot && slot[0]); } }; var builtInComponents = { KeepAlive: KeepAlive }; function initGlobalAPI(Vue) { // config var configDef = {}; configDef.get = function () { return config; }; { configDef.set = function () { warn$2('Do not replace the Vue.config object, set individual fields instead.'); }; } Object.defineProperty(Vue, 'config', configDef); // exposed util methods. // NOTE: these are not considered part of the public API - avoid relying on // them unless you are aware of the risk. Vue.util = { warn: warn$2, extend: extend, mergeOptions: mergeOptions, defineReactive: defineReactive }; Vue.set = set; Vue.delete = del; Vue.nextTick = nextTick; // 2.6 explicit observable API Vue.observable = function (obj) { observe(obj); return obj; }; Vue.options = Object.create(null); ASSET_TYPES.forEach(function (type) { Vue.options[type + 's'] = Object.create(null); }); // this is used to identify the \"base\" constructor to extend all plain-object // components with in Weex's multi-instance scenarios. Vue.options._base = Vue; extend(Vue.options.components, builtInComponents); initUse(Vue); initMixin(Vue); initExtend(Vue); initAssetRegisters(Vue); } initGlobalAPI(Vue); Object.defineProperty(Vue.prototype, '$isServer', { get: isServerRendering }); Object.defineProperty(Vue.prototype, '$ssrContext', { get: function () { /* istanbul ignore next */ return this.$vnode && this.$vnode.ssrContext; } }); // expose FunctionalRenderContext for ssr runtime helper installation Object.defineProperty(Vue, 'FunctionalRenderContext', { value: FunctionalRenderContext }); Vue.version = version; // these are reserved for web because they are directly compiled away // during template compilation var isReservedAttr = makeMap('style,class'); // attributes that should be using props for binding var acceptValue = makeMap('input,textarea,option,select,progress'); var mustUseProp = function (tag, type, attr) { return ((attr === 'value' && acceptValue(tag) && type !== 'button') || (attr === 'selected' && tag === 'option') || (attr === 'checked' && tag === 'input') || (attr === 'muted' && tag === 'video')); }; var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck'); var isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only'); var convertEnumeratedValue = function (key, value) { return isFalsyAttrValue(value) || value === 'false' ? 'false' : // allow arbitrary string value for contenteditable key === 'contenteditable' && isValidContentEditableValue(value) ? value : 'true'; }; var isBooleanAttr = makeMap('allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' + 'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' + 'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' + 'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' + 'required,reversed,scoped,seamless,selected,sortable,' + 'truespeed,typemustmatch,visible'); var xlinkNS = 'http://www.w3.org/1999/xlink'; var isXlink = function (name) { return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'; }; var getXlinkProp = function (name) { return isXlink(name) ? name.slice(6, name.length) : ''; }; var isFalsyAttrValue = function (val) { return val == null || val === false; }; function genClassForVnode(vnode) { var data = vnode.data; var parentNode = vnode; var childNode = vnode; while (isDef(childNode.componentInstance)) { childNode = childNode.componentInstance._vnode; if (childNode && childNode.data) { data = mergeClassData(childNode.data, data); } } // @ts-expect-error parentNode.parent not VNodeWithData while (isDef((parentNode = parentNode.parent))) { if (parentNode && parentNode.data) { data = mergeClassData(data, parentNode.data); } } return renderClass(data.staticClass, data.class); } function mergeClassData(child, parent) { return { staticClass: concat(child.staticClass, parent.staticClass), class: isDef(child.class) ? [child.class, parent.class] : parent.class }; } function renderClass(staticClass, dynamicClass) { if (isDef(staticClass) || isDef(dynamicClass)) { return concat(staticClass, stringifyClass(dynamicClass)); } /* istanbul ignore next */ return ''; } function concat(a, b) { return a ? (b ? a + ' ' + b : a) : b || ''; } function stringifyClass(value) { if (Array.isArray(value)) { return stringifyArray(value); } if (isObject(value)) { return stringifyObject(value); } if (typeof value === 'string') { return value; } /* istanbul ignore next */ return ''; } function stringifyArray(value) { var res = ''; var stringified; for (var i = 0, l = value.length; i < l; i++) { if (isDef((stringified = stringifyClass(value[i]))) && stringified !== '') { if (res) res += ' '; res += stringified; } } return res; } function stringifyObject(value) { var res = ''; for (var key in value) { if (value[key]) { if (res) res += ' '; res += key; } } return res; } var namespaceMap = { svg: 'http://www.w3.org/2000/svg', math: 'http://www.w3.org/1998/Math/MathML' }; var isHTMLTag = makeMap('html,body,base,head,link,meta,style,title,' + 'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' + 'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' + 'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' + 's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' + 'embed,object,param,source,canvas,script,noscript,del,ins,' + 'caption,col,colgroup,table,thead,tbody,td,th,tr,' + 'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' + 'output,progress,select,textarea,' + 'details,dialog,menu,menuitem,summary,' + 'content,element,shadow,template,blockquote,iframe,tfoot'); // this map is intentionally selective, only covering SVG elements that may // contain child elements. var isSVG = makeMap('svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' + 'foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' + 'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view', true); var isPreTag = function (tag) { return tag === 'pre'; }; var isReservedTag = function (tag) { return isHTMLTag(tag) || isSVG(tag); }; function getTagNamespace(tag) { if (isSVG(tag)) { return 'svg'; } // basic support for MathML // note it doesn't support other MathML elements being component roots if (tag === 'math') { return 'math'; } } var unknownElementCache = Object.create(null); function isUnknownElement(tag) { /* istanbul ignore if */ if (!inBrowser) { return true; } if (isReservedTag(tag)) { return false; } tag = tag.toLowerCase(); /* istanbul ignore if */ if (unknownElementCache[tag] != null) { return unknownElementCache[tag]; } var el = document.createElement(tag); if (tag.indexOf('-') > -1) { // http://stackoverflow.com/a/28210364/1070244 return (unknownElementCache[tag] = el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement); } else { return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString())); } } var isTextInputType = makeMap('text,number,password,search,email,tel,url'); /** * Query an element selector if it's not an element already. */ function query(el) { if (typeof el === 'string') { var selected = document.querySelector(el); if (!selected) { warn$2('Cannot find element: ' + el); return document.createElement('div'); } return selected; } else { return el; } } function createElement(tagName, vnode) { var elm = document.createElement(tagName); if (tagName !== 'select') { return elm; } // false or null will remove the attribute but undefined will not if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) { elm.setAttribute('multiple', 'multiple'); } return elm; } function createElementNS(namespace, tagName) { return document.createElementNS(namespaceMap[namespace], tagName); } function createTextNode(text) { return document.createTextNode(text); } function createComment(text) { return document.createComment(text); } function insertBefore(parentNode, newNode, referenceNode) { parentNode.insertBefore(newNode, referenceNode); } function removeChild(node, child) { node.removeChild(child); } function appendChild(node, child) { node.appendChild(child); } function parentNode(node) { return node.parentNode; } function nextSibling(node) { return node.nextSibling; } function tagName(node) { return node.tagName; } function setTextContent(node, text) { node.textContent = text; } function setStyleScope(node, scopeId) { node.setAttribute(scopeId, ''); } var nodeOps = /*#__PURE__*/Object.freeze({ __proto__: null, createElement: createElement, createElementNS: createElementNS, createTextNode: createTextNode, createComment: createComment, insertBefore: insertBefore, removeChild: removeChild, appendChild: appendChild, parentNode: parentNode, nextSibling: nextSibling, tagName: tagName, setTextContent: setTextContent, setStyleScope: setStyleScope }); var ref = { create: function (_, vnode) { registerRef(vnode); }, update: function (oldVnode, vnode) { if (oldVnode.data.ref !== vnode.data.ref) { registerRef(oldVnode, true); registerRef(vnode); } }, destroy: function (vnode) { registerRef(vnode, true); } }; function registerRef(vnode, isRemoval) { var ref = vnode.data.ref; if (!isDef(ref)) return; var vm = vnode.context; var refValue = vnode.componentInstance || vnode.elm; var value = isRemoval ? null : refValue; var $refsValue = isRemoval ? undefined : refValue; if (isFunction(ref)) { invokeWithErrorHandling(ref, vm, [value], vm, \"template ref function\"); return; } var isFor = vnode.data.refInFor; var _isString = typeof ref === 'string' || typeof ref === 'number'; var _isRef = isRef(ref); var refs = vm.$refs; if (_isString || _isRef) { if (isFor) { var existing = _isString ? refs[ref] : ref.value; if (isRemoval) { isArray(existing) && remove$2(existing, refValue); } else { if (!isArray(existing)) { if (_isString) { refs[ref] = [refValue]; setSetupRef(vm, ref, refs[ref]); } else { ref.value = [refValue]; } } else if (!existing.includes(refValue)) { existing.push(refValue); } } } else if (_isString) { if (isRemoval && refs[ref] !== refValue) { return; } refs[ref] = $refsValue; setSetupRef(vm, ref, value); } else if (_isRef) { if (isRemoval && ref.value !== refValue) { return; } ref.value = value; } else { warn$2(\"Invalid template ref type: \".concat(typeof ref)); } } } function setSetupRef(_a, key, val) { var _setupState = _a._setupState; if (_setupState && hasOwn(_setupState, key)) { if (isRef(_setupState[key])) { _setupState[key].value = val; } else { _setupState[key] = val; } } } /** * Virtual DOM patching algorithm based on Snabbdom by * Simon Friis Vindum (@paldepind) * Licensed under the MIT License * https://github.com/paldepind/snabbdom/blob/master/LICENSE * * modified by Evan You (@yyx990803) * * Not type-checking this because this file is perf-critical and the cost * of making flow understand it is not worth it. */ var emptyNode = new VNode('', {}, []); var hooks = ['create', 'activate', 'update', 'remove', 'destroy']; function sameVnode(a, b) { return (a.key === b.key && a.asyncFactory === b.asyncFactory && ((a.tag === b.tag && a.isComment === b.isComment && isDef(a.data) === isDef(b.data) && sameInputType(a, b)) || (isTrue(a.isAsyncPlaceholder) && isUndef(b.asyncFactory.error)))); } function sameInputType(a, b) { if (a.tag !== 'input') return true; var i; var typeA = isDef((i = a.data)) && isDef((i = i.attrs)) && i.type; var typeB = isDef((i = b.data)) && isDef((i = i.attrs)) && i.type; return typeA === typeB || (isTextInputType(typeA) && isTextInputType(typeB)); } function createKeyToOldIdx(children, beginIdx, endIdx) { var i, key; var map = {}; for (i = beginIdx; i"}],"posts":[{"title":"取消请求(axios、fetch)","slug":"abort-controller","date":"2023-07-16T15:29:19.000Z","updated":"2024-07-08T07:05:21.037Z","comments":true,"path":"/post/abort-controller.html","link":"","permalink":"http://yoursite.com/post/abort-controller.html","excerpt":"AbortController 接口表示一个控制器对象，允许你根据需要中止一个或多个 Web 请求。","text":"取消请求作用于频繁发送请求的场景，上一个请求还没完成，现在需要发送新的请求，那就需要将前面的请求取消掉。 AbortControllerAbortController 接口表示一个控制器对象，允许你根据需要中止一个或多个 Web 请求。 fetch 示例 给 fetch 传递第二个参数，配置 signal 属性，它的值就是 AbortController 实例的 signal 属性。 12345678910111213let controller;function fetchVideo() &#123; controller = new AbortController(); const signal = controller.signal; fetch(&#x27;xxx&#x27;, &#123; signal &#125;) .then((response) =&gt; &#123; console.log(&#x27;下载完成&#x27;, response); &#125;) .catch((err) =&gt; &#123; console.error(`下载错误：$&#123;err.message&#125;`); &#125;);&#125; 我们可以创建一个按钮，用来取消请求。调用 AbortController 实例 上的 abort() 方法即可。 123456abortBtn.addEventListener(&#x27;click&#x27;, () =&gt; &#123; if (controller) &#123; controller.abort(); console.log(&#x27;中止下载&#x27;); &#125;&#125;); 当 abort() 被调用时，这个 fetch() promise 将 reject 一个名为 AbortError 的 DOMException。 取消之后，你会发现控制台报错了，因为 fetch promise 已经 reject 了 AbortError。 如果不想看到这个错误，可以通过 try-catch 将 fetch 包裹起来，在 catch 中打印错误即可。 axios https://www.axios-http.cn/docs/cancellation 在低版本中的 axios v0.22.0 中，可以通过它本身提供的 cancelToken 来控制请求取消。高版本中已废弃 同理 fetch，使用 AbortController 控制请求取消。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950import axios from &quot;axios&quot;;let _env = import.meta.env// 开发环境走代理，生产环境走服务端let url = _env.MODE == &#x27;development&#x27;?_env.VITE_APP_BASE_API:_env.VITE_HOST_URLconst service = axios.create(&#123; baseURL:url, timeout:5000,&#125;)// 存储 url 及 abort controler 对象const ac = new Map()// 请求拦截器service.interceptors.request.use( (config) =&gt; &#123; // 设置 map 对象, 如果存在 url, 就取消请求 if (ac.get(config.url)) &#123; ac.get(config.url).abort() ac.delete(config.url) &#125; const c = new AbortController() config.signal = c.signal ac.set(config.url, c) return config &#125;, (error) =&gt; &#123; return Promise.reject(error) &#125;)// 响应拦截器service.interceptors.response.use((response) =&gt; &#123; const &#123; success, message, data &#125; = response.data // 请求成功后, 需要删除 url 对应的对象 ac.delete(config.url) if (success) &#123; return data &#125; else &#123; return Promise.reject(new Error(message)) &#125;&#125;)export default service 过渡 CancelToken deprecated此 API 从 v0.22.0 开始已被弃用，不应在新项目中使用。 可以使用 CancelToken.source 工厂方法创建一个 cancel token ，如下所示： 123456789101112131415161718192021const CancelToken = axios.CancelToken;const source = CancelToken.source();axios .get(&#x27;/user/12345&#x27;, &#123; cancelToken: source.token &#125;) .catch(function (thrown) &#123; if (axios.isCancel(thrown)) &#123; console.log(&#x27;Request canceled&#x27;, thrown.message); &#125; else &#123; // 处理错误 &#125; &#125;);axios.post(&#x27;/user/12345&#x27;, &#123; name: &#x27;new name&#x27;&#125;, &#123; cancelToken: source.token&#125;)// 取消请求（message 参数是可选的）source.cancel(&#x27;Operation canceled by the user.&#x27;); 在过渡期间，您可以使用这两种取消 API，即使是针对同一个请求： 1234567891011121314151617181920212223242526const controller = new AbortController();const CancelToken = axios.CancelToken;const source = CancelToken.source();axios.get(&#x27;/user/12345&#x27;, &#123; cancelToken: source.token, signal: controller.signal&#125;).catch(function (thrown) &#123; if (axios.isCancel(thrown)) &#123; console.log(&#x27;Request canceled&#x27;, thrown.message); &#125; else &#123; // 处理错误 &#125;&#125;);axios.post(&#x27;/user/12345&#x27;, &#123; name: &#x27;new name&#x27;&#125;, &#123; cancelToken: source.token&#125;)// 取消请求 (message 参数是可选的)source.cancel(&#x27;Operation canceled by the user.&#x27;);// 或controller.abort();","categories":[],"tags":[{"name":"axios、fetch、AbortController","slug":"axios、fetch、AbortController","permalink":"http://yoursite.com/tags/axios%E3%80%81fetch%E3%80%81AbortController/"}]},{"title":"监听浏览器 Tab 切换","slug":"visibility-change","date":"2023-07-16T01:42:33.000Z","updated":"2024-06-11T08:52:17.352Z","comments":true,"path":"/post/visibility-change.html","link":"","permalink":"http://yoursite.com/post/visibility-change.html","excerpt":"切换浏览器 tab 时，通过监听 visibilityChange 事件，可以通过 document.visibilityState 判断当前tab页是否是显示的","text":"visibilityChange当其选项卡的内容变得可见或被隐藏时，会在文档上触发 visibilitychange (能见度更改) 事件。 visibilityState该事件不包括文档的更新的可见性状态，但是您可以从文档的 visibilityState 属性中获取该信息。 document.visibilityState 注意出于兼容性原因，请确保使用 document.addEventListener 而不是 window.addEventListener 来注册回调。Safari &lt;14.0 仅支持前者。 用法比如某个页面有动画，当我们的页面处于 hidden 状态时，动画是没有必要在后台一直运行的（节省资源、节省电量），我们可以将其暂停。 1234567document.addEventListener(&quot;visibilitychange&quot;, function() &#123; if (document.visibilityState === &#x27;visible&#x27;) &#123; // or &#x27;hidden&#x27; backgroundMusic.play(); &#125; else &#123; backgroundMusic.pause(); &#125;&#125;); 兼容性问题 (Safari)当 visibleStateState 属性的值转换为 hidden 时，Safari 不会按预期触发 visibilitychange；因此，在这种情况下，您还需要包含代码以侦听 pagehide 事件。 Window: 页面隐藏事件 (pagehide event)当浏览器在显示与会话历史记录不同的页面的过程中隐藏当前页面时，pagehide(页面隐藏) 事件会被发送到一个Window 。例如，当用户单击浏览器的“后退”按钮时，当前页面在显示上一页之前会收到一个pagehide(页面隐藏) 事件。 12345window.addEventListener(&quot;pagehide&quot;, event =&gt; &#123; if (event.persisted) &#123; /* the page isn&#x27;t being discarded, so it can be reused later */ &#125;&#125;, false); 或者 使用 Window 上的 onpagehide 事件处理程序属性来编写： 12345window.onpagehide = event =&gt; &#123; if (event.persisted) &#123; /* the page isn&#x27;t being discarded, so it can be reused later */ &#125;&#125;","categories":[],"tags":[{"name":"visibilityChange document.visibilityState","slug":"visibilityChange-document-visibilityState","permalink":"http://yoursite.com/tags/visibilityChange-document-visibilityState/"}]},{"title":"更优雅的实现[加载更多功能、图片懒加载]","slug":"IntersectionObserver","date":"2023-07-15T13:40:06.000Z","updated":"2024-06-11T08:52:17.162Z","comments":true,"path":"/post/IntersectionObserver.html","link":"","permalink":"http://yoursite.com/post/IntersectionObserver.html","excerpt":"IntersectionObserver接口： 一种异步观察目标元素与其祖先元素或顶级文档视口（viewport）交叉状态的方法。其祖先元素或视口被称为根（root）。","text":"加载更多 设置目标元素loading与边界盒交叉的比值 threshold，达到后触发 callback，执行我们的逻辑。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&lt;template&gt; &lt;div class=&quot;intersection-container&quot;&gt; &lt;div class=&quot;box&quot; v-for=&quot;(item, idx) in listLength&quot;&gt; &#123;&#123; item &#125;&#125; &lt;/div&gt; &lt;Loading class=&quot;loading&quot; /&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup lang=&#x27;ts&#x27;&gt;import &#123;ref, onMounted&#125; from &#x27;vue&#x27;import Loading from &#x27;@/components/Loading.vue&#x27;;const listLength = ref(10)onMounted(() =&gt; &#123; const ob = new IntersectionObserver(function(entries) &#123; const options = entries[0] // intersectionRatio 为0，表示目标在视野外 // isIntersecting 为 true，表示目标进入视野，为false表示离开视野区域，离开时不执行逻辑 if (options.intersectionRatio &lt;= 0 &amp;&amp; !options.isIntersecting) return; listLength.value = listLength.value + 10 &#125;, &#123; threshold: 0.5 &#125;) // 监听目标元素 ob.observe(document.querySelector(&#x27;.loading&#x27;)!)&#125;)&lt;/script&gt;&lt;style scoped lang=&quot;less&quot;&gt;.intersection-container &#123; display: flex; flex-wrap: wrap; justify-content: flex-start; width: 100%; .box &#123; width: 20%; height: 300px; background-color: black; flex-shrink: 0; margin: 20px; text-align: center; line-height: 300px; color: #fff; font-size: 24px; font-weight: bold; &#125;&#125;&lt;/style&gt; 图片懒加载假如页面上要渲染 1000 个图片，当用户一打开页面，可能只显示了 10 个图片，剩余的 990 张图片没有显示在屏幕上，那么这 990 张图片，是完全不需要发起网络请求去加载图片的。 源码如下 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768&lt;template&gt; &lt;div class=&quot;intersection-container&quot;&gt; &lt;div class=&quot;box&quot; v-for=&quot;(item, idx) in listLength&quot;&gt; &lt;img class=&quot;img&quot; :src=&quot;vueLogo&quot; alt=&quot;&quot; /&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup lang=&#x27;ts&#x27;&gt;import &#123;ref, onMounted, ImgHTMLAttributes&#125; from &#x27;vue&#x27;// 默认的占位图片import vueLogo from &#x27;../assets/imgs/vue.svg&#x27;// 渲染100个 imgconst listLength = ref(1000)onMounted(() =&gt; &#123; // 监听图片是否出现在可视区域 const imgOb = new IntersectionObserver(function(entries) &#123; for(const entry of entries) &#123; // true 表示进入可视范围内 if (entry.isIntersecting) &#123; const img = entry.target; (img as ImgHTMLAttributes).src = `https://picsum.photos/300/500?r=$&#123;Math.random()&#125;` // 图片加载后，要取消监听，防止再次修改图片的 src 属性 imgOb.unobserve(img) &#125; &#125; &#125;, &#123; threshold: 0.1 &#125;) const imgs = document.querySelectorAll(&#x27;.img&#x27;) imgs.forEach(img =&gt; &#123; imgOb.observe(img) &#125;)&#125;)&lt;/script&gt;&lt;style scoped lang=&quot;less&quot;&gt;.intersection-container &#123; display: flex; flex-wrap: wrap; justify-content: flex-start; width: 100%; .box &#123; width: 20%; height: 282.33px; background-color: black; flex-shrink: 0; margin: 20px; text-align: center; line-height: 300px; color: #fff; font-size: 24px; font-weight: bold; img &#123; width: 100%; &#125; &#125;&#125;&lt;/style&gt; 监听 scroll 事件（不推荐了）不推荐：scroll 回调函数执行太多次了 使用自定义属性（data-*）来表示图片的 src，浏览器不会处理这个 data-src 的属性值 监听 scroll，当图片出现在视图中，将 data-src 赋值给 src 1&lt;img v-for=&quot;item in 10&quot; :key=&quot;item&quot; :data-src=&quot;item + &#x27;.jpg&#x27;&quot; /&gt; 1234567891011121314const imgs = document.querySelectorAll(&#x27;img&#x27;)window.addEventListener(&#x27;scroll&#x27;, function() &#123; imgs.forEach(img =&gt; &#123; const imgTop = img.getBoundingClientRect().top // 图片距离窗口顶部的距离 if (imgTop &lt; window.innerHeight) &#123; // 表示图片进入到窗口内部了 const data_src = img.getAttribute(&#x27;data-src&#x27;) img.setAttribute(&#x27;src&#x27;, data_src) &#125; &#125;)&#125;) 文本动态划线效果 对于刚进入窗口的 mark 标签，动态划线 12345678910111213let observer = new IntersectionObserver((entries, observer) =&gt; &#123; entries.forEach(entry =&gt; &#123; if (entry.isIntersecting) &#123; // 当 mark 标签进入到可视区域，动态添加类名 entry.target.classList.add(&#x27;animate&#x27;) observer.unobserve(entry.target) &#125; &#125;)&#125;)document.querySelectorAll(&#x27;mark&#x27;).forEach(mark =&gt; &#123; observer.observe(mark)&#125;) css 部分，添加动画 animation 1234567891011121314151617181920212223242526272829303132333435363738394041html &#123; font-size: 12px;&#125;body &#123; font-family: Helvetica; color: #333; width: 60%; margin: auto;&#125;h1 &#123; font-size: 4rem; margin: 10rem 0 3rem 0;&#125;p &#123; font-size: 2rem; line-height: 3.8rem; margin: 2.6rem 0; letter-spacing: .05rem;&#125;mark &#123; background-color: transparent; color: inherit; background-image: linear-gradient(#73FFA0, #73FFA0); background-repeat: no-repeat; background-size: 0% 38%; background-position: 0 100%;&#125;mark.animate &#123; animation: 2s highlight ease-in-out forwards;&#125;@keyframes highlight &#123; to &#123; background-size: 100% 38%; &#125;&#125; 1234567891011121314151617&lt;h1&gt;JavaScript 的歷史及現況&lt;/h1&gt;&lt;p&gt;1990 年，科學家 Tim Berners-Lee 在互聯網的基礎上發明了萬維網 (World Wide Web)，&lt;mark&gt;World Wide Web 這個詞在互聯網早期經常提到，還一直影響至今，大家記得網址開端一般都是以 www 起首的嗎？就是 World Wide Web 的簡寫。&lt;/mark&gt;發明了 www，從此我們可以在網上互傳檔案。但這個時候的只能通過命令行模式 (Command Mode) 存取網絡，而且只能顯示文字，顯然是不方便的。&lt;/p&gt;&lt;p&gt;1992 年史上第一個圖形化的網頁瀏覽器 Mosaic 誕生，1994 年改名為 Netscape Navigator (網景) 並推出 1.0 版本，市場佔有率超過 90%。&lt;mark&gt;由於當時的互聯網速度很慢，而且上網費昂貴，Netscape 公司為了優化瀏覽體驗，覺得有必要研發一套腳本語言，是在瀏覽器端運行的。&lt;/mark&gt;例如我們在一個網站登入會員，忘了填寫用戶名稱就點擊了「登入」，這是候網頁再次載入，才提醒需要填寫用戶名稱，這顯然晚了一點。瀏覽器應該可以在用戶點擊「登入」時就進行初步檢查，在檢查到錯誤時及時彈出提示訊息讓用戶修正。&lt;/p&gt;&lt;p&gt;Netscape 公司對於這種基於瀏覽器的腳本語言的想法是：功能不需要太強，語法較簡單，容易學習和應用。公司聘請了 Brendan Eich 研發這個腳本語言，&lt;mark&gt;據說他只用了 10 天，就設計好這個語言的第一版&lt;/mark&gt;，最初命名為 Mocha，及後改名為 LiveScript。&lt;/p&gt;&lt;p&gt;而據說當時 Sun 公司的 Java 語言相當受歡迎，出於市場推廣的原因，固意將這門語言與 Java 在名義上扯上關係（而實際上幾乎沒有）。Netscape 與 Sun 公司達成「合作協議」允許將 LiveScript 命名為 JavaScript。大家還記得當時有 JavaApplet 這種瀏覽器插件嗎？JavaApplet 是 Sun 公司發展出來，真正使用 Java 語言編寫，在瀏覽器端運行的應用程式，當時期望 JavaScript 的角色是像膠水一樣將各部份連接起來。&lt;mark&gt;後來 JavaApplet 失敗了，JavaScript 卻發揚光大了。&lt;/mark&gt;&lt;/p&gt;&lt;p&gt;1996 年 JavaScript 隨著 Netscape 2.0 正式推出。&lt;/p&gt;&lt;p&gt;1996 年 8 月 Microsoft 仿效 Netscape，於自己的 IE 瀏覽器發展出一門與 JavaScript 相近的腳本語言，取命 JScript。一山不能藏二虎，&lt;mark&gt;Netscape 公司將 JavaScript 提交給 ECMA International（歐洲電腦製造商協會）進行標準化，它就是 ECMAScript。&lt;/mark&gt;不過基於歷史原因及市場原因，大家都習慣用 JavaScript 這個名字而非 ECMAScript。我們現在說的 JavaScript ES5 / ES6 等等，ES 就是 ECMAScript 版本的簡寫，後面的是版本號。&lt;/p&gt;&lt;p&gt;ECMAScript 一直持續發展，但由於瀏覽器的支援滯後，在好長一段時間內一直流行 ECMAScript 3。直至 2012 年出現轉捩點，&lt;mark&gt;各大網站開始停止對舊版 IE 瀏覽器的支援&lt;/mark&gt;，以及 Chrome 與 Firefox 等瀏覽器的佔有率開始提升，使得 ECMAScript 5 流行起來。&lt;/p&gt;&lt;p&gt;在 2018 年的今天，即使 ECMAScript 6 在瀏覽器端還未正式普及，&lt;mark&gt;但有轉譯工具可以幫助我們今天起就編寫 ES6 的 JavaScript&lt;/mark&gt;，而 Node.js 陣型（如 React Native）使用 ES6 已非常普遍了。&lt;/p&gt;","categories":[],"tags":[{"name":"IntersectionObserver","slug":"IntersectionObserver","permalink":"http://yoursite.com/tags/IntersectionObserver/"}]},{"title":"内存泄漏排查方式","slug":"内存泄漏排查方式","date":"2023-07-09T03:20:27.000Z","updated":"2024-06-11T08:52:17.360Z","comments":true,"path":"/post/内存泄漏排查方式.html","link":"","permalink":"http://yoursite.com/post/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%8E%92%E6%9F%A5%E6%96%B9%E5%BC%8F.html","excerpt":"内存泄漏排查方式","text":"内存泄漏排查方式 打开Chrome控制台，摁住 command + shift + p，搜索 Run&gt;show performance monitor，主要查看 JS heap size 找到控制台的 memory，使用内存面板，选第二个选项，按时间线记录内存分配情况。 点击开始，刷新页面或者切换页面，蓝色柱子最高的代表使用内存最多，蓝色柱子有一段灰色，表示已经回收了的内存。 通过鼠标，聚焦到某一个最高的蓝色柱子，查看 Constructor 那一栏，找出实例最多的那个构造函数，点开并查看详情。","categories":[],"tags":[{"name":"memory-leak","slug":"memory-leak","permalink":"http://yoursite.com/tags/memory-leak/"}]},{"title":"深入浅出 Vite","slug":"vite","date":"2023-07-02T14:25:44.000Z","updated":"2024-06-11T08:52:17.352Z","comments":true,"path":"/post/vite.html","link":"","permalink":"http://yoursite.com/post/vite.html","excerpt":"Vite","text":"vite Vite 需要 Node.js 版本 14.18+，16+。 由两部分组成： 一个开发服务器，以项目最外层的 index.html 为入口文件 一套针对生产环境的 Rollup 构建命令。 浏览器支持默认的构建目标是能支持 原生 ESM 语法的 script 标签、原生 ESM 动态导入 和 import.meta 的浏览器。 在线体验 https://stackblitz.com/edit/vitejs-vite-p476hg?file=index.html&amp;terminal=dev 本地体验直接安装 vite 即可。 npm init -y、npm install vite -D，然后配置 vite 启动命令 即可。 123456789101112131415// package.json&#123; &quot;name&quot;: &quot;vite-starter&quot;, &quot;private&quot;: true, &quot;version&quot;: &quot;0.0.0&quot;, &quot;type&quot;: &quot;module&quot;, &quot;scripts&quot;: &#123; &quot;dev&quot;: &quot;vite&quot;, // 启动开发服务器，别名：`vite dev`，`vite serve` &quot;build&quot;: &quot;vite build&quot;, // 为生产环境构建产物 &quot;preview&quot;: &quot;vite preview&quot; // 本地预览生产构建产物 &#125;, &quot;devDependencies&quot;: &#123; &quot;vite&quot;: &quot;^4.3.9&quot; &#125;&#125; 也可以通过 npm create vite@latest 或者 yarn create vite 创建项目 兼容性Vite 需要 Node.js 版本 14.18+，16+。然而，有些模板需要依赖更高的 Node 版本才能正常运行，当你的包管理器发出警告时，请注意升级你的 Node 版本。 vite 指定根目录启动项目vite 以当前工作目录作为根目录启动开发服务器。你也可以通过 vite serve some/sub/dir 来指定一个替代的根目录。 注意 Vite 同时会解析项目根目录下的配置文件（即 vite.config.js），因此如果根目录被改变了，你需要将配置文件移动到新的根目录下。 冷启动/预构建依赖冷启动是指项目启动开发服务器时, node_module/.vite 下没有任何之前的预构建文件, 这一般是项目第一次启动, 或项目通过vite server --force启动, 也可能是你手动删除了node_module/.vite之后启动, 此时Vite需要扫描项目的依赖并使用esbuild对这些依赖进行预构建 依赖预构建：构建的包存放在 node_modules/.vite/deps 目录下，目的有如下几点： 不同的包有不同的导出格式（commonjs，umd，esmodule），通过预构建整合包的导出格式 引用包的路径可以直接使用 .vite/deps，方便路径重写（浏览器默认是不会去 node_modules 下寻找包的） 解决网络多包传输的性能问题（以 lodash 为例，它有几千个模块，如果不做处理，在导入后浏览器会发几千个 HTTP 请求） 可以通过安装 lodash-es 这个包来做个实验，在项目中导入 lodash-es，你会发现 vite 对它进行了修改，将所有导出的模块整合成了一个 js 文件，浏览器也只会发送一次 HTTP 请求。 lodash-es 导出的所有定义好的模块方法 启动项目，Vite 已经整合所有 lodash-es 导出的模块 HTTP请求：/node_modules/.vite/deps/lodash-es.js?v=4db083fa 123456789101112131415161718192021...// node_modules/lodash-es/add.jsvar add = createMathOperation_default(function(augend, addend) &#123; return augend + addend;&#125;, 0);var add_default = add;...var math_default_default = &#123; add: add_default, ...&#125;...export &#123; add_default as add, ...&#125; 我们可以通过 vite.config.js 来配置一下，不对 lodash-es 预构建： 1234567// vite.config.jsexport default &#123; optimizeDeps: &#123; exclude: [&#x27;lodash-es&#x27;] &#125;&#125; 重启服务后，你会发现浏览器发送了很多个 HTTP 请求去加载 lodash-es 导出的每个模块方法。 vite为什么快？ 开发环境不打包(Vite 以 原生 ESM 方式提供源码)，目前主流的浏览器已经支持模块化了。&lt;script type=&quot;module&quot; src=&quot;...&quot;&gt; 按需加载模块，不像webpack那样构建所有源码，vite是根据路由拆分的代码模块，只会处理当前屏幕上实际使用到的模块 vite 使用 esbuild 预构建依赖（不经常改动的依赖包） 利用 HTTP 头来加速整个页面的重新加载。（源码模块的请求会根据 304 Not Modified 进行协商缓存，而依赖模块请求则会通过 Cache-Control: max-age=31536000,immutable 进行强缓存，因此一旦被缓存它们将不需要再次请求。） vite.config.js如果项目添加了 vite.config.js，启动项目或者打包项目时，vite 会自动读取这个配置文件 defineConfig写配置文件时，为了有更好的语法提示，我们可以使用 defineConfig 方法来包裹配置对象 1234567import &#123; defineConfig &#125; from &#x27;vite&#x27;;export default defineConfig(&#123; optimizeDeps: &#123; exclude: [&#x27;lodash-es&#x27;], &#125;,&#125;); 或者这样写： 12345678/** @type import(&quot;vite&quot;).UserConfig */const viteConfig = &#123; optimizeDeps: &#123; exclude: [&#x27;lodash-es&#x27;], &#125;,&#125;export default viteConfig defineConfig 也可以接收一个函数作为参数，这个函数也有一个参数： 1234567defineConfig((&#123; command: &quot;serve&quot;, // &quot;build&quot; or &quot;serve&quot; mode: &quot;development&quot;, ssrBuild: false,&#125;) =&gt; &#123; ...&#125;) 我们可以通过 command 或者 mode 来执行不同环境的配置。 区分打包配置我们可以根据不同环境，编写不同的配置文件 vite.base.config、vite.dev.config、vite.prod.config。 vite.config.js 123456789const env = &#123; &#x27;serve&#x27;: () =&gt; Object.assign(&#123;&#125;, vite.base.config, vite.dev.config), &#x27;build&#x27;: () =&gt; Object.assign(&#123;&#125;, vite.base.config, vite.prod.config),&#125;defineConfig((&#123; command: &quot;serve&quot; &#125;) =&gt; &#123; return env[serve]()&#125;) 环境变量配置Vite 使用 dotenv 从你的 环境目录 中的下列文件加载额外的环境变量： 1234.env # 所有情况下都会加载.env.local # 所有情况下都会加载，但会被 git 忽略.env.[mode] # 只在指定模式下加载.env.[mode].local # 只在指定模式下加载，但会被 git 忽略 在 vite.config.js 中，想要获取配置的环境变量，我们需要通过如下形式获取: 12345678import &#123; defineConfig, loadEnv &#125; from &#x27;vite&#x27;export default defineConfig((options) =&gt; &#123; // 读取指定的环境变量 const env = loadEnv(options.mode, process.cwd(), &#x27;&#x27;) // ...&#125;) options.mode 可以通过 yarn dev --mode develop 指定。 process.cwd() 表示当前文件的 执行目录 loadEnv 第三个参数是 prefixs，环境变量的前缀，默认是 VITE_，默认情况下只有前缀为 VITE_ 会被加载，除非更改了 prefixes 配置。 在客户端获取环境变量配置的环境变量会存放到 import.meta.env 中。 为了防止意外地将一些环境变量泄漏到客户端，只有以 VITE_ 为前缀的变量才会暴露给经过 vite 处理的代码。 修改默认的环境变量前缀1234567export default defineConfig((options) =&gt; &#123; return &#123; // .. envPrefix: &#x27;ENV_&#x27; // 默认是 `VITE_` &#125;&#125;) 增加测试环境package.json 123&quot;scripts&quot;: &#123; &quot;test&quot;: &quot;vite --mode test&quot;,&#125;, 添加 .env.test 文件，写入测试环境的配置即可。 Vite 如何执行 .vue 文件Vite 是一个开发服务器，以项目最外层的 index.html 为入口文件。当它遇到 .js 文件结尾的文件，会去开发服务器请求这个 js 文件。并且告诉浏览器以 Content-Type: text/javascript 去解析这个文件。 如果遇到是 .vue 文件，首先会在开发服务器解析 vue 文件，将 vue 文件的内容转化为 js 内容，虽然它是 .vue 结尾的文件，我们还是可以通过 Content-Type: text/javascript 告诉浏览器使用 js 的形式去解析执行文件。 假设 Vite 开发服务器如下： 12345678910111213141516171819const app = new Koa();app.use(async (ctx) =&gt; &#123; if (ctx.request.url === &quot;/&quot;) &#123; const indexContent = await fs.promises.readFile(path.resolve(__dirname, &quot;./index.html&quot;)); ctx.response.set(&quot;Content-Type&quot;, &quot;text/html&quot;); ctx.response.body = indexContent; &#125; if (ctx.request.url === &quot;/App.vue&quot;) &#123; const AppContent = await fs.promises.readFile(path.resolve(__dirname, &quot;./App.vue&quot;)); // 对 .vue 文件做一系列解析操作，将其内容转为纯 js 内容 //... ctx.response.set(&quot;Content-Type&quot;, &quot;text/javascript&quot;); ctx.response.body = AppContent; &#125;&#125;) css.modules任何以 .module.css 为后缀名的 CSS 文件都被认为是一个 CSS modules 文件。 1234/* example.module.css */.red &#123; color: red;&#125; 12import classes from &#x27;./example.module.css&#x27;document.getElementById(&#x27;foo&#x27;).className = classes.red CSS modules 行为可以通过 css.modules 选项 进行配置。 如果 css.modules.localsConvention 设置开启了 camelCase 格式变量名转换（例如 localsConvention: ‘camelCaseOnly’），你还可以使用按名导入。 123// .apply-color -&gt; applyColorimport &#123; applyColor &#125; from &#x27;./example.module.css&#x27;document.getElementById(&#x27;foo&#x27;).className = applyColor 原理在 Vite 开发服务器中，遇到了 .module.css 结尾的文件，通过一定的规则将类名进行替换，比如 .red 替换成 ._red_hjlk23_1 并创建一个映射对象 &#123; red: &#39;_red_hjlk23_1&#39; &#125; 将替换过后的内容，塞进动态创建的style 标签里，并且插入到 head 中 将 .module.css 结尾的内容全部替换成 js 内容，方便 热更新 其他配置css.modules 配置 CSS modules 的行为。选项将被传递给 postcss-modules。 1234567891011121314151617interface CSSModulesOptions &#123; scopeBehaviour?: &#x27;global&#x27; | &#x27;local&#x27; // 如果是 global，则不会产生模块化的 css globalModulePaths?: RegExp[] generateScopedName?: // 配置模块化 css 名字的格式，比如 `[name]_[local]_[hash:5]` | string | ((name: string, filename: string, css: string) =&gt; string) hashPrefix?: string /** * 默认：null */ localsConvention?: | &#x27;camelCase&#x27; // 展示驼峰式和横杠 | &#x27;camelCaseOnly&#x27; // 只展示驼峰式 | &#x27;dashes&#x27; // 横杠 | &#x27;dashesOnly&#x27; // 只展示横杠 | null&#125; 配置 CSS 预处理器（less、scss） https://cn.vitejs.dev/config/shared-options.html#css-preprocessoroptions css.preprocessorOptions math 可用的四个选项是： always（3.x 默认值）- 支持各种形式的运算 parens-division （默认 4.0） - 使用 / 运算符不在括号外执行除法（但可以在括号外使用 ./ 运算符进行 “forced” - ./ 已弃用） parens | strict - 所有数学表达式都需要括号。 strict-legacy（在 4.0 中删除）- 在某些情况下，如果无法计算表达式的任何部分，则不会计算数学。 设置全局变量，而不是定义在一个单独的文件里频繁的导入。 123456789101112export default defineConfig(&#123; css: &#123; preprocessorOptions: &#123; less: &#123; math: &#x27;always&#x27;, // `任何时候都能计算`, globalVars: &#123; mainColor: &#x27;red&#x27; // 全局变量 &#125; &#125;, &#125;, &#125;,&#125;) 使用的时候，依然使用 @mainColor 形式。 css.devSourcemap在开发过程中是否启用 sourcemap。 默认情况下 css.devSourcemap 是 false，我们编写的 css 文件会被编译到 style 标签内，并插入到 head 标签中。 如果想要知道我们的 css、less 文件的原始内容、编写的位置，可以将 css.devSourcemap 设置为 true。 css.postcss https://www.npmjs.com/package/postcss-cli 单独使用 postcss 来编译 css npm i -D postcss postcss-cli 需要添加 postcss.config.js 配置文件 执行命令 1npx postcss input.sss -p sugarss -o output.css -m postcss-plugins列表比较常用的 postcss-preset-env，它可以将现代 CSS 转换为大多数浏览器都能理解的内容，根据目标浏览器或运行时环境确定所需的填充。和 babel-preset/env 一样，它是一套插件的集合。 postcss 停止处理 less、sass了less 和 sass 等一系列预处理器的 postcss 插件已经停止维护了，我们需要用 less 或 sass 自己的编译器将代码处理完，编译结果给到 postcss。 所以，业内也说，postcss 是 后处理器 不维护的主要原因是，less 或 sass 经常更新，postcss 官方也必须得跟着更新对应的插件，否则会出现问题。这样一来，就导致维护成本高，postcss 官方也觉得没有必要自己去维护。 目前来说，大多数 less 或 sass 的 postcss plugin 是有社区人员维护的。 配置别名 ts 报错问题导入 nodejs 内置模块时可能提示找不到模块，安装 yarn add @types/node -D 12345678export default defineConfig(&#123; plugins: [react()], resolve: &#123; alias: &#123; &#x27;@&#x27;: resolve(__dirname, &#x27;./src&#x27;) &#125; &#125;&#125;) 但是导入模块时 ts 提示依然报错，修改 tsconfig.json 123456789&#123; &quot;compilerOptions&quot;: &#123; // ... &quot;baseUrl&quot;: &quot;.&quot;, &quot;paths&quot;: &#123; &quot;@/*&quot;: [&quot;src/*&quot;] &#125; &#125;,&#125;","categories":[],"tags":[{"name":"Vite","slug":"Vite","permalink":"http://yoursite.com/tags/Vite/"}]},{"title":"温故知新HTTP","slug":"温故知新HTTP","date":"2023-05-28T08:37:15.000Z","updated":"2024-06-11T08:52:17.361Z","comments":true,"path":"/post/温故知新HTTP.html","link":"","permalink":"http://yoursite.com/post/%E6%B8%A9%E6%95%85%E7%9F%A5%E6%96%B0HTTP.html","excerpt":"HTTP","text":"URI &amp; URLURI（Uniform Resource Identifier）和URL（Uniform Resource Locator）是互联网上标识和定位资源的两个概念，它们在某些方面有区别，但通常人们使用它们来表示相同的内容。 URI是一个更通用的概念，用于标识任何资源的唯一标识符。它可以用来标识不仅仅是网络资源，还包括本地文件、数据库条目等。URI由两部分组成：标识符和定位器。 URL是URI的一种常见形式，它提供了定位和访问网络资源的方式。URL描述了一个资源在网络上的具体位置和访问方式。它包含了协议（如HTTP、HTTPS、FTP等）、主机名、路径、查询参数等信息，用于定位和访问特定的网络资源。 下面是一个示例： URI: urn:isbn:9780345534491这是一个URI，用于标识一本书的ISBN号。它以”urn”作为标识符，后面是具体的标识信息。 URL: https://www.example.com/images/pic.jpg这是一个URL，用于访问位于www.example.com服务器上的pic.jpg图片文件。它包含了协议（https）、主机名（www.example.com）和路径（/images/pic.jpg）等信息，用于定位和访问资源。 总结来说，URI是一种通用的资源标识符，而URL是一种具体的网络资源定位器。URL是URI的一种特殊形式，用于定位和访问网络资源。 HTTP0.9 / HTTP 1.1 / HTTP2 这三者有什么区别？共同点又是什么？HTTP 0.9、HTTP 1.1和HTTP/2（也称为HTTP2）是HTTP协议的不同版本，它们在功能和性能方面有一些区别，同时也有一些共同点。 HTTP 0.9是最早的HTTP版本，于1991年发布。它是一种非常简单的协议，只支持GET方法，没有请求头和响应头，也不支持持久连接等高级功能。它主要用于通过URL获取HTML文档。 HTTP 1.1是1997年发布的HTTP协议的主要版本，它引入了许多新特性和改进。HTTP 1.1支持多种请求方法（GET、POST、PUT、DELETE等），引入了请求头和响应头，支持持久连接、管线化、缓存控制、虚拟主机等功能。HTTP 1.1通过复用连接、请求头压缩等优化，提高了性能和效率。 HTTP/2是HTTP协议的最新版本，于2015年发布。它是在HTTP 1.1的基础上进行的重大改进。HTTP/2所有数据采用二进制协议而非文本协议，通过二进制帧进行数据传输，引入了多路复用（Multiplexing）机制，允许在单个连接上**同时**发送多个请求和响应，减少了连接建立和关闭的开销。此外，HTTP/2还支持头部压缩、服务器推送、优先级等功能，进一步提高了性能和效率。 区别： 功能支持：HTTP 0.9仅支持GET方法，而HTTP 1.1和HTTP/2支持更多的请求方法和功能。 协议形式：HTTP 0.9、HTTP 1.1是纯文本协议，HTTP/2采用了二进制协议。 连接复用：HTTP 0.9每次请求都需要建立新的连接，HTTP 1.1引入了持久连接，允许复用连接，而HTTP/2通过多路复用在单个连接上同时处理多个请求和响应。 性能优化：HTTP 1.1通过管线化和请求头压缩等方式提高性能，而HTTP/2在此基础上引入了更高级的优化机制，如二进制分帧、头部压缩等。 共同点： 均为应用层协议，用于在客户端和服务器之间传输数据。 均基于请求-响应模型，客户端发送请求，服务器返回响应。 均使用URL作为资源定位标识符。 均使用HTTP状态码来表示请求和响应的结果。 总体而言，HTTP 1.1和HTTP/2是HTTP协议的重要演化版本，提供了更多的功能和性能优化，以适应互联网发展的需求。 三次握手三次握手是建立 TCP 连接时使用的一种协议，用于确保双方的通信能够正常进行。下面是三次握手的详细步骤： 刚开始时，客户端的状态是关闭的（CLOSED），服务器状态处于监听中（LISTEN） 第一次握手（SYN）： 客户端（浏览器）向服务器发送一个 SYN（同步）标志的 TCP 数据包，该数据包的序列号表示客户端要发送数据的初始序列号（Seq=x）。 客户端进入 SYN_SENT 状态，等待服务器的响应。 第二次握手（SYN-ACK）： 服务器收到客户端发送的 SYN 数据包后，会确认收到，并发送一个带有 SYN 和 ACK（确认序列号）标志的 TCP 数据包作为回应。（ACK） 该数据包中包含服务器自己分配的初始序列号（Seq=y）和确认号（ACK= x + 1），确认号为客户端的初始序列号(Seq=x)加1。 服务器进入 SYN_RCIVED 状态。 第三次握手（ACK）： 客户端收到服务器发送的 SYN / ACK 数据包后，会确认收到，并发送一个带有 ACK= y + 1 标志的 TCP 数据包给服务器。 该数据包中的确认号为服务器的初始序列号(Seq=y)加1。 服务器收到客户端发送的 ACK 数据包后，确认号也加1。 客户端和服务器都进入 ESTABLISHED 状态，TCP 连接建立成功。 通过三次握手，客户端和服务器都能够确认彼此的收发能力正常，可以开始进行数据的传输。在握手过程中，初始序列号（ISN）是为了保证每个连接都有唯一的序列号起始值，以增强连接的安全性。 需要注意的是，三次握手只是建立 TCP 连接的过程，并不代表数据的传输。数据的传输是在连接建立完成后进行的，双方可以通过已建立的连接进行数据的发送和接收。 在关闭 TCP 连接时，也需要进行类似的四次挥手（四次握手）过程，以保证双方都完成了数据传输并愿意关闭连接。 半连接队列服务器第一次收到客户端的 SYN 之后，就会处于 SYN_RCVD 状态，此时双方还 没有完全建立其连接，服务器会把此种状态下请求连接放在一个队列里，我们把这种队列称之为半连接队列。 还有一个全连接队列，就是已经完成三次握手，建立起连接的就会放在全连接队列中。如果队列满了就有可能会出现丢包现象。 四次挥手 首先要明白，客户端和服务端都可以发起关闭连接的请求。 这里以客户端发起关闭请求为例。 刚开始，客户端和服务器都处于 established 的状态，客户端主动发起 关闭连接 的请求。 第一次挥手 客户端发送一个 FIN (finish) 报文，报文中会指定一个序列号。此时客户端处于 FIN_WAIT1 状态。 第二次挥手 服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT 状态。 客户端收到服务端的确认后，进入FIN_WAIT2（终止等待2）状态，等待服务端发出的连接释放报文段。 此时，服务端还可以发送未发送完的数据，客户端也可以接收数据。 第三次挥手 如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端进入最后确认状态（LAST_ACK 的状态） 第四次挥手 客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 +1 作为自己 ACK 报文的序列号值，此时客户端处于超时等待 TIME_WAIT 状态，经过超时时间后关闭连接。服务端收到 ACK 报文之后 立即 关闭连接了，处于 CLOSED 状态。 为什么客户端需要进入超时等待状态确保服务端能收到自己的 ACK 报文。 假设客户端发送完 ack 包，就立刻关闭了连接，一旦 ack 包在网络传输中丢失，服务器将一直处于 最后确认状态（LAST_ACK）。服务端因为没有收到 ACK 包会重发 FIN 包，此时客户端关闭了链接，那么就无法关闭连接。 服务端因为没有收到 ACK 包会重发 FIN 包，客户端收到 FIN 包后，就会重发 ACK 包并刷新超时时间。 最后，客户端再也没有收到服务器发送过来的 FIN，等待一段时间后，客户端也进入了关闭状态(Closed)。 !!! 请求报文HTTP请求报文由请求行（Request Line）、请求头部（Headers）和请求主体（Body）三部分组成。以下是一个示例HTTP请求报文的结构： 12345678GET /path/to/resource HTTP/1.1Host: www.example.comUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8Referer: https://www.example.com/referer-pageConnection: keep-alive请求主体（如果存在）//比如：Hello，World!! 解释每个部分的含义： 请求行（Request Line）：包含了HTTP方法、请求的路径和协议版本。 HTTP方法（例如GET、POST、PUT等）指定了客户端对资源的操作类型。 请求的路径指定了服务器上要访问的资源的路径。 协议版本（例如HTTP/1.1）指定了客户端所使用的HTTP协议版本。 请求头部（Headers）：包含了与请求相关的各种元数据信息，以键值对的形式表示。每个键值对占据一行。 Host：指定了服务器的主机名或IP地址。 User-Agent：发送请求的客户端的用户代理标识。 Accept：指定了客户端能够接受的响应内容类型。 Referer：指定了请求的来源页面的URL。 Connection：指定了客户端与服务器之间的连接是否保持持久连接。 请求主体（Body）：可选部分，用于发送附加的请求数据，例如表单数据、JSON数据等。在GET请求中通常为空，而在POST请求中会包含要发送的数据。 响应报文HTTP响应报文由状态行（Status Line）、响应头部（Headers）和响应主体（Body）三部分组成。以下是一个示例HTTP响应报文的结构： 123456HTTP/1.1 200 OKContent-Type: text/html; charset=utf-8Content-Length: 1234Server: Apache/2.4.29 (Unix)响应主体（如果存在）(注意：响应主体不仅仅是换行，而是真正空了一样，才开始显示主体部分) 解释每个部分的含义： 状态行（Status Line）：包含了协议版本、状态码和状态消息。 协议版本（例如HTTP/1.1）指定了服务器使用的HTTP协议版本。 状态码是一个三位数，用于表示服务器对请求的处理结果。例如，状态码200表示成功，404表示资源未找到。 状态消息是对状态码的简要描述，提供了更详细的说明。 响应头部（Headers）：包含了与响应相关的各种元数据信息，以键值对的形式表示。每个键值对占据一行。 Content-Type：指定了响应主体的媒体类型和字符集。 Content-Length：指定了响应主体的长度（以字节为单位）。 Server：指定了响应的服务器软件名称和版本。 响应主体（Body）：可选部分，包含了服务器返回的实际响应内容。例如，对于HTML页面，响应主体可能包含HTML标记和文本内容。 跨域 什么是跨域？ CORS 全称是 Cross-Origin Resource Sharing，意为跨域资源共享。当一个资源去访问另一个不同域名或者不同端口的资源时，就会发出跨域请求。如果另一个资源不允许其进行跨域资源访问，就会造成跨域。 跨域不是问题，是浏览器的安全机制 跨域不会阻止请求的发出，也不会阻止请求的接收，跨域是浏览器为了保护当前页面，你的请求得到了响应，但是浏览器不会将请求到的数据提交给当前页面上的回调，取而代之的是去提示你这是一个跨域数据。 同源策略导致。 所谓同源策略，就是协议、域名、端口号都要相同，有一个不相同，那么就是非同源，就会出现跨域。 12345678910111213141516171819// 跨域(端口不同)http://localhost:8080http://localhost:3000// 跨域(协议不同)https://localhost:8080http://localhost:8080// 跨域(域名)https://localhost:8080https://192.168.1.2:8080// 跨域(协议不同，端口也不同)// http 默认端口是 80，https 默认端口是 443http://localhost/bbbhttps://localhost/aaa 解决跨域 纯后端方式 假设我们有个后端服务 3000，提供了 /user 接口，我们可以直接在 .html 文件中访问，如果后端不设置跨域，那么肯定会出现跨域提示的。 123456789101112131415161718192021222324252627282930313233// serverconst express = require(&#x27;express&#x27;)const app = express()app.get(&#x27;/user&#x27;, (req, res) =&gt; &#123; res.json(&#123; code: 0, msg: &#x27;请求user成功&#x27; &#125;)&#125;)app.listen(&#x27;3000&#x27;, () =&gt; &#123; console.log(&#x27;server running at port 3000...&#x27;)&#125;)// client&lt;script&gt; const xhr = new XMLHttpRequest() xhr.open(&#x27;get&#x27;, &#x27;http://localhost:3000/user&#x27;) xhr.onload = function() &#123; consolelog(xhr.response) &#125; xhr.send() // fetch fetch(&#x27;http://localhost:3000/user&#x27;) .then(res =&gt; res.text()) .then(res =&gt; &#123; console.log(res) &#125;)&lt;/script&gt; 后端设置跨域访问 123456789// CORSapp.all(&#x27;*&#x27;, function(req, res, next) &#123; // 允许所有请求源 res.header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;) // 域名地址 res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;*&quot;) // 允许自定义 headers res.header(&quot;Access-Control-Allow-Methods&quot;, &quot;*&quot;) // 默认允许的方法：GET,HEAD,POST next()&#125;) 前端处理主要是通过 webpack devServer 的 proxy 来处理。 1234567891011121314151617...devServer: &#123; proxy: &#123; &#x27;/api&#x27;: &#123; target: &#x27;http://localhost:3000/&#x27; // http://localhost:8080/api/user =&gt; http://localhost:3000/api/user &#125; &#125;, proxy: &#123; &#x27;/no-api&#x27;: &#123; target: &#x27;http://localhost:3000/&#x27;, // http://localhost:8080/no-api/user =&gt; http://localhost:3000/user pathRewrite: &#123; &#x27;/no-api&#x27;: &#x27;&#x27;, // 后端接口中一般不会含有 api 标识符，我们可以去掉 &#125; &#125; &#125;,&#125;... Nginx 要注意的是，devServer 配置 proxy 只是存在于我们开发项目时有用，如果项目要上线，devServer 就没有了，这时可以考虑采用 Nginx 来代理。 前后端合并方式 我们可以不采用 devServer proxy 方式，而是在后端配置 webpack-dev-middleware，将前后端进行合并。 123456789101112131415161718192021const express = require(&#x27;express&#x27;)const webpack = require(&#x27;webpack&#x27;)const middle = require(&#x27;webpack-dev-middleware&#x27;)const compile = require(&#x27;./webpack.config.js&#x27;)const app = express()app.use(middle(compile))app.get(&#x27;/user&#x27;, (req, res) =&gt; &#123; res.json(&#123; code: 0, msg: &#x27;请求user成功&#x27; &#125;)&#125;)app.listen(&#x27;3000&#x27;, () =&gt; &#123; console.log(&#x27;server running at port 3000...&#x27;)&#125;) jsonp 比较老、兼容性好的方式。 利用标签没有跨域限制的漏洞，在 script 标签上我们可以引用其他服务上的脚本。 最常见的场景就是 CDN. 1&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js&quot;&gt;&lt;/script&gt; 使用方式： 12345678910function callback(res) &#123; console.log(JSON.stringify(res, null, 2))&#125;// 动态创建 script 标签，设置好 scr 属性，主要参数是 cb=callbackconst script = document.createElement(&#x27;script&#x27;)script.src = &#x27;http://127.0.0.1:3000/info/jsonp?cb=callback&#x27;document.getElementByTagsName(&#x27;head&#x27;)[0].appendChild(script) 预请求(OPTIONS)OPTIONS 请求和 GET 请求的区别在于它们的目的和作用不同。 OPTIONS 请求用于探测服务器的支持能力和实施安全机制，以便在进行实际请求之前进行 预检 其它请求方法，比如 GET 请求则是用于获取实际的资源数据。 需要注意的是，出现两个相同URL但请求方法不同的请求可能是因为浏览器进行了请求优化或其他原因。例如，某些浏览器可能会在发送实际的 GET 请求之前，先发送一个 OPTIONS 请求以验证是否允许跨域请求。这是浏览器的行为，并非所有请求都会出现这种情况，具体取决于浏览器的实现和配置。 如果我们不想要 预检，那么在服务端设置 Access-Control-Max-Age，表示在 1000秒 内，都不需要预请求验证。 123res.writeHead(200, &#123; &#x27;Access-Control-Max-Age&#x27;: &#x27;1000&#x27;, // 秒&#125;) 服务端设置好之后，客户端发起的第一次请求，还是会有预检（OPTIONS）和实际请求，再次刷新页面就只会发起实际的请求了。 强缓存 &amp; 协商缓存HTTP 缓存机制中的强缓存和协商缓存是两种不同的策略，用于控制缓存的行为，以提高网页的加载性能和减少网络资源的使用。 强缓存（Strong Cache）：强缓存是通过在响应头中设置特定的缓存标识来实现的。当客户端发起请求时，会先检查缓存标识，如果缓存标识命中并且缓存尚未过期，则客户端可以直接从缓存中获取响应，而不必发送请求到服务器。常见的缓存标识有两个： Expires：通过设置一个具体的过期时间来表示缓存的有效期。 Cache-Control：通过设置 max-age 或 s-maxage 来表示缓存的最大有效时间。 协商缓存（Conditional Cache）：协商缓存是在客户端发送请求时，服务器根据请求头中的条件信息来判断是否需要返回新的响应数据。如果缓存仍然有效，则服务器返回一个特殊的响应码，通知客户端直接使用缓存中的数据，而不必返回完整的响应。常见的条件信息有两个： Last-Modified 和 If-Modified-Since：服务器在响应头中返回资源的最后修改时间，客户端在后续请求中通过 If-Modified-Since 头将最后修改时间发送给服务器，如果最后修改时间相同，则说明缓存仍然有效。 ETag 和 If-None-Match：服务器在响应头中返回资源的唯一标识符（通常是哈希值），客户端在后续请求中通过 If-None-Match 头将标识符发送给服务器，如果标识符相同，则说明缓存仍然有效。 如果强缓存和协商缓存同时存在，浏览器会先检查强缓存是否过期，如果强缓存有效，则直接使用缓存数据；如果强缓存失效，则发送带有协商缓存条件的请求到服务器，由服务器根据条件判断是否返回新的数据或通知客户端使用缓存。这样可以有效减少对服务器的请求，加快页面加载速度。 Cache-ControlHTTP头部字段Cache-Control用于控制缓存的行为，它可以指示浏览器或代理服务器是否缓存响应以及如何缓存。 Cache-Control头部字段有多个可选的指令，可以单独使用或组合使用。下面是一些常见的指令及其作用： no-cache：指示浏览器和代理服务器不应直接使用缓存的响应，而应发送请求到服务器进行验证。服务器可以通过校验请求头（Etag/Last-Modified）来确定是否需要返回新的响应或使用缓存的响应。 no-store：指示浏览器和代理服务器不应存储任何关于请求和响应的内容。每次都必须从原始服务器获取完整的响应。 public：指示响应可以被任何节点缓存（包括客户端和代理服务器）缓存。 private：指示响应只能被客户端缓存，不允许代理服务器缓存。 max-age=&lt;seconds&gt;：指示响应在指定的秒数内可以被缓存。例如，Cache-Control: max-age=3600表示响应可以在一个小时内被缓存。 s-maxage=&lt;seconds&gt;：类似于max-age，但仅适用于共享缓存（例如代理服务器）。它覆盖max-age指令。 这些指令可以通过逗号分隔的方式组合使用，以满足特定的缓存需求。 通过使用Cache-Control头部字段，服务器可以控制缓存的行为，包括缓存有效期、是否需要验证等。而浏览器和代理服务器会根据这些指令来决定是否缓存响应以及如何使用缓存。这有助于提高性能和减少网络流量，同时保证及时获取最新的资源。 比如: res.setHeader(&#39;Cache-Control&#39;, &#39;max-age=3600, public&#39;); 表示所有节点都能缓存（客户端、代理服务器等）3600秒之后，就重新从服务器拉取资源，接着缓存起来，客户端又可以使用缓存资源了。以此循环… 看如下例子： 1234567891011121314151617181920212223&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Hello Http!你好啊&lt;/h1&gt; &lt;script&gt; // 请求另一个服务器资源 fetch(&#x27;http://localhost:9999/&#x27;, &#123; method: &#x27;get&#x27; &#125;) .then(res =&gt; console.log(&#x27;??? &#x27;, res)) &lt;/script&gt; &lt;!-- 加载 js 脚本 --&gt; &lt;script src=&quot;/script.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 1234567891011121314151617181920212223242526272829303132333435// server.jsconst http = require(&#x27;http&#x27;);const fs = require(&#x27;fs&#x27;)const html = fs.readFileSync(&#x27;./index.html&#x27;, &#x27;utf8&#x27;)// 创建HTTP服务器const server = http.createServer((req, res) =&gt; &#123; if (req.url === &#x27;/&#x27;) &#123; // 设置响应头部字段 res.setHeader(&#x27;Cache-Control&#x27;, &#x27;max-age=10, public&#x27;); // 其他响应设置，响应头字段也可以在这设置 res.writeHead(200, &#123; &#x27;Content-Type&#x27;: &#x27;text/html&#x27; &#125;); res.end(html); &#125; if (req.url === &#x27;/script.js&#x27;) &#123; res.writeHead(200, &#123; &#x27;Content-Type&#x27;: &#x27;text/javascript&#x27;, &#x27;Cache-Control&#x27;: &#x27;max-age=10, private&#x27; // 只能客户端缓存，并且 10 秒后缓存失效 &#125;) res.end(&#x27;console.log(&quot;Javascript loaded!!!&quot;)&#x27;) // 控制台打印 .. &#125;&#125;);// 监听端口const port = 8888;server.listen(port, () =&gt; &#123; console.log(`Server running at http://localhost:$&#123;port&#125;/`);&#125;); 加了 cache-control 之后，第一次访问到了资源，再次访问时，就会读取浏览器缓存的资源了，看请求时间是非常短的。 Disk cache 和 Memory cacheDisk cache和Memory cache是浏览器中常见的两种缓存机制，它们在缓存资源时有一些区别。 Disk Cache（磁盘缓存）：Disk cache是指将请求的资源存储在硬盘上的缓存机制。当浏览器收到服务器的响应后，会将响应的资源保存在硬盘的特定位置。当下次请求相同的资源时，浏览器会首先检查硬盘上的缓存，如果缓存存在且有效，则直接从硬盘中读取资源，避免了再次发送网络请求。Disk cache相对于Memory cache来说，存储容量较大，可以缓存更多的资源，但访问速度相对较慢。 Memory Cache（内存缓存）：Memory cache是指将请求的资源存储在内存中的缓存机制。当浏览器收到服务器的响应后，会将响应的资源保存在内存中。内存缓存的访问速度非常快，因为内存的读取速度比硬盘快得多。当下次请求相同的资源时，浏览器会首先检查内存中的缓存，如果缓存存在且有效，则直接从内存中读取资源，无需进行网络请求。Memory cache相对于Disk cache来说，存储容量较小，只能缓存较少的资源，但访问速度非常快。 通常情况下，浏览器在接收到资源后会首先将资源存储在内存缓存中，这样可以提供更快的访问速度。如果内存缓存已满或资源需要长期保存，浏览器会将资源存储在磁盘缓存中，以便长期使用。当浏览器再次请求相同的资源时，会根据缓存策略首先检查内存缓存，然后再检查磁盘缓存，以提供更快的访问速度和节省网络带宽。 什么时候浏览器会使用 disk cache，什么情况下使用 memory cache 呢？浏览器在缓存资源时，会根据一些因素来决定是使用Disk cache还是Memory cache。 Memory Cache（内存缓存）的使用场景： 静态资源：通常情况下，浏览器会优先将静态资源（如CSS、JavaScript、图片等）存储在内存缓存中，以提供更快的访问速度。这是因为内存的读取速度比硬盘快得多，可以快速响应资源请求。 常用资源：经常被访问的资源会被存储在内存缓存中，以减少对网络的依赖，提高用户体验。 短期缓存：一些具有短期有效性的资源，比如通过Ajax动态获取的数据，通常会被存储在内存缓存中，以便快速获取最新的数据。 Disk Cache（磁盘缓存）的使用场景： 大型资源：较大的资源文件（如视频、音频等）通常会被存储在磁盘缓存中。由于内存容量有限，内存缓存不适合存储大型资源，因此浏览器会将这些资源保存在磁盘上，以便长期使用。 持久缓存：一些具有长期有效性的资源，如页面的静态资源文件（如CSS、JavaScript、图片等），通常会被存储在磁盘缓存中。这样可以避免每次都重新下载资源，减少网络请求和加快页面加载速度。 浏览器也可以根据用户的配置和缓存策略来决定是否使用缓存以及缓存的存储位置（内存缓存或磁盘缓存）。 缓存是否失效，如何验证？缓存是否已经失效是由浏览器根据一些规则和策略进行判断的。以下是一些常见的判断依据： 缓存标识符：浏览器通过检查请求中的缓存标识符来判断缓存是否有效。常见的缓存标识符有ETag和Last-Modified。当服务器返回响应时，会包含一个或多个缓存标识符，浏览器会将这些标识符存储起来。下次请求相同资源时，浏览器会将缓存标识符带上，服务器根据这些标识符判断资源是否发生了变化。如果资源没有变化，服务器可以返回一个304 Not Modified的响应，告知浏览器使用缓存副本。 缓存控制指令：响应头部中的缓存控制指令，如Cache-Control和Expires，提供了关于缓存的策略和过期时间。浏览器会根据这些指令来判断缓存是否过期。如果缓存的过期时间尚未到达，且缓存控制指令允许使用缓存，浏览器将使用缓存的副本。 重新验证机制：浏览器可以通过发送一个条件请求来验证缓存是否仍然有效。这种验证通常使用If-None-Match和If-Modified-Since等条件头部字段。服务器可以根据这些条件字段判断资源是否发生了变化，如果没有变化，可以返回一个304 Not Modified的响应，浏览器继续使用缓存副本。 请注意，浏览器对缓存的处理是基于一系列规范和策略的，具体的判断依据可能会因浏览器的实现和配置而有所不同。如果您想要详细了解特定浏览器的缓存机制和行为，可以参考相关浏览器的文档和规范。 ETag &amp; Last-Modified 验证头虽然我们设置了 cache-control 的 max-age 值，但是我想要每次发送请求都想要去服务器验证，应该怎么做？ 那就再设置 no-cache。 1234res.writeHead(200, &#123; &#x27;Content-Type&#x27;: &#x27;text/javascript&#x27;, &#x27;Cache-Control&#x27;: &#x27;max-age=360000, no-cache&#x27;,&#125;) 为了验证是否继续使用缓存，我们在响应头中加上 Etag 和 Last-Modified 这两个属性 123456res.writeHead(200, &#123; &#x27;Content-Type&#x27;: &#x27;text/javascript&#x27;, &#x27;Cache-Control&#x27;: &#x27;max-age=10, no-cache&#x27;, &#x27;ETag&#x27;: &#x27;123456789&#x27;, // 下一次请求时，客户端会在请求头加上 If-None-Match: 123456789 &#x27;Last-Modified&#x27;: &#x27;2023-05-27 21:30&#x27; // 下一次请求时，客户端会在请求头加上 If-Modified-Since: 2023-05-27 21:30&#125;) 还是以上面的例子做示范，虽然加了 Etag 和 Last-Modified 这两个属性，还没完，还需要在 服务端做校验判断： 123456789101112131415161718// server.jsif (req.url === &#x27;/script.js&#x27;) &#123; if (req.headers[&#x27;if-none-match&#x27;] === &#x27;123456789&#x27; &amp;&amp; req.headers[&#x27;if-modified-since&#x27;] === &#x27;2023-05-27 21:30&#x27;) &#123; res.writeHead(304) // 这段代码不会生效了，因为浏览器会从缓存获取资源，控制台还是会打印 Javascript loaded!!! res.end(&#x27;console.log(&quot;服务器验证完毕，同意客户端获取缓存资源!!&quot;)&#x27;) &#125; else &#123; res.writeHead(200, &#123; &#x27;Content-Type&#x27;: &#x27;text/javascript&#x27;, &#x27;Cache-Control&#x27;: &#x27;max-age=10, no-cache&#x27;, &#x27;ETag&#x27;: &#x27;123456789&#x27;, &#x27;Last-Modified&#x27;: &#x27;2023-05-27 21:30&#x27; &#125;) res.end(&#x27;console.log(&quot;Javascript loaded!!!&quot;)&#x27;) &#125;&#125; 效果如下，第一次发起 请求时，会从服务器获取资源，接下来如果再发起请求，因为设置了 no-cache 和 ETag 和 Last-Modified，所以会在服务器进行资源是否失效的校验。 如果资源未失效，则服务器返回状态码 304，表示资源未被修改，可以使用缓存资源。 注意：如果再 Chrome 浏览器重，勾选了 Disable cache，表示不使用缓存，那么 HTTP 请求头是不会携带 if-none-match 或 if-modified-since 这些具有缓存意义的信息了 CookieCookie是一种在Web浏览器和Web服务器之间传递的小型文本文件，用于存储和传递用户的相关信息。它由服务器在HTTP响应的Set-Cookie首部字段中发送给浏览器，并由浏览器在后续的请求中通过Cookie首部字段将该信息发送回服务器。 Cookie主要用于实现会话管理和用户跟踪，以提供个性化的Web体验。 Cookie的工作流程如下： 当浏览器向服务器发送请求时，服务器可以在HTTP响应中通过Set-Cookie首部字段将一个或多个Cookie发送给浏览器。 浏览器收到Cookie后，将其存储在本地的Cookie存储中。 当浏览器向同一服务器发送后续请求时，会在HTTP请求的Cookie首部字段中携带相应的Cookie数据。 服务器收到请求后，可以解析Cookie数据并根据其中的信息来执行相应的操作，如识别用户、保持会话状态等。 当服务器通过HTTP响应的Set-Cookie首部字段发送Cookie时，可以设置多个Cookie项，每个项使用键值对的形式表示。下面是一个示例： 1234HTTP/1.1 200 OKSet-Cookie: username=johndoe; Expires=Wed, 21 Oct 2023 07:28:00 GMT; Path=/; Secure; HttpOnlySet-Cookie: language=en-US; Path=/Set-Cookie: theme=dark; Expires=Wed, 21 Oct 2023 07:28:00 GMT; Path=/ 在上面的示例中，服务器发送了三个Cookie项： username=johndoe：设置了一个名为username的Cookie，其值为johndoe。 language=en-US：设置了一个名为language的Cookie，其值为en-US。 theme=dark：设置了一个名为theme的Cookie，其值为dark。 每个Cookie项可以附带一些可选的属性，如Expires、Path、Secure和HttpOnly等。 Expires属性指定了Cookie的过期时间，浏览器将在过期时间之后删除该Cookie。在上面的示例中，username和theme的Cookie都设置了过期时间为Wed, 21 Oct 2023 07:28:00 GMT。 Max-Age 属性指定了Cookie的最大存活时间，以秒为单位。它表示从当前时间开始，Cookie将在多少秒后过期。 Path属性指定了Cookie的有效路径，即只有在指定路径下的请求才会携带该Cookie。在上面的示例中，username和language的Cookie的路径分别为根路径/和默认路径/。 Secure属性指示浏览器仅在通过安全连接（如HTTPS）发送请求时才会携带该Cookie。 HttpOnly属性指定了该Cookie是否只能通过HTTP协议访问，而不能通过JavaScript代码访问(document.cookie)。这可以提高安全性，防止跨站脚本攻击（XSS）。 注意，浏览器在后续的请求中会自动在Cookie首部字段中携带相应的Cookie数据，无需手动添加。服务器可以通过解析Cookie首部字段来获取客户端发送的Cookie信息。 1234res.writeHead(200, &#123; &#x27;Content-Type&#x27;: &#x27;text/javascript&#x27;, &#x27;Set-Cookie&#x27;: &#x27;age=18&#x27;&#125;) 查看 network: 123456// 第一次响应头Set-Cookie: age=18// 第二次请求头Cookie: age=18 设置多个 Cookie&#39;Set-Cookie&#39;: [&#39;age=18&#39;, &#39;name=alex.cheng&#39;] 查看 network: 1234567// 第一次响应头Set-Cookie: age=18Set-Cookie: name=alex.cheng// 第二次请求头Cookie: name=alex.cheng; age=18 我们可以在控制台的 Applicatioin 中查看 cookie，服务端通过 req.headers.cookie 获取请求头中的 cookie。 cookie 过期时间Expires 和 max-age 都可以设置过期时间，只是 max-age 设置起来更简单方便。 如果没有设置过期时间，表示 cookie 存在于 回话 中(在 application 中显示 session)，表示关闭当前窗口，再发送请求，是不会带上 cookie 的。 以下 cookie中，age 会在 5s 后过期，也就是说过了 5s 再发请求，请求头中不会携带 age 信息了。 12345res.writeHead(200, &#123; &#x27;Content-Type&#x27;: &#x27;text/javascript&#x27;, &#x27;Set-Cookie&#x27;: [&#x27;age=18; max-age=5&#x27;, &#x27;name=alex.cheng&#x27;]&#125;)res.end(&#x27;console.log(&quot;Javascript loaded!!!&quot;)&#x27;) Http-Only sameSite domainHttp-Only、SameSite和Domain是用于设置和控制浏览器中的 Cookie 的属性。它们的作用和区别如下： Http-Only: Http-Only 是一个 Cookie 属性，用于限制客户端（浏览器）脚本访问 Cookie 的能力。当设置为 Http-Only 时，浏览器只会在进行 HTTP 请求时自动发送 Cookie，而不允许通过 JavaScript 访问 Cookie。这可以提高应用程序的安全性，防止跨站点脚本攻击（XSS）。 SameSite: SameSite 是一个 Cookie 属性，用于控制浏览器在发送跨站点请求时是否附带 Cookie。它有以下几个可选值： Strict: 当设置为 Strict 时，浏览器仅在目标网站与源网站完全相同的情况下，才会在跨站点请求中附带 Cookie。这有助于防止跨站点请求伪造（CSRF）攻击。 Lax: 当设置为 Lax 时，浏览器将在顶级导航（例如通过链接点击）以及 GET 方法提交的表单请求中附带 Cookie。对于 POST、PUT、DELETE 等非安全方法的请求，以及跨域的 AJAX 请求，不会附带 Cookie。这是默认的 SameSite 值。 None: 当设置为 None 时，浏览器会在所有跨站点请求中都附带 Cookie。但为了安全考虑，还需要同时设置 Secure 属性，表示只有在通过 HTTPS 连接发送请求时才会附带 Cookie。 Domain: Domain 是一个 Cookie 属性，用于指定可以访问该 Cookie 的域名。默认情况下，Cookie 的 Domain 属性与当前页面的域名相同。通过设置 Domain 属性，可以使 Cookie 在多个子域名之间共享，或者限制 Cookie 的作用域。例如，设置 Domain 为 “.example.com” 可以使 Cookie 在所有以 “.example.com” 结尾的子域名下都可访问。 域名的级别是从后往前算的，比如 .example.com 是一级域名，a.example.com 则是二级域名，二级域名可以访问一级域名中的 cookie，但是反过来不行。 总结： Http-Only 限制了客户端脚本对 Cookie 的访问，提高安全性。 SameSite 控制了在跨站点请求中是否附带 Cookie，防止 CSRF 攻击。 Domain 指定了可以访问该 Cookie 的域名，可以实现跨子域的共享或限制作用域。 这些属性的使用可以根据具体的需求和安全考虑进行配置。 SessionSession（会话）是指在客户端与服务器之间建立的一种状态管理机制。 它用于跟踪和存储特定用户在一段时间内的相关信息。在Web应用程序中，会话通常用于在用户访问不同页面或发送请求时保持用户的身份验证状态和其他会话数据。 也就是说，我们只要能在服务器定位到特定的用户，然后拿到对应的 cookie 信息，那就是 session 的实现方案。 Session的优点包括： 可以存储和管理用户的状态和相关数据。 提供了身份验证和用户跟踪的机制。 可以用于共享数据和上下文信息，使得多个请求之间可以共享数据。 需要注意的是，Session机制依赖于会话ID的传递和存储。常见的方式是使用Cookie来存储会话ID，但也可以通过其他方式（例如URL参数或隐藏表单字段）传递会话ID。此外，为了确保会话的安全性，需要采取一些安全措施，例如使用加密算法对会话ID进行加密，限制会话ID的有效期限等。 123456789101112131415161718192021222324252627282930313233343536373839const express = require(&#x27;express&#x27;);const session = require(&#x27;express-session&#x27;);const app = express();// 配置会话中间件app.use(session(&#123; secret: &#x27;my-secret-key&#x27;, // 用于加密会话数据的密钥 resave: false, saveUninitialized: true&#125;));app.get(&#x27;/login&#x27;, (req, res) =&gt; &#123; // 在会话中存储用户信息 req.session.username = &#x27;john_doe&#x27;; req.session.isLoggedIn = true; res.send(&#x27;Login successful!&#x27;);&#125;);app.get(&#x27;/dashboard&#x27;, (req, res) =&gt; &#123; // 检查会话中的用户信息 if (req.session.isLoggedIn) &#123; const username = req.session.username; const sessionId = req.sessionID; // 获取会话ID res.send(`Welcome to the dashboard, $&#123;username&#125;! Session ID: $&#123;sessionId&#125;`); &#125; else &#123; res.send(&#x27;You need to login first!&#x27;); &#125;&#125;);app.get(&#x27;/logout&#x27;, (req, res) =&gt; &#123; // 销毁会话 req.session.destroy(); res.send(&#x27;Logout successful!&#x27;);&#125;);app.listen(3000, () =&gt; &#123; console.log(&#x27;Server started on port 3000&#x27;);&#125;); 在上述示例中，每当用户登录时，会将用户信息存储在会话中。在访问/dashboard路由时，可以通过req.sessionID获取当前会话的唯一ID，并与用户信息一起返回给用户。这样，不同用户将具有不同的会话ID，从而区分不同的用户。 请注意，会话ID的生成和管理通常是由会话中间件自动处理的，无需手动操作。 HTTP 长连接HTTP长连接（HTTP connection keep-alive）是一种机制，用于在单个TCP连接上发送多个HTTP请求和响应(有先后顺序)，而不是为每个请求和响应都建立一个新的TCP连接。在传统的HTTP请求-响应模型中，每个请求都需要建立一个新的TCP连接，完成请求后立即关闭连接。而使用长连接，可以在同一个TCP连接上发送多个请求，并在一段时间内保持连接处于打开状态，以便在需要时发送更多的请求。 使用HTTP长连接可以带来以下好处： 减少连接建立和断开的开销：TCP连接的建立和断开需要消耗一定的时间和资源。使用长连接可以减少这些开销，提高性能。 减少网络拥塞：长连接可以减少网络中的连接数，减轻网络拥塞的程度。 提高响应速度：由于不需要为每个请求建立新的连接，可以更快地发送请求并接收响应。 节省带宽：在长连接上发送多个请求时，可以减少额外的TCP握手和首部信息的传输，节省带宽。 请注意，HTTP长连接并不是永久的连接，而是在一定的时间内保持打开状态。具体的连接时间可以由服务器或客户端进行配置。如果长时间没有活动，连接可能会被服务器或客户端关闭。 Chrome 浏览器允许并发多少个 TCP 连接？在现代的 Chrome 浏览器中，默认情况下，每个域名允许同时建立的持久 TCP 连接数是有限的，具体取决于浏览器版本和操作系统。在过去的版本中，该限制通常为 6 个 TCP 连接。然而，随着时间的推移和浏览器的更新，这个限制已经有所改变。 我们来做个简单的演示: 我们准备一张图片，还有个 html 文件，html 中请求了 7 张图片 12345678910111213// index.html&lt;body&gt; &lt;h1&gt;HTTP 长连接 connection keep-alive&lt;/h1&gt; &lt;img src=&quot;test.jpg1&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;test.jpg2&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;test.jpg3&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;test.jpg4&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;test.jpg5&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;test.jpg6&quot; alt=&quot;&quot; /&gt; &lt;img src=&quot;test.jpg7&quot; alt=&quot;&quot; /&gt;&lt;/body&gt; 再创建一个 http 服务，用来加载 index.html 文件，并处理图片相关的请求: 12345678910111213141516171819202122232425262728const http = require(&#x27;http&#x27;)const fs = require(&#x27;fs&#x27;)const server = http.createServer((req, res) =&gt; &#123; if (req.url === &#x27;/&#x27;) &#123; const html = fs.readFileSync(&#x27;index.html&#x27;) res.writeHead(200, &#123; &#x27;Content-Type&#x27;: &#x27;text/html&#x27; &#125;) res.end(html) &#125; else &#123; // 读取图片，并返回给页面 const img = fs.readFileSync(&#x27;tcp-connect.jpg&#x27;) res.writeHead(200, &#123; &#x27;Content-Type&#x27;: &#x27;iamge/jpg&#x27; &#125;) res.end(img) &#125;&#125;)server.listen(8888, () =&gt; &#123; console.log(&#x27;server running at port 8888...&#x27;)&#125;) 然后我们将网速调慢一点，刷新浏览器查看结果，我们会发现，network 中有 7 个关于图片的 http 请求，其中有一个属于 pendding 状态，当有 TCP 连接有空出来的了（连接数量 &lt; 6），才会加载处于 pendding 状态的请求。 Connection ID 表示当前 TCP 连接的 ID，每个 ID 不一样，表示创建了 不一样的 TCP 连接。由于使用的是默认的 HTTP/1.1 协议，服务器会 自动启用长连接，可以在同一个连接上处理多个请求（TCP连接复用）。 当我们将网速调回来，再次刷新页面，你会发现有多个相同的 Connection ID，表示 tcp 连接被复用了。 如果想要关闭长连接，设置 Connection: close 即可： 1234res.writeHead(200, &#123; &#x27;Content-Type&#x27;: &#x27;iamge/jpg&#x27;, &#x27;Connection&#x27;: &#x27;close&#x27;&#125;) HTTP2 单个 TCP 连接HTTP/2 不再使用多个 TCP 连接来并发传输数据，而是通过单个 TCP 连接进行多路复用。这意味着在 HTTP/2 中，可以 在单个连接上同时进行多个请求和响应。 HTTP/2 使用了二进制协议，将请求和响应分解为更小的帧（frames），并在一个连接上交错地发送这些帧。每个帧都有一个唯一的标识符，用于将其与相应的请求或响应关联起来。这种多路复用的机制允许同时发送多个帧，从而实现了并发传输。提高了性能和效率，并减少了延迟。 数据协商HTTP 数据协商（HTTP Content Negotiation）是指客户端和服务器之间就请求或响应中的内容进行协商，以确定最合适的内容格式、语言、编码等。 在 HTTP 数据协商中，客户端发送请求时，可以通过请求头字段来提供一些关于期望的内容特性的信息，例如 Accept、Accept-Language、Accept-Encoding 等。服务器接收到请求后，可以根据这些请求头字段的值，选择最适合客户端的内容进行响应。 HTTP 数据协商可以分为两种类型： 服务器驱动的协商（Server-driven Negotiation）：服务器根据客户端的请求头信息，从提供的可选项中选择最合适的响应内容。服务器可以根据请求头中的 Accept、Accept-Language、Accept-Encoding 等字段进行协商，并在响应中使用 Content-Type、Content-Language、Content-Encoding 等字段来指示所选内容的特性。 客户端驱动的协商（Client-driven Negotiation）：客户端通过向服务器发送一系列可选项，如请求头中的 Accept、Accept-Language、Accept-Encoding 等字段，告知服务器自己的首选项。服务器根据这些首选项来选择合适的响应内容，并在响应中使用 Content-Type、Content-Language、Content-Encoding 等字段来指示所选内容的特性。 通过 HTTP 数据协商，客户端和服务器可以在请求和响应中进行内容的灵活协商，以提供最适合的内容给客户端，从而提升用户体验和网络效率。这使得客户端和服务器可以根据各自的特性和需求进行交互，并在可选项中选择最佳的内容格式、语言、编码等。 重定向在 HTTP 中，可以通过设置响应状态码和响应头来实现重定向。 常见的重定向状态码包括： 301 Moved Permanently：永久重定向，表示请求的资源已被永久移动到新的位置。浏览器会自动将请求的地址更新为新的地址，不会再发送原来的请求了（这是和 302 的区别）。 302 Found / 307 Temporary Redirect：临时重定向，表示请求的资源临时移动到新的位置。浏览器会继续保持原始请求的方法和请求体，并重定向到新的地址。这个资源只是暂时不能被访问了，但是之后过一段时间还是可以继续访问 303 See Other：表示请求已被处理，应该跳转到另一个地址。GET 方法用于获取重定向后的资源。 具体的重定向步骤如下： 服务器收到请求后，根据需要进行处理，并决定是否需要重定向。 如果需要重定向，服务器设置响应状态码为适当的重定向状态码（如 301、302、307 或 303）。（关键） 服务器在响应头中设置 Location 字段，指定重定向的目标 URL。（关键） 客户端（通常是浏览器）收到响应后，会根据响应状态码进行相应处理。 对于永久重定向（301），客户端会将请求的地址更新为新的地址，并将之后的请求发送到新的地址。 对于临时重定向（302、307）和查看其他（303），客户端会根据响应头中的 Location 字段重新发送请求到新的地址。 对于其他状态码，客户端会根据具体情况进行处理。 以下是一个示例，使用 Node.js 中的 http 模块实现重定向： 1234567891011121314151617181920const http = require(&#x27;http&#x27;);const server = http.createServer((req, res) =&gt; &#123; // 重定向到新的资源 http://localhost:8000/new if (req.url === &#x27;/&#x27;) &#123; res.writeHead(302, &#123; &#x27;Location&#x27;: &#x27;/new&#x27; &#125;); res.end(); &#125; if (req.url === &#x27;/new&#x27;) &#123; res.writeHead(200, &#123; &#x27;Content-Type&#x27;: &#x27;text/html&#x27; &#125;); res.end(&#x27;&lt;h1&gt;New Page&lt;/h1&gt;&#x27;); &#125;&#125;);server.listen(8000, () =&gt; &#123; console.log(&#x27;Server running at http://localhost:8000/&#x27;);&#125;); 上述示例中，当客户端访问服务器时，服务器会返回 302 状态码和 Location 头字段，将客户端重定向到 http://localhost:8000/new 地址。 301 和 302 在浏览器上表现出来的区别最大的区别就是：是否保留原来的HTTP请求 我们在服务端打印 req.url，同时观察 network 中的 http 请求: 1234567// server.js// 302// console.log(req.url)//new/favicon.ico 302 保留了 根路径 的请求，没一次访问 http://localhost:8888/，服务端都会打印出 / 和 /new 123456// server.js// 301// console.log(req.url)/new/favicon.ico 301 不会保留根路径的请求了，从 network 可以看出，http://localhost:8888/ 请求是从 disk cache 获取的，表示永久性重定向，所以 req.url = &#39;/&#39;不会再走到服务端。 注意，如果我们设置了 301 永久重定向，后续再修改服务器的状态，此时浏览器这边是无法知道的，依然会使用 301 永久重定向，也就是说，如果用户不手动清理浏览器缓存，那么就无法拿到最新的服务器资源。所以使用301状态码要非常谨慎！ HTTP Content Security Policy (CSP) https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP 一种用于增强网页安全性的 HTTP 头部字段。 它允许网站管理员 控制网页上能够执行的内容源和操作，以减少恶意脚本注入、跨站点脚本攻击（XSS）等安全威胁。 Content Security Policy 通过定义一系列的策略规则，限制网页中可加载的资源和可执行的操作。这些规则可以包括允许的域名、允许的脚本来源、允许的样式来源、允许的图像来源等。通过限制这些资源的来源，CSP 可以有效防止恶意代码注入和其他安全漏洞。 CSP 的规则可以通过 HTTP 头部字段 Content-Security-Policy 或 Content-Security-Policy-Report-Only 来设置。其中，Content-Security-Policy 是指定实际执行的策略，而 Content-Security-Policy-Report-Only 则只用于报告违规情况，不会阻止资源加载和执行。 以下是一个示例，展示如何使用 CSP 头部字段： 1Content-Security-Policy: default-src &#x27;self&#x27;; script-src &#x27;self&#x27; https://example.com; style-src &#x27;self&#x27; &#x27;unsafe-inline&#x27; 上述示例中，CSP 规则包括： default-src &#39;self&#39;：默认策略要求所有资源从当前域名加载。 script-src &#39;self&#39; https://example.com：指定脚本只能从当前域名和 https://example.com 加载。 style-src &#39;self&#39; &#39;unsafe-inline&#39;：指定样式只能从当前域名加载，但允许内联样式（&#39;unsafe-inline&#39;）。 通过配置适当的 CSP 规则，网站管理员可以限制网页上的资源和操作，从而减少潜在的安全风险。 示例我们在 html 中，加载一张外网的图片，同时服务端设置 CSP default-src self，看看会有什么效果 随便找张图片 1&lt;img src=&quot;http://www.fangfa.net/public/uploads/ueditor/images/20141111/14156729795697.png&quot; alt=&quot;&quot; /&gt; 1234567891011121314151617181920const http = require(&#x27;http&#x27;)const fs = require(&#x27;fs&#x27;)const server = http.createServer((req, res) =&gt; &#123; if (req.url === &#x27;/&#x27;) &#123; res.writeHead(200, &#123; &#x27;Content-Type&#x27;: &#x27;text/html&#x27;, &#x27;Content-Security-Policy&#x27;: &quot;default-src self&quot; // 设置 CSP，所有的请求只能加载本域名下的资源 &#125;) const html = fs.readFileSync(&#x27;index.html&#x27;) res.end(html) &#125;&#125;)server.listen(8888, () =&gt; &#123; console.log(&#x27;server running at port 8888...&#x27;)&#125;) 刷新页面后，发现图片没出来，控制台还报错了 1Refused to load the image &#x27;http://www.fangfa.net/public/uploads/ueditor/images/20141111/14156729795697.png&#x27; because it violates the following Content Security Policy directive: &quot;default-src self&quot;. Note that &#x27;img-src&#x27; was not explicitly set, so &#x27;default-src&#x27; is used as a fallback. 出现了 CSP 错误，如何报告错误？配置 report-uri /report &#39;Content-Security-Policy&#39;: &quot;default-src \\&#39;self\\&#39;; report-uri /report&quot; 设置报告错误后，network 中就会出现 /report 的 http 请求。 123456789101112131415&#123; &quot;csp-report&quot;: &#123; &quot;document-uri&quot;: &quot;http://localhost:8888/&quot;, &quot;referrer&quot;: &quot;&quot;, &quot;violated-directive&quot;: &quot;style-src-elem&quot;, &quot;effective-directive&quot;: &quot;style-src-elem&quot;, &quot;original-policy&quot;: &quot;default-src &#x27;self&#x27;; report-uri /report&quot;, &quot;disposition&quot;: &quot;enforce&quot;, &quot;blocked-uri&quot;: &quot;inline&quot;, &quot;line-number&quot;: 9, &quot;source-file&quot;: &quot;http://localhost:8888/&quot;, &quot;status-code&quot;: 200, &quot;script-sample&quot;: &quot;&quot; &#125;&#125; meta 标签也可以配置 CSP1234&lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;default-src &#x27;self&#x27;; img-src https://*; child-src &#x27;none&#x27;;&quot; /&gt; 不过 meta 标签不能配置 report-uri，所以最好还是通过 http 的响应头来配置 CSP。 HTTP 常用的状态码及使用场景 1xx：表示目前是协议的中间状态，还需要后续请求 2xx：表示请求成功 3xx：表示重定向状态，需要重新请求(304除外) 4xx：表示请求报文错误 5xx：服务器端错误 常用状态码： 101 切换请求协议，从 HTTP 切换到 WebSocket 200 请求成功，有响应体 301 永久重定向：会缓存 302 临时重定向：不会缓存 304 协商缓存命中 403 服务器禁止访问 404 资源未找到 400 请求错误 500 服务器端错误 503 服务器繁忙 HTTP 常用的请求方式，区别和用途？HTTP 常用的请求方式有以下几种： GET： 用途：获取资源，向服务器请求指定的资源。 参数传递：通过 URL 的查询字符串传递参数。 幂等性：是幂等的，多次相同的 GET 请求应该返回相同的结果。 POST： 用途：提交数据，向服务器提交要被处理的数据。 参数传递：通过请求体传递参数，通常用于传输较大量或敏感数据。 幂等性：不是幂等的，多次相同的 POST 请求可能会产生不同的结果。 PUT： 用途：更新资源，用于向服务器传递新的实体来替换指定的资源。 参数传递：通过请求体传递参数，传递要更新的资源信息。 幂等性：是幂等的，多次相同的 PUT 请求应该具有相同的结果。 DELETE： 用途：删除资源，用于删除服务器上的指定资源。 参数传递：通过 URL 或请求体传递要删除的资源标识信息。 幂等性：是幂等的，多次相同的 DELETE 请求应该具有相同的结果。 PATCH： 用途：更新资源的部分内容，用于向服务器发送部分更新的请求。 参数传递：通过请求体传递要更新的部分内容。 幂等性：不是幂等的，多次相同的 PATCH 请求可能会产生不同的结果。 HEAD： 用途：与 GET 类似，但只返回响应头部信息，不返回实际内容，用于获取资源的元数据信息。 参数传递：通过 URL 的查询字符串传递参数。 幂等性：是幂等的，多次相同的 HEAD 请求应该返回相同的结果。 OPTIONS： 用途：获取目标资源支持的请求方法、跨域请求中的预检请求等信息。 参数传递：通过 URL 的查询字符串传递参数。 幂等性：是幂等的，多次相同的 OPTIONS 请求应该返回相同的结果。 TRACE： 用途：回显服务器收到的请求，主要用于诊断和调试。 参数传递：通过 URL 的查询字符串传递参数。 幂等性：是幂等的，多次相同的 TRACE 请求应该返回相同的结果。 HTTPS 是什么？具体流程HTTPS（HyperText Transfer Protocol Secure）是一种通过 加密和认证 的方式来保护网络通信安全的协议。它是在HTTP的基础上添加了 SSL/TLS 协议进行加密传输，以确保数据在传输过程中的机密性、完整性和身份认证。 HTTPS的具体流程如下： 客户端发送HTTPS请求：客户端向服务器发送HTTPS请求，请求的URL以https://开头。 服务器端证书验证：服务器接收到请求后，会向客户端 发送证书，证书中包含了服务器的公钥和其他相关信息。 客户端证书验证：客户端收到服务器的证书后，会对证书进行验证。验证的过程包括检查证书的合法性、有效期等，并且验证证书的颁发机构是否可信。 生成随机密钥：客户端验证通过后，会生成一个随机的对称密钥（也称为会话密钥或对话密钥）。 使用公钥加密：客户端使用服务器的公钥对生成的随机密钥进行加密，并发送给服务器。 使用私钥解密：服务器接收到加密的随机密钥后，使用自己的私钥对其进行解密，得到会话密钥。 加密通信：客户端和服务器使用会话密钥进行对称加密，保证通信过程中的数据机密性和完整性。 通过以上流程，HTTPS实现了对数据的加密和解密，保证了通信过程的安全性。同时，证书的验证机制也确保了服务器的身份可信，防止中间人攻击和数据篡改。","categories":[],"tags":[{"name":"HTTP","slug":"HTTP","permalink":"http://yoursite.com/tags/HTTP/"}]},{"title":"温故而知新（React）","slug":"重温React","date":"2023-05-19T06:57:59.000Z","updated":"2024-06-11T08:52:17.362Z","comments":true,"path":"/post/重温React.html","link":"","permalink":"http://yoursite.com/post/%E9%87%8D%E6%B8%A9React.html","excerpt":"React","text":"对组件化的理解组件将应用的 UI 拆分成独立的、可复用的模块。 组件化的核心，就是两点: 封装 共同的逻辑 复用 通过属性（props）的传递，展示不同的模板内容 定义组件的两种方式 class component 条件： class 继承自 React.Component(PureComponent) class 内部必须定义 render 方法。 如果自定义了 constructor 函数，必须调用 super(props) 方法。调用super实际上是调用了 React.Component 这个 class 的 construcor 方法，用来完成 React 组件的初始化工作。 function component 组件的生命周期单组件生命周期 componentDidMount在 componentDidMount 生命钩子中，组件已经挂在，真实 DOM 也已经渲染完成，是调用服务器 API 最安全的地方。 componentWillMount 也可以获取服务器 API，因为越早拿到数据，越能更快的返回组件并展示正确的组件。但是当组件在服务器端渲染时，componentWillMount 会被调用两次，一次是在服务器端，一次是在浏览器端。而 componentDidMount 能保证在任何情况下只会被调用一次。 componentWillReceivePropsprops 的更新，会触发子组件的 componentWillReceiveProps 生命周期方法。 如果需要用 props 中的某个属性和服务端交互，componentWillReceiveProps 就很合适。 父子组件生命周期执行顺序父子组件生命周期执行顺序和 Vue 的一样。 父子组件加载时： 123456789101112// console.log父组件 constructor父组件 render子组件 constructor子组件 render子组件 componentDidMount父组件 componentDidMount 父组件更新时 1234567父组件 render子组件 render子组件 componentDidUpdate父组件 componentDidUpdate 卸载子组件 12345父组件 render子组件 componentWillUnmount父组件 componentDidUpdate React 中 JSX 本质是什么？本质还是 JS。 JSX 是 JavaScript 语法扩展，可以让你在 JavaScript 文件中书写类似 HTML 的标签。 React 中 JSX 只是一种表现形式，可以让你以一种更方便的方式动态的创建组件。JSX 最终会被转化成 JS 代码。 JSX 语法对 React 来说只是 React.createElement 的语法糖。所有的 JSX 语法最终都会被转换成 React.createElement 函数的调用。 1234567891011// JSXconst element = &lt;div className=&quot;foo&quot;&gt;Hello, React&lt;/div&gt;// 转换后const element = React.createElement( &#x27;div&#x27;, &#123; className: &#x27;foo&#x27; &#125;, &#x27;Hello, React&#x27;) 这也就是为什么我们代码中有时候并未使用 React，但是必须导入的原因。 为什么多个 JSX 标签需要被一个父元素包裹？JSX 虽然看起来很像 HTML，但在底层其实被转化为了 JavaScript 对象，你不能在一个函数中返回多个对象，除非用一个数组把他们包装起来。 这就是为什么多个 JSX 标签必须要用一个父元素或者 Fragment 来包裹。 为什么操作 DOM 比操作 JS 要慢，且更耗性能？主要是在两个方面： 跨模块通信。DOM 的实现和 JS 的实现属于两个独立的模块，跨模块交互性能消耗挺高。 耗浏览器性能。当我们操作 DOM，通常会引起浏览器的重绘和回流。 JSX 和 vDom 的关系？JSX 需要转为成 html，必须先转化为 js，通过 vdom 来描述 html 关系，最终渲染为 html. React.createElement 和 h 函数，都生成 vNode. ReactDOM.render 和 setState 时，都需要 patch。 key 的作用React 中 key 属性是用来标记列表中的每个元素，当列表数据发生变化时，React 在做 diff 时就可以通过 key 知道哪些元素发生了变化，从而只重新渲染发生变化了的元素，提高渲染效率。 state 和 props 的区别是什么state 和 props 都和组件的 UI 渲染有关，它们的变化都会触发组件的重新渲染，但是 props 对于使用它的组件来说是只读的，是通过父组件传递过来，要想修改 props，只能通过父组件修改。而 state 是组件内部自己维护的状态，可变的。 setState 合适的时候合并更新setState 组件大部分情况下是异步的，调用后不会立即更新组件的 state，而是将 state 的更新加入到更新队列中，然后在合适的时候批量处理这些更新。 当你传入对象并调用了多次 setState，这几个对象会被合并，执行结果拿最后那个 setState。 12345count = 0this.setState(&#123; count: this.state.count + 1 &#125;)this.setState(&#123; count: this.state.count + 1 &#125;)this.setState(&#123; count: this.state.count + 1 &#125;) 类似于将三个 count 放到同一个对象上： 12345&#123; count: this.state.count + 1, count: this.state.count + 1, count: this.state.count + 1,&#125; 所以只剩下一个 count 了，只会累加一次，count = 1。 如果给 setState 传入一个函数，React 不会将多个更新合并为一个处理。 1234567891011this.setState(pre =&gt; &#123; return &#123; count: pre.count + 1 &#125;&#125;)this.setState(pre =&gt; &#123; return &#123; count: pre.count + 1 &#125;&#125;) 最终 count 是 2. setState是同步的还是异步的？ setState 大部分情况下是 异步 的 调用 setState 时，组件的 state 并不会立即改变，setState 只是把要修改的状态放入到一个队列中，React 会优化真正的执行动机。 并且出于性能考虑，可能会将多次 setState 的状态修改合并成一次状态修改。 在 setTimeout 中是同步的 自己定义的 DOM 事件中，setState 是同步的 123456789// count 初始值为1，每点击一次，增加 1。&lt;button onClick=&#123;() =&gt; &#123; console.log(&#x27;count &#x27;, this.state.count) // 1 this.setState(&#123; count: this.state.count + 1&#125;, () =&gt; &#123; console.log(this.state.count) // 2 &#125;) console.log(&#x27;cout &#x27;, this.state.count) // 1&#125;&#125;&gt;add&lt;/button&gt; 在 setTimeout 中是同步的 1234567setTimeout(() =&gt; &#123; this.setState(&#123; count: this.state.count + 1 &#125;) console.log(this.state.count) // 累加了：1&#125;, 0); 自己定义的 DOM 事件中，setState 是同步的 12345678910111213componentDidMount(): void &#123; document.body.addEventListener(&#x27;click&#x27;, this.bodyClicked.bind(this))&#125;bodyClicked() &#123; console.log(this.state.count) // 0 this.setState(&#123; count: this.state.count+1 &#125;) console.log(this.state.count) // 1&#125; 看道面试题：初始值 count = 0，查看打印结果。 12345678910111213141516171819202122232425262728293031componentDidMount(): void &#123; this.setState(&#123; count: this.state.count + 1 &#125;) console.log(this.state.count) // 0 this.setState(&#123; count: this.state.count + 1 &#125;) console.log(this.state.count) // 0 setTimeout(() =&gt; &#123; this.setState(&#123; count: this.state.count + 1 &#125;) // setState 传入了对象，合并处理后只有一个 count + 1 console.log(this.state.count) // 2 &#125;, 0); setTimeout(() =&gt; &#123; this.setState(&#123; count: this.state.count + 1 &#125;) console.log(this.state.count) // 3 &#125;, 0);&#125; 问题：为何需要异步？ setState 可以多次设置，如果设置成同步，每一次 setState 都触发更新渲染，会比较 消耗性能。设置成异步，可以将需要更新的数据集中起来，一次性渲染。 而且，js 是单线程的，执行 js 过程和 DOM 渲染是互斥的，也就是说 js 执行时，DOM 的渲染是被阻塞的，DOM渲染时拿到的结果就是 js 执行完毕的结果。 假设 setState 是同步的，我们想要将 count 累加到 10，设置了 10 次 setState，因为 DOM 渲染被阻塞了，只能等待 js 执行完毕才会渲染 DOM，所以用户是看不到 count 从 1 累加到 10 的这个过程，最终 js 执行完毕，DOM 会直接渲染出 10。 Vue 渲染 DOM 也是异步的，可以通过 $nextTick 可以获取最新的数据 为什么setState在 setTimeout 和自定义事件中是同步的？与 batchUpdate 机制有关。 依据是判断 isBatchingUpdates 是 true or false. dirtComponent ? state 与 不可变值React采用函数式编程的不可变数据特性。 而在React中不可变值的意思就是：始终保持state的原值不变。 不要直接修改state，遇到数组或者对象，采用copy一份出去做改变。 在做性能优化时很重要。 12345this.setState(&#123; obj1: Object.assign(&#123;&#125;, this.state.obj1, &#123;a: 100&#125;), obj2: &#123;...this.state.obj2, a: 100&#125;, arr: this.state.arr.slice(),&#125;) 不可变值的目的 性能优化 在生命周期 shouldComponentUpdate 根据返回值决定是否需要重新渲染。因为父组件只要 state 或 props 更新了就会重新渲染，从而子组件也会更着渲染。 React会对新旧state和props进行比较，如果直接修改state去用于其他变量的计算，而实际上state并不需要修改，则会导致怪异的更新以及没必要的更新，因此采用这种方式是非常巧妙，且效率非常的高。 可追踪修改痕迹，便于排错 使用this.setState的方式进行修改state的值，相当于开了一个改变值的口子，所有的修改都会走这样的口子，相比于直接修改，这样的控制力更强，能够有效地记录与追踪每个state的改变，对排查bug十分有帮助。 React 事件React 元素的事件处理和 DOM 元素的很相似，但是有一点语法上的不同： React 事件的命名采用小驼峰式（camelCase），而不是纯小写。&lt;button onClick=&#123;activateLasers&#125;&gt; 不能通过返回 false 的方式阻止默认行为。你必须显式地使用 preventDefault 所有事件挂在到 document 上 React并不是将click事件绑在该div的真实DOM上，而是在document处监听所有支持的事件，当事件发生并冒泡至document处时，React将事件内容封装并交由真正的处理函数运行。 event 对象（合成事件） React event 对象是 SyntheticBaseEvent，属于合成事件，模拟 DOM 事件的所有能力 可以通过 event.nativeEvent 获取到原生事件 123e.stopPropagation() 阻止触发绑定在外层标签上的事件处理函数。e.preventDefault() 阻止少数事件的默认浏览器行为，如表单提交。 为何需要合成事件机制？ 更好的兼容性和跨平台 挂在到 document，减少内存消耗，避免频繁的事件解绑 方便事件的统一管理 组件通信 props ref（父组件获取到子组件实例） 1234567// 渲染子组件&lt;Child ref=&#123;child =&gt; &#123; console.log(&#x27;拿到 child 实例 &#x27;, child) console.log(&#x27;调用 child 上的方法 &#x27;, child?.renderChild())&#125;&#125; /&gt; callback function（父组件传递方法给子组件） 利用事件冒泡机制 1234567891011121314151617class Parent extends React.Component &#123; render() &#123; return ( &lt;div onClick=&#123;this.handleClick&#125;&gt; &lt;Child /&gt; &lt;/div&gt; ); &#125; handleClick = () =&gt; &#123; console.log(&#x27;clicked&#x27;) &#125;&#125;function Child &#123; return ( &lt;button&gt;Click&lt;/button&gt; ); &#125; 兄弟组件通信（将数据提升到父组件中） context（深层次组件通信，避免 props 层层传递） 123456789101112131415161718192021222324252627282930313233// common.tsimport React from &quot;react&quot;;export const ThemeContext = React.createContext(&#x27;light&#x27;)// App.tsxclass App extends React.Component &#123; render() &#123; return ( &lt;ThemeContext.Provider value=&quot;dark&quot;&gt; &lt;Toolbar /&gt; &lt;/ThemeContext.Provider&gt; ); &#125;&#125;function Toolbar() &#123; return ( &lt;div&gt; &lt;ThemedButton /&gt; &lt;/div&gt; );&#125;// ThemedButtonimport &#123; ThemeContext &#125; from &#x27;./common.ts&#x27;class ThemedButton extends React.Component &#123; static contextType = ThemeContext; render() &#123; return &lt;Button theme=&#123;this.context&#125; /&gt;; &#125;&#125; 如果是函数组件，则无法使用 static contextType = ThemeContext; 这种形式，我们可以通过 ThemeContext.Consumer 将函数组件包裹起来。 123&lt;ThemeContext.Consumer&gt; &lt;Child /&gt;&lt;/ThemeContext.Consumer&gt; Redux 组件通信参考文章 受控组件和非受控组件参考文章 Portals（传送门）可以将子组件渲染到父组件以外的地方去。比如常见的全局的 Modal 弹窗、全局的Message提示。 12345678import ReactDOM from &quot;react-dom&quot;;render(): React.ReactNode &#123; return ReactDOM.createPortal( &lt;&gt;Child Component&lt;/&gt;, document.body )&#125; 异步组件 import() React.lazy React.Suspense 12345678910111213import React from &#x27;react&#x27;const AsyncDemo = React.lazy(() =&gt; import(&#x27;./AsyncDemo.tsx&#x27;))...render() &#123; return &lt;&gt; &lt;React.Suspense fallback=&#123;&lt;div&gt;Loading...&lt;/div&gt;&#125;&gt; &lt;AsyncDemo /&gt; &lt;/React.Suspense&gt; &lt;/&gt;&#125;... 将大组件进行异步加载，提高用户体验。并且异步加载的组件，会被重新打一个 js 包出来。 在 Vue 中引入组件时，直接使用 import 函数导入即可实现异步加载组件。 性能优化 - SCU（shouldComponentUpdate）默认返回 true 1234567shouldComponentUpdate(nextProps, nextState) &#123; // 重新渲染 if (nextState.count !== this.state.count) return true return false // 不重新渲染&#125; 为什么不可变值对 SCU 这么重要？？？ 来看个错误的例子，下面这个例子会渲染 ul &gt; li (1, 2, 3)，我们在 onPushList 中，通过 push 方法直接修改了 state.list。 然后在 shouldComponentUpdate 中，判断当前组件是否需要重新渲染。 你会发现，组件没有更新！！！ 1234567891011121314151617181920212223242526272829303132333435363738394041424344import React from &quot;react&quot;;interface IState &#123; list: Array&lt;number&gt;&#125;export default class Child extends React.Component&lt;&#123;&#125;, IState&gt; &#123; constructor(props: &#123;&#125;) &#123; super(props) this.state = &#123; list: [1, 2, 3] &#125; &#125; shouldComponentUpdate(nextProps: Readonly&lt;&#123;&#125;&gt;, nextState: Readonly&lt;IState&gt;, nextContext: any): boolean &#123; if (nextState.list === this.state.list) &#123; return false &#125; return true &#125; onPushList() &#123; // 直接修改 list this.state.list.push(4) this.setState(&#123; list: this.state.list &#125;) &#125; render(): React.ReactNode &#123; return &lt;&gt; &lt;button onClick=&#123;this.onPushList.bind(this)&#125;&gt;push list&lt;/button&gt; &lt;ul&gt; &#123; this.state.list.map(i =&gt; &lt;li key=&#123;i&#125;&gt;&#123;i&#125;&lt;/li&gt;) &#125; &lt;/ul&gt; &lt;/&gt; &#125;&#125; 为什么呢？？ 这就是因为没有遵循数据的不可变原则的原因。 我们通过 push 方法直接对 list 增加了一个数值 4，此时 this.state.list = [1, 2, 3, 4]，但是 SCU 中判断逻辑也是用的 this.state.list，它和 nextState.list 是相同的，指向地址一样，数值一样，那么 SCU 返回了 false，组件不会重新渲染！ 正确写法： 12345onPushList() &#123; this.setState(&#123; list: this.state.list.concat(4) &#125;)&#125; 性能优化 - pureComponent继承自 pureComponent 的组件，相当于在 SCU 中实现了 浅比较。 性能优化 - React.memo优化函数组件。 React.memo 包裹一个函数组件，来对它的 props 进行浅比较。等效于 PureComponent，但它只比较 props。（也可以通过第二个参数指定一个自定义的比较函数来比较新旧 props。如果函数返回 true，就会跳过更新。） 公共逻辑复用 HOC &amp; render props组件公共逻辑的抽离 mixin12345678910111213141516171819import &#123; Component &#125; from &#x27;react&#x27;// mixinconst customMixin = &#123; componentDidMount() &#123; console.log(&#x27; --- mixin componentDidMount --- &#x27;) &#125;, sayName() &#123; console.log(this.state.name) &#125;&#125;function componentClassMixins(Component, mixin)&#123; /* 继承 */ for(let key in mixin)&#123; Component.prototype[key] = mixin[key] &#125;&#125; 调用 componentClassMixins 方法，第一个参数是我们的组件，第二个参数传我们编写的 mixin HOC 高阶组件是参数为组件，返回值为新组件的函数。 当多个组件都需要某个相同的功能， 使用高阶组件可以减少重复实现。 比如有很多组件都想要获取 当前鼠标位置 的功能。 1234567891011121314151617181920212223242526272829303132333435363738394041424344import React from &quot;react&quot;;interface IState &#123; mouse: &#123; x: number y: number &#125;&#125;const withMouse = function(Comp: React.FC&lt;IState&gt;) &#123; class MouseComponent extends React.Component&lt;&#123;&#125;, IState&gt; &#123; constructor(props: &#123;&#125;) &#123; super(props) this.state = &#123; mouse: &#123; x: 0, y: 0 &#125; &#125; &#125; onMouseMove(event: React.MouseEvent) &#123; this.setState(&#123; mouse: &#123; x: event.clientX, y: event.clientY, &#125; &#125;) &#125; render() &#123; return &lt;div onMouseMove=&#123;this.onMouseMove.bind(this)&#125;&gt; &lt;Comp &#123;...this.props&#125; mouse=&#123;this.state.mouse&#125;/&gt; &lt;/div&gt; &#125; &#125; return MouseComponent&#125;export default withMouse Vue 如何实现高阶组件 Vue 进阶必学之高阶组件 HOC render props 术语 “render prop” 是指一种在 React 组件之间使用一个值为函数的 prop 共享代码的简单技术 组件接收一个 值为函数 的 prop，动态 prop。 render props 函数返回一个组件 其实 render props 和 HOC 很相像，可以随意转换。 以 HOC 中 withMouse 为例，将其改为 render props 123456789101112131415161718192021222324252627// Mouseclass Mouse extends React.Component &#123; constructor(props) &#123; super(props) this.state = &#123; x: 0, y: 0 &#125; &#125; onMouseMove(event: React.MouseEvent) &#123; this.setState(&#123; x: event.clientX, y: event.clientY, &#125;) &#125; render() &#123; return &lt;div onMouseMove=&#123;this.onMouseMove.bind(this)&#125;&gt; &#123;/* 使用 `render`prop 动态决定要渲染的内容 */&#125; &#123;this.props.render(this.state)&#125; &lt;/div&gt; &#125;&#125; App 使用 Mouse 组件，App 组件内部就可以通过 props 实时获取到 mouse 的位置了。 1234567const withMouseApp = () =&gt; &#123; return ( &lt;Mouse render=&#123; state =&gt; &lt;App mouse=&#123;state&#125; /&gt; &#125; /&gt; )&#125;export default withMouseApp render prop 一个有趣的事情是你可以使用带有 render prop 的常规组件来实现大多数高阶组件 (HOC)。 例如，如果你更喜欢使用 withMouse HOC而不是 组件，你可以使用带有 render prop 的常规 轻松创建一个。 Diff 算法每次组件的状态或属性更新，组件的 render 方法都会返回一个新的虚拟DOM，用来描述新的 UI 结构。 正常情况下，比较两个树形结构差异的算法的时间复杂度是O(N^3)，这个效率显然是无法接受的。 React 提出了两个假设，优化了树形结构差异的算法时间复杂度，O(N)： 如果两个元素的类型不用，那么它们将生成两棵不同的树。 为列表中的元素设置 key 属性，标识对应的元素在多次 render 过程中是否发生变化。 React 比较两棵树是从树的根节点开始比较的，比较规则如下： 当根节点是不同类型时，React 会认为新的树和旧的树完全不同，不再比较，直接替换掉旧的树 当根节点是相同的 DOM 元素类型时，React 会保留根节点，而比较根节点的属性，然后只更新那些变化了的属性。 虚拟 DOM 的节点类型分两种： DOM元素类型：比如 div、p.. React 组件类型：比如自定义的 React 组件。 当根节点是相同的组件类型时，对应的组件实例不会被销毁，只会执行更新操作，同步变化的属性到虚拟 DOM 树上。 比较完根节点后，React 会已同样的原则继续递归比较子节点，每一个子节点相对于其层级以下的节点来说又是一个根节点。 key当一个节点有多个子节点时，默认情况下，React 只会按照顺序逐一比较两个树上对应的节点。 比较下面两棵树，两棵树前面的两个 li 都相同，最终只会插入一个新的节点。 123456789101112&lt;ul&gt; &lt;li&gt;first&lt;/li&gt; &lt;li&gt;second&lt;/li&gt;&lt;/ul&gt;// 仅仅只是插入了一个元素&lt;ul&gt; &lt;li&gt;first&lt;/li&gt; &lt;li&gt;second&lt;/li&gt; &lt;li&gt;third&lt;/li&gt;&lt;/ul&gt; 如果 &lt;li&gt;third&lt;/li&gt; 是被插入到子节点的第一个位置，那么按照顺序比较的话，差异就大了，导致每一个节点都被修改。 引入 key 来标识节点，React 会根据 key 来匹配子节点，只要子节点的 key 值没有变化，React 就会认为这是同一个节点。 12345678910&lt;ul&gt; &lt;li key=&quot;first&quot;&gt;first&lt;/li&gt; &lt;li key=&quot;second&quot;&gt;second&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt; &lt;li key=&quot;third&quot;&gt;third&lt;/li&gt; &lt;li key=&quot;first&quot;&gt;first&lt;/li&gt; &lt;li key=&quot;second&quot;&gt;second&lt;/li&gt;&lt;/ul&gt; 有了 key 做标识，React 就在 diff 时就会知道 first 和 second 这两个元素没有发生变化，所以只会在这两个元素前面插入 third 元素。 所以 key 的使用减少了 DOM 操作，提高了 DOM 的更新效率。 React 和 Vue 的区别相同点： 都支持组件化 数据驱动视图 都使用 vDom 操作 DOM 区别： React 使用 JSX，Vue 使用 template React 函数式编程，Vue 声明式编程 ReactHooks缺点 —— 状态不同步问题12345678910111213141516171819202122232425262728function App(props: any) &#123; const [count, setCount] = useState(0) let timer: any = null const onClick = () =&gt; &#123; setCount(count + 1) &#125; const onClickAsync = () =&gt; &#123; timer = setTimeout(() =&gt; &#123; console.log(&#x27;count &#x27;, count) &#125;, 3000); &#125; useEffect(() =&gt; &#123; return () =&gt; &#123; clearTimeout(timer) &#125; &#125;, []) return ( &lt;div className=&quot;App&quot;&gt; &lt;h1&gt;&#123;count&#125;&lt;/h1&gt; &lt;button onClick=&#123;onClick&#125;&gt;立即执行&lt;/button&gt; &lt;button onClick=&#123;onClickAsync&#125;&gt;异步执行&lt;/button&gt; &lt;/div&gt; )&#125; 问题： count = 0，点击异步执行后，再点击立即执行表示 count + 1，3秒后，打印结果为 0。 原因： 函数的变量保存在运行时的作用域里，在点击 异步执行 按钮的时候，执行函数的内部作用域将变量 count 复制了一份，无论 count 在这 3 秒内如何变化，定时器的回调函数读取的 count 还是原来的值。 React FiberReact Fiber 是 React 中的一种新的协调引擎（reconciliation engine），它是从 React 16 版本开始引入的重大改进。 React Fiber 的目标是提升 React 应用的性能、实现更好的并发控制，以及支持新的特性和能力。 传统的 React 渲染过程是基于递归的，当组件层级很深或组件树很大时，可能会出现长时间的渲染阻塞，导致用户界面的卡顿和不流畅。React Fiber 的目标是将渲染过程切割成一系列可中断的任务单元，可以通过优先级调度和时间片分配来控制任务的执行顺序，从而实现更细粒度的控制和更好的用户体验。 React Fiber 的架构使得在渲染过程中可以中断、暂停和恢复渲染任务，这为实现异步渲染、增量更新和并发渲染提供了基础。它还支持 优先级调度，使得 React 能够根据任务的紧急程度动态地分配时间片，保证优先处理重要的任务，提高响应能力。 主要用到了两个原生的 API requesetAnimationFrame 和 requesetIdleCallback 为什么要 fiber当我们触发了状态的更新，那么整个组件树会触发重新 渲染，而构建 DOM树是同步递归的过程，那么组件如果很庞大且嵌套很深的话，那么构建过程可能就很长了，就容易出现明显的卡顿，阻塞其他进程执行，甚至卡死浏览器。 优化：pureComponent，shouldUpdateComponent，useMemo，useCallback 指标不治本，还是需要 Fiber generator 也可以实现react 源码庞大，不适用 generator + yield generator 内部有状态，可能后面的依赖前面的结果，后面的执行后，前面的又更新了，导致状态不可控。 基于 requestAnimationFrame 实现任务调度和时间切片 React Fiber 依赖了 requestAnimationFrame 这个 API，它是在浏览器环境中提供的用于执行动画的定时器函数。requestAnimationFrame 方法会在浏览器下一次重绘之前调用指定的回调函数，用于实现平滑的动画效果。 React Fiber 使用 requestAnimationFrame 来进行任务调度和时间切片。它利用 requestAnimationFrame 在浏览器空闲时间执行任务，以避免阻塞主线程，并提供更流畅的用户界面响应。 通过使用 requestAnimationFrame，React Fiber 可以将任务拆分为更小的单元，并在每个时间片段内执行一部分任务，以便将渲染过程分散到多个帧中，提高应用的性能和响应能力。 需要注意的是，requestAnimationFrame 是浏览器提供的 API，只能在浏览器环境中使用，无法在 Node.js 等非浏览器环境下运行。 requestAnimationFrame 原理是什么？requestAnimationFrame 是浏览器提供的一个 API，用于在 下一次重绘（repaint）之前 执行回调函数，通常用于执行动画或其他需要与浏览器绘制同步的操作。 requestAnimationFrame 的工作原理如下： 当调用 requestAnimationFrame(callback) 时，浏览器会在下一次重绘之前调用 callback 函数。重绘通常与显示器的刷新频率（一般是 60Hz）相匹配，即每秒触发约 60 次。 浏览器会在每个重绘的时机执行回调函数，这样可以确保回调函数在最佳的时机执行，避免了执行频率过高或过低的问题。 callback 函数中执行的操作通常包括更新动画帧、计算布局或执行其他需要与页面绘制同步的任务。 如果在 callback 函数中再次调用 requestAnimationFrame，浏览器会安排下一次回调在下一次重绘之前执行，形成一个循环，从而实现动画的持续更新。 通过使用 requestAnimationFrame，可以有效利用浏览器的绘制时机，避免了过早或过晚执行动画帧的问题，提供了更平滑和高效的动画效果。同时，由于浏览器会自动调整重绘频率，节省了资源和电能的消耗。 requestAnimationFrame VS setInterval 更好的性能 requestAnimationFrame使用浏览器的刷新频率来执行回调函数，它能够在每一帧之前进行优化，避免不必要的绘制操作，以提高性能。而setInterval则是固定的时间间隔执行回调函数，无法充分利用浏览器的优化机制，可能导致过多的绘制操作，影响性能。 自动适应页面可见性 requestAnimationFrame会在页面不可见时自动停止执行，而 setInterval 会一直执行，无论页面是否可见。这样可以避免在后台标签页或不可见的页面上消耗不必要的计算资源。 当页面被切换到后台标签页、最小化窗口或者切换到其他应用程序时，浏览器会将页面标记为不可见状态。在不可见状态下，浏览器会暂停或减少对页面的渲染和计算资源的分配，以节省电量和提高性能。 更精确的时间控制 requestAnimationFrame的回调函数会在每一帧之前执行，时间间隔由浏览器决定，通常为16毫秒（60帧每秒），可以保证动画的流畅性。而setInterval的时间间隔是固定的，可能会因为JavaScript线程的阻塞、页面负载等原因导致回调函数的执行时间不准确。 避免掉帧现象 requestAnimationFrame能够自动调整帧率，如果浏览器性能较差无法达到60帧每秒，它会自动降低帧率，避免掉帧现象。而setInterval无法自动调整帧率，可能导致动画不流畅或卡顿。 如何判断任务的优先级？应该是浏览器控制的吧，一帧内任务还没有执行完，控制权就交给浏览器去分配。 浏览器一帧内要做那些事情？layout布局、绘制、执行 js、requestAnimationFrame 如果一帧内执行完了这些事情，剩余的时间，就用来执行 requestIdleCallback 一帧是多少 ms ？以 60 Hz 为例每秒 60帧，每帧就是 1000/60 = 16.7ms requestIdleCallback(callback, options)window.requestIdleCallback() 方法插入一个函数，这个函数将在浏览器空闲时期被调用。这使开发者能够在主事件循环上执行后台和低优先级工作，而不会影响延迟关键事件，如动画和输入响应。 判断一帧内是否还有剩余时间，有的话，就用来执行 requestIdleCallback requestIdleCallback 返回一个 ID，可以把它传入 Window.cancelIdleCallback() 方法来结束回调。 React 如何做权限控制？ Vue 中可以通过指令来做 v-auth 比如某个用户登录了之后，根据当前用户的角色来控制页面的显隐，以及对按钮的显隐控制？ 在 React 中进行权限控制可以采用以下几种方式： 条件渲染（Conditional Rendering）：根据用户的角色或权限，通过条件判断来决定是否渲染某个组件或元素。例如，可以在组件的 render 方法中根据用户角色来判断是否显示某个特定的组件或元素。 12345678910render() &#123; const &#123; user &#125; = this.props; return ( &lt;div&gt; &#123;user.isAdmin &amp;&amp; &lt;AdminPanel /&gt;&#125; &#123;user.isLoggedIn &amp;&amp; &lt;UserProfile /&gt;&#125; &#123;user.hasPermission(&#x27;edit&#x27;) &amp;&amp; &lt;EditButton /&gt;&#125; &lt;/div&gt; );&#125; 高阶组件（Higher-Order Components）：通过创建高阶组件来封装权限控制的逻辑。高阶组件接受一个组件作为参数，并返回一个新的组件，新组件根据用户的角色或权限来决定渲染或包装传入的组件。 123456789101112131415161718const withAuthorization = (WrappedComponent, allowedRoles) =&gt; &#123; return class extends React.Component &#123; render() &#123; const &#123; user &#125; = this.props; if (!user || !allowedRoles.includes(user.role)) &#123; return null; // 不满足权限要求，返回空 &#125; return &lt;WrappedComponent &#123;...this.props&#125; /&gt;; &#125; &#125;;&#125;;const AdminPanel = () =&gt; &#123; // 管理员面板组件 // ...&#125;;const AuthorizedAdminPanel = withAuthorization(AdminPanel, [&#x27;admin&#x27;]); 权限控制组件（Authorization Component）：创建一个专门用于权限控制的组件，该组件在渲染过程中进行权限检查，并根据结果来决定如何渲染子组件。该组件可以通过 React 的上下文（context）来传递用户信息和权限信息。 1234567891011121314151617181920212223242526272829const Authorization = (&#123; allowedRoles, user, children &#125;) =&gt; &#123; if (!user || !allowedRoles.includes(user.role)) &#123; return null; // 不满足权限要求，返回空 &#125; return &lt;React.Fragment&gt;&#123;children&#125;&lt;/React.Fragment&gt;;&#125;;const App = () =&gt; &#123; // 用户信息和权限信息 const user = &#123; role: &#x27;admin&#x27;, // ... &#125;; return ( &lt;div&gt; &lt;h1&gt;Welcome to the App&lt;/h1&gt; &lt;Authorization allowedRoles=&#123;[&#x27;admin&#x27;]&#125; user=&#123;user&#125;&gt; &lt;AdminPanel /&gt; &lt;/Authorization&gt; &lt;Authorization allowedRoles=&#123;[&#x27;user&#x27;]&#125; user=&#123;user&#125;&gt; &lt;UserProfile /&gt; &lt;/Authorization&gt; &lt;Authorization allowedRoles=&#123;[&#x27;admin&#x27;, &#x27;editor&#x27;]&#125; user=&#123;user&#125;&gt; &lt;EditButton /&gt; &lt;/Authorization&gt; &lt;/div&gt; );&#125;; 这些方法都可以根据用户的角色或权限来进行页面的显隐控制和按钮的显隐控制。具体使用哪种方法取决于你的项目需求和组件结构，选择最适合的方式进行权限控制。 参考文献React 老文档 ↩","categories":[],"tags":[{"name":"React","slug":"React","permalink":"http://yoursite.com/tags/React/"}]},{"title":"模块化打包器","slug":"module-bundler","date":"2023-05-13T12:49:51.000Z","updated":"2024-06-11T08:52:17.348Z","comments":true,"path":"/post/module-bundler.html","link":"","permalink":"http://yoursite.com/post/module-bundler.html","excerpt":"一切皆模块。","text":"Webpack5 找出模块之间的依赖关系，按照一定的规则把这些模块组织、合并为一个JavaScript（以下简写为JS）文件。 Webpack认为一切都是模块，如JS文件、CSS文件、jpg和png图片等都是模块。Webpack会把所有这些模块都合并为一个JS文件，这是它最本质的工作。 当然，我们可能并不想让它把这些模块都合并成一个JS文件，这时我们可以通过一些 规则或工具 来改变它最终打包生成的文件。 webpack &amp; webpack-cliwebpack是Webpack核心npm包 webpack-cli是命令行运行webpack命令所需的npm包 123&quot;webpack&quot;: &quot;^5.82.1&quot;,&quot;webpack-cli&quot;: &quot;^5.1.1&quot;,&quot;webpack-dev-server&quot;: &quot;^4.15.0&quot; 资源拆分我们可以把所有模块打包成一个 js 文件，但是，这样就会导致 js 过于庞大，我们希望可以将其拆分成JS、CSS和图片等资源。 Webpack提供了对拆分功能的支持，在构建的时候，可以通过Webpack的预处理器和插件等进行干预，把原本要打包成的一个.js文件拆分成JS、CSS和图片等资源。 打包模式Webpack的打包模式共有三种：production、development和none，这三种模式是通过mode参数来指定的。 production和development这两种模式会分别按照线上生产环境和本地开发环境进行一些优化处理，而none模式会保留原始的打包结果。 配置文件Webpack默认的配置文件是项目根目录下的 webpack.config.js 文件，在我们执行npx webpack命令的时候，Webpack会自动寻找该文件并使用其配置信息进行打包，如果找不到该文件就使用默认参数打包。 1234567891011// webpack.config.jsconst path = require(&#x27;path&#x27;)module.exports = &#123; mode: &#x27;none&#x27;, // 原模原样输出代码 entry: &#x27;./index.js&#x27;, output: &#123; path: path.resolve(__dirname, &#x27;dist&#x27;), // __dirname 是 nodejs 全局变量，表示当前文件的路径，使用 resolve 拼接 filename: &#x27;bundle.js&#x27; &#125;&#125; 我们创建两个 js 文件，一个是 index.js，一个是 test.js。 然后在 test.js 中创建几个变量和方法，并通过 export 导出，index.js 导入，执行如下命令。 12// terminalnpx webpack 控制台输出，表示打包成功。 123456asset bundle.js 3.18 KiB [emitted] (name: main)runtime modules 670 bytes 3 modulescacheable modules 203 bytes ./index.js 85 bytes [built] [code generated] ./test.js 118 bytes [built] [code generated]webpack 5.82.1 compiled successfully in 76 ms 配置文件资源入口 entry 入口entry是字符串形式 字符串形式entry已经在之前使用过了，这是最简单的形式，表示打包的入口JS文件。 入口entry是数组形式 表示数组的最后一个文件是资源的入口文件，数组的其余文件会被预先构建到入口文件中。 123456789101112131415&#123; //... entry: [&quot;core-js/stable&quot;, &quot;./a.js&quot;] //...&#125;=== 上面的配置和下面的是等效的 ===//a.jsimport &quot;core-js/stable&quot;// webpack.config.jsmodule.exports = &#123; entry: &#x27;./a.js&#x27;&#125; 入口entry是对象形式 对象形式的entry又被称为多入口配置。之前我们讲的都是单入口配置，就是打包后生成一个JS文件。 多入口配置就是打包后生成多个JS文件。 1234567891011121314// webpack.config.jsconst path = require(&#x27;path&#x27;)module.exports = &#123; mode: &#x27;none&#x27;, // 原模原样输出代码 entry: &#123; bundle: &#x27;./index.js&#x27;, vendor: &#x27;./vendor.js&#x27; &#125; output: &#123; path: path.resolve(__dirname, &#x27;dist&#x27;), // __dirname 是 nodejs 全局变量，表示当前文件的路径，使用 resolve 拼接 filename: &#x27;[name].js&#x27; &#125;&#125; 入口entry是函数形式 函数形式的entry，Webpack取函数返回值作为入口配置，返回值是上述三种形式之一即可。 函数形式的entry可以用来做一些额外的逻辑处理，不过在自己搭脚手架时很少使用。 资源出口 outputoutput就是资源出口配置项。 output的值是一个对象，它有几个重要的属性filename、path、publicPath和chunkFilename。 filename filename支持类似变量的方式生成动态文件名，如[hash]-bundle.js，其中方括号代表占位符，里面的hash表示特定的动态值。 webpack5 以前使用hash，webpack5中变成了fullhash，或者考虑使用chunkhash或contenthash。 特定动态值除了[hash]，还有[name]和[id]等。 1filename: &#x27;[name]-[fullhash:8].js&#x27; path 资源输出的绝对路径，存放在磁盘中。 如果你不设置它，Webpack默认其为dist目录。 1path: path.resolve(__dirname, &#x27;dist&#x27;) publicPath 配置项output中的publicPath表示的是资源访问路径，在Web开发时其默认值是字符串auto。 资源存放到磁盘后，浏览器如何知道该资源存放在什么位置呢？这个时候需要我们指定该资源的访问路径，这个访问路径就是用output.publicPath来表示的。 我们来看个示例，有三个 js 文件 index.js, test.js, test1.js，在 index.js 中，动态导入 test.js 和 test1.js。 1234567891011121314151617181920// test.jsconst myName = &#x27;alex&#x27;const age = 18const sayMe = function() &#123; console.log(myName + age)&#125;export default sayMe;// test1.jsconsole.log(&#x27;我是 test1.js&#x27;)// index.jsimport &#x27;./test.css&#x27;import(&#x27;./test&#x27;).then(module =&gt; &#123; module.default() &#125;)import(&#x27;./test1.js&#x27;) 然后我们 webpack 配置不变，不加 publicPath 进行打包。 123456789101112131415const path = require(&#x27;path&#x27;)module.exports = &#123; mode: &#x27;none&#x27;, entry: &#x27;./index.js&#x27;, output: &#123; path: path.resolve(__dirname, &#x27;dist&#x27;), filename: &#x27;bundle.js&#x27;, &#125;, module: &#123; rules: [&#123; test: /\\.css$/, use: [&#x27;style-loader&#x27;, &#x27;css-loader&#x27;] &#125;] &#125;&#125; 我们会发现生成的 dist 目录下有三个文件，bundle.js, 1.bundle.js, 2.bundle.js。 bundle.js是从入口文件index.js开始打包生成的output.filename指定的文件，1.bundle.js, 2.bundle.js是动态加载JS模块而生成的异步资源文件，test.js文件被单独打包成1.bundle.js文件，test1.js文件被单独打包成2.bundle.js文件。 我们打开 index.html 页面，并查看 network，会发现这几个资源文件，都是从 dist 目录下加载而来。 123http://127.0.0.1:5500/source/demo/webpack5/dist/bundle.jshttp://127.0.0.1:5500/source/demo/webpack5/dist/1.bundle.jshttp://127.0.0.1:5500/source/demo/webpack5/dist/2.bundle.js 那我们加上 publicPath 属性试试，看看会有什么效果呢。 其余都不变，给 output 加上 publicPath： 12345output: &#123; path: path.resolve(__dirname, &#x27;dist&#x27;), filename: &#x27;bundle.js&#x27;, publicPath: &#x27;./assets/&#x27;&#125;, 打包成功后，刷新页面，会发现控制台里已经报错，1.bundle.js, 2.bundle.js 资源 404。 12http://127.0.0.1:5500/source/demo/webpack5/assets/1.bundle.jshttp://127.0.0.1:5500/source/demo/webpack5/assets/2.bundle.js 原来，浏览器是从 assets 目录下加载了这两个资源文件，而我们根本没有创建这个 assets 目录，并且 1.bundle.js, 2.bundle.js 是在 dist 目录下，所以找不到资源了。 在把publicPath设置为assets/ 、 ./assets/ 、../assets/这类路径时，它是相对于当前HTML页面路径取值的。 如果 publicPath 的值是以 / 开头，则是相对于服务器地址，表示要访问的资源以当前页面的服务器地址根目录作为基础路径。 我们来看看示例： 12345output: &#123; path: path.resolve(__dirname, &#x27;dist&#x27;), filename: &#x27;bundle.js&#x27;, publicPath: &#x27;/assets/&#x27;&#125;, 打包后，刷新页面，会发现动态加载的资源 404了，因为浏览器是从服务器根路径开始加载的 1.bundle.js &amp; 2.bundle.js 12http://127.0.0.1:5500/assets/1.bundle.jshttp://127.0.0.1:5500/assets/2.bundle.js publicPath 也可以直接写绝对HTTP地址 12345output: &#123; path: path.resolve(__dirname, &#x27;dist&#x27;), filename: &#x27;bundle.js&#x27;, publicPath: &#x27;https://www.baidu.com/assets/&#x27;&#125;, 12https://www.baidu.com/assets/1.bundle.jshttps://www.baidu.com/assets/2.bundle.js 相对HTTP协议地址以//开头 与绝对HTTP协议地址相比，它省略了前面的https:或http:。 在使用相对HTTP协议地址的时候，浏览器会将当前页面使用的协议名称与相对协议地址拼接，这样本质上与使用绝对HTTP协议地址是一样的。 12345output: &#123; path: path.resolve(__dirname, &#x27;dist&#x27;), filename: &#x27;bundle.js&#x27;, publicPath: &#x27;//www.baidu.com/assets/&#x27;&#125;, chunkFilename chunkFilename也用来表示打包后生成的文件名，那么它和filename有什么区别呢？ chunkFilename表示的是打包过程中非入口文件的chunk名称，通常在使用异步模块的时候，会生成非入口文件的chunk。在前面的例子中，index.js文件里有import（’./test.js’），其中的test.js就是一个异步模块，它被打包成1.bundle.js文件，这个名称就是默认的output.chunkFilename。与output.filename一样，它支持占位符，例如使用[id].js。 123456output: &#123; path: path.resolve(__dirname, &#x27;dist&#x27;), filename: &#x27;bundle.js&#x27;, publicPath: &#x27;./dist/&#x27;, chunkFilename: &#x27;[chunkhash].js&#x27;, // 新增&#125;, 打包后，就不会在有 1.bundle.js了，因为我们生成非入口的文件改了名字： 166ba79be0b67ead70ee6.js 我们也可以给 chunk 设定名字，如果 webpack.config.js 中配置了 chunkFilename，那么会结合配置的名字，如果没有配置 webpack.config.js，那么打包出来的 chunk 就是你设置的名字： 通过 webpackChunkName 给动态模块（懒加载）设置名字 12345678910// main.jsimport(/* webpackChunkName: &quot;dynamic-test&quot; */ &#x27;./test&#x27;).then(module =&gt; &#123; module.default() &#125;)// webpack.config.jsoutput: &#123; ... chunkFilename: &#x27;[name].[chunkhash].js&#x27;, // 新增&#125;, 最终打包出来的 chunk 名字 就是这样的格式：dynamic-test-5dd1091ec28cc80b219f.js webpack预处理器 LoaderWebpack在打包的时候，将所有引入的资源文件都当作模块来处理。 但Webpack在不进行额外配置时，自身只支持对JS文件JSON文件模块的处理，如果你引入了一个CSS文件或图片文件，那么Webpack在处理该模块的时候，会通过控制台报错：Module parse failed…You may need an appropriate loader to handle this file type。 Webpack社区也提供了比较成熟的预处理器，我们可以直接拿来使用，例如使用file-loader和url-loader来处理图片等资源，使用babel-loader来对ES6进行转码，使用vue-loader来处理Vue组件。 处理 CSS需要两个 loader, 分别是css-loader与style-loader。 css-loader是必需的，它的作用是解析CSS文件，包括解析@import等CSS自身的语法。它的作用仅包括解析CSS文件，它会将解析后的CSS文件以字符串的形式打包到JS文件中。不过，此时的CSS样式并不会生效，因为需要把CSS文件插入HTML文件中才会生效。 此时，style-loader就可以发挥作用了，它可以把JS里的样式代码插入HTML文件中。它的原理很简单，就是通过JS动态生成style标签并将其插入HTML文件的head标签中。 1234567891011121314151617// webpack.config.jsmodule.exports = &#123; mode: &#x27;none&#x27;, entry: &#x27;./index.js&#x27;, output: &#123; path: path.resolve(__dirname, &#x27;dist&#x27;), filename: &#x27;bundle.js&#x27; &#125;, module: &#123; rules: [&#123; // 取值是一个正则表达式，表示的含义是当文件名后缀是.css的时候，我们使用对应use项里的预处理器 test: /\\.css$/, // 取值是一个数组，数组每一项是一个预处理器。预处理器的执行顺序是从后向前执行，先执行css-loader，然后把css-loader的执行结果交给style-loader执行。 use: [&#x27;style-loader&#x27;, &#x27;css-loader&#x27;] &#125;] &#125;&#125; 源码如下： 1234567891011// index.jsimport &#x27;./test.css&#x27;import sayMe from &#x27;./test&#x27;sayMe()// test.css.hello &#123; color: red;&#125; index.html 12345678910111213&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1 class=&quot;hello&quot;&gt;Webpack5&lt;/h1&gt; &lt;script src=&quot;./dist/bundle.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; loader配置项预处理器本质上是一个函数，它接收一个资源模块，然后将其处理成Webpack能使用的形式。 用法，以处理 css 为例： 123456789101112131415161718192021module.exports = &#123; mode: &#x27;development&#x27;, entry: &#x27;./index.js&#x27;, output: &#123; path: path.resolve(__dirname, &#x27;dist&#x27;), filename: &#x27;bundle.js&#x27;, publicPath: &#x27;./assets/&#x27;, chunkFilename: &#x27;[chunkhash:8].js&#x27; &#125;, module: &#123; // 模块 rules: [ // 处理 css 文件 &#123; test: /\\.css$/, use: [&#x27;style-loader&#x27;, &#x27;css-loader&#x27;], // 如果是单一loader，use 可以是字符串，如果要给 loader 传参，那么 use 可以配置成对象形式 include: /src/, // 只对 src 目录下的文件做处理 exclude: /node_modules/, // 不处理 node_modules 下的文件 &#125;, ] &#125;&#125; 处理 ES6 语法安装 babel-loader 12345// 需要babel 核心包npm install -D @babel/core@7.13.0 babel-loader@8.2.2// 需要presets包，它表示预设插件的集合，对ES6最新语法进行转码npm install -D @babel/presets-env@7.13.10 1234567891011121314151617// 处理 es6，低版本浏览器并不支持 es6 最新语法&#123; module: &#123; rules: [ &#123; test: /\\.js$/, exclude: /node_modules/, use: &#123; loader: &#x27;babel-loader&#x27;, options: &#123; presets: [&#x27;@babel/presets-env&#x27;] &#125; &#125; &#125; ] &#125;&#125; babel-loader配置项options除了可以设置常规的Babel配置项，还可以开启缓存。可以通过增加cacheDirectory：true属性来开启缓存。在初次打包后再次打包，如果JS文件未发生变化，可以直接使用初次打包后的缓存文件，这样避免了二次转码，可以有效提高打包速度。 1234options: &#123; cacheDirectory：true, presets: [&#x27;@babel/presets-env&#x27;]&#125; 处理图片资源 使用file-loader 123456789// index.jsimport imgSrc from &#x27;../../img/babel.jpg&#x27;const imgDom = `&lt;img src=&quot;$&#123;imgSrc&#125;&quot;/&gt;`window.onload = function() &#123; const img = document.getElementById(&#x27;img&#x27;) img.innerHTML = imgDom&#125; 将 file-loader 配置到 webpack.config.js 中。 123456789module: &#123; rules: [&#123; test: /\\.css$/, use: [&#x27;style-loader&#x27;, &#x27;css-loader&#x27;] &#125;, &#123; test: /\\.(jpg|png|jpeg)$/, use: &#x27;file-loader&#x27; &#125;]&#125; 处理 css 中的图片资源看似什么都不用处理，但是当你打包后，dist 目录下有两个 jpg 的文件，其中一个无法打开，而页面中 css 中引入的图片资源，就是那个无法加载出来图片。 这是因为 css-loader 会对 @import 和 url() 进行处理，就像 js 解析 import/require() 一样 所以我们使用 file-loader 时，需要将 css 中的图片采用 commonjs 的方式去引入，而不是 esmodule。 解决办法： 123456789101112module: &#123; rules: [&#123; test: /\\.(jpg|png|jpeg)$/, use: &#123; loader: &#x27;file-loader&#x27;, options: &#123; esModule: false // 使用 commonjs 规范 &#125;, &#125;, type: &#x27;javascript/auto&#x27; &#125;]&#125; 重新打包，这时css图片就能正常加载了，而且 dist 目录下，也只有一张图片的资源。 webpack 插件插件是在Webpack编译的某些阶段，通过调用Webpack对外暴露出的API来扩展Webpack的能力的。 清理打包后文件123456const &#123; CleanWebpackPlugin &#125; = require(&#x27;clean-webpack-plugin&#x27;)// webpack.config.jsplugins: [ new CleanWebpackPlugin()] webpack devServer到目前为止，我们都是通过打包后再查看页面的效果，这样太麻烦了，每次修改后都要打包。 有两种方式： 文件监听模式 只需要加上 –watch 属性即可 1npx webpack --watch 这时，命令行程序不会退出，当我们修改文件内容，会发现页面刷新了，同时更新了我们最新的代码。 webpack-dev-server 它通过开启一个本地服务器来加载构建完成的资源文件，它还有代理请求等功能。构建完成的资源文件在内存中，而不是存在于磁盘。 模块热替换是一个非常强大的功能，它可以在不刷新浏览器页面的情况下，直接替换修改代码部分的页面位置，能有效提高我们的开发效率。 1234567891011121314151617181920module.exports = &#123; mode: &#x27;none&#x27;, entry: &#x27;./index.js&#x27;, output: &#123; path: path.resolve(__dirname, &#x27;dist&#x27;), filename: &#x27;bundle.js&#x27;, &#125;, devServer: &#123; port: 8888, open: true, hot: true, // 启用 模块热替换 compress: true, // 启用静态资源压缩 &#125;, plugins: [ new CleanWebpackPlugin(), new HTMLWebpackPlugin(&#123; template: &#x27;./index.html&#x27; &#125;) ]&#125; 使用模块热替换功能时，需要使用webpack.HotModuleReplacementPlugin插件的能力。在Webpack 5中，将hot参数设置为true时，会自动添加该插件，不需要我们进行额外的配置。 在我们的前端项目里，开启了模块热替换功能后，它并不会自动运行，它需要使用者触发。在模块文件里，需要使用module.hot接口来触发该功能。 示例： 我们可以在 index.html 文件中写入一个 input 标签 12345678&lt;body&gt; &lt;h1 class=&quot;hello&quot;&gt;Webpack55&lt;/h1&gt; &lt;input type=&quot;text&quot; /&gt; &lt;div id=&quot;img&quot;&gt;&lt;/div&gt; &lt;!-- &lt;script src=&quot;./dist/bundle.js&quot;&gt;&lt;/script&gt; --&gt;&lt;/body&gt; 然后到 index.js 中，写下这样一段代码: 1234// 触发 HMRif (module.hot) &#123; module.hot.accept()&#125; 我们做个实验，在 input 标签中输入一些文字，然后修改 index.js 的 console.log 代码，你会发现，页面上并没有刷新，也就是说，input 的内容没有被刷掉。但是 js 打印更新了。 我们还可以做实验： 比如，触发 HMR 的逻辑，不放到 index.js 中 我们创建一个 test.js 文件，将，触发 HMR 的逻辑放进来，然后 index.js 导入 test.js。 回到页面上，在 input 中输入文字，然后到 index.js 中修改 console.log代码，页面刷新了，input 的内容也清空了。 我们再到 input 中输入文字，然后回到 test.js 中，修改 console.log 代码，这时，页面不会刷新了，input 内容不会被刷掉，但是 test.js 文件更新了。 我们可以在需要 HMR 的文件中，加入 HMR 触发逻辑。 为了方便，也可以直接将 HMR 的触发逻辑，放到项目的入口文件中 main.js，之后其他文件改动，都不会刷新整个页面了。 为了减轻开发者的负担，社区常用的预处理器提供了支持模块热替换的功能，例如style-loader、vue-loader和react-hot-loader等。在使用这些工具的时候，它们会自动注入module.hot相关代码，完成模块热替换的工作，无须开发者手动调用，极大地减少了开发者的工作量。 webpack source map如果没有将Webpack配置文件的mode设置为none，那么编译后的代码会对我们的原始代码做压缩、整合等操作。而且如果使用webpack-dev-server开启的服务，打包后的代码中也会包含非常多与业务代码无关的Webpack代码。编译打包后的代码与原始代码差别非常大，我们很难调试，开发效率较低。 想要在浏览器里直接看到打包前的代码，就需要使用source map。 source map是一个单独的文件，浏览器可以通过它还原出编译前的原始代码。 123// webpack.config.jsdevtool: &#x27;source-map&#x27; 当配置了 source map 之后，我们再执行打包命令，会发现 dist 目录下多了几个 .map 结尾的文件，这就是 source map 文件。 source-map比较利于定位线上问题和调试代码，但其他人都可以通过浏览器开发者工具看到原始代码，有严重的安全风险，因此不推荐生产环境中用这个类型。基于同样的安全风险考虑，我们也不推荐使用inline-source-map。 Asset ModulesAsset Modules通常被翻译为资源模块，它指的是图片和字体等这一类型文件模块，它们无须使用额外的预处理器，Webpack通过一些配置就可以完成对它们的解析。 该功能是Webpack 5新加入的，与file-loader等预处理器的功能很像。 回顾一下file-loader的作用，它解析文件导入地址并将其替换成访问地址，同时把文件输出到相应位置。导入地址包括了JS和CSS等导入语句的地址，例如JS的import和CSS的url()。 在 处理 css 中的图片资源 中，我们如果仅仅使用 file-loader 来处理，会发现页面上无法正确显示图片。最后是采用了 esModule: false 以及 type: &#39;javascript/auto&#39; 的方式，使用 commonjs 来加载图片资源。 在 webpack5 中有了 Asset Modules，我们加上 type: &#39;asset/resource&#39; 配置即可。 123456789module: &#123; rules: [&#123; test: /\\.css$/, use: [&#x27;style-loader&#x27;, &#x27;css-loader&#x27;] &#125;, &#123; test: /\\.(jpg|png|jpeg)$/, type: &#x27;asset/resource&#x27; &#125;]&#125; Asset Modules的几个主要配置项都存放在module.rules里，关键的配置项叫type，它的值有以下四种： asset/resource：与之前使用的file-loader很像，它处理文件导入地址并将其替换成访问地址，同时把文件输出到相应位置。 asset/inline：与之前使用的url-loader很像，它处理文件导入地址并将其替换为data URL，默认是Base64格式编码的URL。 执行打包命令，文件目录里不会新增图片文件，因为原始图片已经被处理成Base64格式编码的data URL并直接存放于打包生成的资源bundle.js文件里了。 asset/source：与raw-loader很像，以字符串形式导出文件资源。 asset：Webpack默认对大于8KB的资源会以asset/resource的方式处理，否则会以asset/inline的方式处理。 自定义资源名 通过generator.filename配置项来配置 在module.rules里增加了generator.filename配置项 123456789101112module: &#123; rules: [&#123; test: /\\.css$/, use: [&#x27;style-loader&#x27;, &#x27;css-loader&#x27;] &#125;, &#123; test: /\\.(jpg|png|jpeg)$/, type: &#x27;asset/resource&#x27;, generator: &#123; filename: &#x27;static/[hash:8][ext][query]&#x27; // 表示处理生成的图片在static目录下，其名称是8位hash值与后缀名的组合。 &#125; &#125;]&#125; 在output里配置 在output里增加了assetModuleFilename配置项，该配置项用来表示资源模块处理文件后的名称。 12345output: &#123; path: path.resolve(__dirname, &#x27;dist&#x27;), filename: &#x27;bundle.js&#x27;, assetModuleFilename: &#x27;static/[hash:8][ext][query]&#x27;&#125;, 这两种方式配置资源文件名称的效果是一样的，并且仅可用于type取值是asset和asset/resource的情况。 生产环境配置实际开发中，开发环境的配置和生产环境的配置有很多是相同的。 相同的配置要分别与开发环境和生产环境合并，我们会用到 webpack-merge 这个工具，它类似于Object.assign方法，但它比Object.assign更加强大，非常适合对Webpack的配置项进行合并。 那我们在构建时，如何区分生产环境和开发环境呢？ 使用环境变量。 在我们使用Webpack的过程中，会遇到以下两种环境变量。 Node.js环境里的环境变量。（执行JS代码时可以获取到的环境变量，它们存放在process.env模块中） Webpack打包模块里的环境变量。 Nodejs 环境变量在实际开发中，我们一般需要设置跨操作系统的环境变量。通常，在npm的package.json文件中，我们可以通过跨操作系统的cross-env MY_ENV=dev这种方式进行环境变量的设置。 12345// package.json&quot;script&quot;: &#123; &quot;build&quot;: &quot;cross_env MY_ENV=dev webpack&quot;&#125; 本地开发环境可以使用 cross-env NODE_ENV=development，生产环境可以使用cross-env NODE_ENV=production。 123// webpack.config.jsconsole.log(&#x27;环境变量 &#x27;, process.env.NODE_ENV) 注意：我们配置的 Nodejs 环境变量，在 js 脚本文件中是无法被获取到的，因为 js 脚本通过 html 引入，无法获取 Nodejs 中的环境变量。 webpack 环境变量在实际开发中，我们有时候需要在业务逻辑代码里根据此代码是运行在本地开发环境还是线上生产环境里做区分，这个时候就需要在业务模块文件里注入环境变量。 我们通过DefinePlugin插件来设置打包模块里的环境变量，它是Webpack自带的一个插件。 123456plugins: [ new webpack.DefinePlugin(&#123; isMe: &quot;&#x27;YES&#x27;&quot;, env: JSON.stringify(&#x27;development&#x27;) &#125;)] 需要注意的是，我们在设置一个字符串值的时候，需要在外层再包裹一层引号，或者使用JSON.stringify()方法。如果不进行一层额外包裹，Webpack会把该字符串当成一个变量来处理。 然后到 index.js 文件中，直接获取定义的变量即可： 1console.log(&#x27;webpack : &#x27;, isMe, env) 样式文件提取Webpack 3及之前的版本里常用到的插件是extract-text-webpack-plugin，Webpack 3之后的版本里一般用的插件是mini-css-extract-plugin。 使用mini-css-extract-plugin插件时有以下两个关键点： 一是它自身带有一个预处理器，在用css-loader处理完CSS模块后，需要紧接着使用MiniCssExtractPlugin.loader这个预处理器。 二是它需要在Webpack配置文件的插件列表进行配置，执行new MiniCssExtractPlugin命令时需要传入一个对象，filename表示同步代码里提取的CSS文件名称，chunkFilename表示异步代码里提取的CSS文件名称。 1234567891011121314151617181920212223242526module: &#123; rules: [&#123; test: /\\.css$/, use: [ MiniCssExtractPlugin.loader, &#x27;css-loader&#x27; ] &#125;, &#123; test: /\\.(jpg|png|jpeg)$/, type: &#x27;asset/resource&#x27; &#125;]&#125;,plugins: [ new CleanWebpackPlugin(), // 清空 dist new HTMLWebpackPlugin(&#123; // 自动帮我们引入脚本和 css 文件 template: &#x27;./index.html&#x27; &#125;), new webpack.DefinePlugin(&#123; isMe: &quot;&#x27;YES&#x27;&quot;, env: JSON.stringify(&#x27;development&#x27;) &#125;), new MiniCssExtractPlugin(&#123; filename: &#x27;[name]-[contenthash:8].css&#x27;, // 同步代码里提取的CSS文件名称。 chunkFilename: &#x27;[id].css&#x27; // 异步代码里提取的CSS文件名称。 &#125;)] 处理 sass在业务开发中，我们通常会采用Sass或Less来书写样式文件，本节介绍Sass样式文件如何进行处理，Less样式文件的处理也是类似的。 处理Sass样式文件需要使用sass-loader预处理器，使用它需要先安装sass-loader这个npm包。sass-loader底层依赖于Node Sass或Dart Sass进行处理，它们对应的npm包的名称分别是node-sass和sass。因为node-sass包在安装使用过程中容易遇到一些问题，所以我们推荐使用sass这个npm包。 1npm install -D sass@1.32.8 sass-loader@11.0.1 Sass有两种书写样式的方式，分别是Sass和Scss，这里我们采用Scss的书写方式。 12345678// test.scssbody &#123; background: pink url(&#x27;../../img/home.jpg&#x27;); .hello &#123; color: red; &#125;&#125; 然后在入口文件中引入 test.scss 修改 webpack.config.js 12345678910module: &#123; rules: [&#123; test: /\\.(scss|css)$/, use: [ MiniCssExtractPlugin.loader, &#x27;css-loader&#x27;, &#x27;sass-loader&#x27; ] &#125;,&#125; PostCssPostCSS是一个转换CSS的工具，但它本身没有提供具体的样式处理能力。我们可以认为它是一个插件平台，具体的样式处理能力由它转交给专门的样式插件来处理。 在Webpack中使用PostCSS，需要安装postcss-loader这个npm包。在Webpack文件里配置处理样式模块规则时，让postcss-loader在css-loader之前进行处理即可。 1npm install -D postcss-loader@5.1.0 在使用PostCSS的时候也需要增加相应的配置文件，我们在工程根目录下增加postcss.config.js文件。 12345678910111213// webpack.config.jsmodule: &#123; rules: [&#123; test: /\\.(scss|css)$/, use: [ MiniCssExtractPlugin.loader, &#x27;css-loader&#x27;, &#x27;postcss-loader&#x27;, // 新增 &#x27;sass-loader&#x27; ] &#125;,&#125; 我们css 中加入 flex 样式 123456789body &#123; background: pink url(&#x27;../../img/home.jpg&#x27;); .hello &#123; color: red; display: flex; justify-content: center; &#125;&#125; 如果我们不配置 postcss.config.js，那么打包后跟之前打包的结果没有任何区别。 在开发过程中，我们使用PostCSS最重要的一个功能就是提供CSS样式浏览器厂商私有前缀，它是通过Autoprefixer来实现的。我们也可以通过postcss-preset-env来实现该功能，postcss-preset-env里包含了Autoprefixer，我们先使用Autoprefixer。 1npm install -D autoprefixer@10.2.5 配置 postcss.config.js 12345678910const autoprefixer = require(&#x27;autoprefixer&#x27;)module.exports = &#123; plugins: [ autoprefixer(&#123; browsers: [ &#x27;chrome &gt;= 18&#x27; ] &#125;) ]&#125; 其实这个 browsers 也可以在 package.json 中配置 browserslist。 123&quot;browserslist&quot;: [ &quot;chrome &gt;= 18&quot;] 我们再重启项目，查看样式代码 123456789.hello &#123; color: red; display: -webkit-box; display: -webkit-flex; display: flex; -webkit-box-pack: center; -webkit-justify-content: center; justify-content: center;&#125; 合并配置 webpack-merge1npm install -D webpack-merge@5.7.3 我们在package.json文件里配置了两个npm命令，分别对应本地开发环境打包和生产环境打包。 1234&quot;scripts&quot;: &#123; &quot;start&quot;: &quot;cross-env NODE_ENV=development webpack serve&quot;, &quot;build&quot;: &quot;cross-env NODE_ENV=production webpack&quot;&#125;, 我们可以直接在 webpack.config.js 中通过环境变量的判断，来应对生产环境和开发环境，但是当项目庞大起来了，配置越来越多且复杂的时候，这种方式就不优雅了。 业界流行的解决办法是把开发环境与生产环境公共的配置提取到一个单独的文件里，然后分别维护一份开发环境的配置文件和一份生产环境的配置文件，并将公共配置文件的JS代码合并到这两个文件里。 1234567891011121314151617181920212223// webpack.common.jsconst path = require(&#x27;path&#x27;)const HTMLWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;)module.exports = &#123; mode: &#x27;none&#x27;, entry: &#x27;./index.js&#x27;, output: &#123; path: path.resolve(__dirname, &#x27;dist&#x27;), filename: &#x27;bundle.js&#x27;, &#125;, devServer: &#123; port: 8888, hot: true &#125;, module: &#123;&#125;, plugins: [ new HTMLWebpackPlugin(&#123; template: &#x27;./index.html&#x27; &#125;) ]&#125; 12345678910111213141516171819// webpack.development.jsconst &#123; merge &#125; = require(&#x27;webpack-merge&#x27;) const common = require(&#x27;./webpack.common.js&#x27;)module.exports = merge(common, &#123; module: &#123; rules: [&#123; test: /\\.(scss|css)$/, use: [ &#x27;css-loader&#x27;, &#x27;postcss-loader&#x27;, &#x27;sass-loader&#x27; ] &#125;, &#123; test: /\\.(jpg|png|jpeg)$/, type: &#x27;asset/resource&#x27; &#125;] &#125;&#125;) 123456789101112131415161718192021222324252627// webpack.production.jsconst &#123; merge &#125; = require(&#x27;webpack-merge&#x27;)const common = require(&#x27;./webpack.common.js&#x27;)const MiniCssExtractPlugin = require(&#x27;mini-css-extract-plugin&#x27;)module.exports = merge(common, &#123; module: &#123; rules: [&#123; test: /\\.(scss|css)$/, use: [ MiniCssExtractPlugin.loader, &#x27;css-loader&#x27;, &#x27;postcss-loader&#x27;, &#x27;sass-loader&#x27; ] &#125;, &#123; test: /\\.(jpg|png|jpeg)$/, type: &#x27;asset/resource&#x27; &#125;] &#125;, plugins: [ new MiniCssExtractPlugin(&#123; filename: &#x27;[name]-[contenthash:8].css&#x27;, chunkFilename: &#x27;[id].css&#x27; &#125;) ]&#125;) 1234&quot;scripts&quot;: &#123; &quot;start&quot;: &quot;cross-env NODE_ENV=development webpack serve --config webpack.development.js&quot;, &quot;build&quot;: &quot;cross-env NODE_ENV=production webpack --config webpack.production.js&quot;&#125;, 性能优化Webpack性能优化总体包括两部分，分别是开发环境的优化与生产环境的优化。 打包体积分析工具webpack-bundle-analyzer webpack-bundle-analyzer开启的分析页面，这个页面可以通过控制鼠标来进行放大、缩小等操作。 1npm install -D webpack-bundle-analyzer@4.3.0 打包速度分析工具speed-measure-webpack-plugin speed-measure-webpack-plugin工具可以帮我们分析Webpack在打包过程中预处理器和插件等花费的时间。 压缩JS文件 在Webpack 4之前，我们会使用webpack.optimize.UglifyJsPlugin或webpack-parallel-uglify-plugin这一类的插件进行JS文件压缩，现在我们通常使用terser-webpack-plugin插件进行JS文件压缩。 在Webpack 5中，在安装Webpack时会自动安装terser-webpack-plugin插件，因此不需要我们单独安装。 压缩css 配置预处理器的exclude与include exclude可以排除不需要该预处理器解析的文件目录，include可以设置该预处理器只对哪些目录生效，这样可以减少不需要被预处理器处理的文件模块，从而提升构建速度。 module.noParse 有些模块不需要被任何预处理器解析，例如jQuery与Lodash这一类的工具库。 123456module.exports = &#123; // ... module: &#123; noParse: /jQuery|lodash/ &#125;&#125; 代码分割 optimization.splitChunks 代码分割是Webpack优化中非常重要的一部分，Webpack里主要有三种方法进行代码分割。 入口entry：配置entry入口文件，从而手动分割代码。 动态加载：通过import等方法进行按需加载。 抽取公共代码：使用splitChunks等技术抽取公共代码。 splitChunks指的是Webpack插件SplitChunksPlugin，在Webpack的配置项optimization.splitChunks里直接配置即可，无须单独安装。 在Webpack 4之前，Webpack是通过CommonsChunkPlugin插件来抽取公共代码的，Webpack 4之后使用的是SplitChunksPlugin插件，在Webpack 5中又对其进行了优化，接下来将详细说明SplitChunksPlugin插件在Webpack 5中的使用。 1234567891011121314151617module.exports = &#123; // ... optimization: &#123; splitChunks: &#123; // config chunks: 表示从什么类型的chunks里面提取代码，有三个字符串值initial、async、all可以使用，另外也可以使用函数来匹配要提取的chunks。其默认值是async，表示只从动态加载的chunks里提取代码。initial表示只从入口chunks里提取代码，all表示同时从异步chunks和入口chunks里提取代码。 minSize: 表示提取出来的chunk的最小体积，其在Webpack 5中的默认值是20000，表示20kB，只有达到这个值时才会被提取。 maxSize: 表示提取出来的chunk的最大体积，其默认值是0，表示不限制最大体积。它是一个可以违反的值，在被违反时起提示作用。 minChunks: 默认值是1，表示拆分前至少被多少个chunks引用的模块才会被提取。 //... &#125; &#125;&#125; 摇树优化Tree Shaking Tree Shaking可以帮我们检测模块中没有用到的代码块，并在Webpack打包时将没有使用到的代码块移除，减小打包后的资源体积。它的名字也非常形象，通过摇晃树把树上干枯无用的叶子摇掉。 通常我们在本地开发环境下不会使用Tree Shaking，因为它会降低构建速度并且没有太大意义。我们需要在生产环境打包时开启Tree Shaking，生产环境下我们只需要配置参数项mode为production，即可自动开启Tree Shaking。 缓存 在使用Webpack开发前端工程时，涉及的缓存主要有两类：一类是访问Web页面时的浏览器缓存，我们称其为长期缓存；另一类是Webpack构建过程中的缓存，我们称其为持久化缓存或编译缓存。 在Webpack 5之前的版本里，Webpack自身没有提供持久化缓存，我们在开发时经常需要使用cache-loader或dll动态链接技术来做缓存方面的处理，这无疑提高了我们的学习成本和Webpack配置的复杂度。Webpack 5提供了持久化缓存，它通过使用文件系统缓存，极大地减少了再次编译的时间。 Webpack构建原理 https://www.bilibili.com/video/BV1Va4y1G7HX?p=5&amp;vd_source=a9f38e58a519cc0570c2dacd34ad7ebe Rollup Rollup 是一个 JavaScript 模块打包工具，可以将多个小的代码片段编译为完整的库和应用。 https://www.rollupjs.com/ Parcelhttps://parceljs.org/docs/ 零配置的前端打包器 Parcel 结合了开箱即用的开发体验和可伸缩的体系结构，可以将您的项目从刚刚开始的阶段带到大规模的生产应用程序。 ESBuild极速 JavaScript 打包器，速度比其它打包工具快的 10 - 100 倍。 主要特性： 极快的速度，无需缓存 支持 ES6 和 CommonJS 模块 支持对 ES6 模块进行 tree shaking API 可同时用于 JavaScript 和 Go 兼容 TypeScript 和 JSX 语法 支持 Source maps 支持 Minification 支持 plugins 它为什么这么快？ 它是用Go语言编写的，编译成可执行代码 JavaScript必须基于解释器的node环境才能执行，所以当webpack等工具解释完本身的代码后，可能esbuild已经完成编译工作了，而这时候webpack才开始执行编译。 此外，Go的核心设计是并行的，而JavaScript不是。 Go有线程之间的共享内存，而JavaScript则必须在线程之间进行数据序列化。 webpack 中使用 ESBuild https://www.npmjs.com/package/esbuild-loader esbuild-loader: Speed up your Webpack build with esbuild! 🔥 1npm i -D esbuild-loader Use esbuild-loader to transform new JavaScript syntax to support older browsers, and TypeScript to JavaScript. 12345678910111213141516171819202122232425262728// webpack.config.js module.exports = &#123; module: &#123; rules: [ // &#123; // test: /\\.js$/, // use: &#x27;babel-loader&#x27; // &#125;, // &#123; // test: /\\.tsx?$/, // use: &#x27;ts-loader&#x27; // &#125;, &#123; // Match js, jsx, ts &amp; tsx files test: /\\.[jt]sx?$/, loader: &#x27;esbuild-loader&#x27;, options: &#123; // JavaScript version to compile to target: &#x27;es2015&#x27; &#125; &#125;, ... ], &#125;, &#125; webpack 中使用 esbuild 来压缩 JS 代码You can replace JS minifiers like Terser or UglifyJs. In webpack.config.js: 123456789101112const &#123; EsbuildPlugin &#125; = require(&#x27;esbuild-loader&#x27;) module.exports = &#123; ..., optimization: &#123; minimizer: [ new EsbuildPlugin(&#123; target: &#x27;es2015&#x27; &#125;) ] &#125;, &#125; webpack 中使用 esbuild 来压缩 css 代码1234567891011121314151617181920212223242526272829// webpack.config.jsconst &#123; EsbuildPlugin &#125; = require(&#x27;esbuild-loader&#x27;)const MiniCssExtractPlugin = require(&#x27;mini-css-extract-plugin&#x27;);module.exports = &#123; optimization: &#123; minimizer: [ new EsbuildPlugin(&#123; target: &#x27;es2015&#x27;, css: true // 压缩 css &#125;) ] &#125;, module: &#123; rules: [ &#123; test: /\\.css$/i, use: [ MiniCssExtractPlugin.loader, &#x27;css-loader&#x27; ] &#125; ] &#125;, plugins: [ new MiniCssExtractPlugin() ]&#125; 如果你的 CSS 不是作为 CSS 文件发出的，而是使用类似 style-loader 的东西通过 JS 加载的，那么你可以使用 loader 进行压缩。 123456789101112131415161718192021module.exports = &#123; ..., module: &#123; rules: [ &#123; test: /\\.css$/i, use: [ &#x27;style-loader&#x27;, &#x27;css-loader&#x27;, &#123; loader: &#x27;esbuild-loader&#x27;, options: &#123; minify: true &#125; &#125; ] &#125; ] &#125; &#125; vite https://vitejs.cn/ 下一代前端开发与构建工具 Vite 使用 esbuild 预构建依赖。 特性： 💡 极速的服务启动使用原生 ESM 文件，无需打包! ⚡️ 轻量快速的热重载无论应用程序大小如何，都始终极快的模块热重载（HMR） 🛠️ 丰富的功能对 TypeScript、JSX、CSS 等支持开箱即用。 📦 优化的构建可选 “多页应用” 或 “库” 模式的预配置 Rollup 构建 🔩 通用的插件在开发和构建之间共享 Rollup-superset 插件接口。 🔑 完全类型化的API灵活的 API 和完整 TypeScript 类型。 像 webpack 等打包器，在开发时，是先将我们的构建内容放到内存中，这样它们只需要在文件更改时使模块图的一部分失活，但它也仍需要整个重新构建并重载页面。 Vite 以 原生 ESM 方式提供源码。这实际上是让浏览器接管了打包程序的部分工作：Vite 只需要在浏览器请求源码时进行转换并按需提供源码。根据情景动态导入代码，即只在当前屏幕上实际使用时才会被处理。 Vite 同时利用 HTTP 头来加速整个页面的重新加载（再次让浏览器为我们做更多事情）：源码模块的请求会根据 304 Not Modified 进行协商缓存，而依赖模块请求则会通过 Cache-Control: max-age=31536000,immutable 进行强缓存，因此一旦被缓存它们将不需要再次请求。 为什么生产环境还需要打包？尽管原生 ESM 现在得到了广泛支持，但由于嵌套导入会导致额外的网络往返，在生产环境中发布未打包的 ESM 仍然效率低下（即使使用 HTTP/2）。 为了在生产环境中获得最佳的加载性能，最好还是将代码进行 tree-shaking、懒加载和 chunk 分割（以获得更好的缓存）。 浏览器兼容性用于生产环境的构建包会假设目标浏览器支持现代 JavaScript 语法。默认情况下，Vite 的目标是能够支持原生 ESM script 标签、支持原生 ESM 动态导入 和 import.meta 的浏览器： Chrome &gt;=87 Firefox &gt;=78 Safari &gt;=14 Edge &gt;=88 你也可以通过 build.target 配置项 指定构建目标，最低支持 es2015。 Rspack https://www.rspack.dev/zh/ 一个基于 Rust 的高性能构建引擎， 具备与 Webpack 生态系统的互操作性，可以被 Webpack 项目低成本集成，并提供更好的构建性能。 启动速度快: 基于 Rust，项目启动速度极快，带给你极致的开发体验。 高效的 Build 性能 和其他构建工具的对比 https://www.rspack.dev/zh/guide/introduction#%E5%92%8C%E5%85%B6%E4%BB%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7%E7%9A%84%E5%AF%B9%E6%AF%94 和 Turbopack 的区别 Rspack 和 turbopack 都是基于 Rust 实现的 bundler，且都发挥了 Rust 语言的优势。 与 turbopack 不同的是，Rspack 选择了对 Webpack 生态兼容的路线，一方面，这些兼容可能会带来一定的性能开销，但在实际的业务落地中，我们发现对于大部分的应用来说，这些性能开销是可以接受的，另一方面，这些兼容也使得 Rspack 可以更好地与上层的框架和生态进行集成，能够实现业务的渐进式迁移。 优势 Rust 语言优势: Rspack 使用 Rust 语言编写， 得益于 Rust 的高性能编译器支持， Rust 编译生成的 Native Code 通常比 JavaScript 性能更为高效。 高度并行的架构: Rspack 采用了高度并行化的架构，如模块图生成，代码生成等阶段，都是采用多线程并行执行，这使得其编译性能随着 CPU 核心数的增长而增长，充分挖掘 CPU 的多核优势。 内置大部分的功能: Webpack 做现代 Web App 开发时，通常需要配合很多的 plugin 和 loader 进行使用，而这些 loader 和 plugin 往往是性能的瓶颈，而 Rspack 虽然支持 loader 和 plugin，但是保证绝大部分常用功能都内置在 Rspack 内，从而减小 JS plugin | loader 导致的低性能和通信开销问题。 增量编译: 尽管 Rspack 的全量编译足够高效，但是当项目庞大时，全量的编译仍然难以满足 HMR 的性能要求，因此在 HMR 阶段，我们采用的是更为高效的增量编译策略，从而保证，无论你的项目多大，其 HMR 的开销总是控制在合理范围内。 使用 Rspack CLInpm/yarn create rspack@latest 手动安装1234mkdir rspack-democd rspack-demonpm init -ynpm install -D @rspack/cli Node version &gt; 14 123456789101112131415161718// rspack.config.jsconst path = require(&#x27;path&#x27;)module.exports = &#123; entry: &#123; main: &#x27;./src/index.jsx&#x27; &#125;, output: &#123; // filename: &#x27;index.js&#x27;, // filename 默认是 entry 的 key path: path.resolve(__dirname, &#x27;dist&#x27;) &#125;, builtins: &#123; html: [&#123; template: &#x27;./src/index.html&#x27; &#125;] &#125;&#125; HMRRspack 内置了对 HMR 的支持，并对 React 项目内置了 fast-refresh 的支持，无需配置，通过 npx rspack serve 即可体验 React 的 HMR。 css moduleCSS 是 Rspack 的一等公民，Rspack 内置了对 CSS 的处理能力，你无需额外的配置即可使用。 默认会将 *.css 结尾的文件视为 CSS 模块类型，将 *.module.css 结尾的文件视为 CSS Modules 模块类型。 12345// index.module.css.red-color &#123; color: red;&#125; 12345// app.jsximport styles from &#x27;./index.module.css&#x27;&lt;p className=&#123;styles[&#x27;red-color&#x27;]&#125;&gt;css module&lt;/p&gt; lessRspack 已经完成了对 less-loader 的兼容，你可以这样配置： 1234567891011121314151617181920// rspack.config.jsmodule.exports = &#123; module: &#123; rules: [ &#123; test: /\\.less$/, use: [ &#123; loader: &#x27;less-loader&#x27;, options: &#123; // ... &#125;, &#125;, ], type: &#x27;css&#x27;, &#125;, ], &#125;,&#125;; Tailwind CSS https://www.rspack.dev/zh/guide/language-support.html#tailwind-css SWC https://swc.rs/ SWC（Speedy WebAssembly Compiler）是一个基于Rust语言开发的JavaScript和TypeScript编译器。它使用WebAssembly技术来提供高效的代码编译和转换。SWC旨在提供更快的编译速度和更低的内存消耗，以改善前端开发者的工作流程。通过利用Rust语言的性能和内存安全特性，SWC能够在处理大型代码库时表现出色。 SWC 可用于编译和捆绑。对于编译，它使用现代 JavaScript 特性获取 JavaScript/TypeScript 文件，并输出所有主要浏览器都支持的有效代码。 和 babel 相比SWC 在一个线程上比 Babel 快20倍，在四个核心上比 Babel 快70倍。 安装 1npm/yarn i -D @swc/cli @swc/core Transpile JavaScript file and emit to stdout npx swc ./file.js 在线体验 https://swc.rs/playground Input 1234567891011const fn = () =&gt; 123interface IProps &#123; name: string;&#125;const App = (props: IProps) =&gt; &#123; return ( &lt;h1&gt;Jsx&lt;/h1&gt; )&#125; Output 123456var fn = function() &#123; return 123;&#125;;var App = function(props) &#123; return React.createElement(&quot;h1&quot;, null, &quot;Jsx&quot;);&#125;; why-you-should-use-swchttps://blog.logrocket.com/why-you-should-use-swc/ turbopack https://turbo.build/pack/docs 参考资源 从0到1学习 vite","categories":[],"tags":[{"name":"Webpack、ESBuild、Rollup、Vite、Parcel","slug":"Webpack、ESBuild、Rollup、Vite、Parcel","permalink":"http://yoursite.com/tags/Webpack%E3%80%81ESBuild%E3%80%81Rollup%E3%80%81Vite%E3%80%81Parcel/"}]},{"title":"温故而知新（JavaScript）","slug":"重温JavaScript","date":"2023-05-12T10:55:02.000Z","updated":"2024-06-11T08:52:17.361Z","comments":true,"path":"/post/重温JavaScript.html","link":"","permalink":"http://yoursite.com/post/%E9%87%8D%E6%B8%A9JavaScript.html","excerpt":"JavaScript","text":"数据类型(7) 原始数据类型(6种)a. 数值b. 字符串c. 布尔值d. undefinede. Nullf. Symbol（ECMAScript 6 新增） g.任意精度的整数 (BigInt) ，可以安全地存储和操作大整数，甚至可以超过数字的安全整数限制 引用数据类型a. 对象b. 数组c. 函数… 运算符加减乘除、取模、自增自减 1234var a = 1;var b;var sum = (b = a++ + --a) + a-- + b++; 数组创建数组12345var arr = [1,2,3]var arr = new Array()var arr = new Array(9)var arr = new Array(&#x27;first&#x27;, &#x27;second&#x27;, &#x27;name&#x27;) 数组方法concat: 连接两个或多个数组，并返回一个新数组。 join: 将数组中的所有项连接成一个字符串。 pop: 删除并返回数组的最后一项。 push: 在数组的末尾添加一个或多项并返回数组的新长度。 shift: 删除并返回数组的第一项。 unshift: 在数组的开头添加一个或多项。 slice: 返回一个数组的片段，该片段包括开始索引到结束索引（不包括结束索引）的所有项。 splice: 在数组中插入、删除或替换项。 sort: 对数组的所有项进行排序。 reverse: 反转数组中的项的顺序。 indexOf: 返回数组中第一个与给定值匹配的项的索引，如果未找到，则返回 -1。 lastIndexOf: 返回数组中最后一个与给定值匹配的项的索引，如果未找到，则返回 -1。 forEach: 对数组中的每一项执行给定的回调函数。 map: 对数组中的每一项执行给定的回调函数，并返回一个新数组，其中的每一项是回调函数的返回值。 filter: 对数组中的每一项执行给定的回调函数，并返回一个新数组，其中只包含回调函数返回 true 的项。 reduce: 从左到右对数组中的所有项进行累加，并返回单个值。 reduceRight: 从右到左对数组中的所有项进行累加，并返回单个值。 some: 如果数组中至少有一个项通过了给定的测试，则返回 true，否则返回 false。 every: 如果数组中的所有项都通过了给定的测试，则返回 true，否则返回 false。 JS编译原理JavaScript 是一种解释型语言，而非编译型语言。这意味着，JavaScript 代码在运行时被动态解释，而不是在编译时预先翻译成机器代码。 在 JavaScript 中，代码会被加载到浏览器或 Node.js 环境中，然后通过 JavaScript 引擎（例如 V8）解释和执行代码。在解释代码之前，JavaScript 引擎会对代码进行词法分析和语法分析，以确定代码的语法正确性和语义。然后，代码将被执行。 总的来说，JavaScript 没有明确的编译过程，但它在加载和运行代码之前经过了词法和语法分析。 词法分析词法分析的目的是将 JavaScript 代码的字符串形式转换为一系列词法单元 (tokens)，每个词法单元代表 JavaScript 代码的一个有意义的组成部分，如变量名，运算符，函数等。 语法分析语法分析的目的是将词法单元组合成语法树，语法树代表 JavaScript 代码的结构和语义。 闭包产生条件 函数内部有另一个函数 函数内部的函数里面用到了外部函数的局部变量 外部函数将内部函数作为返回值 return 出去了。 好处： 闭包中的变量，充当全局变量使用，减少全局变量的混乱程度。 清除： 将变量设置为 null 即可。 new关键字当我们在代码中使用 new 关键字，它会执行以下操作： 创建一个空对象 将该对象的原型链指向构造函数的原型对象 将函数内部的 this 关键字指向新创建的对象 在新创建的对象上执行构造函数中的代码 返回该对象 this 普通函数中，谁调用此函数，this 就指向谁。箭头函数中没有自己的this，在哪里定义，或者说箭头函数外部的this指向谁，就是谁。 方法中的this，指向调用方法的对象。 指向全局对象：全局函数中的this 事件中的 this，指向 dom 对象。 构造函数中的 this，指向 new 创建的对象。 call、apply、bind它们的作用都是为了改变 this 的指向 区别是参数不同，第一个参数是想要使用的对象，第二个参数是传递给函数的参数 1234567891011121314151617const dog = &#123; name: &#x27;is dog&#x27;, sayName(name1, name2, name3) &#123; console.log(this.name) &#125;&#125;const cat = &#123; name: &#x27;喵喵喵&#x27;&#125;dog.sayName.call(cat, 1, 2, 3)dog.sayName.apply(cat, [1, 2, 3])const fn = dog.sayName.bind(cat, 1, 2, 3)fn() 12345678910111213141516171819202122const cat = &#123; name: &#x27;喵喵喵&#x27;, sayName() &#123; // 等价于 window 对象调用定时器 setTimeout(function() &#123; console.log(this) // window &#125;) &#125;&#125;const cat = &#123; name: &#x27;喵喵喵&#x27;, sayName() &#123; setTimeout(() =&gt; &#123; console.log(this) // cat console.log(this.name) // 喵喵喵 &#125;) &#125;&#125;cat.sayName() nextTick 和 setImmediate同步代码执行完毕，执行 nextTick，然后是异步代码（setTimeout），最后执行 setImmediate 12345678910111213141516setImmediate(() =&gt; &#123; console.log(&#x27;setImmediate&#x27;)&#125;)process.nextTick(() =&gt; &#123; console.log(1)&#125;)console.log(2)setTimeout(() =&gt; &#123; console.log(3)&#125;, 0);// =&gt;&gt;&gt;&gt;&gt;&gt; 2 1 3 setImmediate setImmediate表示当前事件循环即将结束时，执行。 123456789101112131415161718192021222324setImmediate(() =&gt; &#123; console.log(&#x27;setImmediate&#x27;)&#125;)process.nextTick(() =&gt; &#123; console.log(1)&#125;)console.log(2)setTimeout(() =&gt; &#123; console.log(3)&#125;, 0);setTimeout(() =&gt; &#123; console.log(4)&#125;, 1000);setTimeout(() =&gt; &#123; console.log(5)&#125;, 0);console.log(6)// =====&gt; 2 6 1 3 5 setImmediate 4(一秒后输出4) 宏任务&amp;微任务宏任务：计时器、ajax、读取文件 微任务：promise.then 一次事件循环的执行顺序: 同步程序 process.nextTick 微任务 宏任务 setImmediate 1234567891011121314151617181920212223242526272829303132333435363738394041// 当前事件循环最后执行setImmediate(() =&gt; &#123; console.log(&#x27;setImmediate&#x27;)&#125;)// 宏任务执行完毕之后 微任务执行之前执行process.nextTick(() =&gt; &#123; console.log(1)&#125;)// 立即执行console.log(2)new Promise(r =&gt; &#123; // 立即执行 console.log(7) r()&#125;).then(() =&gt; &#123; // 微任务，process.nextTick 执行之后执行 console.log(8)&#125;)// 宏任务setTimeout(() =&gt; &#123; // 微任务执行后执行 console.log(3)&#125;, 0);setTimeout(() =&gt; &#123; // 放到下一次循环中执行 console.log(4)&#125;, 1000);setTimeout(() =&gt; &#123; // 微任务执行后执行 console.log(5)&#125;, 0);// 立即执行console.log(6)// 2 7 6 1 8 3 5 setImmediate 4 浅拷贝、深拷贝浅拷贝 12345678910111213const obj = &#123; name: &#x27;is obj&#x27;, girlfriend: &#123; name: &#x27;小红&#x27; &#125;&#125;const o = Object.assign(&#123;&#125;, obj)obj.name = &#x27;is o&#x27;obj.girlfriend.name = &#x27;小花&#x27;console.log(o) 深拷贝 1234567891011121314151617181920212223const obj = &#123; name: &#x27;is obj&#x27;, girlfriend: &#123; name: &#x27;小红&#x27; &#125;&#125;function deepClone(obj) &#123; if (typeof obj !== &#x27;object&#x27; || obj === null) &#123; return obj; // 如果是基本类型或null，则直接返回 &#125; const clone = Array.isArray(obj) ? [] : &#123;&#125;; for (let key in obj) &#123; if (obj.hasOwnProperty(key)) &#123; clone[key] = deepClone(obj[key]); &#125; &#125; return clone;&#125; JSON.stringify实现深克隆将一个 JSON 对象，转化为字符串，通过 JSON.parse 将字符串转化为对象，从而实现深克隆 12345678910const obj = &#123; name: &#x27;is obj&#x27;, girlfriend: &#123; name: &#x27;小红&#x27; &#125;&#125;const o = JSON.parse(JSON.stringify(obj))console.log(o) JSON.stringify 存在的两个问题： 无法拷贝函数、正则表达式、特殊类型的对象（如Date对象）等。 对象中存在循环引用时会导致报错。 12345678910111213// 如果属性值是 undefined 或者是方法（含箭头函数），克隆出来后，undefined 和函数会丢失const o = &#123; fn: function (params) &#123; // 方法会丢失 console.log(&#x27;is fn&#x27;) &#125;, reg: /\\.js$/ig, // 空对象: &#123;&#125; date: new Date(), // 时间会被计算出来: &quot;2023-05-24T03:07:23.547Z&quot; n: null, // null u: undefined, // 丢失 name: &#x27;hello alexCc&#x27;, // &#x27;hello alexCc&#x27; s: new Set([1,1,2,2,3,3]), // 空对象: &#123;&#125; m: new Map() // 空对象: &#123;&#125;&#125; structuredClone 实现深克隆structuredClone是浏览器提供的一种机制，用于在不同的上下文（例如Web Workers之间）传输和复制可结构化的数据。它是一种用于序列化和反序列化JavaScript对象的算法。 需要注意的是，structuredClone算法是浏览器提供的特性，它并不是JavaScript语言本身的一部分，因此在非浏览器环境中（例如Node.js），无法直接使用structuredClone。 对比 JSON.parse 需要注意的两个问题: 对象中存在方法，使用 structuredClone 拷贝会报错，而 JSON.parse 会丢失 structuredClone 支持对象循环引用，JSON.parse 处理循环引用的对象会报错 123456789101112const o = &#123; // fn: function (params) &#123; // 会报错 // console.log(&#x27;is fn&#x27;) // &#125;, reg: /\\.js$/ig, // /\\.js$/gi date: new Date(), // Wed May 24 2023 11:23:31 GMT+0800 (中国标准时间) &#123;&#125; n: null, // null u: undefined, // undefined name: &#x27;hello alexCc&#x27;, // &#x27;hello alexCc&#x27; s: new Set([1,1,2,2,3,3]), // Set(3) &#123;1, 2, 3&#125; m: new Map() // Map(0) &#123;size: 0&#125;&#125; parseInt parseInt(string, radix) 解析一个字符串并返回指定基数的十进制整数，radix 是 2-36 之间的整数，表示被解析字符串的基数。 string: 要被解析的值。 如果参数不是一个字符串，则将其转换为字符串 (使用 ToString抽象操作)。 字符串开头的空白符将会被忽略。 parseInt (0.0000005) === 5 为 true1234567(0.5).toString(); // &#x27;0.5&#x27;(0.05).toString(); // &#x27;0.05&#x27;(0.005).toString(); // &#x27;0.005&#x27;(0.0005).toString(); // &#x27;0.0005&#x27;(0.00005).toString(); // &#x27;0.00005&#x27;(0.000005).toString(); // &#x27;0.000005&#x27;(0.0000005).toString(); // &#x27;5e-7&#x27; 可以发现当数字过小时，toString 输出的结果是科学计数法形式。 parseInt 只能将字符串的前导部分解释为整数值；它忽略任何不能被解释为整数的代码单元，并且不会有忽略指示。 123parseInt(0.5) // 0parseInt(0.0000005) // 5 radix 默认值是 10 吗，何种情况返回值是 NaN？ 当 radix 值为 undefined、0 或未指定的，那 JavaScript 会如何处理这种情况: 如果输入的 string 以 0x 或 0X 开头，那么 radix 会被假定为 16 ，字符串的其他部分按照十六进制来解析。1parseInt(&#x27;0x51&#x27;) // 5*16^1 + 1*16^0 = 81 如果输入的 string 以 0 开头，ES5 规定使用十进制，但并非所有的浏览器都支持，因此使用 parseInt 时，需要指定 radix 如果输入的 string 以其他任何值开头，radix 值为 10 radix 参数的值为 2 ~ 36，当 radix 小于 2 或 大于 36(不包含 0)，返回值为 NaN 123parseInt(&quot;123&quot;, 1); // NaNparseInt(&quot;123&quot;, 38); // NaNparseInt(&quot;123&quot;, -1); // NaN 待转换字符串中，所有的可转换数字都不小于 radix 值 例如 radix 值为 2 (二进制)，而待转换字符串为 ‘3456’，二进制内只有 0、1 是基本算符，因此字符串 ‘3456’ 无法转换成二进制，返回值为 NaN。 12parseInt(&quot;3456&quot;, 2); // NaNparseInt(&quot;45px&quot;, 3); // NaN [‘1’, ‘2’, ‘3’].map(parseInt) [parseInt(“1”, 0), parseInt(“2”, 1), parseInt(“3”, 2)] parseInt(“1”, 0)radix 为 0，且 string 以字符 1 开始，radix 值为 10，值为 1。 parseInt(“2”, 1)符合 2.2 ，radix 小于 2，返回 NaN parseInt(“3”, 2)待转换字符串中，所有的可转换数字大于 radix 值，返回 NaN 渲染进程 GUI渲染线程 负责渲染页面，布局和绘制 页面需要重绘和回流时，该线程就会执行 与js引擎线程互斥，防止渲染结果不可预期 JS引擎线程 负责处理解析和执行javascript脚本程序 只有一个JS引擎线程（单线程） 与GUI渲染线程互斥，防止渲染结果不可预期 事件触发线程 用来控制事件循环（鼠标点击、setTimeout、ajax等） 当事件满足触发条件时，将事件放入到JS引擎所在的执行队列中 定时触发器线程 setInterval与setTimeout所在的线程 定时任务并不是由JS引擎计时的，是由定时触发线程来计时的 计时完毕后，通知事件触发线程 异步http请求线程 浏览器有一个单独的线程用于处理AJAX请求 当请求完成时，若有回调函数，通知事件触发线程 为什么 javascript 是单线程的?首先是历史原因，在创建 javascript 这门语言时，多进程多线程的架构并不流行，硬件支持并不好。 其次是因为多线程的复杂性，多线程操作需要加锁，编码的复杂性会增高。 而且，如果同时操作 DOM ，在多线程不加锁的情况下，最终会导致 DOM 渲染的结果不可预期。 为什么 GUI 渲染线程与 JS 引擎线程互斥?这是由于 JS 是可以操作 DOM 的，如果同时修改元素属性并同时渲染界面(即 JS线程和UI线程同时运行)，那么渲染线程前后获得的元素就可能不一致了。 因此，为了防止渲染出现不可预期的结果，浏览器设定 GUI渲染线程和JS引擎线程为互斥关系，当JS引擎线程执行时GUI渲染线程会被挂起，GUI更新则会被保存在一个队列中等待JS引擎线程空闲时立即被执行。 如何理解 JS 的运行机制（Event Loop）? https://juejin.cn/post/6844903919789801486 核心概念 JS分为同步任务和异步任务 同步任务都在 JS 引擎线程 上执行，形成一个执行栈 事件触发线程 管理一个任务队里，异步任务触发条件达成，将回调事件放入执行栈中执行 执行栈中所有同步任务执行完毕，此时JS引擎线程空闲，系统会读取任务队列，将可运行的异步任务回调事件添加到执行栈中，开始执行 Event Loop 执行一个宏任务（栈中没有，就从任务队列中获取） 执行过程中如果遇到了微任务，就将它添加到微任务的任务队列中 宏任务执行完毕，立即执行微任务队列中的所有微任务（依次执行） 当前宏任务执行完毕，开始检查渲染，然后 GUI 渲染线程接管，开始渲染 渲染完毕后，JS 线程接管，开始下一个宏任务（从任务队列中获取） var 和 let 的区别 var 声明的变量，其作用域为当前函数、模块或全局；let 声明的变量，其作用域总是在当前的代码块，例如语句块。 在同一个代码块中，var可以多次声明变量名；let只能声明一次，覆盖一个已经声明的 let 变量会导致语法错误。 用户可以在声明语句之前使用 var 变量，其值是 undefined. 而 let 必须先声明后使用。 全局模块下，var 声明的变量作为global上的属性，let声明的变量则不是 global上的属性，而是作为全局模块中的标识符。 垃圾回收机制 引用计数：被引用，则计数+1，不再引用，计数减一。存在循环引用问题。 标记清除（常用）：当变量进入到执行环境，则标记上已进入执行环境，当执行完成后，变量离开执行环境则标记已离开执行环境。 原型链 &amp; 继承每个构造函数都有一个原型对象（prototype），原型有一个属性（constructor）指回构造函数，而实例有一个内部指针（proto）指向原型。 原型链最顶端是 null 任何函数的默认原型都是一个Object的实例，这意味着这个实例有一个内部指针指向Object.prototype。 这也是为什么自定义类型能够继承包括toString()、valueOf()在内的所有默认方法的原因 123456789101112131415function Person(params) &#123; console.log(params)&#125;const p = new Person(1)p.__proto__.constructor === Person &gt;&gt;&gt; truep.__proto__ === Person.prototype &gt;&gt;&gt; truep.__proto__.__proto__ === Object.prototype &gt;&gt;&gt; truep.__proto__.__proto__.constructor === Object &gt;&gt;&gt; truep.__proto__.__proto__.__proto__ === null 原型与继承的关系原型与实例的关系可以通过两种方式来确定。 第一种方式是使用instanceof操作符，如果一个实例的原型链中出现过相应的构造函数，则instanceof返回true 1o instanceof Object // true 实例的原型链中出现过相应的构造函数 12345678910111213function instance_of(instance, obj) &#123; let prototype = Object.getPrototypeOf(instance) while(true) &#123; if (prototype === null) return false if (prototype === obj.prototype) &#123; return true &#125; prototype = Object.getPrototypeOf(prototype) &#125;&#125; 第二种方式是使用isPrototypeOf()方法 1Object.prototype.isPrototypeOf(o) 原型链的问题问题一：原型中包含的引用值会在所有实例间共享 123456789101112131415function Super() &#123; this.colors = [&#x27;red&#x27;, &#x27;blue&#x27;]&#125;function Sub() &#123;&#125;Sub.prototype = new Super() // Super 实例的属性值，变成了 Sub 原型对象上的属性const o1 = new Sub()o1.colors.push(&#x27;black&#x27;)// 所有实例共享原型对象上的 colorsconst o2 = new Sub()console.log(o2.colors) // [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;black&#x27;] 问题二：子类型在实例化时不能给父类型的构造函数传参 盗用构造函数继承 为了解决原型包含引用值导致的继承问题 在子类构造函数中调用父类构造函数。 1234567891011121314function Super() &#123; this.colors = [&#x27;red&#x27;, &#x27;blue&#x27;]&#125;function Sub() &#123; // 实例化 Sub 时，给每个 Sub 实例上都复制（拷贝）一份 colors，实例间不共享 colors，都有属于自己的那一份 colors Super.call(this)&#125;const o1 = new Sub()o1.colors.push(&#x27;black&#x27;)const o2 = new Sub()console.log(o2.colors) // [&#x27;red&#x27;, &#x27;blue&#x27;] 也可以给父类传递参数 123456function Sub() &#123; Super.call(this, &#x27;Hello world&#x27;) // 这里可以额外添加属性 this.age = 18&#125; 盗用构造函数也是有缺点的： 不是原型链继承，无法使用父类原型对象上的属性和方法。 父类上定义的所有属性和方法，都会被复制到子类实例上，如果属性和方法太多，占用内存就会较大。并且继承的目的是为了属性和方法的复用，而且借用构造函数是将父类定义的方法和属性进行了复制。 组合继承（伪经典继承） 综合了原型链和借用构造函数 基本的思路是使用原型链继承原型上的属性和方法，而通过盗用构造函数继承实例属性。这样既可以把方法定义在原型上以实现重用，又可以让每个实例都有自己的属性。 1234567891011121314151617181920212223function Person(name) &#123; this.name = name this.colors = [&#x27;red&#x27;, &#x27;blue&#x27;]&#125;Person.prototype.sayName = function() &#123; console.log(this.name)&#125;function User(name) &#123; // 借用构造函数 Person.call(this, name) this.age = 19&#125;// 原型链继承User.prototype = new Person()const u = new User(&#x27;xiaoming&#x27;)console.log(u.sayName()) 组合继承弥补了原型链和盗用构造函数的不足，是JavaScript中使用最多的继承模式。而且组合继承也保留了 instanceof操作符 和 isPrototypeOf() 方法识别合成对象的能力。 123456// trueconsole.log(u instanceof User)console.log(u instanceof Person)console.log(User.prototype.isPrototypeOf(u))console.log(Person.prototype.isPrototypeOf(u)) 原型式继承 创建一个临时构造函数，将传入的对象赋值给这个构造函数的原型，然后返回这个临时类型的一个实例 1234567function object(o) &#123; function F() &#123;&#125; F.prototype = o return new F()&#125; ECMAScript 5通过增加Object.create()方法将原型式继承的概念规范化了。这个方法接收两个参数：作为新对象原型的对象，以及给新对象定义额外属性的对象（第二个可选: Object.defineProperties()）。在只有一个参数时，Object.create()与这里的object()方法效果相同。 在 组合式继承中，我们可以将原型链继承那部分可以改写一下: 1User.prototype = Object.create(Person.prototype) 寄生式继承 创建一个实现继承的函数，以某种方式增强对象，然后返回这个对象 12345678function createAnother(original)&#123; let clone = Object.create(original) // 通过调用函数创建一个新对象 clone.sayHi = function() &#123; // 以某种方式增强这个对象 console.log(&quot;hi&quot;) &#125; return clone&#125; 寄生式组合继承(继承的最佳模式)组合继承其实也存在效率问题。最主要的效率问题就是父类构造函数始终会被调用两次：一次在是创建子类原型时调用，另一次是在子类构造函数中调用。 12345678910111213141516function SuperType(name) &#123; this.name = name; this.colors = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;];&#125;SuperType.prototype.sayName = function() &#123; console.log(this.name);&#125;;function SubType(name, age)&#123; SuperType.call(this, name); //第二次调用SuperType() this.age = age;&#125;SubType.prototype=newSuperType(); //第一次调用SuperType()SubType.prototype.constructor = SubType;SubType.prototype.sayAge = function() &#123; console.log(this.age);&#125;; 有两组name和colors属性：一组在实例上，另一组在SubType的原型上。 寄生式组合继承通过盗用构造函数继承属性，但使用混合式原型链继承方法。基本思路是不通过调用父类构造函数给子类原型赋值，而是取得父类原型的一个副本。 说到底就是使用寄生式继承来继承父类原型，然后将返回的新对象赋值给子类原型。 1234567function inheritPrototype(subType, superType) &#123; const prototype = Object.create(superType.prototype) // 将superType.prototype作为新对象的原型对象 prototype.constructor = subType // 增强对象 subType.prototype = prototype// 新对象赋值给子类原型&#125; 我们再来改写 组合继承 1234567891011121314151617function SuperType(name) &#123; this.name = name; this.colors = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;];&#125;SuperType.prototype.sayName = function() &#123; console.log(this.name);&#125;;function SubType(name, age) &#123; SuperType.call(this, name); this.age = age;&#125;inheritPrototype(SubType, SuperType);SubType.prototype.sayAge = function() &#123; console.log(this.age);&#125;; 这里只调用了一次SuperType构造函数，避免了SubType.prototype上不必要也用不到的属性，因此可以说这个例子的效率更高。 而且，原型链仍然保持不变，因此instanceof操作符和isPrototypeOf()方法正常有效。寄生式组合继承可以算是引用类型继承的最佳模式。 ES6 class 的 extends 关键字1234567891011121314class Point &#123; constructor(x, y) &#123; this.x = x this.y = y &#125;&#125;class ColorPoint extends Point &#123; constructor(x, y, color) &#123; super(x, y) // 必须调用 super (父类的 this 对象) this.color = color &#125;&#125; 子类必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为子类没有自己的this对象，而是继承了父类的this对象，然后对其进行加工。如果不调用super方法，子类就得不到this对象。 如果在一个方法前加上static关键字，就表示该方法不会被实例继承，而是直接通过类调用，称为“静态方法”。 1234567class Foo &#123; static staticMethod() &#123; console.log(&#x27;static&#x27;) &#125;&#125;Foo.staticMethod() 父类的静态方法可以被子类继承。 123class Bar extends Foo &#123;&#125;Bar.staticMethod() // static 父类的静态方法可以在子类中通过 super 关键字调用。 1234567class Bar extends Foo &#123; static say() &#123; return super.staticMethod() + &#x27; method&#x27; &#125;&#125;Bar.say() // static method class 和构造函数有什么区别？ 类必须使用new调用，直接调用会报错 类和模块的内部，默认就是严格模式，所以不需要使用use strict指定运行模式。 类不存在变量提升（hoist），这一点与 ES5 完全不同。 类的内部所有定义的方法，都是不可枚举的 子类必须在constructor方法中调用super方法，否则新建实例时会报错。 这是因为子类自己的this对象，必须先通过父类的构造函数完成塑造，得到与父类同样的实例属性和方法，然后再对其进行加工，加上子类自己的实例属性和方法。如果不调用super方法，子类就得不到this对象。 super作为函数调用时，代表父类的构造函数。 1234&lt;script&gt;class A &#123;&#125;class B extends A &#123; constructor() &#123; super() &#125;&#125;&lt;/script&gt; super虽然代表了父类A的构造函数，但是返回的是子类B的实例，即super内部的this指的是B的实例，因此super()在这里相当于A.prototype.constructor.call(this)。 继承区别 ES5 的继承，实质是先创造子类的实例对象this，然后再将父类的方法添加到this上面 Parent.call(this) ES6 的继承机制，实质是先将父类实例对象的属性和方法加到this上面（所以必须先调用super方法），然后再用子类的构造函数修改this。 防抖&amp;节流防抖：用户触发事件频繁，只需要用户最后一次操作的结果 12345678910111213const input = document.querySelector(&#x27;input&#x27;)let timer = nullinput.oninput = function()&#123; if (timer !== null) &#123; timer = clearTimeout(timer) &#125; timer = setTimeout(() =&gt; &#123; console.log(this.value) &#125;, 1000)&#125; 封装防抖函数 12345678910111213141516171819202122function debounce(fn, delay = 500) &#123; // 闭包 let timer = null // this ===&gt; window return function() &#123; // this ===&gt; input if (timer !== null) &#123; clearTimeout(timer) &#125; timer = setTimeout(() =&gt; &#123; fn.call(this) &#125;, delay); &#125;&#125;const input = document.querySelector(&#x27;#input&#x27;)input.oninput = debounce(function() &#123; console.log(&#x27;value: &#x27;, this.value)&#125;, 800) 节流：控制事件执行的次数，每个多少时间间隔执行一次。 比如监听滚动条的触发事件。 1234567let time = 0window.onscroll = function() &#123; if (Date.now() - time &gt; 1000) &#123; console.log(&#x27;执行&#x27;) time = Date.now() &#125;&#125; 封装节流函数 throttle 1234567891011function throttle(fn, delay) &#123; let time = 0 return function() &#123; let now = Date.now() if (now - time &gt; delay) &#123; fn.call(this) time = now &#125; &#125;&#125; 纯函数 函数的返回结果只依赖于它的参数，相同的输入始终得到相同的输出。 函数执行过程中没有副作用（不改变、不依赖外部任何可观察的变化） 123456function add(a, b) &#123; return a + b;&#125;add(1, 2) 可缓存的纯函数当我们的计算量非常大，可能耗时很长或者很好性能，那么我们通过缓存的方式，避免函数多次计算。从而，计算了一次之后，以后再输入相同的参数，就直接返回上次计算的结果。 lodash.memozie(add, resolver) 实现 memoize 函数 123456789101112131415161718192021222324252627function add(a, b) &#123; console.log(&#x27;计算中...&#x27;) return a + b&#125;const resolver = (...args) =&gt; JSON.stringify(args)function memoize(func, resolver) &#123; const cache = &#123;&#125; return function(...args) &#123; const key = resolver(...args) // &quot;[a, b]&quot; if (cache[key]) &#123; return cache[key] &#125; else &#123; return cache[key] = func(...args) &#125; &#125;&#125;const memoized = memoize(add, resolver)console.log(memoized(9, 9)) // 第一次打印 &quot;计算中...&quot;console.log(memoized(9, 9)) // 不会打印console.log(memoized(9, 9)) // 不会打印 函数柯里化给一个函数传入一部分参数，让其返回的函数接收剩余的参数。直到所有的参数都给到了，才会计算结果。 lodash.curry(fn) 12345678910function add(a, b, c) &#123; return a + b + c&#125;const fn = lodash.curry(add)console.log(fn(1, 2, 3))console.log(fn(1)(2, 3))console.log(fn(1)(2)(3)) 实现 curry 函数 1234567891011121314151617181920212223function curry(func) &#123; const curried = function(...args) &#123; // 函数的length 表示它有几个参数 if (args.length &lt; func.length) &#123; // 累加参数 return (...rest) =&gt; curried(...args, ...rest) &#125; else &#123; // 传入的参数和方法接收的参数相同，直接执行 func 函数 return func(...args) &#125; &#125; return curried&#125;function add(a, b, c) &#123; return a + b + c&#125;const curried = curry(add)const fn = curried(1)console.log(fn(2)(3)) 函数组合看个例子 12345678910111213141516const str = &#x27;hello &#x27;function add1(str) &#123; return str + &#x27;wor&#x27;&#125;function add2(str) &#123; return str + &#x27;l&#x27;&#125;function add3(str) &#123; return str + &#x27;d&#x27;&#125;console.log(add3(add2(add1(str)))) // hello wrold 我们通过手动组合的方式，将每个函数的结果拼接了起来，能实现想要的结果，但是过于繁琐，假设还有几个函数或者十几个函数，恐怕写下去人都麻了。 好在 lodash 这个库也帮我们实现了这个方法 flow &amp; flowRight 123const f = lodash.flow(add1, add2, add3)f(str) 手动实现 123456789101112131415161718192021222324252627282930313233343536const str = &#x27;hello - &#x27;function add1(str) &#123; return str + &#x27;wor&#x27;&#125;function add2(str) &#123; return str + &#x27;l&#x27;&#125;function add3(str) &#123; return str + &#x27;d&#x27;&#125;// console.log(add3(add2(add1(str))))function flow(...fns) &#123; if (fns.length === 1) &#123; return fns[0] &#125; return fns.reduceRight((a, b) =&gt; &#123; // 从右往左 // 第一步 a === add3, b === add2 // 第二步 a === (...args) =&gt; add3(add2(...args)), b === add1 // 第二步的 a 显示为 (...args) =&gt; a(b(...args)) // 返回 a(add1(...args)) // 当我们最后调用 f 时，会先计算 add1(...args)，拿到结果后，执行 a &quot;add3(add2(add1(...args)))&quot; return (...args) =&gt; a(b(...args)) &#125;)&#125;const f = flow(add1, add2, add3)console.log(f(str)) 跨域 什么是跨域？ CORS 全称是 Cross-Origin Resource Sharing，意为跨域资源共享。当一个资源去访问另一个不同域名或者不同端口的资源时，就会发出跨域请求。如果另一个资源不允许其进行跨域资源访问，就会造成跨域。 跨域不是问题，是浏览器的安全机制 跨域不会阻止请求的发出，也不会阻止请求的接收，跨域是浏览器为了保护当前页面，你的请求得到了响应，但是浏览器不会将请求到的数据提交给当前页面上的回调，取而代之的是去提示你这是一个跨域数据。 同源策略导致。 所谓同源策略，就是协议、域名、端口号都要相同，有一个不相同，那么就是非同源，就会出现跨域。 12345678910111213141516171819// 跨域(端口不同)http://localhost:8080http://localhost:3000// 跨域(协议不同)https://localhost:8080http://localhost:8080// 跨域(域名)https://localhost:8080https://192.168.1.2:8080// 跨域(协议不同，端口也不同)// http 默认端口是 80，https 默认端口是 443http://localhost/bbbhttps://localhost/aaa 解决跨域 纯后端方式 假设我们有个后端服务 3000，提供了 /user 接口，我们可以直接在 .html 文件中访问，如果后端不设置跨域，那么肯定会出现跨域提示的。 123456789101112131415161718192021222324252627282930313233// serverconst express = require(&#x27;express&#x27;)const app = express()app.get(&#x27;/user&#x27;, (req, res) =&gt; &#123; res.json(&#123; code: 0, msg: &#x27;请求user成功&#x27; &#125;)&#125;)app.listen(&#x27;3000&#x27;, () =&gt; &#123; console.log(&#x27;server running at port 3000...&#x27;)&#125;)// client&lt;script&gt; const xhr = new XMLHttpRequest() xhr.open(&#x27;get&#x27;, &#x27;http://localhost:3000/user&#x27;) xhr.onload = function() &#123; consolelog(xhr.response) &#125; xhr.send() // fetch fetch(&#x27;http://localhost:3000/user&#x27;) .then(res =&gt; res.text()) .then(res =&gt; &#123; console.log(res) &#125;)&lt;/script&gt; 后端设置跨域访问 123456789// CORSapp.all(&#x27;*&#x27;, function(req, res, next) &#123; // 允许所有请求源 res.header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;) res.header(&quot;Access-Control-Allow-Headers&quot;, &quot;*&quot;) res.header(&quot;Access-Control-Allow-Methods&quot;, &quot;*&quot;) next()&#125;) 前端处理主要是通过 webpack devServer 的 proxy 来处理。 1234567891011121314151617...devServer: &#123; proxy: &#123; &#x27;/api&#x27;: &#123; target: &#x27;http://localhost:3000/&#x27; // http://localhost:8080/api/user =&gt; http://localhost:3000/api/user &#125; &#125;, proxy: &#123; &#x27;/no-api&#x27;: &#123; target: &#x27;http://localhost:3000/&#x27;, // http://localhost:8080/no-api/user =&gt; http://localhost:3000/user pathRewrite: &#123; &#x27;/no-api&#x27;: &#x27;&#x27;, // 后端接口中一般不会含有 api 标识符，我们可以去掉 &#125; &#125; &#125;,&#125;... Nginx 要注意的是，devServer 配置 proxy 只是存在于我们开发项目时有用，如果项目要上线，devServer 就没有了，这时可以考虑采用 Nginx 来代理。 前后端合并方式 我们可以不采用 devServer proxy 方式，而是在后端配置 webpack-dev-middleware，将前后端进行合并。 123456789101112131415161718192021const express = require(&#x27;express&#x27;)const webpack = require(&#x27;webpack&#x27;)const middle = require(&#x27;webpack-dev-middleware&#x27;)const compile = require(&#x27;./webpack.config.js&#x27;)const app = express()app.use(middle(compile))app.get(&#x27;/user&#x27;, (req, res) =&gt; &#123; res.json(&#123; code: 0, msg: &#x27;请求user成功&#x27; &#125;)&#125;)app.listen(&#x27;3000&#x27;, () =&gt; &#123; console.log(&#x27;server running at port 3000...&#x27;)&#125;) jsonp 比较老、兼容性好的方式。 利用标签没有跨域限制的漏洞，在 script 标签上我们可以引用其他服务上的脚本。 最常见的场景就是 CDN. 1&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js&quot;&gt;&lt;/script&gt; 使用方式： 12345678910function callback(res) &#123; console.log(JSON.stringify(res, null, 2))&#125;// 动态创建 script 标签，设置好 scr 属性，主要参数是 cb=callbackconst script = document.createElement(&#x27;script&#x27;)script.src = &#x27;http://127.0.0.1:3000/info/jsonp?cb=callback&#x27;document.getElementByTagsName(&#x27;head&#x27;)[0].appendChild(script) 前端路由模式有两种： hash 模式 history 模式 hash 模式 URL 的 hash 也就是锚点（#），本质上是改变 window.location 的 href 属性。可以直接给 href 复制，但是页面不刷新。 123location.href // 获取当前浏览器 url: &#x27;https://www.baidu.com/&#x27;location.href = &#x27;/foo&#x27; history 模式 HTML5 新增。 它有五种模式改变 url 而不刷新页面。 123456history.pushState(&#123;&#125;, &#x27;&#x27;, &#x27;/foo&#x27;)history.replaceState(&#123;&#125;, &#x27;&#x27;, &#x27;/foo&#x27;)history.go(-1)history.back() // 等价 history.go(-1)history.forward() // history.go(1) vue-router 在 Vue 中，有两种方式可以跳转路由： 申明式路由 &lt;router-link to=&quot;/go&quot;&gt;跳转&lt;/router-link&gt; 编程式路由 this.$router.go(&#39;/go&#39;) 实现 vue-router 路由 https://www.bilibili.com/video/BV1n24y1w7kP?p=25&amp;spm_id_from=pageDriver&amp;vd_source=a9f38e58a519cc0570c2dacd34ad7ebe Promise 所谓Promise，就是一个对象，用来传递异步操作的消息。它代表了某个未来才会知道结果的事件（通常是一个异步操作），并且这个事件提供统一的API，可供进一步处理。 特点： 对象的状态不受外界影响（pedding, resolved, rejected） 一旦状态改变就不会再改变 1234567const p = new Promise((resolve, reject) =&gt; &#123; if (true) &#123; resolve(true) &#125; else &#123; reject(false) &#125;&#125;) resolve函数的作用是，将Promise对象的状态从“未完成”变为“成功”（即从Pending变为Resolved） reject函数的作用是，将Promise对象的状态从“未完成”变为“失败”（即从Pending变为Rejected） 12345678910function timeout(ms) &#123; return new Promise(resolve =&gt; &#123; // setTimeout 第三个参数，是传递给第一个函数的，这里是resolve 方法 setTimeout(resolve, ms, &#x27;done&#x27;) &#125;)&#125;timeout(1000).then(res =&gt; &#123; console.log(res)&#125;) resolve函数的参数除了正常的值外，还可能是另一个Promise实例，表示异步操作的结果有可能是一个值，也有可能是另一个异步操作： p1的状态决定了p2的状态 123456789101112131415const p1 = new Promise((r, reject) =&gt; &#123; setTimeout(() =&gt; &#123; reject(new Error(&#x27;fail&#x27;)) &#125;, 3000);&#125;)const p2 = new Promise((r, reject) =&gt; &#123; r(p1)&#125;)p2.then(result =&gt; &#123; console.log(&#x27;result &#x27;, result)&#125;, error =&gt; &#123; console.log(&#x27;error &#x27;, error)&#125;) 上面的代码中，p1是一个Promise,3秒之后变为Rejected。p2的状态由p1决定，p2调用resolve方法，但是此时p1的状态还没有改变，因此p2的状态也不会变。等3秒过后，p1变为Rejected,p2也跟着变为Rejected。 需要注意的是，catch方法返回的还是一个Promise对象，因此后面还可以接着调用then方法。 123456789101112131415161718new Promise(r =&gt; &#123; r(x + 2)&#125;).then(res =&gt; &#123; console.log(&#x27;结果 &#x27;, res)&#125;).catch(err =&gt; &#123; console.log(&#x27;错误 &#x27;, err)&#125;).then(() =&gt; &#123; console.log(&#x27;随便打印&#x27;)&#125;).finally(() =&gt; &#123; console.log(&#x27;最后打印&#x27;)&#125;)// =======&gt;错误 ReferenceError: x is not defined随便打印最后打印 Promise.all Promise.all方法用于将多个Promise实例包装成一个新的Promise实例。 1const p = Promise.all([p1, p2, p3]) p的状态由p1、p2、p3决定，分成两种情况。 只有p1、p2、p3的状态都变成Fulfilled,p的状态才会变成Fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。 只要p1、p2、p3中有一个被Rejected,p的状态就变成Rejected，此时第一个被Rejected的实例的返回值会传递给p的回调函数。 12345678910111213const p3 = function() &#123; return new Promise(r =&gt; &#123; setTimeout(() =&gt; &#123; r(&#x27;p3 success&#x27;) &#125;, 3000); &#125;)&#125;const allP = Promise.all([1, 2, p3()])allP.then(r =&gt; &#123; console.log(r)&#125;) 上面的例子，3秒后，输出 [ 1, 2, &#39;p3 success&#39; ] Promise.race 竞速 有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的Promise实例的返回值，就传递给p的回调函数。 超时处理 12345678const p = Promise.race([ fetch(&#x27;http://localhost:3000/api/user&#x27;), new Promise((r, reject) =&gt; &#123; setTimeout(() =&gt; &#123; reject(new Error(&#x27;Request timeout&#x27;)) &#125;, 5000) &#125;)]) 上面的代码中，如果5秒之内fetch方法无法返回结果，变量p的状态就会变为Rejected，从而触发catch方法指定的回调函数。 async awaitasync/await被称为Generator函数的语法糖，是因为它们之间具有一些相似的特性和作用。 使用Generator函数时，需要手动编写迭代器的控制逻辑，即不断调用next方法来推进函数的执行。而async函数则更加简洁，通过使用async关键字声明函数，并在函数内部使用await关键字来等待异步操作的完成。使用await关键字可以暂停函数的执行，等待Promise对象的解析，并将解析值作为结果返回。整个过程更加类似于同步代码的书写，避免了手动编写迭代器的繁琐操作。 从语法角度来看，async/await确实简化了异步编程的过程，使得代码更加易读和易于维护。它们隐藏了Generator函数的复杂性，并提供了更直观的方式来处理异步操作。因此，我们可以说async/await是Generator函数的一种更高级的语法糖形式。 async/await的内部原理是基于Generator函数来实现的。在JavaScript引擎内部，async函数会被转化为一个状态机，而await表达式会被转化为适当的yield表达式。 当遇到一个async函数时，JavaScript引擎会将其转化为一个返回Promise的普通函数。在函数内部，通过Generator函数的方式来实现异步操作的控制流。 我们来看一段 async/await 转为为 ES5 的代码 12345678910111213141516171819202122232425262728293031323334async function async1 () &#123; console.log(&#x27;async1 start&#x27;) await async2() console.log(&#x27;async1 end&#x27;)&#125;async function async2 () &#123; console.log(&#x27;async2&#x27;)&#125;console.log(&#x27;script start&#x27;)async1()console.log(&#x27;script end&#x27;)// ===================== 转为 es5 的代码后 =====================function async1() &#123; console.log(&#x27;async1 start&#x27;); return async2().then(function() &#123; console.log(&#x27;async1 end&#x27;); &#125;);&#125;function async2() &#123; console.log(&#x27;async2&#x27;); return Promise.resolve();&#125;console.log(&#x27;script start&#x27;);async1().then(function() &#123; console.log(&#x27;script end&#x27;);&#125;); async函数返回一个Promise对象，可以使用then方法添加回调函数 12345678async function sayName() &#123; return &#x27;name&#x27; // 相当于 return Promise.resolve(&#x27;name&#x27;)&#125;console.log(sayName()) // Promise &#123; &#x27;name&#x27; &#125;sayName().then(res =&gt; console.log(res)) // name 当函数执行时，一旦遇到await就会先返回，等到触发的异步操作完成，再接着执行函数体内后面的语句。 我们来实现一个 sleep 睡眠函数： 123456789101112131415161718192021// 睡眠函数const sleep = function(ms) &#123; return new Promise(r =&gt; &#123; setTimeout(() =&gt; &#123; r() &#125;, ms); &#125;)&#125;async function sayName() &#123; console.log(1) await sleep(3000) console.log(2) return &#x27;name&#x27;&#125;sayName().then(res =&gt; console.log(res)) 当我们调用 sayName 方法时，会立即打印出 1, 3秒过后，打印 2 和 ’name‘ 注意 await命令后面的Promise对象，运行结果可能是Rejected，所以最好把 await 命令放在try…catch代码块中。 123456789101112131415161718192021const sleep = function(ms) &#123; return new Promise(r =&gt; &#123; // 这里报错，会被外面的 try-catch 接收到 console.log(xxxxx + 3) setTimeout(() =&gt; &#123; // setTimeout 内部报错，不会被外部的 try catch 捕获到 r() &#125;, ms) &#125;)&#125;async function sayName() &#123; try &#123; await sleep(3000) &#125; catch (error) &#123; console.log(&#x27; - - - &#x27;, error) &#125;&#125;sayName().then(res =&gt; console.log(res)) 迭代器 Symbol.iterator不改变等式代码，如何让下面这个等式成立？ let [a, b, c] = &#123; a: 1, b: 2 &#125; 对象是不具备 Symbol.iterator 迭代器工厂函数的，我们可以手动创建一个。 1234567Object.prototype[Symbol.iterator] = function () &#123; return Object.values(this)[Symbol.iterator]()&#125;let [a, b, c] = &#123; a: 1, b: 2 &#125;console.log(&#x27;result &#x27;, a, b, c) 解构操作，调用迭代器方法。","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"Web Components","slug":"web-components","date":"2023-01-06T06:25:48.000Z","updated":"2024-06-11T08:52:17.360Z","comments":true,"path":"/post/web-components.html","link":"","permalink":"http://yoursite.com/post/web-components.html","excerpt":"Web Components","text":"Web Components作为开发者，我们都知道尽可能多的重用代码是一个好主意。这对于自定义标记结构来说通常不是那么容易 — 想想复杂的 HTML（以及相关的样式和脚本），有时您不得不写代码来呈现自定义 UI 控件，并且如果您不小心的话，多次使用它们会使您的页面变得一团糟。 组成 Custom elements（自定义元素） Shadow DOM（影子 DOM） HTML templates（HTML 模板） Custom elements（自定义元素）允许您定义 custom elements 及其行为，然后可以在您的用户界面中按照需要使用它们。 1234567891011121314151617class ShadowElement extends HTMLElement &#123; constructor() &#123; super() &#125; connectedCallback() &#123; const mountPoint = document.createElement(&#x27;div&#x27;); const shadowRoot = this.attachShadow(&#123; mode: &#x27;open&#x27; &#125;); shadowRoot.appendChild(mountPoint); ReactDOM.render(&lt;MyApp /&gt;, mountPoint); &#125;&#125;customElements.define(&#x27;my-custom-element&#x27;, ShadowElement); Shadow DOM（影子 DOM）有一些 Shadow DOM 特有的术语需要我们了解： Shadow host：一个常规 DOM 节点，Shadow DOM 会被附加到这个节点上。 Shadow tree：Shadow DOM 内部的 DOM 树。 Shadow boundary：Shadow DOM 结束的地方，也是常规 DOM 开始的地方。 Shadow root: Shadow tree 的根节点。 基本用法 12let shadow = elementRef.attachShadow(&#123;mode: &#x27;open&#x27;&#125;);let shadow = elementRef.attachShadow(&#123;mode: &#x27;closed&#x27;&#125;); open 表示可以通过页面内的 JavaScript 方法来获取 Shadow DOM，例如使用 Element.shadowRoot 属性： 1let myShadowDom = myCustomElem.shadowRoot; templates and slots复用结构，减少使用相同的标记结构。 此元素及其内容不会在 DOM 中呈现，可使用 JavaScript 去引用它。 123&lt;template id=&quot;my-paragraph&quot;&gt; &lt;p&gt;My paragraph&lt;/p&gt;&lt;/template&gt; 上面的代码不会展示在你的页面中，直到你用 JavaScript 获取它的引用，然后添加到 DOM 中，如下面的代码： 123let template = document.getElementById(&#x27;my-paragraph&#x27;);let templateContent = template.content;document.body.appendChild(templateContent); 在 Web Components 中使用模板 1234567891011customElements.define(&#x27;my-paragraph&#x27;, class extends HTMLElement &#123; constructor() &#123; super(); let template = document.getElementById(&#x27;my-paragraph&#x27;); let templateContent = template.content; const shadowRoot = this.attachShadow(&#123;mode: &#x27;open&#x27;&#125;) .appendChild(templateContent.cloneNode(true)); &#125;&#125;) 使用槽 (slots) 添加灵活度 改造 my-paragraph 1&lt;p&gt;&lt;slot name=&quot;my-text&quot;&gt;My default text&lt;/slot&gt;&lt;/p&gt; 跟 Vue 插槽一样的用法。 123456789101112&lt;my-paragraph&gt; &lt;span slot=&quot;my-text&quot;&gt;Let&#x27;s have some different text!&lt;/span&gt;&lt;/my-paragraph&gt;// or&lt;my-paragraph&gt; &lt;ul slot=&quot;my-text&quot;&gt; &lt;li&gt;Let&#x27;s have some different text!&lt;/li&gt; &lt;li&gt;In a list!&lt;/li&gt; &lt;/ul&gt;&lt;/my-paragraph&gt; 完整示例： 1234567891011121314151617181920212223242526272829303132333435363738394041// html&lt;body&gt; &lt;h1&gt;template &amp; slot&lt;/h1&gt; &lt;template id=&quot;my-paragraph&quot;&gt; &lt;!-- 默认插槽 --&gt; &lt;slot name=&quot;title&quot;&gt; &lt;h1&gt;Default Title&lt;/h1&gt; &lt;/slot&gt; &lt;slot&gt;default slot&lt;/slot&gt; &lt;p&gt;My paragraph&lt;/p&gt; &lt;/template&gt; &lt;my-paragraph&gt; &lt;!-- 使用插槽 --&gt; &lt;h1 slot=&quot;title&quot;&gt;Slot title&lt;/h1&gt; &lt;/my-paragraph&gt; &lt;hr&gt;&lt;/body&gt;// jsclass MyParagraph extends HTMLElement &#123; constructor() &#123; super() &#125; connectedCallback() &#123; let template = document.getElementById(&#x27;my-paragraph&#x27;); let templateContent = template.content; this.attachShadow(&#123; mode: &#x27;open&#x27; &#125;) .appendChild(templateContent.cloneNode(true)) &#125;&#125;customElements.define(&#x27;my-paragraph&#x27;, MyParagraph) 组件通信 Lightning Web Component 在 LWC 中，可以通过实现 CustomEvent 接口进行自定义事件，通过 EventTarget.dispatchEvent() 来分配事件。 注意： 定义事件时，不需要在事件名前加 on，因为在使用的时候会默认在名称前使用 on，比如：当我们定义了 click 事件，在 HTML 代码中用 onclick 来调用它 父组件 123456789101112131415// parent compconnectedCallback() &#123; const child = this.shadowRoot.querySelector(&#x27;child-wc&#x27;) // 1. 通过 DOM 属性传参，会触发子组件的 attributeChangedCallback 钩子 child.setAttribute(&#x27;text&#x27;, &#x27;Parent changed the Text&#x27;) // 2. 通过组件实例直接修改内部数据（⚠️未获取到） // console.log(&#x27;??&#x27;, child) // 3. 监听子组件内部定义的事件 child.addEventListener(&#x27;custom-event&#x27;, (&#123; detail &#125;) =&gt; &#123; console.log(&#x27;事件触发 &#x27;, detail.value); &#125;) &#125; 子组件 12345678910111213141516// child compconnectedCallback() &#123; // 定义事件 const event = new CustomEvent(&#x27;custom-event&#x27;, &#123; detail: &#123; value: &#x27;child web component&#x27; &#125; &#125;) this.dispatchEvent(event) const btn = this.shadowRoot.querySelector(&#x27;button&#x27;) btn.addEventListener(&#x27;click&#x27;, () =&gt; &#123; // 获取父组件 this.getRootNode().host.sayHello(&#x27;Hello :&#x27;) &#125;)&#125; 子组件直接调用父组件实例上的方法123456789101112131415// parent compsayHello(msg) &#123; console.log(msg, this.data)&#125;// child compconnectedCallback() &#123; const btn = this.shadowRoot.querySelector(&#x27;button&#x27;) btn.addEventListener(&#x27;click&#x27;, () =&gt; &#123; // 获取父组件实例 this.getRootNode().host.sayHello(&#x27;Hello :&#x27;) &#125;)&#125; 监听组件上属性的变化1234567891011121314151617// parentconst child = this.shadowRoot.querySelector(&#x27;child-wc&#x27;)// 1. 通过 DOM 属性传参，会触发子组件的 attributeChangedCallback 钩子child.setAttribute(&#x27;text&#x27;, &#x27;Parent changed the Text&#x27;)// child// 监听属性变化，必须定静态的 observedAttributes 方法static get observedAttributes() &#123; return [&#x27;text&#x27;];&#125;attributeChangedCallback(name, oldValue, newValue) &#123; console.log(&#x27;name&#x27;, name) console.log(&#x27;oldValue&#x27;, oldValue) console.log(&#x27;newValue&#x27;, newValue)&#125; web component in ReactJSReact 和 Web Components 为了解决不同的问题而生。 Web Components 为可复用组件提供了强大的封装，而 React 则提供了声明式的解决方案，使 DOM 与数据保持同步。 两者旨在互补。作为开发人员，可以自由选择在 Web Components 中使用 React，或者在 React 中使用 Web Components，或者两者共存。 问题 “react”: “^16.12.0” 123456789101112131415161718192021222324252627282930class MyApp extends React.Component &#123; render() &#123; return &lt;span onClick=&#123;() =&gt; alert(&#x27;I have been clicked&#x27;)&#125;&gt;Click me&lt;/span&gt;; &#125;&#125;class ShadowElement extends HTMLElement &#123; constructor() &#123; super() &#125; connectedCallback() &#123; const mountPoint = document.createElement(&#x27;div&#x27;); const shadowRoot = this.attachShadow(&#123; mode: &#x27;open&#x27; &#125;); shadowRoot.appendChild(mountPoint); ReactDOM.render(&lt;MyApp /&gt;, mountPoint); &#125;&#125;customElements.define(&#x27;my-custom-element&#x27;, ShadowElement);// 使用&lt;div className=&quot;app-main&quot; onClick=&#123;()=&gt; console.log(&#x27;app main clicked&#x27;)&#125;&gt; &lt;my-custom-element&gt;&lt;/my-custom-element&gt;&lt;/div&gt; 效果图 “react”: “^17.0.2” 及以上版本，已解决此问题。 代码一致，效果图。 解决方案 Web Components 触发的事件可能无法通过 React 渲染树正确的传递。 你需要在 React 组件中手动添加事件处理器来处理这些事件。 Shadow DOM 重定向了 click 事件并将其封装在 shadow 中，将组件内部的所有内容封装在单独的作用域中，并隔离事件。React 并不支持这样的 Shadow DOM，因此事件委托失败，事件无法触发。 这意味着，如果您将带有 click 事件的 React 组件放在 Web 组件中，则点击事件可能不会冒泡到 React 组件中。这是因为事件在 Web 组件的 Shadow DOM 中触发，然后被封装在 Shadow DOM 中，而不会传播到外部组件。 如果您希望在使用 Web 组件时能够触发 React 事件，则可以使用上述方法之一，例如重新绑定事件到实际的 shadow 容器并使用 “__reactInternalInstances” 来调度正确的 React 事件。您还可以使用其他方法来解决此问题，例如使用自定义事件或使用事件代理。 https://stackoverflow.com/questions/37866237/click-event-not-firing-when-react-component-in-a-shadow-dom 相关文章：当 Shadow Dom 遇上 React event https://github.com/huruji/blog/issues/104 编写组件 https://juejin.cn/post/7157955953776820254 https://juejin.cn/post/7161816035186720781 https://quark-design.hellobike.com/#/ 参考链接 MDN官方文档 WC官方示例 基于 Web Components 跨框架组件开发 Shadow :host 选择器","categories":[],"tags":[{"name":"组件","slug":"组件","permalink":"http://yoursite.com/tags/%E7%BB%84%E4%BB%B6/"}]},{"title":"微前端-qiankun","slug":"micro-qiankun","date":"2023-01-05T13:24:21.000Z","updated":"2024-06-11T08:52:17.344Z","comments":true,"path":"/post/micro-qiankun.html","link":"","permalink":"http://yoursite.com/post/micro-qiankun.html","excerpt":"shadow dom、样式隔离方案","text":"对微前端的理解微前端的核心理念是将前端应用程序看作是一个整体，由多个独立的部分组成。每个部分被视为一个微前端应用，它们可以具有自己的技术栈、开发流程和团队组织。这种方式使得团队可以独立开发和部署各个子应用，减少了协调和合并的复杂性。 为什么 Iframe 无法胜任微前端的工作？IFrame 在传统的前端开发中是一种常见的技术，用于在页面中嵌入其他网页或应用程序。然而，在微前端架构中，IFrame 并不是一个理想的选择，主要是因为以下几个方面的限制： 隔离性和通信复杂性：IFrame 本身提供了一种隔离的环境，但这也带来了通信和数据交互的复杂性。由于每个子应用都在独立的 IFrames 中运行，它们之间的通信需要通过特定的机制，如消息传递，而这增加了开发和维护的复杂性。 性能和加载时间：每个 IFrames 都需要加载和渲染独立的 HTML、CSS 和 JavaScript。这意味着在加载微前端应用时，需要同时加载多个 IFrames，导致额外的网络请求和页面资源占用，可能会影响性能和加载时间。 样式和布局限制：IFrame 的内容在页面中是独立的，它们具有自己的 CSS 样式和布局上下文。这导致在微前端架构中难以实现全局样式的一致性，以及子应用之间的布局和交互的协调问题。 浏览器安全性限制：由于安全策略的限制，IFrame 之间的跨域通信可能受到限制，特别是在涉及跨域资源访问和共享数据时。这可能导致在微前端架构中需要处理复杂的安全性问题。 鉴于以上限制，微前端架构通常采用其他技术手段来实现子应用的拆分和集成，例如使用 Web Components、JavaScript 模块加载器等。这些技术能够提供更好的隔离性、通信机制和性能优化，使得微前端架构更具可行性和灵活性。 微前端运行原理 监听路由变化 匹配子应用 加载子应用 渲染子应用 监听路由变化 监听 hash 路由: window.onhashchange 监听 history 路由 history.go、history.back、history.forward 使用 popstate 事件 window.onpopstate 监听的方式 1window.addEventListener(&#x27;popstate&#x27;, () =&gt; &#123;&#125;) 重写: pushState、replaceState 需要通过函数重写的方式进行 劫持 12345678910111213const rawPushState = window.history.pushStatewindow.history.pushState = function(...args) &#123; rawPushState.apply(window.history, args) // 其他逻辑&#125;const rawReplaceState = window.history.replaceStatewindow.history.replaceState = function(...args) &#123; rawReplaceState.apply(window.history, args) // 其他逻辑&#125; 在 Vue 项目中，我们通过 this.$router.push 会触发 history.pushState 事件，this.$router.replace 会触发 history.replaceState 事件。 匹配子应用监听路由的变化后，拿到当前路由的路径 window.location.pathname，然后根据 registerMicroApps 的参数 apps 查找子应用。因为子应用都配置了 activeRule。 123// 如果当前的 pathname 以 activeRule 开头，表明匹配到了子应用const currentApp = apps.find(app =&gt; window.location.pathname.startWith(app.activeRule)) 加载子应用当我们找到了与当前路由匹配的子应用，接着就去加载这个子应用的资源。 123456789function handleRouter = async () =&gt; &#123; // 匹配子应用 // 加载资源 const html = await fetch(currentApp.entry.then(res =&gt; res.text()) // 将 html 渲染到指定的容器内 const container = document.querySelector(currentApp.container)&#125; 这个时候，我们就拿到了子应用的 html 文本。 但是我们不能给直接通过 container.innerHTML = html 将文本放到容器内，这样是无法显示的。 注意 浏览器处于安全考虑，放到页面上的 html 如果包含了 js 脚本，它是不会去执行 js 的。我们需要手动处理 script 脚本。 importHTML 加载资源/处理脚本我们来封装一个函数 importHTML，专门来处理 html 文本。(qiankun内部引用的 import-html-entry 就是做这个事的。) 我们可以把加载子应用资源的 fetch 请求放到 importHTML 函数中，它还有如下几个功能： 将获取到的 html 文本，放到 template DOM节点中 获取所有的 Script 脚本 执行所有的 Script 脚本 123456789101112131415161718192021export const importHTML = url =&gt; &#123; const html = await fetch(currentApp.entry).then(res =&gt; res.text() const template = document.createElement(&#x27;div&#x27;) template.innerHTML = html const scripts = template.querySelectAll(&#x27;script&#x27;) const getExternalScripts = () =&gt; &#123; console.log(&#x27;解析所有脚本: &#x27;, scripts) &#125; const execScripts = () =&gt; &#123;&#125; return &#123; template, // html 文本 getExternalScripts, // 获取 Script 脚本 execScripts, // 执行 Sript 脚本 &#125;&#125; script 脚本分为 内联 脚本和外链脚本，这里需要分开处理，拿到内联脚本后，获取内容可以通过 eval 直接处理。如果是含有 scr 的 script 脚本，还需要拿到 src 的值，通过 fetch 去加载脚本。 我们在 getExternalScripts 方法中来处理 123456789101112const getExternalScripts = async () =&gt; &#123; return Promise.all(Array.from(scripts).map(script =&gt; &#123; // 获取 scr 属性 const src = script.getAttribute(&#x27;src&#x27;) if (!src) &#123; return Promise.resolve(script.innerHTML) &#125; else &#123; return fetch(src.startWith(&#x27;http&#x27;) ? src : `$&#123;url&#125;$&#123;src&#125;`).then(res =&gt; res.text()) &#125; &#125;))&#125; 然后我们就可以通过 execScripts 方法去调用 getExternalScripts，拿到所有的脚本内容后，执行！ 1234567const execScripts = async () =&gt; &#123; const scripts = await getExternalScripts() scripts.forEach(code =&gt; &#123; eval(code) &#125;)&#125; qiankun https://qiankun.umijs.org/zh 基于 single-spa，通过 import-html-entry 包处理 html / css 12345&quot;dependencies&quot;: &#123; &quot;import-html-entry&quot;: &quot;^1.14.0&quot;, &quot;single-spa&quot;: &quot;^5.9.2&quot; // ...&#125;, 微前端的子项目是怎么引入到主项目里的123456789101112131415161718registerMicroApps( [ &#123; name: &#x27;react16&#x27;, entry: &#x27;//localhost:7100&#x27;, container: &#x27;#subapp-viewport&#x27;, loader, activeRule: &#x27;/react16&#x27;, &#125;, &#123; name: &#x27;react15&#x27;, entry: &#x27;//localhost:7102&#x27;, container: &#x27;#subapp-viewport&#x27;, loader, activeRule: &#x27;/react15&#x27;, &#125;, ]) 容器指定路由匹配规则加载子应用，一旦路径匹配就会加载子应用资源 子应用打包输出格式为 umd，并且要允许跨域 12345678910111213141516171819// vue.config.jsmodule.exports = &#123; devServer: &#123; // ... headers: &#123; &#x27;Access-Control-Allow-Origin&#x27;: &#x27;*&#x27;, &#125;, &#125;, // 自定义webpack配置 configureWebpack: &#123; output: &#123; // 把子应用打包成库文件、格式是 umd library: `$&#123;name&#125;-[name]`, libraryTarget: &#x27;umd&#x27;, jsonpFunction: `webpackJsonp_$&#123;name&#125;`, &#125;, &#125;,&#125; umdumd全称是UniversalModuleDefinition，是一种通用模块定义格式，通常用于前端模块化开发中。 由于不同的模块化规范定义不同，为了让各种规范的模块可以通用，在不同的环境下都可以正常运行，就出现了umd这个通用格式。 特点umd 格式是一种既可以在浏览器环境下使用，也可以在 node 环境下使用的格式。它将 CommonJS、AMD以及普通的全局定义模块三种模块模式进行了整合。 12345678910(function (global, factory) &#123; // CommonJS typeof exports === &#x27;object&#x27; &amp;&amp; typeof module !== &#x27;undefined&#x27; ? factory(exports) : // AMD typeof define === &#x27;function&#x27; &amp;&amp; define.amd ? define([&#x27;exports&#x27;], factory) : // Window (global = typeof globalThis !== &#x27;undefined&#x27; ? globalThis : global || self, factory(global.qiankun = &#123;&#125;));&#125;(this, (function (exports) &#123; // 应用代码&#125;))); 为什么 qiankun 要求子应用打包为 umd 库格式呢？主要是为了拿到子应用在 入口文件 导出的 生命钩子函数，这也是主应用和子应用之间通信的关键。 bootstrap mount unmount 获取子应用资源 - import-html-entry https://zhuanlan.zhihu.com/p/369414267 HTML Entry + Sandbox 是 qiankun 区别于 single-spa 的主要两个特性。 single-spa和qiankun最大的不同，大概就是qiankun实现了html entry，而single-spa只能是js entry 通过 import-html-entry，我就能像 iframe 一样加载一个子应用，只需要知道其 html 的 url 就能加载到主应用中。 importHTML 几个核心方法: 首先importHTML的参数为需要加载的页面url，拿到后会先通过 fetch方法 读取页面内容。 1234567891011121314import importHTML from &#x27;import-html-entry&#x27;;importHTML(&#x27;./subApp/index.html&#x27;) .then(res =&gt; &#123; console.log(res.template); res.execScripts().then(exports =&gt; &#123; const mobx = exports; const &#123; observable &#125; = mobx; observable(&#123; name: &#x27;kuitos&#x27; &#125;) &#125;)&#125;); 返回值 template - string - 处理过的 HTML 模板。 assetPublicPath - string - 资源的公共途径。 getExternalScripts - Promise&lt;string[]&gt; - 来自模板的脚本 URL。 getExternalStyleSheets - Promise&lt;string[]&gt; - 来自模板的 StyleSheets URL。 execScripts - (sandbox?: object, strictGlobal?: boolean, execScriptsHooks?: ExecScriptsHooks): - Promise - the return value is the last property on window or proxy window which set by the entry - script. sandbox - optional, Window or proxy window. strictGlobal - optional, Strictly enforce the sandbox. processTpl它会解析html的内容并且删除注释，获取style样式及script代码。通过大量的正则 + replace，每一个步骤都做了很多适配，比如获取script脚本，需要区分该script是不是entry script，type是JavaScript还是module，是行内script还是外链script，是相对路径还是绝对路径，是否需要处理协议等等。 processTpl的返回值有 template，script，style，entry。 JS 沙箱 文章 视频 JavaScript 沙箱是一种安全机制，用于隔离和限制 JavaScript 代码的执行环境，以防止恶意代码或意外行为对系统造成损害。沙箱提供了一种受控的环境，限制了代码的访问权限和执行能力，确保代码只能在受限制的范围内操作。 JavaScript 沙箱通常用于以下情况： 在多租户环境中，确保不同用户或组织的代码相互隔离，防止相互干扰或访问敏感信息。 在第三方代码或插件中使用，以确保其代码不会对宿主环境造成潜在的安全漏洞或冲突。 在应用程序中执行用户提供的代码，例如在线代码编辑器或脚本执行环境，以防止恶意代码对用户数据或系统进行攻击。 在浏览器中执行不受信任的代码，例如浏览器插件或扩展，以保护用户的隐私和安全。 JavaScript 沙箱通过限制代码的访问权限、提供隔离的执行环境、使用安全策略和沙箱沙盒技术等手段来实现。常见的 JavaScript 沙箱技术包括沙盒环境、Web Worker、iframe、JavaScript 虚拟机等。这些技术通过限制代码的执行权限、提供独立的运行环境、隔离全局上下文等方式来确保代码的安全执行。 快照沙箱-SnapshotSandbox缺点： 遍历 window 上所有属性，性能差 同一时间只能激活一个微应用 污染全局 window 优点： 可以支持不兼容Proxy的浏览器。 先了解 SnapshotSandbox 的功能 我们激活沙箱后，在 window 上修改的所有属性，都应该存起来，在下一次激活时，需要还原上次在 window 上修改的属性 失活后，应该将 window 还原成激活前的状态 我们来举个例子 1234567891011121314// 激活前window.city = &#x27;Beijing&#x27;// 激活sanbox.active()window.city = &#x27;上海&#x27;// 失活sanbox.inactive()console.log(window.city) // 打印 &#x27;Beijing&#x27;// 再激活console.log(window.city) // 打印 &#x27;上海&#x27; 接下来，实现一个简易版的 SnapshotSandbox SnapshotSandbox 能够还原 window 和记录自己以前的状态，那么就需要两个对象来存储这些信息 1231. windowSnapshot 用来存储沙箱激活前的 window2. modifyPropsMap 用来存储沙箱激活期间，在 window 上修改过的属性 沙箱需要两个方法及作用 12345678910111. sanbox.active() // 激活沙箱 - 保存 window 的快照 - 再次激活时，将 window 还原到上次 active 的状态2. sanbox.inactive() // 失活沙箱 - 记录当前在 window 上修改了的 prop - 还原 window 到 active 之前的状态 我们先来实现沙箱内部细节： 123456789101112131415161718192021222324252627282930313233343536class SnapshotSandbox &#123; constructor() &#123; this.windowSnapshot = &#123;&#125; this.modifyPropsMap = &#123;&#125; &#125; active() &#123; // 1. 保存 window 的快照 for (let prop in window) &#123; if (window.hasOwnProperty(prop)) &#123; this.windowSnapshot[prop] = window[prop] &#125; &#125; // 2. 再次激活时，将 window 还原到上次 active 的状态，modifyPropsMap 存储了上次 active 时在 widow 上修改了哪些属性 Object.keys(modifyPropsMap).forEach(prop =&gt; &#123; window[prop] = this.modifyPropsMap[prop] &#125;) &#125; inactive() &#123; for(let prop in window) &#123; if (window.hasOwnProperty(prop)) &#123; // 两者不相同，表示修改了某个 prop 记录当前在 window 上修改了的 prop if (window[prop] !== this.windowSnapshot[prop]) &#123; this.modifyPropsMap[prop] = window[prop] &#125; // 还原 window window[prop] = this.windowSnapshot[prop] &#125; &#125; &#125;&#125; 我们来验证一下，首先设置 window.city 一个初始值 beijing，然后初始化 沙箱，在第一次激活后，修改了 window.city 为 上海，那么应该在失活后，打印 beijing，再次激活时，window.city 是 上海 12345678910111213141516171819202122232425window.city = &#x27;beijing&#x27;const ss = new SnapshotSandbox()console.log(&#x27;window.city0 &#x27;, window.city)ss.active() // 激活window.city = &#x27;上海&#x27;console.log(&#x27;window.city1 &#x27;, window.city) // 上海ss.inactive()console.log(&#x27;window.city2 &#x27;, window.city) // beijingss.active()console.log(&#x27;window.city3 &#x27;, window.city) // 上海ss.inactive()console.log(&#x27;window.city4 &#x27;, window.city) // beijingss.active()console.log(&#x27;window.city5 &#x27;, window.city) // 上海 不支持多个应用同时运行，因为污染了全局 window 123456789101112window.city = &#x27;beijing&#x27;const ss = new SnapshotSandbox()ss.active() // 激活window.city = &#x27;上海&#x27;const ss1 = new SnapshotSandbox()ss1.active() // 激活window.city = &#x27;广州&#x27;console.log(window.city) // 广州 Legacy沙箱-LegacySandbox（单例） 不需要遍历 window 上的所有属性，性能比快照沙箱要好 基于 proxy 实现，依然操作了 window，污染了全局，同一时间只能运行一个应用 兼容性没有快照沙箱好 功能和 快照沙箱 一样，但内部实现是通过 proxy 实现的。 1234567891011121314151617181920212223export default class LegacySandbox &#123; /** 沙箱期间新增的全局变量 */ private addedPropsMapInSandbox = new Map(); /** 沙箱期间更新的全局变量 */ private modifiedPropsOriginalValueMapInSandbox = new Map(); /** 持续记录更新的(新增和修改的)全局变量的 map，用于在任意时刻做 snapshot */ private currentUpdatedPropsValueMap = new Map(); active() &#123; //... &#125; inactive() &#123; //... &#125; constructor() &#123; // ... &#125;&#125; ProxySandbox 沙箱（多例） 基于 proxy 代理对象，不需要遍历 window，性能要比快照沙箱好 支持多个应用 没有污染全局 window 应用失活后，依然可以获取到激活时定义的属性。 主要实现在 constructor 中，创建一个 fakeWindow 对象，通过 Proxy 代理这个对象，全程没有改变 window 只是在获取属性值的时候，如果在代理对象上没有找到想要的属性，才回去 window 中查找。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657class ProxySandbox &#123; constructor() &#123; // 沙箱是否是激活状态 this.isRunning = false const fakeWindow = Object.create(null) const _this = this this.proxyWindow = new Proxy(fakeWindow, &#123; set(target, prop, value) &#123; // 只有激活状态下，才做处理 if (_this.isRunning) &#123; target[prop] = value return true &#125; &#125;, get(target, prop, reciver) &#123; // 如果fakeWindow里面有，就从fakeWindow里面取，否则，就从外部的window里面取 return prop in target ? target[prop] : window[prop] &#125; &#125;) &#125; active() &#123; this.isRunning = true &#125; inactive() &#123; this.isRunning = false &#125;&#125;window.city = &#x27;北京&#x27;const p1 = new ProxySandbox()const p2 = new ProxySandbox()// 激活p1.active()p2.active()p1.proxyWindow.city = &#x27;上海&#x27;p2.proxyWindow.city = &#x27;杭州&#x27;console.log(p1.proxyWindow.city) // &#x27;上海&#x27;console.log(p2.proxyWindow.city) // &#x27;杭州&#x27;console.log(window.city) // 北京// 失活p1.inactive()p2.inactive()console.log(p1.proxyWindow.city) // &#x27;上海&#x27;console.log(p2.proxyWindow.city) // &#x27;杭州&#x27;console.log(window.city) // &#x27;北京&#x27; 应用间通信我们可以通过 initGlobalState 来定义全局状态，并返回通信方法，建议在主应用使用，微应用通过 props 获取通信方法。 1234import &#123; initGlobalState, MicroAppStateActions &#125; from &#x27;qiankun&#x27;;// 初始化 stateconst actions: MicroAppStateActions = initGlobalState(state); 微应用可以在导出的 mounted 钩子函数中获取 props，这个 props 中就包含了 onGlobalStateChange 和 setGlobalState 方法，当我们通过 setGlobalState 去设置全局的状态，就会触发 onGlobalStateChange 方法。 123export async function mount(props) &#123; console.log(&#x27;[vue] props from main framework&#x27;, props);&#125; offGlobalStateChange: () =&gt; boolean，移除当前应用的状态监听，微应用 umount 时会默认调用 在微应用中监听全局状态微应用 index.js 12345678910111213141516171819202122function watchGlobalStateChange(props) &#123; props.onGlobalStateChange &amp;&amp; props.onGlobalStateChange( (value, prev) =&gt; console.log(`[监听 - $&#123;props.name&#125;]:`, value, prev), true, // true 立即触发 callback ); // 两秒过后，更新全局状态，首先会触发主应用的 `onGlobalStateChange` callback // 接着会触发上面定义的 onGlobalStateChange callback setTimeout(() =&gt; &#123; props.setGlobalState &amp;&amp; props.setGlobalState(&#123; app: &#123; name: props.name, &#125;, &#125;); &#125;, 2000);&#125;export async function mount(props) &#123; watchGlobalStateChange(props) render(props)&#125; qiankun 的样式问题如果不启动样式隔离，主应用、子应用所有的样式都是全局环境下，意味着，如果我在主应用里面设置了高权重的 css 样式，是会直接影响到子应用的。 12345678// 主应用 main.cssh1 &#123; color: red !important;&#125;button &#123; background-color: red !important;&#125; 主应用、子应用所有的 h1 和 button 都会应用以上颜色。 当然我们不能这样做，我们的应用间样式应该独立，不能互相影响。可以通过 BEM 解决，不过在大型项目下，约定是一件很不靠谱的事情，最好是在框架中解决此问题，一劳永逸。 qiankun 样式隔离方案 shadow dom（sanbox: strictStyleIsolation） scoped css（sanbox: experimentalStyleIsolation） 在 start 方法中，配置 sanbox 属性，即可开启 css 隔离。 123456// sanbox: boolean | &#123; strictStyleIsolation?: boolean, experimentalStyleIsolation?: boolean &#125;start(&#123; sanbox: true&#125;) strictStyleIsolation strictStyleIsolation 模式下 qiankun 会为每个微应用的容器包裹上一个 shadow dom 节点，所有的子应用都被 #shadow-root 所包裹，从而确保微应用的样式不会对全局造成影响。 当我们开启了 strictStyleIsolation 模式后，主应用设置的高权重 css 确实没有影响子应用了。但是，但是，咱们去看看 Vue dialog 的样式（别看 React 的，因为React事件在 Shadow DOM 中根本不起作用 😂😂😂） 注意： shadow dom 并不是一个无脑的解决方案，特别是在 React 中，事件的处理可能不那么奏效了😄！ React 官方关于 web component 的解释 乍一看是不是没问题？ 我们摁下电脑的 ESC 键，会触发 是否取消弹窗 的二次确认，你再看看有没有问题？ 样式完全丢失了，这是为什么呢？因为二次确认的 Dialog 是挂在 body 下，而我们整个子应用都被 shadow dom 所包裹，内部的样式对外部的样式起不到任何作用，所以这个弹窗失去了漂亮的外衣了😭😭😭！ 不过，为啥弹窗要挂在 body 下？ 这个是为了避免被父元素的样式影响，比如父元素设置了 display:none，那么这个弹窗也是无法展示的。 experimentalStyleIsolation experimentalStyleIsolation 被设置为 true 时，qiankun 会改写子应用所添加的样式为所有样式规则增加一个特殊的选择器规则来限定其影响范围，因此改写后的代码会表达类似为如下结构： 12345678910// 假设应用名是 react16 中的样式是这样.app-main &#123; font-size: 14px;&#125;// ===== 处理后 ======&gt;div[data-qiankun-react16] .app-main &#123; font-size: 14px;&#125; 有点类似 Vue 中的 css scoped 作用，给每个子应用加了一个 ”唯一“ 的属性选择器。 这个时候，React 的事件处理没问题了（真好啊😁），我们来到页面上看看效果： 事件是生效了，但是弹窗样式丢失了😭😭😭 这个弹窗是挂在 body 下，而加了 experimentalStyleIsolation 之后，所有的样式都加了 div[data-qiankun=&quot;react16&quot;] 前缀，唯独 body 下的 dialog 没有加前缀，导致无法应用到正确的样式了。(Vue子应用 也有这样的问题!!) 还有就是，在主应用设置的高权重样式依然影响到了子应用。 Vue Scoped在 Vue 的单文件组件中使用 &lt;style scoped&gt; 标签时，Vue 会自动将该样式应用于当前组件的元素，并在编译过程中为每个 CSS 规则添加一个唯一的属性选择器，以确保样式仅对当前组件有效。 1234567891011h3 &#123; background-color: pink; color: blue;&#125;// ======= 使用 style scoped 后 ====&gt;h3[data-v-469af010] &#123; background-color: pink; color: blue;&#125; CSS Modules要使用 CSS Modules，首先要改造 webpack.config.js，修改 css-loader 部分 12345678910// webpack.config.js&#123; test: /\\.(le|c)ss$/, use: [&#x27;style-loader&#x27;, &#123; loader: &#x27;css-loader&#x27;, options: &#123; modules: true // 开启 css modules &#125; &#125;, &#x27;less-loader&#x27;],&#125;, 然后定义 模块 css index.module.css 1234567.text-color &#123; color: red;&#125;.text-gb &#123; background-color: pink;&#125; 使用的时候，导入 index.module.css 12345import styles from &#x27;./index.module.css&#x27;&lt;div className=&#123;styles[&#x27;text-bg&#x27;]&#125;&gt; &lt;span className=&#123;styles[&#x27;text-color&#x27;]&#125;&gt;CSS Modules&lt;/span&gt;&lt;/div&gt; 我们再查看页面上的元素，看看样式长什么样: 使用 CSS Modules 之后，选择器名字上加了 hash。 既然 父元素 class name 用 css modules 加上了 hash，那么内部元素的 class name 该怎么用怎么用，不使用 模块CSS 中的样式也是 OK 的。 css modules 和 scoped css 差不多，都能实现组件级别样式隔离，能设置子组件和全局样式，只是实现方式不同，导致了使用起来也有差异。 那么 qiankun 的样式隔离还有必要做吗老项目还是可以用的，比如 JQuery 这种，qiankun 的样式隔离能用。 如果要在 JQuery 这种项目中使用 CSS Module、CSS in JS，可能改造成本有点大了。 只是现在的应用，不管是 vue 还是 react 基本都开启了组件级别样式隔离，qiankun 自带的样式隔离问题太多了，不能用了。 CSS 沙箱解决方案在前端开发中，为了实现 CSS 的沙箱化，即将某个 CSS 样式应用于特定的范围而不影响其他元素，可以采用以下几种实现方案： 命名约定（BEM）：通过给特定范围内的元素添加特定的类名或命名前缀，然后在 CSS 中通过类选择器或属性选择器来应用相应的样式。这种方式需要在开发过程中遵循命名约定，确保样式只作用于指定的元素，避免与其他元素产生冲突。 123456789&lt;div class=&quot;block&quot;&gt; &lt;div class=&quot;block__element&quot;&gt;&lt;/div&gt; &lt;div class=&quot;block__element--modifier&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;header-section&quot;&gt; &lt;div class=&quot;header-section__logo&quot;&gt;&lt;/div&gt; &lt;div class=&quot;header-section__menu&quot;&gt;&lt;/div&gt;&lt;/div&gt; CSS Modules：CSS Modules 是一种在构建过程中将 CSS 样式模块化的解决方案。它通过为每个模块生成唯一的类名，将样式限定在模块的范围内。在使用 CSS Modules 时，可以在 JavaScript 代码中导入样式文件，并通过类名来引用特定的样式，从而实现样式的沙箱化。 要使用 CSS Modules，需要在 css-loader 中开启 module： 12345678910// webpack.config.js&#123; test: /\\.(le|c)ss$/, use: [&#x27;style-loader&#x27;, &#123; loader: &#x27;css-loader&#x27;, options: &#123; modules: true // 开启 css modules &#125; &#125;, &#x27;less-loader&#x27;],&#125; Button.module.css 12345678.button &#123; background-color: blue; color: white;&#125;.button--disabled &#123; opacity: 0.5;&#125; App.js 12345678910111213141516171819import React from &#x27;react&#x27;;import styles from &#x27;./Button.module.css&#x27;;interface ButtonProps &#123; disabled?: boolean; onClick: () =&gt; void;&#125;const Button: React.FC&lt;ButtonProps&gt; = (&#123; disabled, onClick, children &#125;) =&gt; &#123; const buttonClasses = `$&#123;styles.button&#125; $&#123;disabled ? styles[&#x27;button--disabled&#x27;] : &#x27;&#x27;&#125;`; return ( &lt;button className=&#123;buttonClasses&#125; onClick=&#123;onClick&#125; disabled=&#123;disabled&#125;&gt; &#123;children&#125; &lt;/button&gt; );&#125;;export default Button; CSS-in-JS：CSS-in-JS 是一种将 CSS 样式写在 JavaScript 代码中的方式，通过将样式与组件绑定在一起，实现了样式的局部化和沙箱化。常见的 CSS-in-JS 解决方案包括 styled-components、Emotion、CSS Modules with React 等。 12345678910111213141516171819202122232425262728293031import React from &#x27;react&#x27;;import styled from &#x27;styled-components&#x27;;const Button = styled.button` background-color: blue; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; &amp;:hover &#123; background-color: darkblue; &#125; &amp;:disabled &#123; opacity: 0.5; cursor: not-allowed; &#125;`;const ExampleComponent = () =&gt; &#123; return ( &lt;div&gt; &lt;Button onClick=&#123;() =&gt; console.log(&#x27;Button clicked&#x27;)&#125;&gt;Click me&lt;/Button&gt; &lt;Button disabled&gt;Disabled Button&lt;/Button&gt; &lt;/div&gt; );&#125;;export default ExampleComponent; 在使用 CSS-in-JS 的方案中，样式是通过 JavaScript 运行时动态生成的，每个组件都具有自己独特的样式，并且不会与其他组件的样式发生冲突。这种方式提供了更好的样式隔离和组件化能力，并且使得样式与组件的代码更紧密集成在一起，提高了可维护性和可读性。 Shadow DOM：Shadow DOM 是 Web 标准中的一个技术，可以创建一个隔离的 DOM 子树，其中的样式和脚本不会影响到外部的 DOM。通过在元素上应用 Shadow DOM，可以将样式限定在 Shadow DOM 内部，实现样式的沙箱化。Shadow DOM 主要用于 Web 组件开发，可以实现组件样式的封装和隔离。 这些方案各有特点，选择合适的方案取决于具体的需求和项目情况。命名约定是最简单的方式，适用于小型项目和简单的样式隔离。CSS Modules 和 CSS-in-JS 提供了更丰富的功能和工具支持，适用于中大型项目和复杂的样式需求。Shadow DOM 则主要应用于 Web 组件开发，提供了更强大的封装和隔离能力。 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;style&gt; .outer &#123; background-color: pink; padding: 20px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;outer&quot;&gt; &lt;h2&gt;Outer Component&lt;/h2&gt; &lt;div id=&quot;inner-root&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;script&gt; const outerElement = document.querySelector(&#x27;.outer&#x27;); const innerRoot = document.getElementById(&#x27;inner-root&#x27;); // 创建 Shadow DOM，open 表示可以通过页面内的 JavaScript 方法来获取 Shadow DOM const shadowRoot = innerRoot.attachShadow(&#123; mode: &#x27;open&#x27; &#125;); // 在 Shadow DOM 中创建样式 const style = document.createElement(&#x27;style&#x27;); style.textContent = ` .inner &#123; background-color: aqua; padding: 10px; &#125; `; shadowRoot.appendChild(style); // 在 Shadow DOM 中创建内容 const innerDiv = document.createElement(&#x27;div&#x27;); innerDiv.className = &#x27;inner&#x27;; innerDiv.textContent = &#x27;Inner Component&#x27;; shadowRoot.appendChild(innerDiv); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 微前端框架qiankun、wujie、micro-app 的区别主要还是实现容器（或者叫沙箱）上有区别 qiankun: function + proxy + with micro-app: web components wujie: web components 和 iframe。 微前端（qiankun）架构中，主应用和子应用有共同的组件，如何封装呢？在微前端架构中，主应用和子应用可能会共享一些组件，为了实现组件的共享和封装，可以采用以下方法： 封装为独立的 npm 包：将共享的组件封装为独立的 npm 包，并发布到私有或公共的 npm 仓库中。主应用和子应用都可以通过 npm 安装该组件，并在需要的地方引入和使用。 Git 仓库依赖：将共享组件放置在一个独立的 Git 仓库中，并通过 Git 仓库的依赖关系来引入组件。主应用和子应用可以通过 Git 仓库的 URL 或路径来引入共享组件。 Git Submodule：如果主应用和子应用都在同一个 Git 仓库下，可以使用 Git Submodule 的方式来引入共享组件。将共享组件作为子模块添加到主应用和子应用的仓库中。 本地引用：如果主应用和子应用处于同一个代码仓库中，可以直接通过相对路径引入共享组件。将共享组件放置在一个独立的目录下，并通过相对路径引用。 无论选择哪种方式，关键是要保持共享组件的独立性和可维护性。确保共享组件的代码和样式与具体的主应用和子应用解耦，避免出现冲突和依赖混乱的情况。同时，建议对共享组件进行版本管理，以便在更新和维护时能够更好地控制和追踪变更。 在微前端架构中，可以通过合适的方式引入共享组件，使主应用和子应用可以共享和复用组件，提高开发效率和代码质量。 monorepo架构Monorepo 模式也可以解决微前端中的公共依赖包和公共组件的问题。 Monorepo 模式是指将多个项目或应用放置在同一个代码仓库中管理的开发模式。 在 Monorepo 中，可以将公共依赖包和公共组件作为共享资源，放置在代码仓库的合适位置，供不同的项目或应用使用。这样可以避免不同项目之间重复安装和维护相同的依赖包，也能够统一管理和更新公共组件。 以下是 Monorepo 模式下解决微前端中公共依赖包和公共组件的方式： 公共依赖包管理：将公共的依赖包放置在代码仓库的根目录或指定目录下，通过工具如 Yarn 或 Lerna 管理依赖包的安装、更新和版本控制。不同的项目或应用可以通过引用共享的依赖包来解决依赖关系，避免重复安装和冲突。 公共组件封装：将公共的组件封装为独立的包或模块，放置在代码仓库的特定目录中，并通过工具如 NPM 发布和安装。不同的项目或应用可以通过引用共享的组件来实现组件的复用和共享，提高开发效率和代码一致性。 通过 Monorepo 模式，可以集中管理和维护公共依赖包和公共组件，减少重复工作和资源浪费。同时，还能够促进团队协作和代码共享，统一规范和风格，提高整体项目的质量和可维护性。","categories":[],"tags":[{"name":"微前端","slug":"微前端","permalink":"http://yoursite.com/tags/%E5%BE%AE%E5%89%8D%E7%AB%AF/"}]},{"title":"Vue3项目实战(六)：通用功能开发(二)","slug":"vue3-project-generalModule2","date":"2023-01-01T06:53:36.000Z","updated":"2024-06-11T08:52:17.354Z","comments":true,"path":"/post/vue3-project-generalModule2.html","link":"","permalink":"http://yoursite.com/post/vue3-project-generalModule2.html","excerpt":"screenfull/headerSearch/tagView/guide","text":"screenfull对于 screenfull 和之前一样 ，我们还是先分析它的原理，然后在制定对应的方案实现 原理： 对于 screenfull 而言，浏览器本身已经提供了对用的 API，点击这里即可查看，这个 API 中，主要提供了两个方法： Document.exitFullscreen()：该方法用于请求从全屏模式切换到窗口模式 Element.requestFullscreen()：该方法用于请求浏览器（user agent）将特定元素（甚至延伸到它的后代元素）置为全屏模式 比如我们可以通过 document.getElementById(&#39;app&#39;).requestFullscreen() 在获取 id=app 的 DOM 之后，把该区域置为全屏 但是该方法存在一定的小问题，兼容性也不是那么好。 所以通常情况下我们不会直接使用该 API 来去实现全屏效果，而是会使用它的包装库 screenfull 整体的方案实现分为两步： 封装 screenfull 组件 展示切换按钮 基于 screenfull 实现切换功能 在 navbar 中引入该组件 明确好了方案之后，接下来我们就落地该方案 封装 screenfull 组件： 下来依赖包 screenfull 1npm i screenfull@5.1.0 -S 创建 components/Screenfull/index 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;template&gt; &lt;div&gt; &lt;svg-icon :icon=&quot;isFullscreen ? &#x27;exit-fullscreen&#x27; : &#x27;fullscreen&#x27;&quot; @click=&quot;onToggle&quot; /&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; ref, onMounted, onUnmounted &#125; from &#x27;vue&#x27;import screenfull from &#x27;screenfull&#x27;// 是否全屏const isFullscreen = ref(false)// 切换事件const onToggle = () =&gt; &#123; if (screenfull.isEnabled) &#123; screenfull.toggle() &#125;&#125;// 监听变化const change = () =&gt; &#123; if (screenfull.isEnabled) &#123; isFullscreen.value = screenfull.isFullscreen &#125;&#125;// 设置侦听器onMounted(() =&gt; &#123; if (screenfull.isEnabled) &#123; screenfull.on(&#x27;change&#x27;, change) &#125;&#125;)// 删除侦听器onUnmounted(() =&gt; &#123; if (screenfull.isEnabled) &#123; screenfull.off(&#x27;change&#x27;, change) &#125;&#125;)&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt; 在 navbar 中引入该组件： 12345&lt;screenfull class=&quot;right-menu-item hover-effect&quot; /&gt;...import Screenfull from &#x27;@/components/Screenfull&#x27; headerSeach 所谓 headerSearch 一般是指 页面搜索 原理： headerSearch 是复杂后台系统中非常常见的一个功能，它可以：在指定搜索框中对当前应用中所有页面进行检索，以 select 的形式展示出被检索的页面，以达到快速进入的目的 那么明确好了 headerSearch 的作用之后，接下来我们来看一下对应的实现原理 根据前面的目的我们可以发现，整个 headerSearch 其实可以分为三个核心的功能点： 根据指定内容对所有页面进行检索 以 select 形式展示检索出的页面 通过检索页面可快速进入对应页面 那么围绕着这三个核心的功能点，我们想要分析它的原理就非常简单了：根据指定内容检索所有页面，把检索出的页面以 select 展示，点击对应 option 可进入到指定页面 方案： 对照着三个核心功能点和原理，想要指定对应的实现方案是非常简单的一件事情了 创建 headerSearch 组件，用作样式展示和用户输入内容获取 获取所有的页面数据，用作被检索的数据源 根据用户输入内容在数据源中进行模糊搜索(https://fusejs.io/) 把搜索到的内容以 select 进行展示 监听 select 的 change 事件，完成对应跳转 headerSearch 组件创建 components/headerSearch/index 组件，当点击搜索图标时，通过 transition 动画，将其长度展示出来，并且自动聚焦 focus(): 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889&lt;template&gt; &lt;div :class=&quot;&#123; show: isShow &#125;&quot; class=&quot;header-search&quot;&gt; &lt;svg-icon class-name=&quot;search-icon&quot; icon=&quot;search&quot; @click.stop=&quot;onShowClick&quot; /&gt; &lt;el-select ref=&quot;headerSearchSelectRef&quot; class=&quot;header-search-select&quot; v-model=&quot;search&quot; filterable default-first-option remote placeholder=&quot;Search&quot; :remote-method=&quot;querySearch&quot; @change=&quot;onSelectChange&quot; &gt; &lt;el-option v-for=&quot;option in 5&quot; :key=&quot;option&quot; :label=&quot;option&quot; :value=&quot;option&quot; &gt;&lt;/el-option&gt; &lt;/el-select&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; ref &#125; from &#x27;vue&#x27;// 控制 search 显示const isShow = ref(false)// el-select 实例const headerSearchSelectRef = ref(null)const onShowClick = () =&gt; &#123; isShow.value = !isShow.value headerSearchSelectRef.value.focus()&#125;// search 相关const search = ref(&#x27;&#x27;)// 搜索方法const querySearch = () =&gt; &#123; console.log(&#x27;querySearch&#x27;)&#125;// 选中回调const onSelectChange = () =&gt; &#123; console.log(&#x27;onSelectChange&#x27;)&#125;&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;.header-search &#123; font-size: 0 !important; .search-icon &#123; cursor: pointer; font-size: 18px; vertical-align: middle; &#125; .header-search-select &#123; font-size: 18px; transition: width 0.2s; // width 动画 width: 0; overflow: hidden; background: transparent; border-radius: 0; display: inline-block; vertical-align: middle; ::v-deep .el-input__inner &#123; border-radius: 0; border: 0; padding-left: 0; padding-right: 0; box-shadow: none !important; border-bottom: 1px solid #d9d9d9; vertical-align: middle; &#125; &#125; &amp;.show &#123; .header-search-select &#123; width: 210px; margin-left: 10px; &#125; &#125;&#125;&lt;/style&gt; 在 navbar 中导入该组件 12345&lt;header-search class=&quot;right-menu-item hover-effect&quot;&gt;&lt;/header-search&gt;...import HeaderSearch from &#x27;@/components/HeaderSearch/index.vue&#x27; 获取数据源在有了 headerSearch 之后，接下来就可以来处理对应的 检索数据源了 检索数据源 表示：有哪些页面希望检索 那么对于我们当前的业务而言，我们希望被检索的页面其实就是左侧菜单中的页面，那么我们检索数据源即为：左侧菜单对应的数据源 根据以上原理，我们可以得出以下代码： 1234567891011121314&lt;script setup&gt;import &#123; ref, computed &#125; from &#x27;vue&#x27;import &#123; filterRouters, generateMenus &#125; from &#x27;@/utils/route&#x27;import &#123; useRouter &#125; from &#x27;vue-router&#x27;...// 检索数据源const router = useRouter()const searchPool = computed(() =&gt; &#123; const filterRoutes = filterRouters(router.getRoutes()) console.log(generateMenus(filterRoutes)) return generateMenus(filterRoutes)&#125;)console.log(searchPool)&lt;/script&gt; 模糊搜索Fuse.js Fuse.js is a powerful, lightweight fuzzy-search library, with zero dependencies. 如果我们想要进行 模糊搜索 的话，那么需要依赖一个第三方的库 fuse.js 它是0️⃣依赖的，专门处理模糊搜索的库。 Why should I use it? 使用 Fuse.js，您不需要仅仅为了处理搜索而设置专用的后端。 简单性和性能是开发这个库的主要标准。 安装 fuse.js 1npm install --save fuse.js@6.4.6 初始化 Fuse，更多初始化配置项 可点击这里 12345678910111213141516171819202122232425import Fuse from &#x27;fuse.js&#x27;/*** 搜索库相关*/const fuse = new Fuse(list, &#123; // 是否按优先级进行排序 shouldSort: true, // 匹配长度超过这个值的才会被认为是匹配的 minMatchCharLength: 1, // 将被搜索的键列表。 这支持嵌套路径、加权搜索、在字符串和对象数组中搜索。 // name：搜索的键 // weight：对应的权重 // 表示我们将用户输入的值，与 title 和 path 进行匹配 keys: [ &#123; name: &#x27;title&#x27;, weight: 0.7 &#125;, &#123; name: &#x27;path&#x27;, weight: 0.3 &#125; ] &#125;) 参考 Fuse Demo 与 最终效果，可以得出，我们最终期望得到如下的检索数据源结构 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748[ &#123; &quot;path&quot;:&quot;/my&quot;, &quot;title&quot;:[ &quot;个人中心&quot; ] &#125;, &#123; &quot;path&quot;:&quot;/user&quot;, &quot;title&quot;:[ &quot;用户&quot; ] &#125;, &#123; &quot;path&quot;:&quot;/user/manage&quot;, &quot;title&quot;:[ &quot;用户&quot;, &quot;用户管理&quot; ] &#125;, &#123; &quot;path&quot;:&quot;/user/info&quot;, &quot;title&quot;:[ &quot;用户&quot;, &quot;用户信息&quot; ] &#125;, &#123; &quot;path&quot;:&quot;/article&quot;, &quot;title&quot;:[ &quot;文章&quot; ] &#125;, &#123; &quot;path&quot;:&quot;/article/ranking&quot;, &quot;title&quot;:[ &quot;文章&quot;, &quot;文章排名&quot; ] &#125;, &#123; &quot;path&quot;:&quot;/article/create&quot;, &quot;title&quot;:[ &quot;文章&quot;, &quot;创建文章&quot; ] &#125;] 所以我们之前处理了的数据源并不符合我们的需要，所以我们需要对数据源进行重新处理 数据源重处理，生成 searchPool我们明确了最终我们期望得到数据源结构，那么接下来我们就对重新计算数据源，生成对应的 searchPoll 创建 components/HeaderSearch/FuseData.js 123456789101112131415161718192021222324252627282930313233343536373839import path from &#x27;path&#x27;import i18n from &#x27;@/i18n&#x27;/** * 筛选出可供搜索的路由对象 * @param routes 路由表 * @param basePath 基础路径，默认为 / * @param prefixTitle 父级title，子集title集合 [文章，文章排名] */export const generateRoutes = (routes, basePath = &#x27;/&#x27;, prefixTitle = []) =&gt; &#123; // 创建 result 数据 let res = [] // 循环 routes 路由 for (const route of routes) &#123; // 创建包含 path 和 title 的 item const data = &#123; path: path.resolve(basePath, route.path), title: [...prefixTitle] &#125; // 当前存在 meta 时，使用 i18n 解析国际化数据，组合成新的 title 内容 // 动态路由不允许被搜索（类似：user/:id 这种） // 匹配动态路由的正则 const re = /.*\\/:.*/ if (route.meta &amp;&amp; route.meta.title &amp;&amp; !re.exec(route.path)) &#123; const i18ntitle = i18n.global.t(`msg.route.$&#123;route.meta.title&#125;`) data.title = [...data.title, i18ntitle] res.push(data) &#125; // 存在 children 时，迭代调用 if (route.children) &#123; const tempRoutes = generateRoutes(route.children, data.path, data.title) if (tempRoutes.length &gt;= 1) &#123; res = [...res, ...tempRoutes] &#125; &#125; &#125; return res&#125; 这样，我们就通过 generateRoutes 方法，根据咱们的路由表，生成了符合 fuse.js 的数据。 在 headerSearch 中导入 generateRoutes 12345678910111213141516171819202122&lt;script setup&gt;import &#123; computed, ref &#125; from &#x27;vue&#x27;import &#123; generateRoutes &#125; from &#x27;./FuseData&#x27;import Fuse from &#x27;fuse.js&#x27;import &#123; filterRouters &#125; from &#x27;@/utils/route&#x27;import &#123; useRouter &#125; from &#x27;vue-router&#x27;...// 检索数据源const router = useRouter()const searchPool = computed(() =&gt; &#123; const filterRoutes = filterRouters(router.getRoutes()) return generateRoutes(filterRoutes)&#125;)/** * 搜索库相关 */const fuse = new Fuse(searchPool.value, &#123; ...&#125;)&lt;/script&gt; 通过 querySearch 测试搜索结果 1234// 搜索方法const querySearch = query =&gt; &#123; console.log(fuse.search(query))&#125; 渲染检索数据数据源处理完成之后，最后我们就只需要完成: 渲染检索出的数据 完成对应跳转 那么下面我们按照步骤进行实现： 渲染检索出的数据 123456789101112131415161718192021222324&lt;template&gt; &lt;el-option v-for=&quot;option in searchOptions&quot; :key=&quot;option.item.path&quot; :label=&quot;option.item.title.join(&#x27; &gt; &#x27;)&quot; :value=&quot;option.item&quot; &gt;&lt;/el-option&gt;&lt;/template&gt;&lt;script setup&gt;...// 搜索结果const searchOptions = ref([])// 搜索方法const querySearch = query =&gt; &#123; if (query !== &#x27;&#x27;) &#123; searchOptions.value = fuse.search(query) &#125; else &#123; searchOptions.value = [] &#125;&#125;...&lt;/script&gt; 完成对应跳转 123const onSelectChange = val =&gt; &#123; router.push(val.path)&#125; 剩余问题处理这里我们的 headerSearch 功能基本上就已经处理完成了，但是还存在一些小 bug ，那么最后这一小节我们就处理下这些剩余的 bug 在 search 打开时，点击 body 关闭 search 在 search 关闭时，清理 searchOptions headerSearch 应该具备国际化能力 明确好问题之后，接下来我们进行处理 首先我们先处理前前面两个问题： 123456789101112131415161718/** * 关闭 search 的处理事件 */const onClose = () =&gt; &#123; headerSearchSelectRef.value.blur() isShow.value = false searchOptions.value = []&#125;/** * 监听 search 打开，处理 close 事件 */watch(isShow, val =&gt; &#123; if (val) &#123; document.body.addEventListener(&#x27;click&#x27;, onClose) &#125; else &#123; document.body.removeEventListener(&#x27;click&#x27;, onClose) &#125;&#125;) 接下来是国际化的问题，想要处理这个问题非常简单，我们只需要：监听语言变化，重新计算数据源初始化 fuse 即可 在 utils/i18n 下，新建方法 watchSwitchLang 12345678910111213import &#123; watch &#125; from &#x27;vue&#x27;import store from &#x27;@/store&#x27;type IProps = ((lang: string) =&gt; void)[]export default function watchSwitchLang(...cbs: IProps) &#123; watch( () =&gt; store.getters.language, () =&gt; &#123; cbs.forEach(cb =&gt; cbs.forEach(cb =&gt; cb(store.getters.language))) &#125; )&#125; 在 headerSearch 监听变化，重新赋值 123456789101112131415161718192021222324252627282930313233&lt;script setup&gt;...import &#123; watchSwitchLang &#125; from &#x27;@/utils/i18n&#x27;...// 检索数据源const router = useRouter()let searchPool = computed(() =&gt; &#123; const filterRoutes = filterRouters(router.getRoutes()) return generateRoutes(filterRoutes)&#125;)/*** 搜索库相关*/let fuseconst initFuse = searchPool =&gt; &#123; fuse = new Fuse(searchPool, &#123; ...&#125;initFuse(searchPool.value)...// 处理国际化watchSwitchLang(() =&gt; &#123; searchPool = computed(() =&gt; &#123; const filterRoutes = filterRouters(router.getRoutes()) return generateRoutes(filterRoutes) &#125;) initFuse(searchPool.value)&#125;)&lt;/script&gt; headerSearch 方案总结那么到这里整个的 headerSearch 我们就已经全部处理完成了，整个 headerSearch 我们只需要把握住三个核心的关键点 根据指定内容对所有页面进行检索 以 select 形式展示检索出的页面 通过检索页面可快速进入对应页面 保证大方向没有错误，那么具体的细节处理我们具体分析就可以了。 关于细节的处理，可能比较复杂的地方有两个： 模糊搜索 检索数据源 对于这两块，我们依赖于 fuse.js 进行了实现，大大简化了我们的业务处理流程。 tagsView 原理及方案分析所谓 tagsView 可以分成两部分来去看： tags view 好像和废话一样是吧。那怎么分开看呢？ 首先我们先来看 tags： 所谓 tgas 指的是：位于 appmain 之上的标签 那么现在我们忽略掉 view，现在只有一个要求： 在 view 之上渲染这个 tag 仅看这一个要求，很简单吧。 views： 明确好了 tags 之后，我们来看 views。 脱离了 tags 只看 views 就更简单了，所谓 views ：指的就是一个用来渲染组件的位置，就像我们之前的 Appmain 一样，只不过这里的 views 可能稍微复杂一点，因为它需要在渲染的基础上增加： 动画 缓存 这两个额外的功能。 加上这两个功能之后可能会略显复杂，但是 官网已经帮助我们处理了这个问题 所以 单看 views 也是一个很简单的功能。 那么接下来我们需要做的就是把 tags 和 view 合并起来而已。 那么明确好了原理之后，我们就来看 实现方案： 创建 tagsView 组件：用来处理 tags 的展示 处理基于路由的动态过渡，在 AppMain 中进行：用于处理 view 的部分 整个的方案就是这么两大部，但是其中我们还需要处理一些细节相关的，完整的方案为： 监听路由变化，组成用于渲染 tags 的数据源 创建 tags 组件，根据数据源渲染 tag，渲染出来的 tags 需要同时具备 国际化 title 路由跳转 处理鼠标右键效果，根据右键处理对应数据源 处理基于路由的动态过渡 那么明确好了方案之后，接下来我们根据方案进行处理即可。 创建 tags 数据源tags 的数据源分为两部分： 保存数据：appmain 组件中进行 展示数据：tags 组件中进行 所以 tags 的数据我们最好把它保存到 vuex 中。 在 constant 中新建常量 12// tagsexport const TAGS_VIEW = &#x27;tagsView&#x27; 在 store/app 中创建 tagsViewList 123456789101112131415161718192021222324252627import &#123; LANG, TAGS_VIEW &#125; from &#x27;@/constant&#x27;import &#123; getItem, setItem &#125; from &#x27;@/utils/storage&#x27;export default &#123; namespaced: true, state: () =&gt; (&#123; ... tagsViewList: getItem(TAGS_VIEW) || [] &#125;), mutations: &#123; ... /** * 添加 tags */ addTagsViewList(state, tag) &#123; const isFind = state.tagsViewList.find(item =&gt; &#123; return item.path === tag.path &#125;) // 处理重复 if (!isFind) &#123; state.tagsViewList.push(tag) setItem(TAGS_VIEW, state.tagsViewList) &#125; &#125; &#125;, actions: &#123;&#125;&#125; 在 appmain 中监听路由的变化 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;script setup&gt;import &#123; watch &#125; from &#x27;vue&#x27;import &#123; isTags &#125; from &#x27;@/utils/tags&#x27;import &#123; generateTitle &#125; from &#x27;@/utils/i18n&#x27;import &#123; useRoute &#125; from &#x27;vue-router&#x27;import &#123; useStore &#125; from &#x27;vuex&#x27;const route = useRoute()/** * 生成 title */const getTitle = route =&gt; &#123; let title = &#x27;&#x27; if (!route.meta) &#123; // 处理无 meta 的路由 const pathArr = route.path.split(&#x27;/&#x27;) title = pathArr[pathArr.length - 1] &#125; else &#123; title = generateTitle(route.meta.title) &#125; return title&#125;/** * 监听路由变化 */const store = useStore()watch( route, (to, from) =&gt; &#123; if (!isTags(to.path)) return const &#123; fullPath, meta, name, params, path, query &#125; = to store.commit(&#x27;app/addTagsViewList&#x27;, &#123; fullPath, meta, name, params, path, query, title: getTitle(to) &#125;) &#125;, &#123; immediate: true &#125;)&lt;/script&gt; 创建 utils/tags 1234567891011const whiteList = [&#x27;/login&#x27;, &#x27;/import&#x27;, &#x27;/404&#x27;, &#x27;/401&#x27;]/** * path 是否需要被缓存 * @param &#123;*&#125; path * @returns */export function isTags(path) &#123; return !whiteList.includes(path)&#125; 生成 tagsView目前数据已经被保存到 store 中，那么接下来我们就依赖数据渲染 tags 创建 store/app 中 tagsViewList 的快捷访问 1tagsViewList: state =&gt; state.app.tagsViewList 创建 components/tagsview 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103&lt;template&gt; &lt;div class=&quot;tags-view-container&quot;&gt; &lt;router-link class=&quot;tags-view-item&quot; :class=&quot;isActive(tag) ? &#x27;active&#x27; : &#x27;&#x27;&quot; :style=&quot;&#123; backgroundColor: isActive(tag) ? $store.getters.cssVar.menuBg : &#x27;&#x27;, borderColor: isActive(tag) ? $store.getters.cssVar.menuBg : &#x27;&#x27; &#125;&quot; v-for=&quot;(tag, index) in $store.getters.tagsViewList&quot; :key=&quot;tag.fullPath&quot; :to=&quot;&#123; path: tag.fullPath &#125;&quot; &gt; &#123;&#123; tag.title &#125;&#125; &lt;i v-show=&quot;!isActive(tag)&quot; class=&quot;el-icon-close&quot; @click.prevent.stop=&quot;onCloseClick(index)&quot; /&gt; &lt;/router-link&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; useRoute &#125; from &#x27;vue-router&#x27;const route = useRoute()/** * 是否被选中 */const isActive = tag =&gt; &#123; return tag.path === route.path&#125;/** * 关闭 tag 的点击事件 */const onCloseClick = index =&gt; &#123;&#125;&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;.tags-view-container &#123; height: 34px; width: 100%; background: #fff; border-bottom: 1px solid #d8dce5; box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.12), 0 0 3px 0 rgba(0, 0, 0, 0.04); .tags-view-item &#123; display: inline-block; position: relative; cursor: pointer; height: 26px; line-height: 26px; border: 1px solid #d8dce5; color: #495060; background: #fff; padding: 0 8px; font-size: 12px; margin-left: 5px; margin-top: 4px; &amp;:first-of-type &#123; margin-left: 15px; &#125; &amp;:last-of-type &#123; margin-right: 15px; &#125; &amp;.active &#123; color: #fff; &amp;::before &#123; content: &#x27;&#x27;; background: #fff; display: inline-block; width: 8px; height: 8px; border-radius: 50%; position: relative; margin-right: 4px; &#125; &#125; // close 按钮 .el-icon-close &#123; width: 16px; height: 16px; line-height: 10px; vertical-align: 2px; border-radius: 50%; text-align: center; transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1); transform-origin: 100% 50%; &amp;:before &#123; transform: scale(0.6); display: inline-block; vertical-align: -3px; &#125; &amp;:hover &#123; background-color: #b4bccc; color: #fff; &#125; &#125; &#125;&#125;&lt;/style&gt; 在 layout/index 中导入 123456789&lt;div class=&quot;fixed-header&quot;&gt; &lt;!-- 顶部的 navbar --&gt; &lt;navbar /&gt; &lt;!-- tags --&gt; &lt;tags-view&gt;&lt;/tags-view&gt;&lt;/div&gt;import TagsView from &#x27;@/components/TagsView&#x27; tagsView 国际化处理tagsView 的国际化处理可以理解为修改现有 tags 的 title。 所以我们只需要： 监听到语言变化 国际化对应的 title 即可 根据方案，可生成如下代码： 在 store/app 中，创建修改 ttile 的 mutations 1234567/*** 为指定的 tag 修改 title*/changeTagsView(state, &#123; index, tag &#125;) &#123; state.tagsViewList[index] = tag setItem(TAGS_VIEW, state.tagsViewList)&#125; 在 appmain 中监听语言变化 12345678910111213141516import &#123; generateTitle, watchSwitchLang &#125; from &#x27;@/utils/i18n&#x27;/** * 国际化 tags */watchSwitchLang(() =&gt; &#123; store.getters.tagsViewList.forEach((route, index) =&gt; &#123; store.commit(&#x27;app/changeTagsView&#x27;, &#123; index, tag: &#123; ...route, title: getTitle(route) &#125; &#125;) &#125;)&#125;) contextMenu 展示处理 contextMenu 为 鼠标右键事件 contextMenu 事件的处理分为两部分： contextMenu 的展示 右键项对应逻辑处理 那么这一小节我们先处理第一部分：contextMenu 的展示： 创建 components/TagsView/ContextMenu 组件，作为右键展示部分 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&lt;template&gt; &lt;ul class=&quot;context-menu-container&quot;&gt; &lt;li @click=&quot;onRefreshClick&quot;&gt; &#123;&#123; $t(&#x27;msg.tagsView.refresh&#x27;) &#125;&#125; &lt;/li&gt; &lt;li @click=&quot;onCloseRightClick&quot;&gt; &#123;&#123; $t(&#x27;msg.tagsView.closeRight&#x27;) &#125;&#125; &lt;/li&gt; &lt;li @click=&quot;onCloseOtherClick&quot;&gt; &#123;&#123; $t(&#x27;msg.tagsView.closeOther&#x27;) &#125;&#125; &lt;/li&gt; &lt;/ul&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; defineProps &#125; from &#x27;vue&#x27;defineProps(&#123; index: &#123; type: Number, required: true &#125;&#125;)const onRefreshClick = () =&gt; &#123;&#125;const onCloseRightClick = () =&gt; &#123;&#125;const onCloseOtherClick = () =&gt; &#123;&#125;&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;.context-menu-container &#123; position: fixed; background: #fff; z-index: 3000; list-style-type: none; padding: 5px 0; border-radius: 4px; font-size: 12px; font-weight: 400; color: #333; box-shadow: 2px 2px 3px 0 rgba(0, 0, 0, 0.3); li &#123; margin: 0; padding: 7px 16px; cursor: pointer; &amp;:hover &#123; background: #eee; &#125; &#125;&#125;&lt;/style&gt; 在 tagsview 中控制 contextMenu 的展示 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;template&gt; &lt;div class=&quot;tags-view-container&quot;&gt; &lt;el-scrollbar class=&quot;tags-view-wrapper&quot;&gt; &lt;router-link ... @contextmenu.prevent=&quot;openMenu($event, index)&quot; &gt; ... &lt;/el-scrollbar&gt; &lt;context-menu v-show=&quot;visible&quot; :style=&quot;menuStyle&quot; :index=&quot;selectIndex&quot; &gt;&lt;/context-menu&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import ContextMenu from &#x27;./ContextMenu.vue&#x27;import &#123; ref, reactive, watch &#125; from &#x27;vue&#x27;import &#123; useRoute &#125; from &#x27;vue-router&#x27;...// contextMenu 相关const selectIndex = ref(0)const visible = ref(false)const menuStyle = reactive(&#123; left: 0, top: 0&#125;)/** * 展示 menu */const openMenu = (e, index) =&gt; &#123; const &#123; x, y &#125; = e menuStyle.left = x + &#x27;px&#x27; menuStyle.top = y + &#x27;px&#x27; selectIndex.value = index visible.value = true&#125;&lt;/script&gt; contextMenu 事件处理对于 contextMenu 的事件一共分为三个： 刷新 关闭右侧 关闭所有 但是不要忘记，我们之前 关闭单个 tags 的事件还没有进行处理，所以这一小节我们一共需要处理 4 个对应的事件 刷新事件 1234const router = useRouter()const onRefreshClick = () =&gt; &#123; router.go(0)&#125; 在 store/app 中，创建删除 tags 的 mutations，该 mutations 需要同时具备以下三个能力： 删除 “右侧” 删除 “其他” 删除 “当前” 根据以上理论得出以下代码： 12345678910111213141516171819202122/*** 删除 tag* @param &#123;type: &#x27;other&#x27;||&#x27;right&#x27;||&#x27;index&#x27;, index: index&#125; payload*/removeTagsView(state, payload) &#123; if (payload.type === &#x27;index&#x27;) &#123; state.tagsViewList.splice(payload.index, 1) return &#125; else if (payload.type === &#x27;other&#x27;) &#123; state.tagsViewList.splice( payload.index + 1, state.tagsViewList.length - payload.index + 1 ) state.tagsViewList.splice(0, payload.index) &#125; else if (payload.type === &#x27;right&#x27;) &#123; state.tagsViewList.splice( payload.index + 1, state.tagsViewList.length - payload.index + 1 ) &#125; setItem(TAGS_VIEW, state.tagsViewList)&#125;, 关闭右侧事件 1234567const store = useStore()const onCloseRightClick = () =&gt; &#123; store.commit(&#x27;app/removeTagsView&#x27;, &#123; type: &#x27;right&#x27;, index: props.index &#125;)&#125; 关闭其他 123456const onCloseOtherClick = () =&gt; &#123; store.commit(&#x27;app/removeTagsView&#x27;, &#123; type: &#x27;other&#x27;, index: props.index &#125;)&#125; 关闭当前（tagsview） 12345678910/** * 关闭 tag 的点击事件 */const store = useStore()const onCloseClick = index =&gt; &#123; store.commit(&#x27;app/removeTagsView&#x27;, &#123; type: &#x27;index&#x27;, index: index &#125;)&#125; 处理 contextMenu 的关闭行为1234567891011121314151617/** * 关闭 menu */const closeMenu = () =&gt; &#123; visible.value = false&#125;/** * 监听变化 */watch(visible, val =&gt; &#123; if (val) &#123; document.body.addEventListener(&#x27;click&#x27;, closeMenu) &#125; else &#123; document.body.removeEventListener(&#x27;click&#x27;, closeMenu) &#125;&#125;) 处理基于路由的动态过渡处理基于路由的动态过渡 官方已经给出了示例代码，结合 router-view 和 transition 我们可以非常方便的实现这个功能 在 appmain 中处理对应代码逻辑 1234567891011&lt;template&gt; &lt;div class=&quot;app-main&quot;&gt; &lt;router-view v-slot=&quot;&#123; Component, route &#125;&quot;&gt; &lt;transition name=&quot;fade-transform&quot; mode=&quot;out-in&quot;&gt; &lt;keep-alive&gt; &lt;component :is=&quot;Component&quot; :key=&quot;route.path&quot; /&gt; &lt;/keep-alive&gt; &lt;/transition&gt; &lt;/router-view&gt; &lt;/div&gt;&lt;/template&gt; 增加了 tags 之后，app-main 的位置需要进行以下处理 12345678&lt;style lang=&quot;scss&quot; scoped&gt;.app-main &#123; min-height: calc(100vh - 50px - 43px); ... padding: 104px 20px 20px 20px; ...&#125;&lt;/style&gt; 在 styles/transition 中增加动画渲染 123456789101112131415/* fade-transform */.fade-transform-leave-active,.fade-transform-enter-active &#123; transition: all 0.5s;&#125;.fade-transform-enter-from &#123; opacity: 0; transform: translateX(-30px);&#125;.fade-transform-leave-to &#123; opacity: 0; transform: translateX(30px);&#125; tagsView 方案总结那么到这里关于 tagsView 的内容我们就已经处理完成了。 整个 tagsView 就像我们之前说的，拆开来看之后，会显得明确很多。 整个 tagsView 整体来看就是三块大的内容： tags：tagsView 组件 contextMenu：contextMenu 组件 view：appmain 组件 再加上一部分的数据处理即可。 最后关于 tags 的国际化部分，其实处理的方案有非常多，大家也可以在后面的 讨论题 中探讨一下关于 此处国家化 的实现，相信会有很多新的思路被打开的。","categories":[],"tags":[{"name":"工程化,Vue3,通用功能","slug":"工程化-Vue3-通用功能","permalink":"http://yoursite.com/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96-Vue3-%E9%80%9A%E7%94%A8%E5%8A%9F%E8%83%BD/"}]},{"title":"Vue3项目实战(五)：通用功能开发（一）","slug":"vue3-project-generalModule","date":"2022-12-29T03:00:23.000Z","updated":"2024-06-11T08:52:17.354Z","comments":true,"path":"/post/vue3-project-generalModule.html","link":"","permalink":"http://yoursite.com/post/vue3-project-generalModule.html","excerpt":"国际化/换肤","text":"通用功能 国际化 动态换肤 screenfull headerSearch tagView guide 国际化实现原理先来看一个需求： 我们有一个变量 msg ，但是这个 msg 有且只能有两个值： hello world 你好世界 要求：根据需要切换 msg 的值 这样的一个需求就是 国际化 的需求，那么我们可以通过以下代码来实现这个需求 12345678910111213141516171819202122&lt;script&gt; // 1. 定义 msg 值的数据源 const messages = &#123; en: &#123; msg: &#x27;hello world&#x27; &#125;, zh: &#123; msg: &#x27;你好世界&#x27; &#125; &#125; // 2. 定义切换变量 let locale = &#x27;en&#x27; // 3. 定义赋值函数 function t(key) &#123; return messages[locale][key] &#125; // 4. 为 msg 赋值 let msg = t(&#x27;msg&#x27;) console.log(msg); // 修改 locale， 重新执行 t 方法，获取不同语言环境下的值&lt;/script&gt; 总结： 通过一个变量来 控制 语言环境 所有语言环境下的数据源要 预先 定义好 通过一个方法来获取 当前语言 下 指定属性 的值 该值即为国际化下展示值 基于 vue-i18n V9 的国际化实现方案分析在 vue 的项目中，我们不需要手写这么复杂的一些基础代码，可以直接使用 vue-i18n 进行实现（注意：vue3 下需要使用 V 9.x 的 i18n） vue-i18n 的使用可以分为四个部分： 创建 messages 数据源 创建 locale 语言变量 初始化 i18n 实例 注册 i18n 实例 那么接下来我们就去实现以下： 安装 vue-i18n1npm install vue-i18n@next 创建 i18n/index.js 文件 创建 messages 数据源 123456789101112const messages = &#123; en: &#123; msg: &#123; test: &#x27;hello world&#x27; &#125; &#125;, zh: &#123; msg: &#123; test: &#x27;你好世界&#x27; &#125; &#125;&#125; 创建 locale 语言变量 1const locale = &#x27;en&#x27; 初始化 i18n 实例 12345678910import &#123; createI18n &#125; from &#x27;vue-i18n&#x27;const i18n = createI18n(&#123; // 使用 Composition API 模式，则需要将其设置为false legacy: false, // 全局注入 $t 函数 globalInjection: true, locale, messages&#125;) 把 i18n 注册到 vue 实例 1export default i18n 在 main.js 中导入 1234// i18n （PS：导入放到 APP.vue 导入之前，因为后面我们会在 app.vue 中使用国际化内容）import i18n from &#x27;@/i18n&#x27;...app.use(i18n) 在 layout/components/Sidebar/index.vue 中使用 i18n 123&lt;h1 class=&quot;logo-title&quot; v-if=&quot;$store.getters.sidebarOpened&quot;&gt; &#123;&#123; $t(&#x27;msg.test&#x27;) &#125;&#125;&lt;/h1&gt; 修改 locale 的值，即可改变展示的内容 截止到现在我们已经实现了 i18n 的最基础用法，那么解下来我们就可以在项目中使用 i18n 完成国际化。 项目中完成国际化分成以下几步进行: 封装 langSelect 组件用于修改 locale 导入 el-locale 语言包 创建自定义语言包 封装 langSelect 组件 定义 store/app.js 123456789101112131415161718192021import &#123; LANG &#125; from &#x27;@/constant&#x27;import &#123; getItem, setItem &#125; from &#x27;@/utils/storage&#x27;export default &#123; namespaced: true, state: () =&gt; (&#123; ... language: getItem(LANG) || &#x27;zh&#x27; &#125;), mutations: &#123; ... /** * 设置国际化 */ setLanguage(state, lang) &#123; setItem(LANG, lang) state.language = lang &#125; &#125;, actions: &#123;&#125;&#125; 在 constant 中定义常量 12// 国际化export const LANG = &#x27;language&#x27; 创建 components/LangSelect/index 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&lt;template&gt; &lt;el-dropdown trigger=&quot;click&quot; class=&quot;international&quot; @command=&quot;handleSetLanguage&quot; &gt; &lt;div&gt; &lt;el-tooltip content=&quot;国际化&quot; :effect=&quot;effect&quot;&gt; &lt;svg-icon icon=&quot;language&quot; /&gt; &lt;/el-tooltip&gt; &lt;/div&gt; &lt;template #dropdown&gt; &lt;el-dropdown-menu&gt; &lt;el-dropdown-item :disabled=&quot;language === &#x27;zh&#x27;&quot; command=&quot;zh&quot;&gt; 中文 &lt;/el-dropdown-item&gt; &lt;el-dropdown-item :disabled=&quot;language === &#x27;en&#x27;&quot; command=&quot;en&quot;&gt; English &lt;/el-dropdown-item&gt; &lt;/el-dropdown-menu&gt; &lt;/template&gt; &lt;/el-dropdown&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; useI18n &#125; from &#x27;vue-i18n&#x27;import &#123; defineProps, computed &#125; from &#x27;vue&#x27;import &#123; useStore &#125; from &#x27;vuex&#x27;import &#123; ElMessage &#125; from &#x27;element-plus&#x27;defineProps(&#123; effect: &#123; type: String, default: &#x27;dark&#x27;, validator: function(value) &#123; // 这个值必须匹配下列字符串中的一个 return [&#x27;dark&#x27;, &#x27;light&#x27;].indexOf(value) !== -1 &#125; &#125;&#125;)const store = useStore()const language = computed(() =&gt; store.getters.language)// 切换语言的方法const i18n = useI18n()const handleSetLanguage = lang =&gt; &#123; i18n.locale.value = lang store.commit(&#x27;app/setLanguage&#x27;, lang) ElMessage.success(&#x27;更新成功&#x27;)&#125;&lt;/script&gt; 在 navbar 中导入 LangSelect 123456789101112131415161718192021222324252627282930313233343536373839&lt;template&gt; &lt;div class=&quot;navbar&quot;&gt; ... &lt;div class=&quot;right-menu&quot;&gt; &lt;lang-select class=&quot;right-menu-item hover-effect&quot; /&gt; &lt;!-- 头像 --&gt; ... &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import LangSelect from &#x27;@/components/LangSelect&#x27;...&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;.navbar &#123; ... .right-menu &#123; ... ::v-deep .right-menu-item &#123; display: inline-block; padding: 0 18px 0 0; font-size: 24px; color: #5a5e66; vertical-align: text-bottom; &amp;.hover-effect &#123; cursor: pointer; &#125; &#125; ...&#125;&lt;/style&gt; element-plus 国际化处理截止到目前，我们的国际化内容已经基本功能已经处理完成了。接下来需要处理的就是对应的语言包，有了语言包就可以实现整个项目中的所有国际化处理了。 那么对于语言包来说，我们整个项目中会分成两部分： element-plus 语言包：用来处理 element 组件的国际化功能 自定义语言包：用来处理 非element 组件的国际化功能 那么首先我们先来处理 element-plus 语言包： 在 plugins/index 中导入 element 的中文、英文语言包： 12import zhCn from &#x27;element-plus/es/locale/lang/zh-cn&#x27;import en from &#x27;element-plus/lib/locale/lang/en&#x27; 注册 element 时，根据当前语言选择使用哪种语言包 1234567import store from &#x27;@/store&#x27;export default app =&gt; &#123; app.use(ElementPlus, &#123; locale: store.getters.language === &#x27;en&#x27; ? en : zhCn &#125;)&#125; 自定义语言包国际化处理处理完 element 的国际化内容之后，接下来我们来处理 自定义语言包。 在本地创建 lang 文件夹，里面创建好本地需要的语言包，由于比较多，就放一部分来看看： 123456789101112131415161718192021// en.tsexport default &#123; login: &#123; title: &#x27;User Login&#x27;, loginBtn: &#x27;Login&#x27;, usernameRule: &#x27;Username is required&#x27;, passwordRule: &#x27;Password cannot be less than 6 digits&#x27;, &#125;, // other....&#125;// zh.tsexport default &#123; login: &#123; title: &#x27;用户登录&#x27;, loginBtn: &#x27;登录&#x27;, usernameRule: &#x27;用户名为必填项&#x27;, passwordRule: &#x27;密码不能少于6位&#x27;, &#125;, // other...&#125; 在 lang/index 中，导入语言包 12import mZhLocale from &#x27;./lang/zh&#x27;import mEnLocale from &#x27;./lang/en&#x27; 在 messages 中注册到语言包 123456789101112const messages = &#123; en: &#123; msg: &#123; ...mEnLocale &#125; &#125;, zh: &#123; msg: &#123; ...mZhLocale &#125; &#125;&#125; 处理项目国际化内容在处理好了国际化的语言包之后，接下来我们就可以应用国际化功能到我们的项目中 对于我们目前的项目而言，需要进行国际化处理的地方主要分为： 登录页面 navbar 区域 sidebar 区域 面包屑区域 那么这一小节，我们先来处理前两个 登录页面： login/index 1234567891011121314151617181920212223242526272829303132333435363738394041&lt;template&gt; &lt;div class=&quot;login-container&quot;&gt; ... &lt;div class=&quot;title-container&quot;&gt; &lt;h3 class=&quot;title&quot;&gt;&#123;&#123; $t(&#x27;msg.login.title&#x27;) &#125;&#125;&lt;/h3&gt; &lt;lang-select class=&quot;lang-select&quot; effect=&quot;light&quot;&gt;&lt;/lang-select&gt; &lt;/div&gt; ... &lt;el-button type=&quot;primary&quot; style=&quot;width: 100%; margin-bottom: 30px&quot; :loading=&quot;loading&quot; @click=&quot;handleLogin&quot; &gt;&#123;&#123; $t(&#x27;msg.login.loginBtn&#x27;) &#125;&#125;&lt;/el-button &gt; &lt;div class=&quot;tips&quot; v-html=&quot;$t(&#x27;msg.login.desc&#x27;)&quot;&gt;&lt;/div&gt; &lt;/el-form&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; useI18n &#125; from &#x27;vue-i18n&#x27;...// 验证规则const i18n = useI18n()const loginRules = ref(&#123; username: [ &#123; ... message: i18n.t(&#x27;msg.login.usernameRule&#x27;) &#125; ], ...&#125;)...&lt;/script&gt; login/rules 1234567891011import i18n from &#x27;@/i18n&#x27;export const validatePassword = () =&gt; &#123; return (rule, value, callback) =&gt; &#123; if (value.length &lt; 6) &#123; callback(new Error(i18n.global.t(&#x27;msg.login.passwordRule&#x27;))) &#125; else &#123; callback() &#125; &#125;&#125; navbar 区域 layout/components/navbar 1234567891011121314151617181920&lt;template&gt; &lt;div class=&quot;navbar&quot;&gt; ... &lt;template #dropdown&gt; &lt;el-dropdown-menu class=&quot;user-dropdown&quot;&gt; &lt;router-link to=&quot;/&quot;&gt; &lt;el-dropdown-item&gt; &#123;&#123; $t(&#x27;msg.navBar.home&#x27;) &#125;&#125; &lt;/el-dropdown-item&gt; &lt;/router-link&gt; &lt;a target=&quot;_blank&quot; href=&quot;&quot;&gt; &lt;el-dropdown-item&gt;&#123;&#123; $t(&#x27;msg.navBar.course&#x27;) &#125;&#125;&lt;/el-dropdown-item&gt; &lt;/a&gt; &lt;el-dropdown-item divided @click=&quot;logout&quot;&gt; &#123;&#123; $t(&#x27;msg.navBar.logout&#x27;) &#125;&#125; &lt;/el-dropdown-item&gt; &lt;/el-dropdown-menu&gt; &lt;/template&gt; &lt;/el-dropdown&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt; components/LangSelect/index 123456&lt;el-tooltip :content=&quot;$t(&#x27;msg.navBar.lang&#x27;)&quot; :effect=&quot;effect&quot;&gt;const handleSetLanguage = lang =&gt; &#123; ... ElMessage.success(i18n.t(&#x27;msg.toast.switchLangSuccess&#x27;))&#125; sidebar 与 面包屑 区域的国际化处理sidebar 区域 目前对于 sidebar 而言，显示的文本是我们在定义路由表时的 title 1&lt;span&gt;&#123;&#123; title &#125;&#125;&lt;/span&gt; 我们可以 把 title 作为语言包内容的 key 进行处理 创建 utils/i18n 工具模块，用于 将 title 转化为国际化内容 12345import i18n from &#x27;@/i18n&#x27;export function generateTitle(title) &#123; return i18n.global.t(&#x27;msg.route.&#x27; + title)&#125; 在 layout/components/Sidebar/MenuItem.vue 中导入该方法： 12345678910&lt;template&gt; ... &lt;span&gt;&#123;&#123; generateTitle(title) &#125;&#125;&lt;/span&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; generateTitle &#125; from &#x27;@/utils/i18n&#x27;...&lt;/script&gt; 最后修改下 sidebarHeader 的内容 123&lt;h1 class=&quot;logo-title&quot; v-if=&quot;$store.getters.sidebarOpened&quot;&gt; &#123;&#123; $t(&#x27;msg.logo&#x27;) &#125;&#125;&lt;/h1&gt; 面包屑区域： 在 components/Breadcrumb/index 123456789101112131415161718&lt;template&gt;... &lt;!-- 不可点击项 --&gt; &lt;span v-if=&quot;index === breadcrumbData.length - 1&quot; class=&quot;no-redirect&quot;&gt;&#123;&#123; generateTitle(item.meta.title) &#125;&#125;&lt;/span&gt; &lt;!-- 可点击项 --&gt; &lt;a v-else class=&quot;redirect&quot; @click.prevent=&quot;onLinkClick(item)&quot;&gt;&#123;&#123; generateTitle(item.meta.title) &#125;&#125;&lt;/a&gt;...&lt;/template&gt;&lt;script setup&gt;import &#123; generateTitle &#125; from &#x27;@/utils/i18n&#x27;...&lt;/script&gt; 国际化缓存处理我们希望在 刷新页面后，当前的国际化选择可以被保留，所以想要实现这个功能，那么就需要进行 国际化的缓存处理 此处的缓存，我们依然通过两个方面进行： vuex 缓存 LocalStorage 缓存 只不过这里的缓存，我们已经在处理 langSelect 组件时 处理完成了，所以此时我们只需要使用缓存下来的数据即可。 在 i18n/index 中，创建 getLanguage 方法： 1234567import store from &#x27;@/store&#x27;/** * 返回当前 lang */function getLanguage() &#123; return store &amp;&amp; store.getters &amp;&amp; store.getters.language&#125; 修改 createI18n 的 locale 为 getLanguage() 1234const i18n = createI18n(&#123; ... locale: getLanguage()&#125;) 国际化方案总结国际化是前端项目中的一个非常常见的功能，那么在前端项目中实现国际化主要依靠的就是 vue-i18n 这个第三方的包。 关于国际化的实现原理大家可以参照 国际化实现原理 这一小节，这里我们就不再赘述了。 而 i18n 的使用，整体来说就分为这么四步： 创建 messages 数据源 创建 locale 语言变量 初始化 i18n 实例 注册 i18n 实例 核心的内容其实就是 数据源的部分，但是大家需要注意，如果你的项目中使用了 第三方组件库 ，那么不要忘记 第三方组件库的数据源 需要 单独 进行处理！ 动态换肤原理分析想要实现 动态换肤 的一个前置条件就是：色值不可以写死！ 首先我们先来说一下动态换肤的实现方式。 在 scss 中，我们可以通过 $变量名:变量值 的方式定义 css 变量 ，然后通过该 css 来去指定某一块 DOM 对应的颜色。 那么大家可以想一下，如果我此时改变了该 css 变量的值，那么对应的 DOM 颜色是不是也会同步发生变化。 当大量的 DOM 都依赖这个 css 变量 设置颜色时，我们是不是只需要改变这个 css 变量 ，那么所有 DOM 的颜色是不是都会发生变化，所谓的 动态换肤 是不是就可以实现了！ 这个就是 动态换肤 的实现原理! 实现换肤和主题大致有两种方案: 使用原生支持的 css var 通过一些手段覆盖 element plus 样式 我们先看来看看 css var 的实现吧。 css变量 https://developer.mozilla.org/zh-CN/docs/Web/CSS/:root 变量 与 color、font-size 等正式属性没有什么不同，只是没有默认含义。 所以 CSS 变量（CSS variable）又叫做”CSS 自定义属性”（CSS custom properties）。因为变量与自定义的 CSS 属性其实是一回事。 变量可以分为 全局变量 局部变量 全局变量通过 :root 去定义，其他所有的元素都可以通过 var(--xxx) 的形式去使用全局变量，我们来看下面这个例子: var()函数还可以使用第二个参数，表示变量的默认值。如果该变量不存在，就会使用这个默认值。 123456789101112&lt;style&gt; :root &#123; --color: skyblue; &#125; .use-global &#123; color: var(--color) &#125;&lt;/style&gt;// body&lt;div class=&quot;use-global&quot;&gt;使用了全局变量&lt;/div&gt; :root :root 这个 CSS 伪类匹配文档树的根元素。对于 HTML 来说，:root 表示 元素，除了优先级更高之外，与 html 选择器相同。 自定义属性 (–*)：CSS 变量 带有前缀–的属性名，比如–example–name，表示的是带有值的自定义属性，其可以通过 var 函数在全文档范围内复用的。 局部变量 我们可以在某个选择器下去定义变量，或者在元素的 style 属性上定义变量： 1234567891011121314151617// style:root &#123; --color: skyblue;&#125;.parent &#123; --color: pink; // 优先级更高&#125;h3 &#123; color: var(--color)&#125;// html&lt;div class=&quot;parent&quot;&gt; &lt;h3&gt;child title&lt;/h3&gt;&lt;/div&gt; 这里 h3 标签会显示红色。虽然我们在 :root 上也定义了 --color 变量，但是根据就近原则，h3 会取父级定义的变量。 我们还可以在 style 属性上定义变量，这里我们定义了一个 --bg 变量，其子元素可以访问到这个变量。 123456789101112.parent &#123; --color: pink;&#125;h3 &#123; color: var(--color); background-color: var(--bg);&#125;&lt;div class=&quot;parent&quot; style=&quot;--bg: black;&quot;&gt; &lt;h3&gt;child title&lt;/h3&gt;&lt;/div&gt; 修改 css 变量这里定义了两个按钮，一个修改全局的（根组件）的变量，一个用来修改特定元素上的定义的变量： 12&lt;button class=&quot;btn&quot;&gt;change root&lt;/button&gt;&lt;button class=&quot;variable&quot;&gt;change local variable&lt;/button&gt; 修改全局变量 1234567const btn = document.querySelector(&#x27;.btn&#x27;)btn.addEventListener(&#x27;click&#x27;, () =&gt; &#123; const html = document.documentElement html.style.setProperty(&#x27;--color&#x27;, &#x27;red&#x27;)&#125;) 修改局部变量 1234567const variableBtn = document.querySelector(&#x27;.variable&#x27;)variableBtn.addEventListener(&#x27;click&#x27;, () =&gt; &#123; const parent = document.querySelector(&#x27;.parent&#x27;) parent.style.setProperty(&#x27;--color&#x27;, &#x27;green&#x27;)&#125;) 暗黑模式原理分析 prefers-color-scheme prefers-color-scheme CSS 媒体特性: 用于检测用户是否有将系统的主题色设置为亮色或者暗色。 主题色实现原理通过 媒体查询 去监听系统主题色的变化。 12345678910111213141516171819202122232425// style@media (prefers-color-scheme: dark) &#123; .day.dark-scheme &#123; background: #333; color: white; &#125; .night.dark-scheme &#123; background: black; color: red; &#125;&#125;@media (prefers-color-scheme: light) &#123; .day.light-scheme &#123; background: skyblue; color: #333; &#125; .night.light-scheme &#123; background: pink; color: #333; &#125;&#125;.day, .night &#123; display: inline-block; padding: 1em; width: 7em; height: 7em; vertical-align: middle;&#125;// html&lt;div class=&quot;day light-scheme&quot;&gt;Day (changes in light scheme)&lt;/div&gt;&lt;div class=&quot;day dark-scheme&quot;&gt;Day (changes in dark scheme)&lt;/div&gt; &lt;br&gt;&lt;div class=&quot;night light-scheme&quot;&gt;Night (changes in light scheme)&lt;/div&gt;&lt;div class=&quot;night dark-scheme&quot;&gt;Night (changes in dark scheme)&lt;/div&gt; 现在，我们可以去切换系统的主题色，就会发现页面上的颜色跟着变化了，这是因为我们通过 @media 监听 prefers-color-scheme 起作用了。 window.matchMedia虽然我们通过 css @media 能够应对系统的主题色切换，但是我们如何在 js 中去监听呢？ 答案是通过 window.matchMedia 方法： 1234567891011// 如果匹配成功，scheme.matches === true// 也就是说，如果我们的系统是暗黑色，那么这个 matches 就是true，否则是 falseconst scheme = window.matchMedia(&#x27;(prefers-color-scheme: dark)&#x27;)scheme.addEventListener(&#x27;change&#x27;, e =&gt; &#123; if (e.matches) &#123; // 暗黑色 &#125; else &#123; // 亮色 &#125;&#125;) 修改主题色到此，我们知道了主题色的实现原理，我们如何在项目里去实现主题色的切换呢？ 我们来看一个小例子 首先，我们先定义好 全局变量，里面包含了一些 亮色模式 下的变量： 12345678910:root &#123; --color: #333; --background-color: pink;&#125;&lt;h1 style=&quot;background-color: var(--background-color); color: var(--color)&quot;&gt; 我是一个标题。！！！&lt;/h1&gt;&lt;button class=&quot;dark-btn&quot;&gt;dark mode&lt;/button&gt; 在页面初始时，我们的背景色是粉色，颜色是浅黑色。 现在我们创建一个按钮，来修改主题颜色，这个之前实现过了很简单对吧。 1234567const darkBtn = document.querySelector(&#x27;.dark-btn&#x27;)darkBtn.addEventListener(&#x27;click&#x27;, () =&gt; &#123; // 修改变量 document.documentElement.style.setProperty(&#x27;--color&#x27;, &#x27;#fff&#x27;) document.documentElement.style.setProperty(&#x27;--background-color&#x27;, &#x27;#000&#x27;)&#125;) 好无疑问这样是可以实现的，但是，如果变量多起来了，几十上百个，我们也要一个个去修改吗？ 既然我们的变量都定义在根元素上，那么我们可以采取 属性覆盖 的形式。 我们定义一个 [data-theme=&quot;dark&quot;] 样式表，专门用来处理 暗黑模式 下的变量，这里是黑色背景白色字体。 1234[data-theme=&quot;dark&quot;] &#123; --color: #fff; --background-color: #000;&#125; 或者属性选择器： 1234567891011/* 浅色模式 */html[data-theme=&quot;light&quot;]:root &#123; --body-background: #efefef; --text-color: #333;&#125;/* 深色模式 */html[data-theme=&quot;dark&quot;]:root &#123; --body-background: #000; --text-color: #ededed;&#125; 一开始，这个样式表并不会生效，因为根标签上根本没有 data-theme=&quot;dark&quot; 属性，我们通过按钮来修改： 123darkBtn.addEventListener(&#x27;click&#x27;, () =&gt; &#123; document.documentElement.setAttribute(&#x27;data-theme&#x27;, &#x27;dark&#x27;)&#125;) 我们给根标签设置了 data-theme=&quot;dark&quot; 属性，同时内部定了暗黑相关的变量，这时，data-theme=&quot;dark&quot; 内部的变量就会覆盖 :root 中的变量了，从而达到切换主题色的效果。 同时，我们需要根据系统的主题色，来设置项目的主题色，这里就要用到 window.matchMedia 方法了。 如果在 Vue 项目中，我们可以这样去实现: 1234567891011121314151617181920212223242526272829303132const theme = computed(() =&gt; store.state.settings.theme);// 查看当前是否是 暗黑模式const mediaQueryListDark = window.matchMedia(&#x27;(prefers-color-scheme: dark)&#x27;);const changeTheme = (theme) =&gt; &#123; // 批量覆盖全局的变量 document.documentElement.setAttribute(&#x27;data-theme&#x27;, theme);&#125;;const handleColorSchemeChange = evt =&gt; &#123; if (evt.matches) &#123; changeTheme(&#x27;dark&#x27;); &#125; else &#123; changeTheme(&#x27;light&#x27;); &#125;&#125;;watchEffect(() =&gt; &#123; if (theme.value === &#x27;Follow System&#x27;) &#123; // 初始值：跟随系统设置 handleColorSchemeChange(mediaQueryListDark); // 监听系统主题的变化 mediaQueryListDark.addEventListener(&#x27;change&#x27;, handleColorSchemeChange); &#125; else if (theme.value) &#123; changeTheme(theme.value.toLowerCase()); // 如果不是跟随系统设置主题了，用户自己设置的主题色，我们就不需要监听系统的主题色切换了 mediaQueryListDark.removeEventListener(&#x27;change&#x27;, handleColorSchemeChange); &#125;&#125;); 总结到这里，我们花了大量的时间和实例对换肤和主题的原理进行了研究，那么接下来就要进入正式的项目开发环节了。 官方换肤方案 官方样式路径：/node_modules/element-plus/theme-chalk/src/common/var.scss 定义自己的 scss 文件，然后在 main.ts 导入。 123456789101112131415161718192021222324252627$--colors: ( &quot;primary&quot;: ( &quot;base&quot;: pink, ), &quot;success&quot;: ( &quot;base&quot;: blue, ), &quot;warning&quot;: ( &quot;base&quot;: #f2711c, ), &quot;danger&quot;: ( &quot;base&quot;: #db2828, ), &quot;error&quot;: ( &quot;base&quot;: #db2828, ), &quot;info&quot;: ( &quot;base&quot;: #42b8dd, ),);@forward &#x27;element-plus/theme-chalk/src/common/var.scss&#x27; with ( $colors: $--colors,);/* 导入所有的样式变量 */@use &quot;element-plus/theme-chalk/src/index.scss&quot; as *; 修改 main.ts 123456// 注释原导入的 element-plus 样式// import &#x27;element-plus/dist/index.css&#x27;// 导入我们自己的定义的样式import &#x27;@/styles/cover-element-plus.scss&#x27; 通过 CSS 变量设置如果不通过上面那种方案，我们还可以定义全局的变量，来覆盖官方的样式。 在自己的样式文件中写入需要覆盖的样式变量： 123:root &#123; --el-color-primary: green;&#125; 如果你只想自定义一个特定的组件，只需为某些组件单独添加内联样式。 1&lt;el-tag style=&quot;--el-tag-bg-color: red&quot;&gt;Tag&lt;/el-tag&gt; 出于性能原因，更加推荐你在类名下添加自定义 css 变量，而不是在全局的 :root 下。 123.custom-class &#123; --el-tag-bg-color: red;&#125; 如果您想要通过 js 控制 css 变量，可以这样做： 123456789// document.documentElement 是全局变量时const el = document.documentElement// const el = document.getElementById(&#x27;xxx&#x27;)// 获取 css 变量getComputedStyle(el).getPropertyValue(`--el-color-primary`)// 设置 css 变量el.style.setProperty(&#x27;--el-color-primary&#x27;, &#x27;red&#x27;) 总结。相当于我们重新定义了变量，覆盖了官方自己定义的变量，如果我们项目只需要一种颜色，那么这种方案是可行的，但是我们项目需要支持用户选择主题来替换，那么这种方案就不适用了。 那么我来用另一种方案来实现吧。 换肤方案落地在我们的项目中想要实现动态换肤，需要同时处理两个方面的内容： element-plus 主题 非 element-plus 主题 明确好了原理之后，接下来我们就来理一下咱们的实现思路。 从原理中我们可以得到以下两个关键信息： 动态换肤的关键是修改 css 变量 的值 换肤需要同时兼顾 element-plus 非 element-plus 那么根据以上关键信息，我们就可以得出对应的实现方案: 创建一个组件 ThemeSelect 用来处理修改之后的 css 变量 的值 根据新值修改 element-plus 主题色 根据新值修改非 element-plus 主题色 创建 ThemeSelect 组件ThemeSelect 组件将由两部分组成： navbar 中的展示图标 选择颜色的弹出层 这是效果图： 创建 components/ThemeSelect/index 组件 123456789101112131415161718192021222324252627282930313233&lt;template&gt; &lt;!-- 主题图标 v-bind：https://v3.cn.vuejs.org/api/instance-properties.html#attrs --&gt; &lt;el-dropdown v-bind=&quot;$attrs&quot; trigger=&quot;click&quot; class=&quot;theme&quot; @command=&quot;handleSetTheme&quot; &gt; &lt;div&gt; &lt;el-tooltip :content=&quot;$t(&#x27;msg.navBar.themeChange&#x27;)&quot;&gt; &lt;svg-icon icon=&quot;change-theme&quot; /&gt; &lt;/el-tooltip&gt; &lt;/div&gt; &lt;template #dropdown&gt; &lt;el-dropdown-menu&gt; &lt;el-dropdown-item command=&quot;color&quot;&gt; &#123;&#123; $t(&#x27;msg.theme.themeColorChange&#x27;) &#125;&#125; &lt;/el-dropdown-item&gt; &lt;/el-dropdown-menu&gt; &lt;/template&gt; &lt;/el-dropdown&gt; &lt;!-- 展示弹出层 --&gt; &lt;div&gt; ... &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;const handleSetTheme = command =&gt; &#123;&#125;&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt; 在 layout/components/navbar 中进行引用 1234567&lt;div class=&quot;right-menu&quot;&gt; &lt;theme-picker class=&quot;right-menu-item hover-effect&quot;&gt;&lt;/theme-picker&gt;&lt;/div&gt;... import ThemePicker from &#x27;@/components/ThemeSelect/index&#x27; 创建 SelectColor 组件 在有了 ThemeSelect 之后，接下来我们来去处理颜色选择的组件 SelectColor，在这里我们会用到 element 中的 el-color-picker 组件 对于 SelectColor 的处理，我们需要分成两步进行： 完成 SelectColor 弹窗展示的双向数据绑定 把选中的色值进行本地缓存 那么下面咱们先来看第一步：完成 SelectColor 弹窗展示的双向数据绑定 创建 components/ThemePicker/components/SelectColor.vue 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576&lt;template&gt; &lt;el-dialog title=&quot;提示&quot; :model-value=&quot;modelValue&quot; @close=&quot;closed&quot; width=&quot;22%&quot;&gt; &lt;div class=&quot;center&quot;&gt; &lt;p class=&quot;title&quot;&gt;&#123;&#123; $t(&#x27;msg.theme.themeColorChange&#x27;) &#125;&#125;&lt;/p&gt; &lt;el-color-picker v-model=&quot;mColor&quot; :predefine=&quot;predefineColors&quot; &gt;&lt;/el-color-picker&gt; &lt;/div&gt; &lt;template #footer&gt; &lt;span class=&quot;dialog-footer&quot;&gt; &lt;el-button @click=&quot;closed&quot;&gt;&#123;&#123; $t(&#x27;msg.universal.cancel&#x27;) &#125;&#125;&lt;/el-button&gt; &lt;el-button type=&quot;primary&quot; @click=&quot;comfirm&quot;&gt;&#123;&#123; $t(&#x27;msg.universal.confirm&#x27;) &#125;&#125;&lt;/el-button&gt; &lt;/span&gt; &lt;/template&gt; &lt;/el-dialog&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; defineProps, defineEmits, ref &#125; from &#x27;vue&#x27;defineProps(&#123; modelValue: &#123; type: Boolean, required: true &#125;&#125;)const emits = defineEmits([&#x27;update:modelValue&#x27;])// 预定义色值const predefineColors = [ &#x27;#ff4500&#x27;, &#x27;#ff8c00&#x27;, &#x27;#ffd700&#x27;, &#x27;#90ee90&#x27;, &#x27;#00ced1&#x27;, &#x27;#1e90ff&#x27;, &#x27;#c71585&#x27;, &#x27;rgba(255, 69, 0, 0.68)&#x27;, &#x27;rgb(255, 120, 0)&#x27;, &#x27;hsv(51, 100, 98)&#x27;, &#x27;hsva(120, 40, 94, 0.5)&#x27;, &#x27;hsl(181, 100%, 37%)&#x27;, &#x27;hsla(209, 100%, 56%, 0.73)&#x27;, &#x27;#c7158577&#x27;]// 默认色值const mColor = ref(&#x27;#00ff00&#x27;)/** * 关闭 */const closed = () =&gt; &#123; emits(&#x27;update:modelValue&#x27;, false)&#125;/** * 确定 * 1. 修改主题色 * 2. 保存最新的主题色 * 3. 关闭 dialog */const comfirm = async () =&gt; &#123; closed()&#125;&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;.center &#123; text-align: center; .title &#123; margin-bottom: 12px; &#125;&#125;&lt;/style&gt; 在 ThemePicker/index 中使用该组件 123456789101112131415161718&lt;template&gt; ... &lt;!-- 展示弹出层 --&gt; &lt;div&gt; &lt;select-color v-model=&quot;selectColorVisible&quot;&gt;&lt;/select-color&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import SelectColor from &#x27;./components/SelectColor.vue&#x27;import &#123; ref &#125; from &#x27;vue&#x27;const selectColorVisible = ref(false)const handleSetTheme = command =&gt; &#123; selectColorVisible.value = true&#125;&lt;/script&gt; 完成双向数据绑定之后，我们来处理第二步：把选中的色值进行本地缓存 缓存的方式分为两种： vuex 本地存储 在 constants/index 下新建常量值 1234// 主题色保存的 keyexport const MAIN_COLOR = &#x27;mainColor&#x27;// 默认色值export const DEFAULT_COLOR = &#x27;#409eff&#x27; 创建 store/modules/theme 模块，用来处理 主题色 相关内容 1234567891011121314151617import &#123; getItem, setItem &#125; from &#x27;@/utils/storage&#x27;import &#123; MAIN_COLOR, DEFAULT_COLOR &#125; from &#x27;@/constant&#x27;export default &#123; namespaced: true, state: () =&gt; (&#123; mainColor: getItem(MAIN_COLOR) || DEFAULT_COLOR &#125;), mutations: &#123; /** * 设置主题色 */ setMainColor(state, newColor) &#123; state.mainColor = newColor setItem(MAIN_COLOR, newColor) &#125; &#125;&#125; 在 store/getters 下指定快捷访问 1mainColor: state =&gt; state.theme.mainColor 在 store/index 中导入 theme 12345678910...import theme from &#x27;./modules/theme.js&#x27;export default createStore(&#123; getters, modules: &#123; ... theme &#125;&#125;) 在 selectColor 中，设置初始色值 和 缓存色值 12345678910111213141516171819202122232425262728...&lt;script setup&gt;import &#123; defineProps, defineEmits, ref &#125; from &#x27;vue&#x27;import &#123; useStore &#125; from &#x27;vuex&#x27;...const store = useStore()// 默认色值const mColor = ref(store.getters.mainColor).../** * 确定按钮 * * 1. 修改主题色 * 2. 保存最新的主题色 * 3. 关闭 dialog * */const comfirm = async () =&gt; &#123; // 2. 保存最新的主题色 store.commit(&#x27;theme/setMainColor&#x27;, mColor.value) // 3. 关闭 dialog closed()&#125;&lt;/script&gt; scss mix方法123456789// 给当前的颜色值，添加上 50% 的白色.white &#123; color: mix(white, $color, 50%);&#125;// 给当前的颜色值，添加上 50% 的黑色.black &#123; color: mix(black, $color, 50%);&#125; 处理 element-plus 主题色变更原理与步骤分析对于 element-plus 的主题变更，相对比较复杂，所以说整个过程我们会分为三部分： 实现原理 实现步骤 实现过程 实现原理： 在之前我们分析主题变更的实现原理时，我们说过，核心的原理是：*通过修改 scss 变量 * 的形式修改主题色完成主题变更 但是对于 element-plus 而言，我们怎么去修改这样的主题色呢？ 其实整体的原理非常简单，分为三步： 获取当前 element-plus 的所有样式 找到我们想要替换的样式部分，通过正则完成替换 把替换后的样式写入到 style 标签中，利用样式优先级的特性，替代固有样式 实现步骤： 那么明确了原理之后，我们的实现步骤也就呼之欲出了，对应原理总体可分为四步： 获取当前 element-plus 的所有样式 定义我们要替换之后的样式 在原样式中，利用正则替换新样式 把替换后的样式写入到 style 标签中 创建 utils/theme 工具类，写入两个方法 123456789101112131415/** * 写入新样式到 style * @param &#123;*&#125; elNewStyle element-plus 的新样式 * @param &#123;*&#125; isNewStyleTag 是否生成新的 style 标签 */export const writeNewStyle = elNewStyle =&gt; &#123; &#125;/** * 根据主色值，生成最新的样式表 */export const generateNewStyle = primaryColor =&gt; &#123; &#125; 那么接下来我们先实现第一个方法 generateNewStyle，在实现的过程中，我们需要安装两个工具类： rgb-hex：转换RGB(A)颜色为十六进制 css-color-function：在 CSS 中 Tab Atkins 提出的颜色函数的解析器和转换器。 示例 1234567891011121314151617181920212223import rgbHex from &#x27;rgb-hex&#x27;rgbHex(65, 131, 196);//=&gt; &#x27;4183c4&#x27;rgbHex(&#x27;rgb(40, 42, 54)&#x27;);//=&gt; &#x27;282a36&#x27;rgbHex(65, 131, 196, 0.2);//=&gt; &#x27;4183c433&#x27;rgbHex(40, 42, 54, &#x27;75%&#x27;);//=&gt; &#x27;282a36bf&#x27;rgbHex(&#x27;rgba(40, 42, 54, 75%)&#x27;);//=&gt; &#x27;282a36bf&#x27;------------------------------------------------import color from &#x27;css-color-function&#x27; color.convert(&#x27;color(red tint(50%))&#x27;);// &quot;rgb(255, 128, 128)&quot; 然后还需要写入一个 颜色转化计算器 formula.json，这里主要是以 primary 色值为例 创建 constants/formula.json 12345678910111213141516&#123; &quot;shade-1&quot;: &quot;color(primary shade(10%))&quot;, &quot;light-1&quot;: &quot;color(primary tint(10%))&quot;, &quot;light-2&quot;: &quot;color(primary tint(20%))&quot;, &quot;light-3&quot;: &quot;color(primary tint(30%))&quot;, &quot;light-4&quot;: &quot;color(primary tint(40%))&quot;, &quot;light-5&quot;: &quot;color(primary tint(50%))&quot;, &quot;light-6&quot;: &quot;color(primary tint(60%))&quot;, &quot;light-7&quot;: &quot;color(primary tint(70%))&quot;, &quot;light-8&quot;: &quot;color(primary tint(80%))&quot;, &quot;light-9&quot;: &quot;color(primary tint(90%))&quot;, &quot;subMenuHover&quot;: &quot;color(primary tint(70%))&quot;, &quot;subMenuBg&quot;: &quot;color(primary tint(80%))&quot;, &quot;menuHover&quot;: &quot;color(primary tint(90%))&quot;, &quot;menuBg&quot;: &quot;color(primary)&quot;&#125; 我们来看下 element plus 定义的 primary 变量，light-i 表示颜色的深浅。 如果我们想要定义其它颜色，比如--el-color-success，已同样的方法，添加到 formula.json 中即可。 同时我们还定义了自己变量在 formula 颜色转换器中，因为我们的 菜单 部分，也是需要跟着主题色变化的。 shade tint 方法其实就是利用了 scss 的 mix 方法，css-color-function 库内部调用进行解析，对某个颜色加深或者淡化！！ 123456789101112131415161718// scss// 给当前的颜色值，添加上 50% 的白色.white &#123; color: mix(white, $color, 50%);&#125;// 给当前的颜色值，添加上 50% 的黑色.black &#123; color: mix(black, $color, 50%);&#125;@function tint($color, $parcent) &#123; @return mix(white, $color, $parcent)&#125;@function shade($color, $parcent) &#123; @return mix(black, $color, $parcent)&#125; 准备就绪后，我们来实现 generateNewStyle 方法： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125// https://www.npmjs.com/package/css-color-functionimport color from &#x27;css-color-function&#x27;// https://www.npmjs.com/package/rgb-heximport rgbHex from &#x27;rgb-hex&#x27;import axios from &#x27;axios&#x27;import formula from &#x27;@/constants/formula.json&#x27;/** * 写入新样式到 style * @param &#123;*&#125; cssText element-plus 的新样式 * @param &#123;*&#125; isNewStyleTag 是否生成新的 style 标签 */export const writeNewStyle = (cssText: string) =&gt; &#123; const style = document.createElement(&#x27;style&#x27;) style.innerText = cssText document.head.appendChild(style)&#125;/** * 根据主色值，生成最新的样式表 */type TObject = &#123; [key: string]: string &#125;export const generateNewStyle = async (primaryColor: string) =&gt; &#123; // colors ===&gt; &#123; primary: &#x27;rgba(8, 12, 132, 0.68)&#x27;, shade-1: &#x27;#070b77ad&#x27;, light-1: &#x27;#212490ad&#x27;, ...... &#125; const colors: TObject = generateColors(primaryColor) as TObject // 拿到整个 element plus 样式表，并对需要修改的变量打上了标记 let cssText = await getOriginalStyle() // 遍历生成的样式表，在 CSS 的原样式中进行全局替换 Object.keys(colors).forEach(key =&gt; &#123; // reg pattern // /(:|\\s+)primary/g // /(:|\\s+)shade-1/g // /(:|\\s+)menuBg/g // ... // 这个模式中的 (:|\\\\s+) 表示一个冒号或一个或多个空白字符（包括空格、制表符和换行符）。 // \\\\s+ 的第一个 \\ 是转义字符 // key 是一个变量，代表一个需要匹配的字符串，比如匹配 `primary` // &#x27;$1&#x27; + colors[key] // 关于为什么要在色值前面加上 $1，我们需要查看 replace 方法的第二个参数。 // 在这里，第二个参数是一个字符串，字符串中的 $1 会被替换成第一个括号捕获组（即 (:|\\\\s+)）匹配到的文本。 // 所以加上 $1 就是为了在【替换的文本】中【保留原本匹配到的文本】。 cssText = cssText.replace( new RegExp(&#x27;(:|\\\\s+)&#x27; + key, &#x27;g&#x27;), &#x27;$1&#x27; + colors[key] ) &#125;) // 最终，新的样式表中，含有我们自定义的颜色主题 return cssText&#125;/** * 根据主色生成色值表 */type TFormulaKey = keyof typeof formulaexport const generateColors = (primary: string) =&gt; &#123; if (!primary) return const colors: &#123; [key: string]: string &#125; = &#123; primary &#125; ;(Object.keys(formula) as Array&lt;TFormulaKey&gt;).forEach( &lt;K extends TFormulaKey&gt;(key: K) =&gt; &#123; // 将所有的主色，替换成我们选中的主题色，形式如 &gt;&gt;&gt; color(rgba(255, 69, 0, 1) shade(10%)) const value = formula[key].replace(/primary/g, primary) // 通过 color 的 conver 方法，计算出 rgba 色值 // color.convert(value) ===&gt;&gt;&gt; rgba(0, 12, 230, 0.68) // 最终将转为每个颜色，转为十六进制：#030420ad，写入到 colors 对象中，并返回 colors[key] = &#x27;#&#x27; + rgbHex(color.convert(value)) &#125; ) return colors&#125;/** * 获取当前 element-plus 的默认样式表 */const getOriginalStyle = async () =&gt; &#123; const version = require(&#x27;element-plus/package.json&#x27;).version const url = `https://unpkg.com/element-plus@$&#123;version&#125;/dist/index.css` const &#123; data &#125; = await axios(url) // 把获取到的数据筛选为原样式模板 return getStyleTemplate(data)&#125;/** * 返回 style 的 template */const getStyleTemplate = (data: string) =&gt; &#123; // element-plus 默认色值 const colorMap: &#123; [key: string]: string &#125; = &#123; &#x27;#3a8ee6&#x27;: &#x27;shade-1&#x27;, &#x27;#409eff&#x27;: &#x27;primary&#x27;, // element-plus 中含有变量 `--el-color-primary: #409eff` &#x27;#53a8ff&#x27;: &#x27;light-1&#x27;, &#x27;#66b1ff&#x27;: &#x27;light-2&#x27;, &#x27;#79bbff&#x27;: &#x27;light-3&#x27;, &#x27;#8cc5ff&#x27;: &#x27;light-4&#x27;, &#x27;#a0cfff&#x27;: &#x27;light-5&#x27;, &#x27;#b3d8ff&#x27;: &#x27;light-6&#x27;, &#x27;#c6e2ff&#x27;: &#x27;light-7&#x27;, &#x27;#d9ecff&#x27;: &#x27;light-8&#x27;, &#x27;#ecf5ff&#x27;: &#x27;light-9&#x27; &#125; // 根据默认色值为要替换的色值打上标记 Object.keys(colorMap).forEach(key =&gt; &#123; const value = colorMap[key] data = data.replace(new RegExp(key, &#x27;ig&#x27;), value) &#125;) // 替换完之后 // `--el-color-primary: #409eff` 就变成了 `--el-color-primary: primary` // --el-color-primary-light-3: #79bbff; 变成了 --el-color-primary-light-3: light-3 // ... // ... // `--el-color-primary-light-9: #ecf5ff` 变成了 `--el-color-primary-light-9: light-9` return data&#125; 我们来分析一下 theme.ts 中函数的执行流程 首先，外部调用 generateNewStyle 方法，传入 primaryColor，我们通过 el-color-picker 选中后的值，就是 primaryColor，它的色值长这样 rgba(8, 12, 132, 0.68)。 通过 generateColors 方法生成色值表 通过 css-color-function 处理我们的颜色转化计算器formula.json 1color(rgba(255, 69, 0, 1) shade(10%)) &gt;&gt;&gt; color.convert(value) &gt;&gt;&gt; rgba(0, 12, 230, 0.68) 使用 rgbHex 方法将 rgba 转化为十六进制格式 1rgbHex(color.convert(value)) ===&gt;&gt;&gt; &#x27;#030420ad&#x27; 返回处理过后的色值表 colors 1234567&#123; primary: &#x27;rgba(8, 12, 132, 0.68)&#x27;, // 保留了原始的rgba格式 shade-1: &#x27;#070b77ad&#x27;, light-1: &#x27;#212490ad&#x27;, light-2: &#x27;#393d9dad&#x27;, ......&#125; 通过 getOriginalStyle 方法，获取 element plus 样式表 拿到 element plus 样式数据后，通过 getStyleTemplate 方法，根据默认色值 colorMap 为要替换的色值打上标记 element-plus 中含有变量 --el-color-primary: #409eff，而我们定义的 colorMap 默认值 &#39;#409eff&#39;: &#39;primary&#39; 就是与 element plus 中的十六进制值是对应。 我们就是要将 element plus 中的 primary 十六进制值替换成我们的标记，primary、shade-*。因为我们已经处理过 formula.json 了，处理过后得到的是 &#123; primary: &#39;rgba(8, 12, 132, 0.68)&#39;, shade-1: &#39;#070b77ad&#39;, light-1: &#39;#212490ad&#39;, ...&#125; 这种形式，这里面的色值，就是我们需要应用到页面上的颜色。 替换完之后，element plus 中的颜色变量就被标记上了记号，表示将来需要替换成真正的色值。12`--el-color-primary: #409eff` 就变成了 `--el-color-primary: primary``--el-color-primary-light-9: #ecf5ff` 变成了 `--el-color-primary-light-9: light-9` 返回处理过后的 element plus 样式表 cssText 接着，我们通过正则以及第二步 generateColors 方法返回的 colors，将 cssText 中每个打了标记的变量值替换 1cssText = cssText.replace(new RegExp(&#x27;(:|\\\\s+)&#x27; + key, &#x27;g&#x27;), &#x27;$1&#x27; + colors[key]) 这个模式中的 (:|\\s+) 表示一个冒号或一个【或】多个空白字符(\\s+)（包括空格、制表符和换行符） \\s+ 的第一个 \\ 是转义字符 key 是一个变量，代表一个需要匹配的字符串，比如匹配 primary &#39;$1&#39; + colors[key]: replace 第二个参数是一个字符串，字符串中的 $1 会被替换成第一个括号捕获组（即 (:|\\s+)）匹配到的文本。所以加上 $1 就是为了在【替换的文本】中【保留原本匹配到的文本】。 最后返回 cssText，新的样式表中，含有我们自定义的颜色主题 最后，通过 writeNewStyle 将新的样式表 cssText 插入到文档中。 123const style = document.createElement(&#x27;style&#x27;)style.innerText = cssTextdocument.head.appendChild(style) 总结 到这里，我们对 element plus 的主题换肤就完成了。 原理就是：拿到用户选中的颜色值(rgba)，通过 formula 颜色转换器转换成十六进制表 colors，然后拿到 element plus 的样式表，将其中需要修改的变量打上标记并返回含有标记的新样式表 cssText，最后，遍历 colors，通过正则将所有标记替换成 colors 中的值。完成样式的替换。 element-plus 新主题的立即生效到目前我们已经完成了 element-plus 的主题变更，但是当前的主题变更还有一个小问题，那就是：在刷新页面后，新主题会失效 那么出现这个问题的原因，非常简单：因为没有写入新的 style 所以我们只需要在 应用加载后，写入 style 即可 那么写入的时机，我们可以放入到 app.vue 中 123456789&lt;script setup&gt;import &#123; useStore &#125; from &#x27;vuex&#x27;import &#123; generateNewStyle, writeNewStyle &#125; from &#x27;@/utils/theme&#x27;const store = useStore()generateNewStyle(store.getters.mainColor).then(newStyleText =&gt; &#123; writeNewStyle(newStyleText)&#125;)&lt;/script&gt; 自定义主题变更自定义主题变更相对来说比较简单，因为 自己的代码更加可控。 目前在我们的代码中，需要进行 自定义主题变更 为 menu 菜单背景色 而目前指定 menu 菜单背景色的位置在 layout/components/sidebar/SidebarMenu.vue 中 123456789&lt;el-menu :default-active=&quot;activeMenu&quot; :collapse=&quot;!$store.getters.sidebarOpened&quot; :background-color=&quot;$store.getters.cssVar.menuBg&quot; :text-color=&quot;$store.getters.cssVar.menuText&quot; :active-text-color=&quot;$store.getters.cssVar.menuActiveText&quot; :unique-opened=&quot;true&quot; router&gt; 此处的 背景色是通过 getters 进行指定的，该 cssVar 的 getters 为： 1cssVar: state =&gt; variables, 所以，我们想要修改 自定义主题 ，只需要从这里入手即可。 根据当前保存的 mainColor 覆盖原有的默认色值 1234567891011121314151617import variables from &#x27;@/styles/variables.scss&#x27;import &#123; MAIN_COLOR &#125; from &#x27;@/constant&#x27;import &#123; getItem &#125; from &#x27;@/utils/storage&#x27;import &#123; generateColors &#125; from &#x27;@/utils/theme&#x27;const getters = &#123; ... cssVar: state =&gt; &#123; return &#123; ...variables, ...generateColors(getItem(MAIN_COLOR)) &#125; &#125;, ...&#125;export default getters 但是我们这样设定之后，整个自定义主题变更，还存在两个问题： menuBg 背景颜色没有变化 这个问题是因为咱们的 sidebar 的背景色未被替换，所以我们可以在 layout/index 中设置 sidebar 的 backgroundColor 12345&lt;sidebar id=&quot;guide-sidebar&quot; class=&quot;sidebar-container&quot; :style=&quot;&#123; backgroundColor: $store.getters.cssVar.menuBg &#125;&quot;/&gt; 主题色替换之后，需要刷新页面才可响应 这个是因为 getters 中没有监听到 依赖值的响应变化，所以我们希望修改依赖值 在 store/modules/theme 中 1234567891011121314151617181920...import variables from &#x27;@/styles/variables.scss&#x27;export default &#123; namespaced: true, state: () =&gt; (&#123; ... variables &#125;), mutations: &#123; /** * 设置主题色 */ setMainColor(state, newColor) &#123; ... state.variables.menuBg = newColor ... &#125; &#125;&#125; 在 getters 中 1234567891011121314....const getters = &#123; ... cssVar: state =&gt; &#123; return &#123; ...state.theme.variables, ...generateColors(getItem(MAIN_COLOR)) &#125; &#125;, ...&#125;export default getters 那么到这里整个自定义主题我们就处理完成了。 对于 自定义主题而言，核心的原理其实就是 修改scss变量来进行实现主题色变化 明确好了原理之后，对后续实现的步骤就具体情况具体分析了。 对于 element-plus：因为 element-plus 是第三方的包，所以它 不是完全可控 的，那么对于这种最简单直白的方案，就是直接拿到它编译后的 css 进行色值替换，利用 style 内部样式表 优先级高于 外部样式表 的特性，来进行主题替换 对于自定义主题：因为自定义主题是 完全可控 的，所以我们实现起来就轻松很多，只需要修改对应的 scss变量即可 那么在之后大家遇到 自定义主题 的处理时，就可以按照这里所梳理的方案进行处理了。 结束语这一章我们花了大量的篇幅来介绍换肤的原理以及业务场景如何实现换肤，篇幅有点长，就不在此添加其他功能的描述了。 如下功能我们放到下一章节去实现： screenfull headerSearch tagView guide 参考链接 CSS变量教程","categories":[],"tags":[{"name":"工程化,Vue3,通用功能","slug":"工程化-Vue3-通用功能","permalink":"http://yoursite.com/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96-Vue3-%E9%80%9A%E7%94%A8%E5%8A%9F%E8%83%BD/"}]},{"title":"Vue3项目实战(四)：Layout架构实现","slug":"vue3-project-layout","date":"2022-12-24T07:00:48.000Z","updated":"2024-06-11T08:52:17.355Z","comments":true,"path":"/post/vue3-project-layout.html","link":"","permalink":"http://yoursite.com/post/vue3-project-layout.html","excerpt":"layout架构实现，包括动态菜单栏、动态的面包屑等方案、侧边栏伸缩动画、退出的通用逻辑封装以及Vue3.2版本中的组件状态驱动的动态 CSS 值等等。","text":"实现 layout 布局首先，我们要改造 layout/index.vue，先定义好结构，然后写样式即可。 1234567891011121314&lt;div class=&quot;app-wrapper&quot;&gt; &lt;!-- 左侧 menu --&gt; &lt;siderbar class=&quot;sidebar-container&quot;&gt;&lt;/siderbar&gt; &lt;div class=&quot;main-container&quot;&gt; &lt;div class=&quot;fixed-header&quot;&gt; &lt;!-- 顶部 --&gt; &lt;nav-bar&gt;&lt;/nav-bar&gt; &lt;/div&gt; &lt;!-- 主要内容 --&gt; &lt;app-main&gt;&lt;/app-main&gt; &lt;/div&gt;&lt;/div&gt; 结构定义好了，我再定义样式以及样式文件。在 src 下创建 styles 文件夹，主要存放 scss 的一些样式文件，其中就包括通用的 reset.scss 文件，处理基础的 html 元素样式。mixin.scss 编写通用的样式表，定义通用的样式变量 variables.scss。 123456// styles/index.scss@import &#x27;./reset.scss&#x27;;@import &#x27;./variables.scss&#x27;;@import &#x27;./mixin.scss&#x27;;@import &#x27;./sidebar.scss&#x27;; scss 的使用技巧这里我们主要看下 mixin.scss 和 variables.scss 的一些技巧和用法： mixin.scss 1234567891011121314151617181920212223242526272829303132/* 清除浮动，在 .vue 文件中使用的时候直接引用即可：@include clearfix; */@mixin clearfix &#123; &amp;:after &#123; content: &#x27;&#x27;; display: table; clear: both; &#125;&#125;/* 滚动条的设置 */@mixin scrollBar &#123; &amp;::-webkit-scrollbar-track-piece &#123; background: #d3dce6; &#125; &amp;::-webkit-scrollbar &#123; width: 6px; &#125; &amp;::-webkit-scrollbar-thumb &#123; background: #99a9bf; border-radius: 20px; &#125;&#125;@mixin relative &#123; position: relative; width: 100%; height: 100%;&#125; variables.scss 12345678910111213141516171819202122232425262728// sidebar$menuText: #bfcbd9;$menuActiveText: #ffffff;$subMenuActiveText: #f4f4f5;$menuBg: #304156;$menuHover: #263445;$subMenuBg: #1f2d3d;$subMenuHover: #001528;$sideBarWidth: 210px;$hideSideBarWidth: 54px;$sideBarDuration: 0.28s;// https://www.bluematador.com/blog/how-to-share-variables-between-js-and-sass// JS 与 scss 共享变量，在 scss 中通过 :export 进行导出，在 js 中可通过 ESM 进行导入:export &#123; menuText: $menuText; menuActiveText: $menuActiveText; subMenuActiveText: $subMenuActiveText; menuBg: $menuBg; menuHover: $menuHover; subMenuBg: $subMenuBg; subMenuHover: $subMenuHover; sideBarWidth: $sideBarWidth;&#125; 关于 :export 的使用方式，我们可以查阅一些文档： https://www.bluematador.com/blog/how-to-share-variables-between-js-and-sass 编写 layout/index.vue 样式12345678910111213141516171819&lt;style lang=&quot;scss&quot; scoped&gt;@import &#x27;~@/styles/mixin.scss&#x27;;@import &#x27;~@/styles/variables.scss&#x27;;.app-wrapper &#123; @include clearfix; // 使用 mixin 中的样式 position: relative; height: 100%; width: 100%;&#125;.fixed-header &#123; position: fixed; top: 0; right: 0; z-index: 9; width: calc(100% - #&#123;$sideBarWidth&#125;);&#125;&lt;/style&gt; 给 SideBar 赋予动态的背景色1234567891011121314&lt;template&gt;... &lt;!-- 左侧 menu --&gt; &lt;sidebar class=&quot;sidebar-container&quot; :style=&quot;&#123; backgroundColor: variables.menuBg &#125;&quot; /&gt;...&lt;/template&gt;&lt;script setup&gt;// scss 通过 :export 导出了变量import variables from &#x27;@/styles/variables.scss&#x27;&lt;/script&gt; script导入scss文件报错在 vue 项目里引用.scss文件，vscode编辑器会有红色波浪线，提示找不到模块 找到 shims-vue.d.ts 声明文件，添加如下代码: 1234567declare module &#x27;*.scss&#x27; &#123; const css: &#123; // 定义的变量，通过 `variables.menuBg` 取值时，就不会报错了 menuBg: string; &#125; export default css&#125; 将来，新增了新的样式变量，我们在 css 下添加即可。 设置NavBar样式和头像布局1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677&lt;template&gt; &lt;div class=&quot;navbar&quot;&gt; &lt;div class=&quot;right-menu&quot;&gt; &lt;el-dropdown class=&quot;avatar-container&quot; trigger=&quot;click&quot;&gt; &lt;div class=&quot;avatar-wrapper&quot;&gt; &lt;el-avatar shape=&quot;square&quot; :size=&quot;40&quot; :src=&quot;&#x27;https://fuss10.elemecdn.com/e/5d/4a731a90594a4af544c0c25941171jpeg.jpeg&#x27;&quot; &gt;&lt;/el-avatar&gt; &lt;el-icon&gt;&lt;Tools /&gt;&lt;/el-icon&gt; &lt;/div&gt; &lt;template #dropdown&gt; &lt;el-dropdown-menu class=&quot;user-dropdown&quot;&gt; &lt;router-link to=&quot;/&quot;&gt; &lt;el-dropdown-item&gt; 主页 &lt;/el-dropdown-item&gt; &lt;/router-link&gt; &lt;a target=&quot;_blank&quot; href=&quot;&quot;&gt; &lt;el-dropdown-item&gt;Vue3&lt;/el-dropdown-item&gt; &lt;/a&gt; &lt;el-dropdown-item divided&gt; 退出 &lt;/el-dropdown-item&gt; &lt;/el-dropdown-menu&gt; &lt;/template&gt; &lt;/el-dropdown&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup lang=&quot;ts&quot;&gt;import &#123; ref, reactive &#125; from &#x27;vue&#x27;import &#123; Tools &#125; from &#x27;@element-plus/icons-vue&#x27;&lt;/script&gt;&lt;style scoped lang=&quot;scss&quot;&gt;.navbar &#123; height: 50px; overflow: hidden; position: relative; background: #fff; box-shadow: 0 1px 4px rgba(0, 21, 41, 0.08); .right-menu &#123; display: flex; align-items: center; float: right; padding-right: 16px; ::v-deep .right-menu-item &#123; display: inline-block; padding: 0 18px 0 0; font-size: 24px; color: #5a5e66; vertical-align: text-bottom; &amp;.hover-effect &#123; cursor: pointer; transition: background 0.3s; &amp;:hover &#123; background: rgba(0, 0, 0, 0.025); &#125; &#125; &#125; ::v-deep .avatar-container &#123; cursor: pointer; .avatar-wrapper &#123; margin-top: 5px; position: relative; .el-avatar &#123; --el-avatar-background-color: none; margin-right: 12px; &#125; &#125; &#125; &#125;&#125;&lt;/style&gt; 效果图 获取用户信息到目前为止，头像是静态的，也没有实现登出的逻辑，现在来实现一下。 设置请求头我们不希望每次调接口时，都去设置 token，那么我们可以在 请求拦截器 中去设置: 123456789101112service.interceptors.request.use( config =&gt; &#123; if (store.getters.token) &#123; config.headers.Authorization = `Baerer $&#123;store.getters.token&#125;` &#125; return config &#125;, error =&gt; &#123; return Promise.reject(error) &#125;) 编写 userInfo 接口简单实现一下 /userinfo 接口，主要是模拟前后端联调的流程。 123456789101112131415161718192021222324const express = require(&#x27;express&#x27;);const app = express()app.get(&#x27;/userinfo&#x27;, (req, res) =&gt; &#123; // 存在 token，可以返回用户信息 if (req.headers[&#x27;authorization&#x27;]) &#123; res.json(&#123; code: 0, data: &#123; avatar: &#x27;https://fuss10.elemecdn.com/e/5d/4a731a90594a4af544c0c25941171jpeg.jpeg&#x27;, name: &#x27;Hello_AlexCc&#x27;, id: 1, role: &#x27;super_admin&#x27; &#125;, message: &#x27;获取用户信息成功&#x27;, success: true, &#125;) &#125;&#125;)app.listen(9999, () =&gt; &#123; console.log(&#x27;server site an port 9999 ...&#x27;)&#125;) 调用 userInfo 接口时机我们的 userInfo 接口已经编写好了，那么我们在什么时候调用呢？ 很显然，我们需要在 permission.ts 中去调用，当用户登录才有 token，也就是说，我们可以在 token 存在时，并且 to.path 不等于 /login 的时候去调用用户信息接口。 12345678910if (store.getters.token) &#123; if (to.path === &#x27;/login&#x27;) &#123; next(&#x27;/&#x27;) &#125; else &#123; // 调用用户信息接口 await store.dispatch(&#x27;user/getUserInfo&#x27;) next() &#125;&#125; 我们获取用户信息接口的动作，放在了 module user 的 actions 中： 1234567891011121314// module/user.ts// statestate: () =&gt; (&#123; token: getItem(&#x27;token&#x27;) || &#x27;&#x27;, userinfo: &#123;&#125;&#125;),// actionsasync getUserInfo(context) &#123; const info = await getUserInfo() context.commit(&#x27;setUserInfo&#x27;, info) return info&#125;, 方便使用 userInfo，我们可以将其放到 getters 中： 1234const getters = &#123; token: (state) =&gt; state.user.token, userInfo: (state) =&gt; state.user.userinfo&#125; 最后，我们就能在 NavBar 使用获取到的用户信息了。 12345&lt;el-avatar shape=&quot;square&quot; :size=&quot;40&quot; :src=&quot;$store.getters.userInfo.avatar&quot;&gt;&lt;/el-avatar&gt; 避免重复调用 userInfo 接口 我们发现，每次切换路由时，都会触发路由的前置守卫，从而多次触发 getUserInfo 接口，我们把这个问题解决一下 在 store 中定义 hasUserInfo，用来判断是否已经有用户信息了，如果有用户信息，我们就不要再触发 getUserInfo 接口了 123456// getters.tshasUserInfo: (state) =&gt; &#123; // 如果用户信息存在，return true return JSON.stringify(state.user.userinfo) !== &#x27;&#123;&#125;&#x27;&#125; 修改 permission.ts 文件，只有 hasUserInfo 为 false 时，我们才调用用户信息接口 1234567891011if (store.getters.token) &#123; if (to.path === &#x27;/login&#x27;) &#123; next(&#x27;/&#x27;) &#125; else &#123; if (!store.getters.hasUserInfo) &#123; await store.dispatch(&#x27;user/getUserInfo&#x27;) &#125; next() &#125;&#125; 登出逻辑登出分为两种形式： 用户主动退出 用户被动登录（token 过去 | 账号被挤） 不管以何种形式退出，登出的逻辑都是相同的。 清理掉用户的缓存数据 清理掉权限相关的配置 返回到登录页 登出的逻辑，我们也可以写在 module user 中去处理。 主要执行 3 个步骤： 清空 store token 清除浏览器本地存储 跳转到 login 页 12345logout(context: any) &#123; context.commit(&#x27;setToken&#x27;, &#x27;&#x27;) removeAllItem() router.push(&#x27;/login&#x27;)&#125; 主动退出用户点击登录按钮，通过 store dispatch 触发 action 的 logout 即可。 被动退出被动退出大概分为两种： token 失效 账号被挤下去 那么这两种场景下，在前端对应的处理方案一共也分为两种，共分为 主动处理 、被动处理 两种 ： 主动处理：主要应对 token 失效 被动处理：同时应对 token 失效 与 单点登录（账号被挤） 用户被动退出解决方案之主动处理为了保证用户的信息安全，那么对于 token 而言就被制定了很多的安全策略，比如： 动态 token（可变 token） 刷新 token 时效 token… 我们这里采用 时效 token。 那么对应到我们代码中的实现方案为： 在用户登陆时，记录当前 登录时间 制定一个 失效时长 在接口调用时，根据 当前时间 对比 登录时间 ，看是否超过了 时效时长 如果未超过，则正常进行后续操作 如果超过，则进行 退出登录 操作 代码实现创建 utils/auth.js 文件，并写入以下代码： 123456789101112131415161718192021222324import &#123; TIME_STAMP, TOKEN_TIMEOUT_VALUE &#125; from &#x27;@/constant&#x27;import &#123; setItem, getItem &#125; from &#x27;@/utils/storage&#x27;/** * 获取时间戳 */export function getTimeStamp() &#123; return getItem(TIME_STAMP)&#125;/** * 设置时间戳 */export function setTimeStamp() &#123; setItem(TIME_STAMP, Date.now())&#125;/** * 是否超时 */export function isCheckTimeout() &#123; // 当前时间戳 var currentTime = Date.now() // 缓存时间戳 var timeStamp = getTimeStamp() return currentTime - timeStamp &gt; TOKEN_TIMEOUT_VALUE&#125; 在 constant 中声明对应常量： 1234// token 时间戳export const TIME_STAMP = &#x27;timeStamp&#x27;// 超时时长(毫秒) 两小时export const TOKEN_TIMEOUT_VALUE = 2 * 60 * 60 * 1000 在用户登录成功之后去设置时间，到 store/user.js 的 login 中： 1234567891011121314import &#123; setTimeStamp &#125; from &#x27;@/utils/auth&#x27;login(context, userInfo) &#123; ... return new Promise((resolve, reject) =&gt; &#123; ... .then(data =&gt; &#123; ... // 保存登录时间 setTimeStamp() resolve() &#125;) &#125;)&#125;, 在 utils/request 对应的请求拦截器中进行 主动介入 123456789101112import &#123; isCheckTimeout &#125; from &#x27;@/utils/auth&#x27;if (store.getters.token) &#123; if (isCheckTimeout()) &#123; // 登出操作 store.dispatch(&#x27;user/logout&#x27;) // 失败的话，会走到 interceptors.response 的 error 方法。 return Promise.reject(new Error(&#x27;token 失效&#x27;)) &#125; ...&#125; 那么至此我们就完成了 主动处理 对应的业务逻辑。 用户被动退出解决方案之被动处理背景： 首先我们需要先明确 被动处理 需要应对两种业务场景： token 过期 单点登录 然后我们一个一个来去看，首先是 token 过期 我们知道对于 token 而言，本身就是具备时效的，这个是在服务端生成 token 时就已经确定的。 而此时我们所谓的 token 过期指的就是： 服务端生成的 token 超过 服务端指定时效 的过程，就像我们前端项目指定 token 的失效性一样。 而对于 单点登录 而言，指的是： 当用户 A 登录之后，token 过期之前。 用户 A 的账号在其他的设备中进行了二次登录，导致第一次登录的 A 账号被 “顶下来” 的过程。 即：同一账户仅可以在一个设备中保持在线状态 那么明确好了对应的背景之后，接下来我们来看对应的业务处理场景： 从背景中我们知道，以上的两种情况，都是在 服务端进行判断的，而对于前端而言其实是 服务端通知前端的一个过程。 所以说对于其业务处理，将遵循以下逻辑： 服务端返回数据时，会通过特定的状态码通知前端 当前端接收到特定状态码时，表示遇到了特定状态：token 时效 或 单点登录 此时进行 退出登录 处理 这里只做了 token 的过期处理，如果需要到 单点登录 时，只需要增加一个状态码判断即可。 服务端超时间逻辑我们来简单实现一下后端的超时逻辑。 我们通过 app.use 添加了一个中间件，每一次前端触发了接口请求，都会先走这个中间件逻辑。 服务器启动时，我们把 now 和 current 设置当前时间戳，当有一个接口触发了，会将 current 设置新的时间戳。 1234567891011121314151617181920212223242526272829303132const express = require(&#x27;express&#x27;);const app = express()// token 超时 2hconst TOKEN_TIMEOUT_VALUE = 2 * 60 * 60 * 1000let now = Date.now()let current = Date.now()app.use(function(req, res, next) &#123; // 每次有接口调用，触发中间件，将 current 更新 current = Date.now() // 如果是登录逻辑，我们将 now 设置为 current，这样就不会触发超时逻辑 // 重新登录，继续走此判断，将 now 设置为 current if (req.path === &#x27;/login&#x27;) &#123; now = current &#125; // 每次中间件都会将 current 更新为当前时间戳，一旦时间戳的差值，大于了 2h，就会触发 超时逻辑 if (current - now &gt; TOKEN_TIMEOUT_VALUE) &#123; // 超时 res.status(401).send(&#123; code: 401, message: &#x27;服务端message: token 失效啦&#x27;, success: false, &#125;) &#125; else &#123; // 没有超时，将执行权交给下一个路由 next() &#125;&#125;) 那么明确好了业务之后，接下来我们来实现前端对应代码： 在 utils/request 的响应拦截器中，增加以下逻辑： 1234567891011121314151617181920212223// 响应拦截器service.interceptors.response.use( response =&gt; &#123; ... &#125;, error =&gt; &#123; // 处理 token 超时问题 if ( error.response &amp;&amp; error.response.data &amp;&amp; error.response.data.code === 401 ) &#123; store.dispatch(&#x27;user/logout&#x27;) &#125; if (error.response &amp;&amp; error.response.data &amp;&amp; error.response.data.message) &#123; ElMessage.error(error.response.data.message) // 提示服务端抛出的错误信息 &#125; else &#123; ElMessage.error(error.message) &#125; return Promise.reject(error) &#125;) 那么至此，我们就已经完成了 整个用户退出 方案。 Sidebar 动态菜单接下来我们来处理 动态menu菜单。 临时的 menu 菜单，创建 layout/Sidebar/SidebarMenu 文件 1234567891011121314151617181920212223242526272829303132&lt;template&gt; &lt;!-- 一级 menu 菜单 --&gt; &lt;el-menu &#123;/* 只允许一个菜单展开 */&#125; :uniqueOpened=&quot;true&quot; default-active=&quot;1&quot; background-color=&quot;#545c64&quot; text-color=&quot;#fff&quot; active-text-color=&quot;#ffd04b&quot; &gt; &lt;!-- 子集 menu 菜单 --&gt; &lt;el-sub-menu index=&quot;1&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt;&lt;location /&gt;&lt;/el-icon&gt; &lt;span&gt;导航一&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;1-1&quot;&gt;选项1&lt;/el-menu-item&gt; &lt;el-menu-item index=&quot;1-2&quot;&gt;选项2&lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;!-- 具体菜单项 --&gt; &lt;el-menu-item index=&quot;4&quot;&gt; &lt;el-icon&gt;&lt;setting /&gt;&lt;/el-icon&gt; &lt;template #title&gt;导航四&lt;/template&gt; &lt;/el-menu-item&gt; &lt;/el-menu&gt;&lt;/template&gt;&lt;script setup lang=&quot;ts&quot;&gt;import &#123; ref, reactive &#125; from &#x27;vue&#x27;import &#123; Location, Setting &#125; from &#x27;@element-plus/icons-vue&#x27;&lt;/script&gt;&lt;style scoped&gt;&lt;/style&gt; 在 layout/Sidebar/index 中导入该组件 12345678910111213&lt;template&gt; &lt;div class=&quot;&quot;&gt; &lt;h1&gt;占位&lt;/h1&gt; &lt;el-scrollbar&gt; &lt;sidebar-menu&gt;&lt;/sidebar-menu&gt; &lt;/el-scrollbar&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import SidebarMenu from &#x27;./SidebarMenu&#x27;import &#123;&#125; from &#x27;vue&#x27;&lt;/script&gt; 那么至此我们生成了一个临时的 menu 菜单，从这个临时的 menu 菜单出可以看到，el-menu 其实分成了三个部分： el-menu：整个 menu 菜单 el-submenu：子集 menu 菜单 el-menu-item：具体菜单项 那么明确好了这些内容之后，接下来我们就可以来去分析一下 动态 menu 菜单如何生成了 动态menu菜单处理方案解析动态menu菜单 其实主要是和 动态路由表 配合来去实现 用户权限 的。 但是 用户权限处理 目前还未涉及到，因为咱们想要处理 用户权限 还需要先去处理很多的业务场景，所以暂时先只处理 动态menu菜单 。 所谓 动态menu菜单 指的是： 根据路由表的配置，自动生成对应的 menu 菜单。 当路由表发生变化时，menu 菜单自动发生变化 那么明确了 动态menu菜单 的含义之后，接下来咱们就需要来明确 动态menu菜单 的实现方案： 定义 路由表 对应 menu 菜单规则 根据规则制定 路由表 根据规则，依据 路由表 ，生成 menu 菜单 那么根据我们的实现方案可以发现，实现 动态menu菜单 最核心的关键点其实就在步骤一，也就是 定义 路由表 对应 menu 菜单规则 那么下面我们就来看一下，这个规则如何制定： 对于单个路由规则而言（循环）： 如果存在 meta &amp;&amp; meta.title &amp;&amp; meta.icon ：则显示在 menu 菜单中，其中 title 为显示的内容，icon 为显示的图标 如果存在 children ：则以 el-sub-menu（子菜单） 展示 否则：则以 el-menu-item（菜单项） 展示 否则：不显示在 menu 菜单中 那么明确好了对应的规则之后，接下来我们就可以来去看一下如何进行实现啦！ 生成项目页面组件明确了对应的方案之后，那么下面咱们就来实现对应的代码逻辑。 根据我们的分析，想要完成动态的 menu，那么我们需要按照以下的步骤来去实现： 创建页面组件 生成路由表 解析路由表 生成 menu 菜单 那么明确好了步骤之后，接下来我们就先来实现第一步 创建页面组件 在 views 文件夹下，创建如下页面： 创建文章：article-create 文章详情：article-detail 文章排名：article-ranking 错误页面：error-page 404 401 导入：import 权限列表：permission-list 个人中心：profile 角色列表：role-list 用户信息：user-info 用户管理：user-manage 创建结构路由表想要实现结构路由表，那么我们需要先知道最终我们要实现的结构是什么样子的，大家来看下面的截图： 这是我们最终要实现的 menu 截图。 根据此截图，我们可以知道两点内容： 我们创建的页面并没有全部进行展示 不显示页面表示 不满足 该条件 meta &amp;&amp; meta.title &amp;&amp; meta.icon menu 菜单将具备父子级的结构 按照此结构规划数据，则数据应为123456789101112131415161718192021222324252627282930313233343536[ &#123; &quot;title&quot;: &quot;个人中心&quot;, &quot;path&quot;: &quot;&quot; &#125;, &#123; &quot;title&quot;: &quot;用户&quot;, &quot;children&quot;: [ &#123; &quot;title&quot;: &quot;员工管理&quot;, &quot;path&quot;: &quot;&quot; &#125;, &#123; &quot;title&quot;: &quot;角色列表&quot;, &quot;path&quot;: &quot;&quot; &#125;, &#123; &quot;title&quot;: &quot;权限列表&quot;, &quot;path&quot;: &quot;&quot; &#125; ] &#125;, &#123; &quot;title&quot;: &quot;文章&quot;, &quot;children&quot;: [ &#123; &quot;title&quot;: &quot;文章排名&quot;, &quot;path&quot;: &quot;&quot; &#125;, &#123; &quot;title&quot;: &quot;创建文章&quot;, &quot;path&quot;: &quot;&quot; &#125; ] &#125;] 又因为将来我们需要进行 用户权限处理，所以此时我们需要先对路由表进行一个划分： 私有路由表 privateRoutes ：权限路由 公有路由表 publicRoutes：无权限路由 根据以上理论，生成以下路由表结构： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139/** * 私有路由表 */const privateRoutes = [ &#123; path: &#x27;/user&#x27;, component: layout, redirect: &#x27;/user/manage&#x27;, meta: &#123; title: &#x27;user&#x27;, icon: &#x27;personnel&#x27; &#125;, children: [ &#123; path: &#x27;/user/manage&#x27;, component: () =&gt; import(&#x27;@/views/user-manage/index&#x27;), meta: &#123; title: &#x27;userManage&#x27;, icon: &#x27;personnel-manage&#x27; &#125; &#125;, &#123; path: &#x27;/user/role&#x27;, component: () =&gt; import(&#x27;@/views/role-list/index&#x27;), meta: &#123; title: &#x27;roleList&#x27;, icon: &#x27;role&#x27; &#125; &#125;, &#123; path: &#x27;/user/permission&#x27;, component: () =&gt; import(&#x27;@/views/permission-list/index&#x27;), meta: &#123; title: &#x27;permissionList&#x27;, icon: &#x27;permission&#x27; &#125; &#125;, &#123; path: &#x27;/user/info/:id&#x27;, name: &#x27;userInfo&#x27;, component: () =&gt; import(&#x27;@/views/user-info/index&#x27;), meta: &#123; title: &#x27;userInfo&#x27; &#125; &#125;, &#123; path: &#x27;/user/import&#x27;, name: &#x27;import&#x27;, component: () =&gt; import(&#x27;@/views/import/index&#x27;), meta: &#123; title: &#x27;excelImport&#x27; &#125; &#125; ] &#125;, &#123; path: &#x27;/article&#x27;, component: layout, redirect: &#x27;/article/ranking&#x27;, meta: &#123; title: &#x27;article&#x27;, icon: &#x27;article&#x27; &#125;, children: [ &#123; path: &#x27;/article/ranking&#x27;, component: () =&gt; import(&#x27;@/views/article-ranking/index&#x27;), meta: &#123; title: &#x27;articleRanking&#x27;, icon: &#x27;article-ranking&#x27; &#125; &#125;, &#123; path: &#x27;/article/:id&#x27;, component: () =&gt; import(&#x27;@/views/article-detail/index&#x27;), meta: &#123; title: &#x27;articleDetail&#x27; &#125; &#125;, &#123; path: &#x27;/article/create&#x27;, component: () =&gt; import(&#x27;@/views/article-create/index&#x27;), meta: &#123; title: &#x27;articleCreate&#x27;, icon: &#x27;article-create&#x27; &#125; &#125;, &#123; path: &#x27;/article/editor/:id&#x27;, component: () =&gt; import(&#x27;@/views/article-create/index&#x27;), meta: &#123; title: &#x27;articleEditor&#x27; &#125; &#125; ] &#125;]/** * 公开路由表 */const publicRoutes = [ &#123; path: &#x27;/login&#x27;, component: () =&gt; import(&#x27;@/views/login/index&#x27;) &#125;, &#123; path: &#x27;/&#x27;, // 注意：带有路径“/”的记录中的组件“默认”是一个不返回 Promise 的函数 component: layout, redirect: &#x27;/profile&#x27;, children: [ &#123; path: &#x27;/profile&#x27;, name: &#x27;profile&#x27;, component: () =&gt; import(&#x27;@/views/profile/index&#x27;), meta: &#123; title: &#x27;profile&#x27;, icon: &#x27;el-icon-user&#x27; &#125; &#125;, &#123; path: &#x27;/404&#x27;, name: &#x27;404&#x27;, component: () =&gt; import(&#x27;@/views/error-page/404&#x27;) &#125;, &#123; path: &#x27;/401&#x27;, name: &#x27;401&#x27;, component: () =&gt; import(&#x27;@/views/error-page/401&#x27;) &#125; ] &#125;]const router = createRouter(&#123; history: createWebHashHistory(), routes: [...publicRoutes, ...privateRoutes]&#125;) 最后不要忘记在 layout/appMain 下设置路由出口 12345&lt;template&gt; &lt;div class=&quot;app-main&quot;&gt; &lt;router-view&gt;&lt;/router-view&gt; &lt;/div&gt;&lt;/template&gt; 解析路由表，获取结构化数据想要获取路由表数据，那么有两种方式： router.options.routes：初始路由列表（新增的路由 无法获取到） router.getRoutes()：获取所有 路由记录 的完整列表 所以，我们此时使用 router.getRoutes() 方法获取完整的路由列表 在 layout/components/Sidebar/SidebarMenu 下写入以下代码： 123456&lt;script setup&gt;import &#123; useRouter &#125; from &#x27;vue-router&#x27;const router = useRouter()console.log(router.getRoutes())&lt;/script&gt; 从返回的数据来看，它与我们想要的数据结构相去甚远。 出现这个问题的原因，是因为它返回的是一个 完整的路由表 这个路由表距离我们想要的存在两个问题： 存在重复的路由数据 不满足该条件 meta &amp;&amp; meta.title &amp;&amp; meta.icon 的数据不应该存在 那么接下来我们就应该来处理这两个问题 创建 utils/route.ts 文件，创建两个方法分别处理对应的两个问题： filterRouters generateMenus 写入以下代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576import path from &#x27;path&#x27;/** * 返回所有子路由 */const getChildrenRoutes = routes =&gt; &#123; const result = [] routes.forEach(route =&gt; &#123; if (route.children &amp;&amp; route.children.length &gt; 0) &#123; result.push(...route.children) &#125; &#125;) return result&#125;/** * 处理脱离层级的路由：某个一级路由为其他子路由，则剔除该一级路由，保留路由层级 * @param &#123;*&#125; routes router.getRoutes() */export const filterRouters = routes =&gt; &#123; const childrenRoutes = getChildrenRoutes(routes) return routes.filter(route =&gt; &#123; return !childrenRoutes.find(childrenRoute =&gt; &#123; return childrenRoute.path === route.path &#125;) &#125;)&#125;/** * 判断数据是否为空值 */function isNull(data) &#123; if (!data) return true if (JSON.stringify(data) === &#x27;&#123;&#125;&#x27;) return true if (JSON.stringify(data) === &#x27;[]&#x27;) return true return false&#125;/** * 根据 routes 数据，返回对应 menu 规则数组 */export function generateMenus(routes, basePath = &#x27;&#x27;) &#123; const result = [] // 遍历路由表 routes.forEach(item =&gt; &#123; // 不存在 children &amp;&amp; 不存在 meta 直接 return if (isNull(item.meta) &amp;&amp; isNull(item.children)) return // 存在 children 不存在 meta，进入迭代 if (isNull(item.meta) &amp;&amp; !isNull(item.children)) &#123; result.push(...generateMenus(item.children)) return &#125; // 合并 path 作为跳转路径 const routePath = path.resolve(basePath, item.path) // 路由分离之后，存在同名父路由的情况，需要单独处理 let route = result.find(item =&gt; item.path === routePath) if (!route) &#123; route = &#123; ...item, path: routePath, children: [] &#125; // icon 与 title 必须全部存在 if (route.meta.icon &amp;&amp; route.meta.title) &#123; // meta 存在生成 route 对象，放入 arr result.push(route) &#125; &#125; // 存在 children 进入迭代到children if (item.children) &#123; route.children.push(...generateMenus(item.children, route.path)) &#125; &#125;) return result&#125; 在 SidebarMenu 中调用该方法 123456789101112&lt;script setup&gt;import &#123; computed &#125; from &#x27;vue&#x27;import &#123; useRouter &#125; from &#x27;vue-router&#x27;import &#123; filterRouters, generateMenus &#125; from &#x27;@/utils/route&#x27;const router = useRouter()const routes = computed(() =&gt; &#123; const filterRoutes = filterRouters(router.getRoutes()) return generateMenus(filterRoutes)&#125;)console.log(JSON.stringify(routes.value))&lt;/script&gt; 得到该数据结构 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091[ &#123; &quot;path&quot;:&quot;/profile&quot;, &quot;name&quot;:&quot;profile&quot;, &quot;meta&quot;:&#123; &quot;title&quot;:&quot;profile&quot;, &quot;icon&quot;:&quot;el-icon-user&quot; &#125;, &#125;, &#123; &quot;path&quot;:&quot;/user&quot;, &quot;redirect&quot;:&quot;/user/manage&quot;, &quot;meta&quot;:&#123; &quot;title&quot;:&quot;user&quot;, &quot;icon&quot;:&quot;personnel&quot; &#125;, &quot;props&quot;:&#123; &quot;default&quot;:false &#125;, &quot;children&quot;:[ &#123; &quot;path&quot;:&quot;/user/manage&quot;, &quot;name&quot;:&quot;userManage&quot;, &quot;meta&quot;:&#123; &quot;title&quot;:&quot;userManage&quot;, &quot;icon&quot;:&quot;personnel-manage&quot; &#125;, &quot;children&quot;:[ ] &#125;, &#123; &quot;path&quot;:&quot;/user/role&quot;, &quot;name&quot;:&quot;userRole&quot;, &quot;meta&quot;:&#123; &quot;title&quot;:&quot;roleList&quot;, &quot;icon&quot;:&quot;role&quot; &#125;, &quot;children&quot;:[ ] &#125;, &#123; &quot;path&quot;:&quot;/user/permission&quot;, &quot;name&quot;:&quot;userPermission&quot;, &quot;meta&quot;:&#123; &quot;title&quot;:&quot;permissionList&quot;, &quot;icon&quot;:&quot;permission&quot; &#125;, &quot;children&quot;:[ ] &#125; ], &#125;, &#123; &quot;path&quot;:&quot;/article&quot;, &quot;redirect&quot;:&quot;/article/ranking&quot;, &quot;meta&quot;:&#123; &quot;title&quot;:&quot;article&quot;, &quot;icon&quot;:&quot;article&quot; &#125;, &quot;props&quot;:&#123; &quot;default&quot;:false &#125;, &quot;children&quot;:[ &#123; &quot;path&quot;:&quot;/article/ranking&quot;, &quot;name&quot;:&quot;articleRanking&quot;, &quot;meta&quot;:&#123; &quot;title&quot;:&quot;articleRanking&quot;, &quot;icon&quot;:&quot;article-ranking&quot; &#125;, &quot;children&quot;:[ ] &#125;, &#123; &quot;path&quot;:&quot;/article/create&quot;, &quot;name&quot;:&quot;articleCreate&quot;, &quot;meta&quot;:&#123; &quot;title&quot;:&quot;articleCreate&quot;, &quot;icon&quot;:&quot;article-create&quot; &#125;, &quot;children&quot;:[ ] &#125; ], &#125;] 生成动态 menu 菜单有了数据结构之后，最后的步骤就水到渠成了 整个 menu 菜单，我们将分成三个组件来进行处理 SidebarMenu：处理数据，作为最顶层 menu 载体 SidebarItem：根据数据处理 当前项为 el-submenu || el-menu-item MenuItem：处理 el-menu-item 样式 那么下面我们一个个来处理 首先是 SidebarMenu 12345678910111213&lt;template&gt; &lt;!-- 一级 menu 菜单 --&gt; &lt;el-menu ... &gt; &lt;sidebar-item v-for=&quot;item in routes&quot; :key=&quot;item.path&quot; :route=&quot;item&quot; &gt;&lt;/sidebar-item&gt; &lt;/el-menu&gt;&lt;/template&gt; 创建 SidebarItem 组件，用来根据数据处理 当前项为 el-sub-menu || el-menu-item 123456789101112131415161718192021222324252627282930&lt;template&gt; &lt;!-- 支持渲染多级 menu 菜单 --&gt; &lt;el-sub-menu v-if=&quot;route.children.length &gt; 0&quot; :index=&quot;route.path&quot;&gt; &lt;template #title&gt; &lt;menu-item :title=&quot;route.meta.title&quot; :icon=&quot;route.meta.icon&quot;&gt;&lt;/menu-item&gt; &lt;/template&gt; &lt;!-- 循环渲染 --&gt; &lt;sidebar-item v-for=&quot;item in route.children&quot; :key=&quot;item.path&quot; :route=&quot;item&quot; &gt;&lt;/sidebar-item&gt; &lt;/el-sub-menu&gt; &lt;!-- 渲染 item 项 --&gt; &lt;el-menu-item v-else :index=&quot;route.path&quot;&gt; &lt;menu-item :title=&quot;route.meta.title&quot; :icon=&quot;route.meta.icon&quot;&gt;&lt;/menu-item&gt; &lt;/el-menu-item&gt;&lt;/template&gt;&lt;script setup&gt;import MenuItem from &#x27;./MenuItem&#x27;import &#123; defineProps &#125; from &#x27;vue&#x27;// 定义 propsdefineProps(&#123; route: &#123; type: Object, required: true &#125;&#125;)&lt;/script&gt; 创建 MenuItem 用来处理 el-menu-item 样式 12345678910111213141516171819202122&lt;template&gt; &lt;i v-if=&quot;icon.includes(&#x27;el-icon&#x27;)&quot; class=&quot;sub-el-icon&quot; :class=&quot;icon&quot;&gt;&lt;/i&gt; &lt;svg-icon v-else :icon=&quot;icon&quot;&gt;&lt;/svg-icon&gt; &lt;span&gt;&#123;&#123; title &#125;&#125;&lt;/span&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; defineProps &#125; from &#x27;vue&#x27;defineProps(&#123; title: &#123; type: String, required: true &#125;, icon: &#123; type: String, required: true &#125;&#125;)&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt; 至此，整个的 menu 菜单结构就已经完成了！ 修复最后残余问题目前 menu 菜单存在三个问题 样式问题 路由跳转问题 默认激活项 样式问题： 首先处理样式，因为后面我们需要处理 主题替换 ，所以此处我们不能把样式写死。因为我们的样式变量都放在 variables.scss 文件中，并通过 :export 导出了变量以供 js 导入，每次使用都需要导入，比较麻烦，我们可以将其放在 store getters 中，以便 快捷访问。 12345import variables from &#x27;@/styles/variables.scss&#x27;const getters = &#123; cssVar: () =&gt; variables&#125;export default getters 在 SidebarMenu 中写入如下样式 123456&lt;el-menu :background-color=&quot;$store.getters.cssVar.menuBg&quot; :text-color=&quot;$store.getters.cssVar.menuText&quot; :active-text-color=&quot;$store.getters.cssVar.menuActiveText&quot; :unique-opened=&quot;true&quot;&gt; 路由跳转问题： 为 el-menu 指定 router 1234&lt;el-menu ... router&gt; 添加 router 属性 表示是否启用 vue-router 模式。 启用该模式会在激活导航时以 index 作为 path 进行路由跳转 使用 default-active 来设置加载时的激活项。 默认激活项： 根据当前 url 进行判断即可 123456789101112131415&lt;el-menu :default-active=&quot;activeMenu&quot; ...&gt;&lt;script setup&gt;...// 计算高亮 menu 的方法const route = useRoute()const activeMenu = computed(() =&gt; &#123; const &#123; path &#125; = route return path&#125;)&lt;/script&gt; 至此整个 动态menu完成 左侧菜单伸缩功能实现下面我们来实现一个标准化功能 左侧菜单伸缩 ，对于这个功能核心的点在于动画处理 样式的改变总是由数据进行驱动，所以首先我们去创建对应的数据 创建 store/app 模块，写入如下代码 12345678910111213export default &#123; namespaced: true, state: () =&gt; (&#123; sidebarOpened: true &#125;), mutations: &#123; triggerSidebarOpened(state) &#123; state.sidebarOpened = !state.sidebarOpened &#125; &#125;, actions: &#123;&#125;&#125; 在 store/index 中进行导入 123456789...import app from &#x27;./modules/app&#x27;export default createStore(&#123; getters, modules: &#123; ... app &#125;&#125;) 在 store/getters 中创建快捷访问 1sidebarOpened: state =&gt; state.app.sidebarOpened 创建 components/hamburger 组件，用来控制数据 12345678910111213141516171819202122232425262728293031&lt;template&gt; &lt;div class=&quot;hamburger-container&quot; @click=&quot;toggleClick&quot;&gt; &lt;svg-icon class=&quot;hamburger&quot; :icon=&quot;icon&quot;&gt;&lt;/svg-icon&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; computed &#125; from &#x27;vue&#x27;import &#123; useStore &#125; from &#x27;vuex&#x27;const store = useStore()const toggleClick = () =&gt; &#123; store.commit(&#x27;app/triggerSidebarOpened&#x27;)&#125;const icon = computed(() =&gt; store.getters.sidebarOpened ? &#x27;hamburger-opened&#x27; : &#x27;hamburger-closed&#x27;)&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;.hamburger-container &#123; padding: 0 16px; .hamburger &#123; display: inline-block; vertical-align: middle; width: 20px; height: 20px; &#125;&#125;&lt;/style&gt; 在 navbar 中使用该组件 123456789101112131415161718192021222324252627282930313233&lt;template&gt; &lt;div class=&quot;navbar&quot;&gt; &lt;hamburger class=&quot;hamburger-container&quot; /&gt; ... &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import Hamburger from &#x27;@/components/Hamburger&#x27;...&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;.navbar &#123; ... .hamburger-container &#123; line-height: 46px; height: 100%; float: left; cursor: pointer; // hover 动画 transition: background 0.5s; &amp;:hover &#123; background: rgba(0, 0, 0, 0.1); &#125; &#125; ...&#125;&lt;/style&gt; 在 SidebarMenu 中，控制 el-menu 的 collapse 属性 123&lt;el-menu :collapse=&quot;!$store.getters.sidebarOpened&quot; ... 在 layout/index 中指定 整个侧边栏的宽度和缩放动画 12345&lt;div class=&quot;app-wrapper&quot; :class=&quot;[$store.getters.sidebarOpened ? &#x27;openSidebar&#x27; : &#x27;hideSidebar&#x27;]&quot; &gt; ... 在 layout/index 中 处理 navbar 的宽度 12345678910111213141516&lt;style lang=&quot;scss&quot; scoped&gt;....fixed-header &#123; position: fixed; top: 0; right: 0; z-index: 9; width: calc(100% - #&#123;$sideBarWidth&#125;); transition: width 0.28s;&#125;.hideSidebar .fixed-header &#123; width: calc(100% - #&#123;$hideSideBarWidth&#125;);&#125;&lt;/style&gt; 在 styles/variables.scss 中指定 hideSideBarWidth 1$hideSideBarWidth: 54px; SidebarHeader 处理整个左侧的 menu 菜单，到现在咱们还剩下最后一个 header 没有进行处理 在 sidebar/index 中写入如下代码 12345678910111213141516171819202122232425262728293031323334&lt;template&gt; &lt;div class=&quot;&quot;&gt; &lt;div class=&quot;logo-container&quot;&gt; &lt;el-avatar size=&quot;44&quot; shape=&quot;square&quot; src=&quot;https://m.imooc.com/static/wap/static/common/img/logo-small@2x.png&quot; /&gt; &lt;h1 class=&quot;logo-title&quot; v-if=&quot;$store.getters.sidebarOpened&quot;&gt; imooc-admin &lt;/h1&gt; &lt;/div&gt; ... &lt;/div&gt;&lt;/template&gt;&lt;style lang=&quot;scss&quot; scoped&gt;.logo-container &#123; height: 44px; padding: 10px 0 22px 0; display: flex; align-items: center; justify-content: center; .logo-title &#123; margin-left: 10px; color: #fff; font-weight: 600; line-height: 50px; font-size: 16px; white-space: nowrap; &#125;&#125;&lt;/style&gt; 创建 styles/element.scss 文件，统一处理 el-avatar 的背景问题 123.el-avatar &#123; --el-avatar-background-color: none;&#125; 在 styles/index.scss 中导入 12...@import &#x27;./element.scss&#x27;; 统一处理下动画时长的问题，在 styles/variables.scss 中，加入以下变量 1$sideBarDuration: 0.28s; 为 styles/sidebar.scss 修改时长 123456789.main-container &#123; transition: margin-left #&#123;$sideBarDuration&#125;; ...&#125;.sidebar-container &#123; transition: width #&#123;$sideBarDuration&#125;; ...&#125; 为 layout/index 修改样式 1234.fixed-header &#123; ... transition: width #&#123;$sideBarDuration&#125;;&#125; Vue3.2：组件状态驱动的动态 CSS 值在 vue 3.2 最新更新中，除了之前我们介绍的 响应式变化 之外，还有另外一个很重要的更新，那就是 组件状态驱动的动态 CSS 值 ，对应的文档也已经公布，大家可以 点击这里 查看 那么下面我们就使用下最新的特性，来为 logo-container 指定下高度： 1234567891011121314151617181920&lt;template&gt; ... &lt;el-avatar :size=&quot;logoHeight&quot; ...&lt;/template&gt;&lt;script setup&gt;...const logoHeight = 44&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;.logo-container &#123; height: v-bind(logoHeight) + &#x27;px&#x27;;...&#125;&lt;/style&gt; 动态面包屑方案分析面包屑导航分为： 静态面包屑 动态面包屑 静态面包屑： 指的是：在每个页面中写死对应的面包屑菜单，缺点也很明显： 每个页面都得写一遍 页面路径结构变化了，得手动更改 简单来说就是 不好维护，不好扩展 。 动态面包屑： 根据当前的 url 自动生成面包屑导航菜单 无论之后路径发生了什么变化，动态面包屑 都会正确的进行计算 那么在后面的实现过程中，我们将会分成三大步来实现 创建、渲染基本的面包屑组件 计算面包屑结构数据 根据数据渲染动态面包屑内容 渲染基本的面包屑组件完成第一步，先去创建并渲染出基本的 面包屑 组件 创建 components/Breadcrumb/index，并写入如下代码： 123456789101112131415161718192021222324252627282930&lt;template&gt; &lt;el-breadcrumb class=&quot;breadcrumb&quot; separator=&quot;/&quot;&gt; &lt;el-breadcrumb-item :to=&quot;&#123; path: &#x27;/&#x27; &#125;&quot;&gt;首页&lt;/el-breadcrumb-item&gt; &lt;el-breadcrumb-item&gt;&lt;a href=&quot;/&quot;&gt;活动管理&lt;/a&gt;&lt;/el-breadcrumb-item&gt; &lt;el-breadcrumb-item&gt;活动列表&lt;/el-breadcrumb-item&gt; &lt;!-- 面包屑的最后一项 --&gt; &lt;el-breadcrumb-item&gt; &lt;span class=&quot;no-redirect&quot;&gt;活动详情&lt;/span&gt; &lt;/el-breadcrumb-item&gt; &lt;/el-breadcrumb&gt;&lt;/template&gt;&lt;script setup&gt;import &#123;&#125; from &#x27;vue&#x27;&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;.breadcrumb &#123; display: inline-block; font-size: 14px; line-height: 50px; margin-left: 8px; ::v-deep .no-redirect &#123; color: #97a8be; cursor: text; &#125;&#125;&lt;/style&gt; 在 layout/components/Navbar 组件下导入 1234567891011121314151617181920&lt;template&gt; &lt;div class=&quot;navbar&quot;&gt; &lt;hamburger class=&quot;hamburger-container&quot; /&gt; &lt;breadcrumb class=&quot;breadcrumb-container&quot; /&gt; ... &lt;/div&gt;&lt;/template&gt;...&lt;style lang=&quot;scss&quot; scoped&gt;.navbar &#123; ... .breadcrumb-container &#123; float: left; &#125; ...&#125;&lt;/style&gt; 动态计算面包屑结构数据现在我们是完成了一个静态的 面包屑，接下来咱们就需要依托这个静态的菜单来完成动态的。 对于现在的静态面包屑来说，他分成了两个组件： el-breadcrumb：包裹性质的容器 el-breadcrumb-item：每个单独项 如果我们想要完成动态的，那么就需要 *依据动态数据，渲染 el-breadcrumb-item * 所以说接下来我们需要做的事情就很简单了 动态数据 渲染 el-breadcrumb-item 咱们先来看 动态数据如何制作 我们希望可以制作出一个 数组，数组中每个 item 都表示一个 路由信息： 创建一个方法，用来生成数组数据，在这里我们要使用到 route.match 属性来：获取与给定路由地址匹配的标准化的路由记录数组 如何理解上面这句话呢？其实我们将 route.matched 打印出来就可以发现，你每次切换菜单（或者说更换了路由），打印出来的就是当前路由的路由表（包含父级、子集的路由信息）。 123456789101112131415161718192021222324252627&lt;script setup&gt;import &#123; ref, reactive, watch &#125; from &#x27;vue&#x27;import &#123; useRoute, RouteRecordRaw &#125; from &#x27;vue-router&#x27;const breadcrumbData = ref&lt;RouteRecordRaw[]&gt;([]) // 存放计算出的面包屑数据const route = useRoute()const getBreadcrumbData = () =&gt; &#123; console.log(route.matched) // 只有存在 meta 并且 meta.title 的路由，我们才会显示到面包屑中 // 就像 menu 菜单一样，类似 404 login 的我们不要显示 breadcrumbData.value = route.matched.filter(r =&gt; r.meta &amp;&amp; r.meta.title)&#125;// 监听路由变化时触发watch( route, () =&gt; &#123; getBreadcrumbData() &#125;, &#123; immediate: true &#125;)&lt;/script&gt; 依据动态数据，渲染面包屑有了数据之后，根据数据来去渲染面包屑就比较简单了。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970&lt;template&gt; &lt;el-breadcrumb class=&quot;breadcrumb&quot; separator=&quot;/&quot;&gt; &lt;el-breadcrumb-item v-for=&quot;(item, index) in breadcrumbData&quot; :key=&quot;item.path&quot; &gt; &lt;!-- 不可点击项 --&gt; &lt;span v-if=&quot;index === breadcrumbData.length - 1&quot; class=&quot;no-redirect&quot;&gt;&#123;&#123; item.meta.title &#125;&#125;&lt;/span&gt; &lt;!-- 可点击项 --&gt; &lt;a v-else class=&quot;redirect&quot; @click.prevent=&quot;onLinkClick(item)&quot;&gt;&#123;&#123; item.meta.title &#125;&#125;&lt;/a&gt; &lt;/el-breadcrumb-item&gt; &lt;/el-breadcrumb&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; ref, watch &#125; from &#x27;vue&#x27;import &#123; useRoute, useRouter, RouteRecordRaw &#125; from &#x27;vue-router&#x27;import &#123; useStore &#125; from &#x27;vuex&#x27;const breadcrumbData = ref&lt;RouteRecordRaw[]&gt;([]) // 存放计算出的面包屑数据const store = useStore()const route = useRoute()const router = useRouter()const getBreadcrumbData = () =&gt; &#123; console.log(route.matched) // 只有存在 meta 并且 meta.title 的路由，我们才会显示到面包屑中 // 就像 menu 菜单一样，类似 404 login 的我们不要显示 breadcrumbData.value = route.matched.filter(r =&gt; r.meta &amp;&amp; r.meta.title)&#125;watch( route, () =&gt; &#123; getBreadcrumbData() &#125;, &#123; immediate: true &#125;)// 跳转路由const onLinkClick = (item: RouteRecordRaw) =&gt; &#123; router.push(item.path)&#125;// 将来需要进行主题替换，所以这里获取下动态样式const linkHoverColor = ref(store.getters.cssVars.menuBg)&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;.breadcrumb &#123; ... .redirect &#123; color: #666; font-weight: 600; &#125; .redirect:hover &#123; color: v-bind(linkHoverColor); // 应对主题切换 &#125;&#125;&lt;/style&gt; 面包屑动画vue3对 动画 进行了一些修改（vue 动画迁移文档） 主要的修改其实只有两个： 过渡类名 v-enter 修改为 v-enter-from 过渡类名 v-leave 修改为 v-leave-from 那么依据修改之后的动画，我们来为面包屑增加一些动画样式： 在 Breadcrumb/index 中增加 transition-group 1234567&lt;template&gt; &lt;el-breadcrumb class=&quot;breadcrumb&quot; separator=&quot;/&quot;&gt; &lt;transition-group name=&quot;breadcrumb&quot;&gt; ... &lt;/transition-group&gt; &lt;/el-breadcrumb&gt;&lt;/template&gt; 新建 styles/transition 样式文件 1234567891011121314.breadcrumb-enter-active,.breadcrumb-leave-active &#123; transition: all 0.5s;&#125;.breadcrumb-enter-from,.breadcrumb-leave-active &#123; opacity: 0; transform: translateX(20px);&#125;.breadcrumb-leave-active &#123; position: absolute;&#125; 在 styles/index 中导入 1@import &#x27;./transition.scss&#x27;; 总结到这里我们的 layout 整体架构就已经做完了，我们来看看效果吧。","categories":[],"tags":[{"name":"工程化,Vue3","slug":"工程化-Vue3","permalink":"http://yoursite.com/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96-Vue3/"}]},{"title":"Vue3项目实战(三)：登录/请求模块/鉴权","slug":"vue3-project-generalLogin","date":"2022-12-23T15:34:24.000Z","updated":"2024-06-11T08:52:17.353Z","comments":true,"path":"/post/vue3-project-generalLogin.html","link":"","permalink":"http://yoursite.com/post/vue3-project-generalLogin.html","excerpt":"axios模块/接口请求模块/登录请求动作/Token缓存/鉴权","text":"配置环境变量 / 封装 axios封装的 axios 模块，至少具备一种能力，根据当前环境的不同，设定不同的 baseUrl @vue/cli 模式 官网：https://cli.vuejs.org/zh/guide/mode-and-env.html#%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F 请注意，只有 NODE_ENV，BASE_URL 和以 VUE_APP_ 开头的变量将通过 webpack.DefinePlugin 静态地嵌入到客户端侧的代码中。这是为了避免意外公开机器上可能具有相同名称的私钥。 除了 VUE_APP_* 变量之外，在你的应用代码中始终可用的还有两个特殊的变量： NODE_ENV - 会是 “development”、”production” 或 “test” 中的一个。具体的值取决于应用运行的模式。 BASE_URL - 会和 vue.config.js 中的 publicPath 选项相符，即你的应用会部署到的基础路径。 12345// .env.developmentusername=chenghaolun // 不会暴露出来VUE_APP_BASE_API=/api // 暴露出来，可以通过 process.env 获取 所有解析出来的环境变量都可以在 public/index.html 中以 HTML 插值中介绍的方式使用。 1&lt;title&gt;网站标题 &lt;%= VUE_APP_BASE_API %&gt;&lt;/title&gt; 我们可以打印 process.env 看看： 12345&#123; BASE_URL: &quot;/&quot;, NODE_ENV: &quot;development&quot;, VUE_APP_BASE_API: &quot;/api&quot;,&#125; 根据环境变量切换 baseUrl12345678import axios from &#x27;axios&#x27;const service = axios.create(&#123; baseURL: process.env.VUE_APP_BASE_API, timeout: 5000&#125;)export default service 封装接口请求模块在 src 下创建 api 文件夹，并创建 sys.ts 文件，用于处理系统的一些接口请求： 123456789import request from &#x27;@/utils/request&#x27;export const login = data =&gt; &#123; return request(&#123; url: &#x27;/sys/login&#x27;, method: &#x27;POST&#x27;, data &#125;)&#125; 封装登录请求动作我们不希望在点击登录按钮时，就立马调用登录接口，而是将其封装到 vuex 中，当然也可以使用 pinia。 在 store 下创建 modules 文件夹，并创建 user.ts 模块，用于处理所有的 用户相关 的内容（token获取、用户信息获取、退出登录…） 注意 当我们创建好了 store 时，在 vue template 里面使用 $store.state.globalName 可能会爆红，原因是没有声明 $store 123456789101112131415// src/vuex.d.tsimport &#123; Store &#125; from &#x27;vuex&#x27;declare module &#x27;@vue/runtime-core&#x27; &#123; // 声明自己的 store state interface State &#123; globalName: string &#125; // 为 `this.$store` 提供类型声明 interface ComponentCustomProperties &#123; $store: Store&lt;State&gt; &#125;&#125; 创建 user.ts 模块 123456789101112131415// store/index.jsimport &#123; createStore &#125; from &#x27;vuex&#x27;import user from &#x27;./modules/user&#x27;export default createStore(&#123; state() &#123; return &#123; globalName: &#x27;Hello_AlexCc&#x27; &#125; &#125;, modules: &#123; user &#125;&#125;) 创建 modules 文件夹 12345678910111213141516171819202122232425import md5 from &#x27;md5&#x27;import &#123; login &#125; from &#x27;@/api/sys&#x27;export default &#123; namespaced: true, state: () =&gt; (&#123;&#125;), mutations: &#123;&#125;, actions: &#123; login(context: any, userInfo: any) &#123; const &#123; username, password &#125; = userInfo return new Promise((resolve, reject) =&gt; &#123; login(&#123; username, password: md5(password) &#125;) .then(res =&gt; &#123; resolve(res) &#125;) .catch(err =&gt; &#123; reject(err) &#125;) &#125;) &#125; &#125;&#125; 到这里，我们的登录请求动作就完成了，我们只需要在点击登录按钮时，获取到 store 并 dispatch login 方法即可： 12345678910111213// 获取到 store 实例const store = useStore()// user.value 是登录表单的 refstore .dispatch(&#x27;user/login&#x27;, user.value) .then(res =&gt; &#123; console.log(&#x27;login res&#x27;, res) &#125;) .catch(err =&gt; &#123; console.log(&#x27;err &#x27;, err) &#125;) 写一个简单的 node 服务器12345678910111213const express = require(&#x27;express&#x27;);const app = express()app.get(&#x27;/user&#x27;, (req, res) =&gt; &#123; res.json(&#123; code: 0, msg: &quot;hello server 9999&quot; &#125;)&#125;)app.listen(9999, () =&gt; &#123; console.log(&#x27;server site an port 9999 ...&#x27;)&#125;) 配置 devServer我们将 项目 和 node 服务跑起来之后，点击登录，发现报错了 404，是因为请求 http://localhost:8080/#/api/user 并不存在，接口请求地址资源找不到，我们的接口写在 node 端，那么 node 服务跑起来后，我们怎么去访问呢，这里就要用到 webpack 的 devServer 了。 123456789101112131415161718// vue.config.jsdevServer: &#123; // 配置代理 proxy: &#123; // 当地址中有/api的时候会触发代理机制，因为我们配置了 axios baseURL，所以每个请求中，都会以 `/api` 开头 &#x27;/api&#x27;: &#123; // 要代理的服务器地址 这里不用写 api // node 服务 target: &#x27;http://localhost:9999&#x27;, changeOrigin: true, // 是否跨域 pathRewrite: &#123; // 必须得带上,否则，真正的请求中就会带上 &#x27;/api&#x27;，&#x27;http://localhost:9999/api/user&#x27; &#x27;^/api&#x27;: &#x27;&#x27; &#125; &#125; &#125;&#125;, 最后，我们再重启项目，点击登录，就会拿到 user 接口返回的的结果了。 本地缓存处理方案存储 token 分为两种： 本地缓存：localstorage 全局状态管理：vuex 保存在 localstorage 中，是为了在 token 没过期的情况下，让用户自动登录。保存在 vuex 中，是为了方便在其他位置使用。 那么我们来定义 localstorage 的相关方法吧！ 123456789101112131415161718192021222324252627282930313233343536373839// utils/storage.ts/** * 存储数据 */export const setItem = (key: string, value: unknown): void =&gt; &#123; // 将数组、对象类型的数据转化为 JSON 字符串进行存储 if (typeof value === &#x27;object&#x27;) &#123; value = JSON.stringify(value) &#125; window.localStorage.setItem(key, value as string)&#125;/** * 获取数据 */export const getItem = (key: string): unknown =&gt; &#123; const data = window.localStorage.getItem(key) as string try &#123; return JSON.parse(data) &#125; catch (err) &#123; // 如果报错了，直接将数据发送给使用端 return data &#125;&#125;/** * 删除数据 */export const removeItem = (key: string): void =&gt; &#123; window.localStorage.removeItem(key)&#125;/** * 删除所有数据 */export const removeAllItem = (key: string): void =&gt; &#123; window.localStorage.clear()&#125; 然后，我们来处理 vuex user 模块，在 state 中定义 token，以及设置 token 的 mutations 方法。 123456789101112131415161718import &#123; setItem, getItem &#125; from &#x27;@/utils/storage&#x27;// 我们可以定义一个常量文件夹，用来设置 TOKEN 常量，或者各种其他常量值const TOKEN = &#x27;token&#x27;&#123; state: () =&gt; (&#123; token: getItem(TOKEN) || &#x27;&#x27; &#125;), mutations: &#123; setToken(state: IState, token: string): void &#123; state.token = token // 本地存储 token setItem(TOKEN, token) &#125; &#125;,&#125; 在 actions login 方法中，请求成功后我们需要 commit 一个 mutation，来触发 setToken 方法: 1context.commit(&#x27;setToken&#x27;, res.data.data.token) 到这，我们的 token 存储就完成了，我们可以在页面上将其显示出来看看。 1&lt;p&gt;token: &#123;&#123; $store.state.user.token || &#x27;暂无Token&#x27; &#125;&#125;&lt;/p&gt; 接口响应数据统一处理我们在 vuex user 模块中通过 login 接口获取到了 token，当我们处理数据时，会发现需要通过好几个 . 的方式去拿到token，层级太深了，不太方便。 那么我们可以通过 axios 的响应拦截器来处理这种情况。 12345678910111213141516171819import &#123; ElMessage &#125; from &#x27;element-plus&#x27;// 响应拦截器service.interceptors.response.use( response =&gt; &#123; const &#123; success, message, data &#125; = response.data if (success) &#123; return data &#125; else &#123; ElMessage.error(message) return Promise.reject(new Error(message)) &#125; &#125;, error =&gt; &#123; ElMessage.error(error.message) // 提示错误信息 return Promise.reject(error) &#125;) 修改好 axios 响应拦截器之后，我们就可以改写一下 vuex user 下的 actions login 方法了。 1234.then(res =&gt; &#123; context.commit(&#x27;setToken&#x27;, res.token) // 这样获取 token 是不是就方便很多了 resolve(res)&#125;) 登录后操作我们可以创建一个 src/layout 文件夹，登录成功后，用来显示的主容器，将 layout/index.vue 配置在 router 路由表中 1234&#123; path: &#x27;/&#x27;, component: () =&gt; import(&#x27;@/layout/index.vue&#x27;)&#125; 登录成功后，跳转到 layout 页面 12345678910// login/index.vuestore .dispatch(&#x27;user/login&#x27;, user.value) .then(() =&gt; &#123; router.replace(&#x27;/&#x27;) &#125;) .catch(err =&gt; &#123; console.log(&#x27;err &#x27;, err) &#125;) 登录鉴权到这里，我们点击登录，就可以跳转到 layout 页面了，但是我们如果在地址栏手动输入 /login，我们依然可以回到 login 页面，明明我们登录成功，有了 token 还会跳到 login 页面，这是为什么呢？ 因为我们到这里，还未做登录鉴权，即使存在token，我们并未做任何的权限控制和处理。 那么我们要做什么处理呢？ 当用户未登录时，不允许进入除 login 之外的任何页面 用户登录成功之后，token 未过期之前，不让用户进入 login 页面 实现这个功能的核心就是使用 vue-router 的 路由守卫 传送门：https://router.vuejs.org/zh/guide/advanced/navigation-guards.html 那么我们创建 permission.ts 来处理路由守卫吧： 因为我们的 token 定义在 modules user 中，每次获取 token，需要使用 store.state.user.token，这样显得太长了，我们可以定义 store getters，来方便获取 token： 12345// getters.tsconst getters = &#123; token: (state: any) =&gt; state.user.token&#125;export default getters 然后将其放入 store 的 getters 中 12345678910111213import getters from &#x27;./getters&#x27;export default createStore(&#123; state() &#123; return &#123; globalName: &#x27;Hello_AlexCc&#x27; &#125; &#125;, getters, modules: &#123; user &#125;&#125;) 然后创建 permissions.ts 文件，定义路由前置守卫。 判断 token 是否存在，如果存在 token，并且 to.path 等于 /login，那么不让跳转到登录页，而是去 layout 页面。 如果 to.path 不是 /login，直接执行 next 方法即可。 如果 token 不存在，并且 to.path 是 /login，直接跳转 next() 如果 token 不存在并且 to.path 不是 /login，我们让其跳转到登录页 next(&#39;/login&#39;) 123456789101112131415161718192021// permissions.tsimport router from &#x27;./router&#x27;import store from &#x27;./store&#x27;router.beforeEach((to, from, next) =&gt; &#123; // 判断token是否存在 if (store.getters.token) &#123; if (to.path === &#x27;/login&#x27;) &#123; next(&#x27;/&#x27;) &#125; else &#123; next() &#125; &#125; else &#123; if (to.path === &#x27;/login&#x27;) &#123; next() &#125; else &#123; next(&#x27;/login&#x27;) &#125; &#125;&#125;) 到这里，我们点击登录，就会去到根路径下 ‘/‘，也就是 layout 页面。这时我们在地址栏输入 /login，就不会再去登录页面了。 我们还可以改进一下，当 token 不存在时，我们判断了 to.path === &#39;/login&#39;，这样限制死了，将来我们还有 /404 以及 /401 等页面，这些页面也是不需要 token 就能访问的，我们不希望在 if 语句里面加太多的判断逻辑，这时，我们可以定义一个 白名单，专门处理不需要 token 的路径: 1234567const whiteList = [&#x27;/login&#x27;]if (whiteList.indexOf(to.path) &gt; -1) &#123; next()&#125; else &#123; next(&#x27;/login&#x27;)&#125;","categories":[],"tags":[{"name":"工程化,Vue3,Config","slug":"工程化-Vue3-Config","permalink":"http://yoursite.com/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96-Vue3-Config/"}]},{"title":"Vue3项目实战(二)：Icon图标（SVG）","slug":"vue3-project-traning","date":"2022-12-23T04:16:55.000Z","updated":"2024-06-11T08:52:17.355Z","comments":true,"path":"/post/vue3-project-traning.html","link":"","permalink":"http://yoursite.com/post/vue3-project-traning.html","excerpt":"自定义 SvgIcon 组件，支持外部链接显示以及本地 svg 图片显示","text":"使用 Element plus Icon https://element-plus.gitee.io/zh-CN/component/icon.html 自定义 SVG 图标对于 element plus 的图标，我们可以直接通过 el-icon 来显示。 12345678910111213&lt;template&gt; &lt;div&gt; &lt;el-icon :size=&quot;size&quot; :color=&quot;color&quot;&gt; &lt;Edit /&gt; &lt;/el-icon&gt; &lt;!-- 或者独立使用它，不从父级获取属性 --&gt; &lt;!-- 由于SVG图标默认不携带任何属性，你需要直接提供它们 --&gt; &lt;Edit /&gt; &lt;Edit style=&quot;width: 1em; height: 1em; margin-right: 8px&quot; /&gt; &lt;Share style=&quot;width: 1em; height: 1em; margin-right: 8px&quot; /&gt; &lt;/div&gt;&lt;/template&gt; 但是自定义的图标，我们却没有显示的方式，那么我们就需要一个自定义的组件，来展示自定义的 svg 图标。 对于这个自定义的组件，它需要拥有两种能力： 显示外部的 svg 图标（链接的方式） 显示项目内的 svg 图标 接下来，我们就来实现自定义组件。 显示外部的 svg 图标css mask:mask 属性允许使用者通过遮罩或者裁切特定区域的图片的方式来 隐藏一个元素的部分 或者 全部可见区域。 css mask: https://juejin.cn/post/6846687594693001223 接下来，我们定义组件 SvgIcon: 123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;template&gt; &lt;div v-if=&quot;isExternal&quot; :style=&quot;styleExternalIcon&quot; class=&quot;svg-external-icon svg-icon&quot; :class=&quot;className&quot; /&gt;&lt;/template&gt;&lt;script setup lang=&quot;ts&quot;&gt;import &#123; defineProps, computed &#125; from &#x27;vue&#x27;const props = withDefaults(defineProps&lt;&#123; icon: string className?: string&#125;&gt;(), &#123; className: &#x27;&#x27;, icon: &#x27;&#x27;&#125;)// 判断是否为外部图标const isExternal = computed(() =&gt; /^(https?:|mailto:|tel:)/.test(props.icon))// 外部图标样式const styleExternalIcon = computed(() =&gt; (&#123; mask: `url($&#123;props.icon&#125;) no-repeat 50% 50%`, &#x27;-webkit-mask&#x27;: `url($&#123;props.icon&#125;) no-repeat 50% 50%`&#125;))&lt;/script&gt;&lt;style scoped&gt;.svg-icon &#123; width: 1em; height: 1em; vertical-align: -0.15em; fill: currentColor; overflow: hidden;&#125;.svg-external-icon &#123; background-color: currentColor; mask-size: cover !important; display: inline-block;&#125;&lt;/style&gt; 这样，我们就可以通过 链接 的形式，来使用 svg 图标了： 1&lt;svg-icon icon=&quot;https://res.lgdsunday.club/user.svg&quot;&gt;&lt;/svg-icon&gt; 展示内部图标如果不是外部链接的话，我们就展示项目内部的 svg 图标。 通过 use 的 xlink href 属性，找到 body 下已经处理的过的 svg sprite 元素内容，它其中就包含了 symbol 元素，每个 symbol 元素上都有一个 id，这个 id 就是和 xlink:href 与之对应的。 123456// ...&lt;svg v-else class=&quot;svg-icon&quot; :class=&quot;className&quot; aria-hidden=&quot;true&quot;&gt; &lt;use :xlink:href=&quot;iconName&quot; /&gt;&lt;/svg&gt;const iconName = computed(() =&gt; `#icon-$&#123;props.icon&#125;`) // 当我们定义好了组件之后，那么就需要在项目中，导入所有的 svg 图标了。 1234// icons/index.tsrequire(&#x27;./svg/user.svg&#x27;)require(&#x27;./svg/password.svg&#x27;) 假设我们有几百上千个 svg 图标，我们都要这样子引入吗？会不会太难受了 ~~ 这里，我们可以使用 webpack 提供的 require.context 方法，来 批量 导入 svg 图标: 12345678// https://webpack.docschina.org/guides/dependency-management/#requirecontext// 通过 require.context() 函数来创建自己的 contextconst svgRequire = require.context(&#x27;./svg&#x27;, false, /\\.svg$/)// 此时返回一个 require 的函数，可以接受一个 request 的参数，用于 require 的导入。// 该函数提供了三个属性，可以通过 require.keys() 获取到所有的 svg 图标 [&#x27;./xxx1.svg&#x27;, &#x27;./xxx2.svg&#x27;]// 遍历图标，把图标作为 request 传入到 require 导入函数中，完成本地 svg 图标的导入svgRequire.keys().forEach(svgIcon =&gt; svgRequire(svgIcon)) 这样，就完成了所有的本地 svg 图片导入。 然后我们注册全局的 SvgIcon 组件，方便使用。 12345678// icons/index.tsimport type &#123; App &#125; from &#x27;vue&#x27;import SvgIcon from &#x27;@/components/SvgIcon/index.vue&#x27;export default (app: App): void =&gt; &#123; app.component(&#x27;svg-icon&#x27;, SvgIcon)&#125; 到这里，我们去页面上使用 &lt;svg-icon icon=&quot;user&quot; /&gt;，发现没有效果，图标展示不出来。 这是因为，我们虽然在 icons/index.ts 中，通过 require.context 导入了所有的 svg 图片，但是并没有做处理，svg-icon 内部的 &lt;use :xlink:href=&quot;#icon-user&quot; /&gt; 找不到任何跟 #icon-user 有关的 svg 图标。 这里，我们就需要用到 svg-sprite-loader 了。 svg-sprite-loadersvg-sprite-loader 的官方解释是：一个用于创建 svg 雪碧图的 Webpack 加载器。这个加载器现在已经被 JetBrains 公司收录和维护了。 通俗的讲：svg-sprite-loader 会把你引入的 svg 塞到一个个 symbol 中，合成一个大的 svg，最后将这个大的 svg 放入 body 中。symbol 的 id 如果不特别指定，就是你的文件名。在页面上形成这样的元素，下面是导入了本地的 user.svg 和 password.svg： 我们可以看到，每个 symbol 上，都有一个 id 属性，因为我们在 SvgIcon 中指定了 use 的 :xlink:href，使用时，就能找到页面上对应的图标了。 接着，我们来配置 svg-sprite-loader，打开 vue.config.js: 1234567891011121314151617181920212223242526272829303132333435const path = require(&#x27;path&#x27;)function resolve(dir) &#123; return path.join(__dirname, dir)&#125;module.exports = &#123; chainWebpack(config) &#123; // 使用了 config.module.rule(&#x27;svg&#x27;) 方法来获取对 SVG 文件的处理规则。 // 然后，它使用了 exclude 属性来添加一个排除规则，这个规则会排除 resolve(&#x27;src/icons&#x27;) 目录中的所有文件。 // 最后，它使用了 end 方法来结束这个链式调用。 // 这段代码的作用是在 Webpack 构建流程中排除 src/icons 目录中的所有 SVG 文件。这意味着 Webpack 在构建时不会处理这些文件。 config.module.rule(&#x27;svg&#x27;).exclude.add(resolve(&#x27;src/icons&#x27;)).end() // 使用了 config.module.rule(&#x27;icons&#x27;) 方法来获取对图标文件的处理规则。 // 然后，它使用了 test 属性来设置这个规则应用于哪些文件，这里使用的是一个正则表达式，表示只有以 .svg 结尾的文件才会被处理。 // 接着，它使用了 include 属性来添加一个包含规则，这个规则只会包含 resolve(&#x27;src/icons&#x27;) 目录中的文件。 // 最后，它使用了 use 方法来添加一个新的规则，这个规则使用了 svg-sprite-loader 来处理 SVG 文件。 // 这段代码的作用是在 Webpack 构建流程中处理 src/icons 目录中的 SVG 文件。 // 它会使用 svg-sprite-loader 加载器来将这些 SVG 文件转换为可以在浏览器中使用的精灵图（Sprite）。 config.module .rule(&#x27;icons&#x27;) .test(/\\.svg$/) .include.add(resolve(&#x27;src/icons&#x27;)) .end() .use(&#x27;svg-sprite-loader&#x27;) .loader(&#x27;svg-sprite-loader&#x27;) .options(&#123; symbolId: &#x27;icon-[name]&#x27; // 指定精灵的符号 ID 应为 icon-[name]。 &#125;) .end() &#125;&#125; 这两条规则在 webpack 配置中设置了两种不同的方法来处理 SVG 文件：一种用于排除位于 src/icons 目录中的 SVG 文件，另一种用于使用 svg-sprite-loader 处理位于 src/icons 目录中的 SVG 文件。 到这里，我们就完成了 svg-sprite-loader 的配置，然后重新启动项目，就可以愉快的使用本地的 svg 了。 12345&lt;svg-icon icon=&quot;user&quot;&gt;&lt;/svg-icon&gt;&lt;svg-icon icon=&quot;password&quot;&gt;&lt;/svg-icon&gt; 页面上的效果是这样的 总结经过 svg-sprite-loader 加载之后，不仅可以通过指定 id 的方式引入 icon，而且相比图片引入的方式，最大的优点就在于可以通过给 svg 标签添加 fill 属性来调整 icon 的颜色。 除此之外，还可以通过给 svg 添加 class 来调整 icon 的样式，虽然说图片引入的方式也能做到，但是如果图片指定宽高与原图的宽高不成比例，就会导致图片的失真，而 svg 不会。即使随意调整 svg 的宽高样式，它也是按照原尺寸进行缩放，达到高保真的效果。 而且通过svg-sprite-loader的处理后，生成了精灵图，它是一种将多个图标放在一张图片中的技术，可以减少 HTTP 请求数，从而提升网站性能。","categories":[],"tags":[{"name":"工程化,Vue3","slug":"工程化-Vue3","permalink":"http://yoursite.com/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96-Vue3/"}]},{"title":"Vue3的响应式系统","slug":"vue3-reactive","date":"2022-12-22T13:34:30.000Z","updated":"2024-06-11T08:52:17.359Z","comments":true,"path":"/post/vue3-reactive.html","link":"","permalink":"http://yoursite.com/post/vue3-reactive.html","excerpt":"响应式系统的作用与实现","text":"响应式系统实现响应式基础 通过 proxy 代理对象，读取属性时触发 get 方法，设置属性时触发 set 方法 在 get 方法中收集副作用函数，在 set 方法中触发副作用函数 假设有这么一个对象：&#123; ok: true, text: &#39;hello world&#39; &#125;，注册副作用函数 123effect(() =&gt; &#123; document.body.innerHTML = obj.ok ? obj.text : &#x27;ok not&#x27;&#125;) 当 ok 为 true，我们会走 obj.text 的读取逻辑，触发 get 拦截方法。这个时候页面上会显示 hello world，当我们将 obj.ok 设置为 false 后，我们会有副作用遗留函数（text的），因为 ok 为 false，永远不会再读取 obj.text 了。 但是，当我们修改 obj.text 时， effect 副作用函数依然会触发，虽然页面上永远是 ok not。 清除不必要的副作用函数 这时，我们就需要进行 分支切换和 cleanup 函数了，通过 cleanup 函数，我们将只收集使用到的 key 的副作用函数，也就是说，当 ok 为false 时，我们不再对 obj.text 进行依赖手机，无论我们如何修改 obj.text，都不会触发 effect 方法。 我们对注册副作用函数，做一些改变，在注册函数内部，定义了一个新的副作用函数方法，这个方法内部执行 删除副作用函数的方法 和真正的副作用函数（设置 document.body 内容） 同时，我们还在 副作用函数 上定义了一个 deps 属性，用来存储与该副作用函数相关联的依赖集合，将来在 cleanup 中通过 activeEffect.deps[i] delete effectFn 时，其实，就是将 某个 key 的 deps 中的副作用函数删除了 1234567891011121314function effect(fn) &#123; function effectFn() &#123; activeEffect = effectFn cleanup(effectFn) // 删除所有key 收集到的依赖 fn() // 重新执行副作用函数，重新收集依赖 &#125; effectFn.deps = [] effectFn()&#125; 定义 cleanup 函数，每一次触发 set 方法时，都会先删除所有 key 对应的依赖，然后重新执行 effectFn 内部的 fn 函数，重新收集依赖 因为 obj.ok = false 了，不会再读取 obj.text，所以也就不会再对 obj.text 收集依赖了。 12345678910function cleanup(effectFn) &#123; for(let i = 0; i &lt; effectFn.deps.length; i++) &#123; const deps = effectFn.deps[i] // Set 集合 deps.delete(effectFn) &#125; effectFn.deps.length = []&#125; 注意 我们删除 effectFn.deps[i] 中的 effectFn，其实就是删除了 ‘ok、text’ 中对应的依赖集合（Set）的副作用函数，因为 effectFn.deps 中存放的集合 和 Map key 对应的 Value 的集合，是同一个集合 删除后，Map 中的所有 value 都是空的 Set 然后执行 fn 函数，重新进行读取 obj 属性，进行依赖收集。 竟然无限循环？ 最后一步，我们还需要改造一下 trigger 函数，否则会造成 无限循环 1234567891011function trigger(target, key) &#123; const depsMap = bucket.get(target) if (!depsMap) return const effects = depsMap.get(key) const effectsToRun = new Set(effects) // effects &amp;&amp; effects.forEach(fn =&gt; fn()) effectsToRun &amp;&amp; effectsToRun.forEach(fn =&gt; fn())&#125; 为什么新建一个 Set 集合呢? const effectsToRun = new Set(effects) 因为，我们遍历 effects 时，执行了每一个 副作用 函数，当副作用函数执行时，会调用 cleanup 进行清除，实际上就是从 effects 集合中奖当前执行的副作用函数剔除 但是，副作用函数的执行 fn() 会触发属性的读取操作，执行 track，导致副作用函数重新被收集到依赖中，而对于 effects集合的遍历仍然在执行，从而造成 无限循环。 解决办法就是：根据 effects 重新建立一个集合，进行遍历。 完整代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;收集 key 的依赖&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;script&gt; // 存储被注册的副作用函数 let activeEffect; const data = &#123; ok: true, text: &#x27;hello world&#x27; &#125; const bucket = new WeakMap() // target =&gt; Map const obj = new Proxy(data, &#123; get(target, key) &#123; // 追踪依赖 track(target, key) return target[key] &#125;, set(target, key, value) &#123; target[key] = value // 触发依赖 trigger(target, key) &#125; &#125;) function track(target, key) &#123; if (!activeEffect) return target[key] let depsMap = bucket.get(target) if (!depsMap) &#123; bucket.set(target, depsMap = new Map()) &#125; let deps = depsMap.get(key) if (!deps) &#123; depsMap.set(key, deps = new Set()) &#125; // 添加副作用函数 deps.add(activeEffect) // deps 存储与该副作用函数相关联的依赖集合 // 将来在 cleanup 中通过 activeEffect.deps[i] delete effectFn 时，其实，就是将 deps 中的副作用函数删除了 activeEffect.deps.push(deps) &#125; function trigger(target, key) &#123; const depsMap = bucket.get(target) if (!depsMap) return const effects = depsMap.get(key) const effectsToRun = new Set(effects) // effects &amp;&amp; effects.forEach(fn =&gt; fn()) effectsToRun &amp;&amp; effectsToRun.forEach(fn =&gt; fn()) &#125; function effect(fn) &#123; function effectFn() &#123; activeEffect = effectFn cleanup(effectFn) fn() &#125; effectFn.deps = [] // 存储所有包含当前副作用函数的依赖 集合，在 get 拦截函数中处理 deps effectFn() &#125; function cleanup(effectFn) &#123; console.log(&#x27;effectFn &#x27;, effectFn.deps) // 我们删除 effectFn.deps[i] 中的 effectFn，其实就是删除了 &#x27;xxx&#x27;(key) 中对应的依赖集合的副作用函数 // effectFn.deps[i] 中，存放的依赖集合，和 Map key 对应的依赖集合，是同一个集合，删除某一项，自然会影响到另一个 // 当我们在 trigger 中执行 effects 时，就是执行副作用函数 // 这个时候，会执行 cleanup，删除所有的 key 对应的副作用函数，最后执行 fn，重新走 属性的读取逻辑，触发 get 方法，重新收集依赖 // 当我们设置 obj.ok = false 后，不会再读取 obj.text 了，从而不会对其 key 收集依赖。 for(let i = 0; i &lt; effectFn.deps.length; i++) &#123; const deps = effectFn.deps[i] deps.delete(effectFn) &#125; effectFn.deps.length = 0 &#125; effect(() =&gt; &#123; console.log(&#x27; obj.ok&#x27;, obj.ok) // obj.ok = true 会触发 obj 的 get拦截方法，并且通过 track 函数收集到了副作用函数，并且将其存储在 deps 中 document.body.innerHTML = obj.ok ? obj.text : &#x27;ok not&#x27; &#125;) setTimeout(() =&gt; &#123; // obj.text = &#x27;Vue3 Reactive&#x27; obj.ok = false console.log(&#x27;bucket &#x27;, bucket) &#125;, 1000) // setTimeout(() =&gt; &#123; // console.log(&#x27;执行了&#x27;) // obj.text = &#x27;Vue3 Reactive&#x27; // &#125;, 3000) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;","categories":[],"tags":[{"name":"Reactive,Vue3","slug":"Reactive-Vue3","permalink":"http://yoursite.com/tags/Reactive-Vue3/"}]},{"title":"Vue3项目实战(一)：工程化配置","slug":"vue3-project-config","date":"2022-12-21T04:16:55.000Z","updated":"2024-06-11T08:52:17.353Z","comments":true,"path":"/post/vue3-project-config.html","link":"","permalink":"http://yoursite.com/post/vue3-project-config.html","excerpt":"工程化/编程规范/项目基础配置/...","text":"编程规范编程规范的重要作用： 规范的代码可以促进团队合作 规范的代码可以减少bug处理，规范不是对开发的制约，而确实是有助于提高开发效率的 规范的代码可以降低维护成本 规范的代码有助于代码审查 养成代码规范的习惯，有助于自身的成长 ESLint + Prettier 自动格式化代码 VSCode 安装 ESLint 插件，在根目录创建 .eslintrc 配置文件 123456789101112131415161718192021222324252627282930313233module.exports = &#123; root: true, // 表示当前目录为根目录 env: &#123; node: true, &#125;, // ESLint 中基础配置需要继承的配置 extends: [ &quot;plugin:vue/vue3-essential&quot;, &quot;eslint:recommended&quot;, &quot;@vue/typescript/recommended&quot;, &quot;@vue/prettier&quot;, &quot;@vue/prettier/@typescript-eslint&quot;, ], parserOptions: &#123; ecmaVersion: 2020, &#125;, // 错误规则：off(0) warn(1) error(2) rules: &#123; &quot;no-console&quot;: process.env.NODE_ENV === &quot;production&quot; ? &quot;warn&quot; : &quot;off&quot;, &quot;no-debugger&quot;: process.env.NODE_ENV === &quot;production&quot; ? &quot;warn&quot; : &quot;off&quot;, // 关闭 no-used 检查 &quot;@typescript-eslint/no-unused-vars&quot;: &quot;off&quot;, &#125;, overrides: [&#123; files: [ &quot;**/__tests__/*.&#123;j,t&#125;s?(x)&quot;, &quot;**/tests/unit/**/*.spec.&#123;j,t&#125;s?(x)&quot;, ], env: &#123; jest: true, &#125;, &#125;, ],&#125;; VSCode 安装 Prettier 插件，在根目录创建 .prettierrc 配置文件 123456&#123; &quot;semi&quot;: false, // 是否加分号 &quot;singleQuote&quot;: true, // 单引号 &quot;arrowParens&quot;: &quot;avoid&quot;, // (x) =&gt; &#123;&#125; 箭头函数参数只有一个时，是否要小括号， avoid: 省略小括号 &quot;trailingComma&quot;: &quot;none&quot; // 以多个逗号相隔的，最后是否加逗号&#125; 我们打开 VSCode 设置，切换到 工作区，找到 Code Action on Save，修改配置： 123456&quot;editor.codeActionsOnSave&quot;: &#123; &quot;source.fixAll&quot;: true, &quot;source.fixAll.eslint&quot;: true, &quot;source.fixAll.stylelint&quot;: true, &quot;source.fixAll.tslint&quot;: true,&#125;, 注意项 对 VSCode 而言，默认一个 tab 等于 4 个空格，而 ESlint 默认为两个空格，我们在 VSCode 设置中，找到 tab size 改为 2 就行。 可能安装了多个代码格式化工具，我们右键文件，找到 使用...格式化文档，设置默认的为 Prettier 即可。 有可能 Prettier 和 eslint 规则存在冲突，比如 eslint 希望方法名和括号之间有空格，而 Prettier 不希望有空格，控制台就会报出 ESlint 错误，我们就可以找到 ESlint 配置文件，找到 rules，将 space-before-function-paren 设置为 0 或者 off 即可。 手动格式化 1Shift + Alt + F Git 提交规范12345&lt;类型&gt;[可选 范围]: &lt;描述&gt;[可选 正文][可选 脚注] CommitizenGithub: cz-cli 当你使用 commitizen 进行代码提交时，commitizen 会提交你在提交时填写所有必须得提交字段 全局安装 1npm install -g commitizen@4.2.4 项目配置 安装 cz-customizable 1npm install cz-customizable@6.3.0 --save-dev 在 package.json 中配置 表示 commitizen 的配置在 node_modules 中的第三方包之中。 1234567...&quot;config&quot;: &#123; &quot;commitizen&quot;: &#123; &quot;path&quot;: &quot;node_modules/cz-customizable&quot; &#125;&#125;... 3.项目根目录下创建 .cz-config.js，配置自定义提示文件 1234567891011121314151617181920212223242526module.exports = &#123; types: [ &#123; value: &#x27;feat&#x27;, name: &#x27;feat: 新功能&#x27; &#125;, &#123; value: &#x27;fix&#x27;, name: &#x27;fix: 修复&#x27; &#125;, &#123; value: &#x27;docs&#x27;, name: &#x27;docs: 文档变更&#x27; &#125;, &#123; value: &#x27;style&#x27;, name: &#x27;style: 代码格式（不影响代码运行的变动）&#x27; &#125;, &#123; value: &#x27;refactor&#x27;, name: &#x27;refactor: 重构（既不是增加 feature，也不是修复 bug）&#x27; &#125;, &#123; value: &#x27;perf&#x27;, name: &#x27;perf: 性能优化&#x27; &#125;, &#123; value: &#x27;test&#x27;, name: &#x27;test: 增加测试&#x27; &#125;, &#123; value: &#x27;chore&#x27;, name: &#x27;chore: 构建过程或辅助工具的变动&#x27; &#125;, &#123; value: &#x27;revert&#x27;, name: &#x27;revert: 回退&#x27; &#125;, &#123; value: &#x27;build&#x27;, name: &#x27;build: 打包&#x27; &#125;, ], // 步骤 messages: &#123; type: &#x27;请选择提交的类型&#x27;, customScope: &#x27;请输入修改的范围（可选）&#x27;, subject: &#x27;请简要描述提交内容（必填）&#x27;, body: &#x27;请输入详细的描述（可选）&#x27;, footer: &#x27;请输入要关闭的 issue（可选）&#x27;, confirmCommit: &#x27;确认要使用以上信息提交?(y/n)&#x27;, &#125;, // 需要跳过的问题 skipQuestions: [&#x27;body&#x27;, &#x27;footer&#x27;], subjectLimit: 72, // 描述内容的限制&#125; 使用 git cz 代替 git commit 最后 我们可以通过 git cz 规范化了 git 提交，那么存在一个问题，我们必须通过 git cz 提交，才能规范化，如果我们忘记了使用 git cz，依然使用的 git commit 直接提交了怎么办呢？ 那么，有没有办法限制这种错误的出现？ 使用 git hooks Git Hooks当《提交描述信息》不符合 约定式提交规范 的时候，阻止当前的提交，并抛出相应的错误提示。 通过 git hooks 在执行某个事件之前或者之后进行一些额外的操作。 git hooks 非常多，实际用的比较多的就两个： pre-commit：git commit 执行前，在获取提交日志信息并进行提交之前调用 commit-msg：git commit 执行前，可用于将消息规范化为某种项目标准格式 使用 husky + commitlint 检查提交信息使用 git hooks去检验我们的提交信息，需要使用两个工具： commitlint: 用于检查提交信息 husky: git hooks 工具 主要: npm 版本需要在 7.x 以上 安装依赖: 1npm install @commitlint/config-conventional@12.1.4 @commitlint/cli@12.1.4 --save-dev 创建 commitlint-config.js 123module.exports = &#123; extends: [&#x27;@commitlint/config-conventional&#x27;]&#125; 增加配置项 12345678910111213141516module.exports = &#123; extends: [&#x27;@commitlint/config-conventional&#x27;], rules: &#123; // type 的类型定义，表示 git 提交的 type 必须在以下范围内 &#x27;type-enum&#x27;: [ // 当前验证的错误级别 2, // 在什么情况下验证 &#x27;always&#x27;, // 枚举的内容 [&#x27;feat&#x27;, &#x27;fix&#x27;, &#x27;docs&#x27;, &#x27;style&#x27;, &#x27;refactor&#x27;, &#x27;perf&#x27;, &#x27;test&#x27;, &#x27;chore&#x27;, &#x27;revert&#x27;, &#x27;build&#x27;], ], // subject 大小写不做校验 &#x27;subject-case&#x27;: [0] &#125;&#125; 注意: 必须确保我们的配置文件保存为 utf-8 的编码格式，否则可能会报错。 打开配置文件，查看 vscode 右下角，是否显示了 utf-8，如果不是就要将其切换为正确的编码格式。 安装 husky 检测 git hooks 的工具 安装 1npm install husky@7.0.1 --save-dev 启动 hooks，在根目录下生成 .husky 文件夹 1npx husky install 在 package.json 中生成 prepare 指令（npm &gt; 7） 12// 执行指令，会在 npm scripts 中生成配置npm set-script prepare &quot;husky install&quot; 执行 prepare 指令 1npm run prepare 添加 commitlint 的 hook 到 husky 中，并在 commit-msg 的 hooks 下，执行 npx --no-install commitlint --edit &quot;$1&quot; 1npx husky add .husky/commit-msg &#x27;npx --no-install commitlint --edit &quot;$1&quot;&#x27; 打开 .husky，就可以看到 commit-msg 文件了。 123456// commit-msg#!/bin/sh. &quot;$&#123;dirname &quot;$&#123;0&#125;&quot;&#125;/_/husky.sh&quot;npx --no-install commitlint --edit $1 最后，我们就可以愉快的提交了。 pre-commit 检测代码提交规范虽然我们使用了 eslint + prettier 在本地自动格式化代码，但是，有可能有的小伙伴，忘记将 vscode 的自动保存格式化打开了，并且写的代码格式不符合规范，也是可以提交上去的。 那么我们就得加一些配置，来检测小伙伴们提交的代码是否符合规范了。 要完成这一操作，就需要使用 husky 配合 eslint 来实现了。 我们期望通过 husky 检测 pre-commit 钩子，在该钩子下执行 npx eslint --ext .js,.vue, src 指令去进行相关的检测。 执行 npx husky add .husky/pre-commit &quot;npx eslint --ext .js,.vue, src&quot; 命令 会在 .husky 文件夹下面，生成 pre-commit 文件 123456// pre-commit#!/bin/sh. &quot;$&#123;dirname &quot;$&#123;0&#125;&quot;&#125;/_/husky.sh&quot;npx eslint --ext .js,.vue, src 每次我们提交代码，都会触发 pre-commit 钩子，从而使用 eslint 去检测我们的代码文件。 关闭自动保存，修改代码提交试试吧 lint staged 自动修复错误我们通过 pre-commit + husky 处理了代码提交时的规范化问题，当我们进行代码提交时，会检测所有的代码格式规范。 但是这样就有两个问题： 我们只修改了个别文件，没有必要检测所有的文件代码格式 它只能给我们提示出对应的错误，竟然还需要我们手动进行修复？不合理 我们使用 lint-staged 插件，来帮助我们解决这两个问题。 lint-staged 可以 只检测本次更新的代码，并在错误出现的时候，自动修复并且推送 安装 使用 vue-cli 生成项目时，lint-staged 不需要安装了，项目已经有了。如果没有的话，就需要单独安装 修改 package.json： 123456&quot;lint-staged&quot;: &#123; &quot;src/**/*.&#123;js,jsx,vue&#125;&quot;: &#123; &quot;eslint --fix&quot;, &quot;git add&quot; &#125;&#125; 修改 .husky/pre-commit 文件 12345678// pre-commit#!/bin/sh. &quot;$&#123;dirname &quot;$&#123;0&#125;&quot;&#125;/_/husky.sh&quot;// npx eslint --ext .js,.vue, src // 删除npx lint-staged // 新增 尝试将代码修改为不符合规范的，通过 git cz 再次提交试试！ lint-staged 会尝试自动修复错误 错误修复完成，继续执行，并将代码提交","categories":[],"tags":[{"name":"工程化,Vue3","slug":"工程化-Vue3","permalink":"http://yoursite.com/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96-Vue3/"}]},{"title":"Nginx 实战","slug":"nginx","date":"2022-12-17T03:30:00.000Z","updated":"2024-06-11T08:52:17.349Z","comments":true,"path":"/post/nginx.html","link":"","permalink":"http://yoursite.com/post/nginx.html","excerpt":"Never too old to learn.","text":"查看 Nginx 命令查看安装目录 whereis nginx nginx: /usr/bin/nginx 查看 nginx 进程 ps -ef | grep nginx 查看 nginx 可执行文件 ps -ef | grep nginx /www/server/nginx/conf/nginx.conf 表示配置文件 或者也可以通过 nginx -t 来查看配置文件在哪，虽然这个命令是检测 nginx 配置文件是否有语法错误： 12nginx: the configuration file /www/server/nginx/conf/nginx.conf syntax is oknginx: configuration file /www/server/nginx/conf/nginx.conf test is successful 配置文件 nginx.conf 全局模块worker_processes auto; // 进程数量error_log /www/wwwlogs/nginx_error.log crit; // 错误日志存放路径pid /www/server/nginx/logs/nginx.pid; // 存放 pid 文件 eventsworker_connections 51200; // 单个进程最大的连接数（最大连接数：连接数+进程数） http 块 include 引入其他的配置文件 default_type 文件类型 解决跨域问题首先启动 nginx 服务，输入命令 nginx，修改根路径下的 index.html 文件 1234567891011121314151617181920212223242526// nginx 配置，访问 localhost:8080/ 时，会打开 index.htmllocation / &#123; root html; index index.html index.htm;&#125;// 修改index.html&lt;body&gt;&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;&lt;button id=&quot;btn&quot;&gt;send&lt;/button&gt;&lt;script&gt; btn.onclick = () =&gt; &#123; const xhr = new XMLHttpRequest() xhr.open(&#x27;GET&#x27;, &#x27;http://localhost:9999/list&#x27;) xhr.onreadystatechange = () =&gt; &#123; if (xhr.readyState == 4 &amp;&amp; xhr.status == 200) &#123; console.log(&#x27;返回结果&#x27;, xhr.responseText) &#125; &#125; xhr.send(null) &#125;&lt;/script&gt;&lt;/body&gt; 起一个本地 node 服务 9999 123456789101112const express = require(&#x27;express&#x27;);const app = express()app.get(&#x27;/list&#x27;, (req, res) =&gt; &#123; res.json(&#123; code: 0, msg: &quot;hello server&quot; &#125;)app.listen(9999, () =&gt; &#123; console.log(&#x27;server site an port 9999 ...&#x27;)&#125;) 当我们点击发送按钮时，会出现跨域问题，这是因为浏览器 同源策略限制，协议、域名、端口号不同，会形成跨域。 这里是端口不同。 我们可以利用 nginx 来解决。 打开 nginx.conf，新增一条转发规则，表示遇到 api 开头的，都将转发到某个服务下 比如 xhr.open(&#39;GET&#39;, &#39;/api/list&#39;), 会将 api 替换成 http://localhost:9999/ 12345// 添加location /api/ &#123; proxy_pass http://localhost:9999/;&#125; 修改调用接口的地方: 1xhr.open(&#x27;GET&#x27;, &#x27;/api/list&#x27;) 此时，再次点击 发送,不会再出现跨域了。 Vue Router History 模式 404 问题Vue 项目，采用 history 的路由模式，打包后放到 nginx 上部署，切换路由时出现 404 现象。 解决方案：try_files $uri $uri/ /index.html; 123456location / &#123; root html; index index.html index.htm; try_files $uri $uri/ /index.html;&#125; 负载均衡我们可以建 3 个（或者更多）node 服务来模拟实现，可以通过 count 计数，来查看每个服务被分配到的请求数 server1 1234567891011121314151617181920const express = require(&#x27;express&#x27;);const app = express()let count = 1app.get(&#x27;/list&#x27;, (req, res) =&gt; &#123; res.json(&#123; code: 0, msg: &quot;hello server 9999&quot; &#125;) console.log(`server 9999 ------ $&#123;count&#125;`) count++&#125;)app.listen(9999, () =&gt; &#123; console.log(&#x27;server site an port 9999 ...&#x27;)&#125;) 通过 pm2 log 查看日志 1234567// package.json&quot;start&quot;: &quot;pm2 start index.js index2.js index3.js --watch&quot;,&quot;stop&quot;: &quot;pm2 stop index.js&quot;,&quot;allList&quot;: &quot;pm2 list&quot;,&quot;monit&quot;: &quot;pm2 monit&quot;,&quot;log&quot;: &quot;pm2 log&quot; server2、server3 只是端口不一样 修改 nginx 配置配置根路径，代理到本地服务，当我们启动 nginx，访问 http://localhost:8080/ 时，服务会代理到我们配置的 upstream node 服务上，访问 http://localhost:8080/list 即可调用咱们写好的 node 接口。 1234567891011upstream node &#123;server 127.0.0.1:9997;server 127.0.0.1:9998;server 127.0.0.1:9999;&#125;server &#123; location / &#123; proxy_pass http://node; // node 是 upstream 指定的 name &#125;&#125; 最后我们可以通过 postman 或 apifox 来进行压测了。 1接口：http://localhost:8080/list 这里设置的接口循环次数是 33，意味着我们将要调用 33 次接口，运行之后，33次均可以成功跑通。 来看下结果： 每个 server 分配均匀，33次，每个服务分配了 11 次请求。 权重还可以给服务设置权重 weight，数值越大，权重越高，请求数越多。 123server 127.0.0.1:9997 weight=3;server 127.0.0.1:9998 weight=2;server 127.0.0.1:9999 weight=1; 修改完配置后，重启 nginx nginx -s reload，继续运行 apifox 压测接口： 权重最高的 9997 请求被分配了 17 次，权重最低的 9999 只分配了 5 次请求。 超时设置超时备用模式，如果存在超时，就会选用备用的服务 9003，如果不存在超时请求，则不会有请求打到 9999 服务上。 12345upstream node &#123; server 127.0.0.1:9997 fail_timeout=60; server 127.0.0.1:9998 fail_timeout=20; server 127.0.0.1:9999 backup;&#125; 参考资料小满介绍Nginx ↩安装Nginx ↩Nginx相关 ↩","categories":[],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"http://yoursite.com/tags/Nginx/"}]},{"title":"在Linux上部署 Node 接口","slug":"nodejs","date":"2022-12-16T06:00:00.000Z","updated":"2024-06-11T08:52:17.349Z","comments":true,"path":"/post/nodejs.html","link":"","permalink":"http://yoursite.com/post/nodejs.html","excerpt":"Never too old to learn.","text":"连接远程服务器打开 mac 终端: 123ssh root@124.221.230.105 (公网IP)// 接着输入密码，即可登录远程服务器 登录进去，输入 pwd，会输出 /root，这时我们切到 ‘/‘ 目录下: cd .. 在远程安装 nodejs1wget https://cdn.npmmirror.com/binaries/node/v14.19.1/node-v14.19.1-linux-x64.tar.xz 解压压缩包使用 tar 命令 -c 压缩 -x 解压 -t 查看内容 -r 想压缩归档文件末尾追加文件 -v 显示所有过程 -f 使用档案名字，切记，这是最后一个参数，最后只能接档案名 1tar -xvf node-v14.19.1-linux-x64.tar.xz 配置环境变量找到根目录 ‘/‘ 下的 etc文件夹，进去里面，打开 profile 文件，打开，执行命令： 12345// &#x27;/&#x27;cd etcvim profile 在最后一行加上如下这句： 1export PATH=$PATH:/node-v14.19.1-linux-x64/bin 最后，使文件生效 12// /etcsource profile 查看 node 版本 123node -vnpm -v 安装 pm21npm install -g pm2 部署 node 接口在根目录下 /，创建 node-server 文件夹 可以通过 express 建立一个 node 服务 123456789101112131415const express = require(&quot;express&quot;);const app = express()app.get(&#x27;/list&#x27;, (req, res) =&gt; &#123; console.log(&#x27;current IP&#x27;, req.ip) res.json(&#123; code: 200, msg: &#x27;linux node server&#x27; &#125;)&#125;)app.listen(9999, () =&gt; &#123; console.log(&#x27;node server at port 9999...&#x27;)&#125;) 通过 pm2 启动node服务12// node-serverpm2 start index.js --watch 通过 pm2 monit 查看 node 服务的打印日志 注意访问接口，如果打不开，大概率是因为没有放开防火墙。 http://124.221.230.105:9999/list 找到服务器地址，放开 node 服务对应的端口号 此时依然无法打开对应的接口 登录服务器，查看防火墙所有的端口 firewall-cmd –zone=public –list-ports 添加新的端口 firewall-cmd –zone=public –add-port=9999/tcp –permanent 删除 firewall-cmd –zone=public –remove-port=9999/tcp –permanent 表示永久有效 重启防火墙 firewall-cmd –reload 至此，就可以访问服务器上 node 服务的接口了。 参考资料 小满Linux介绍","categories":[],"tags":[{"name":"Nodejs","slug":"Nodejs","permalink":"http://yoursite.com/tags/Nodejs/"}]},{"title":"Vue Router 4+","slug":"vue-router4","date":"2022-12-16T04:22:00.000Z","updated":"2024-06-11T08:52:17.353Z","comments":true,"path":"/post/vue-router4.html","link":"","permalink":"http://yoursite.com/post/vue-router4.html","excerpt":"富有表现力的路由语法、细致的导航控制、基于组件的配置方法、支持历史模式、 支持滚动控制、支持自动编码","text":"Vue Routerhistory1234const router = VueRouter.createRouter(&#123; history: VueRouter.createWebHashHistory(), // hash 模式 routes,&#125;) hash 模式底层是通过 hashchange 监听的： 1window.addEventListener(&#x27;hashchange&#x27;, () =&gt; &#123; ... &#125;) history 模式 (createWebHistory)，底层是通过 popstate 监听的: 1window.addEventListener(&#x27;popstate&#x27;, () =&gt; &#123; ... &#125;) 在 setup 中访问路由和当前路由因为我们在 setup 里面没有访问 this，所以我们不能再直接访问 this.$router 或 this.$route。 1234567891011121314151617import &#123; useRouter, useRoute &#125; from &#x27;vue-router&#x27;export default &#123; setup() &#123; const router = useRouter() const route = useRoute() function pushWithQuery(query) &#123; router.push(&#123; name: &#x27;search&#x27;, query: &#123; ...route.query, &#125;, &#125;) &#125; &#125;,&#125; route 对象是一个响应式对象，所以它的任何属性都可以被监听，但你应该避免监听整个 route 对象。在大多数情况下，你应该直接监听你期望改变的参数。 请注意，在模板中我们仍然可以访问 $router 和 $route，所以不需要在 setup 中返回 router 或 route。","categories":[],"tags":[{"name":"JS,Vue-Router,Vue3,","slug":"JS-Vue-Router-Vue3","permalink":"http://yoursite.com/tags/JS-Vue-Router-Vue3/"}]},{"title":"深入浅出Vue3","slug":"vue3","date":"2022-12-01T10:09:04.000Z","updated":"2024-06-11T08:52:17.359Z","comments":true,"path":"/post/vue3.html","link":"","permalink":"http://yoursite.com/post/vue3.html","excerpt":"渐进式 JavaScript 框架。易学易用，性能出色，适用场景丰富的 Web 前端框架","text":"ref 和 reactive 使用上有什么区别? ref 支持所有的类型，reactive 只接收引用类型（Array/Object/Map/Set） ref 取值和赋值都需要加 .value，reactive 不需要 .value reactive 不能直接赋值，否则会破坏响应式（proxy） 如果要改变数组，可以通过 push 方法，将要 push 的数组结构 (xx.push(…arr)) 如何抉择呢？因为社区大佬 basvanmeurs提出了一个新的 PR，大概就是重构了响应式的部分内容，由于重构内容过于庞大，所以一直等到 2021 年 8 月 5 号，伴随着 Vue3.2 的发布，尤大大才合并对应的代码。 ref 被重构之后，有了更高效的实现（提升了 约 260% 的读取速度 / 约 50% 的写入速度），依赖跟踪速度提高了约 40%，内存使用量减少了约 17%，毫无疑问这是一个伟大的变化。 那么，在以后的使用过程当中，能使用 ref 就用 ref吧，毕竟它的性能得到了如此大的提升。 defineProps 如何定义默认值？ 针对类型的 defineProps 声明的不足之处在于，它没有可以给 props 提供默认值的方式。 使用TS 特有的默认值方式 withDefaults 函数，无须引入开箱即用，接受一个props函数第二个参数是一个对象设置默认值。 123456789export interface Props &#123; msg?: string labels?: string[]&#125;const props = withDefaults(defineProps&lt;Props&gt;(), &#123; msg: &#x27;hello&#x27;, labels: () =&gt; [&#x27;one&#x27;, &#x27;two&#x27;]&#125;) 注意 如果使用 withDefaults 报错 &#39;withDefaults&#39; is not defined，我们修改 .eslintrc 文件 添加如下配置代码： 123globals: &#123; withDefaults: &#x27;readonly&#x27;&#125;, 动态组件 component 当我们要渲染的组件不确定时，可以使用 &lt;component is=&quot;&#39;component-name&#39;&quot; /&gt; 来处理，要渲染的实际组件由 is 属性决定。 当 is 是字符串，它既可以是 HTML 标签名也可以是组件的注册名。 或者，is 也可以直接绑定组件。 按注册名渲染组件 1234567891011121314151617&lt;script&gt;import Foo from &#x27;./Foo.vue&#x27;import Bar from &#x27;./Bar.vue&#x27;export default &#123; components: &#123; Foo, Bar &#125;, data() &#123; return &#123; view: &#x27;Foo&#x27; &#125; &#125;&#125;&lt;/script&gt;&lt;template&gt; &lt;component :is=&quot;view&quot; /&gt;&lt;/template&gt; 按定义渲染组件 &lt;script setup&gt; 组合式 API： 1&lt;component :is=&quot;Math.random() &gt; 0.5 ? Foo : Bar&quot; /&gt; 渲染 HTML 元素 1&lt;component :is=&quot;href ? &#x27;a&#x27; : &#x27;span&#x27;&quot;&gt;&lt;/component&gt; 插槽 slot默认插槽、具名插槽。 作用域插槽：:headerName=&quot;&#39;我是头部&#39;&quot;，父组件可以通过 v-slot=&quot;&#123; headerName &#125;&quot; 拿到组件内部暴露出来的数据 1234567891011121314// SlotComp.vue&lt;template&gt; &lt;div class=&quot;slot-wrapper&quot;&gt; &lt;header class=&quot;header&quot;&gt; &lt;slot name=&quot;header&quot; :headerName=&quot;&#x27;我是头部&#x27;&quot;&gt;&lt;/slot&gt; &lt;/header&gt; &lt;main class=&quot;content&quot;&gt; &lt;slot&gt;&lt;/slot&gt; &lt;/main&gt; &lt;footer class=&quot;footer&quot;&gt; &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt; &lt;/footer&gt; &lt;/div&gt;&lt;/template&gt; 使用具有插槽的组件，headerName 是作用域插槽从内部提供的 12345&lt;SlotComp&gt; &lt;template v-slot:header=&quot;&#123; headerName &#125;&quot;&gt;&#123;&#123; headerName &#125;&#125;&lt;/template&gt; &lt;template v-slot&gt;default slot&lt;/template&gt; &lt;template v-slot:footer&gt;footer&lt;/template&gt;&lt;/SlotComp&gt; 插槽简写方式 # 12345&lt;SlotComp&gt; &lt;template #header=&quot;&#123; headerName &#125;&quot;&gt;&#123;&#123; headerName &#125;&#125;&lt;/template&gt; &lt;template #default&gt;default slot&lt;/template&gt; &lt;template #footer&gt;footer&lt;/template&gt;&lt;/SlotComp&gt; 动态插槽 1234567&lt;SlotComp&gt; &lt;template #[slotName]&gt;动态插槽&lt;/template&gt;&lt;/SlotComp&gt;// jsconst slotName = ref(&#x27;header&#x27;) 异步组件官方描述 在大型项目中，我们可能需要拆分应用为更小的块，并仅在需要时再从加载相关组件。 Vue2 用法1234567891011121314151617181920212223242526272829303132333435363738394041&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;app&quot;&gt; &lt;h3&gt;异步组件测试&lt;/h3&gt; &lt;button @click=&quot;toggle&quot;&gt;toggle&lt;/button&gt; &lt;async-component v-if=&quot;showAsync&quot; /&gt; &lt;/div&gt; &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;module&quot;&gt; import &#x27;./main.js&#x27; const app = new Vue(&#123; el: &#x27;#app&#x27;, components: &#123; AsyncComponent: () =&gt; import(&#x27;./async.js&#x27;) // 异步加载组件，页面需要时才加载 async.js 资源 &#125;, data() &#123; return &#123; showAsync: false, &#125; &#125;, methods: &#123; toggle() &#123; this.showAsync = !this.showAsync &#125; &#125; &#125;) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 接着我们创建一个组件 async.js 12345export default &#123; template: ` &lt;h3&gt;我是局部注册的 异步组件&lt;/h3&gt; `&#125; 我们回到页面上，因为 showAsync 刚开始是 false，所以 AsyncComponent 不会显示出来。 打开控制台，会发现并没有加载 async.js 资源。 这时，我们点击 toggle 按钮，此时 network 显示加载了 async.js 资源，并且 AsyncComponent 组件的内容也显示出来了。 Vue3 提供了 defineAsyncComponent 方法来实现异步加载组件：12345678import &#123; defineAsyncComponent &#125; from &#x27;vue&#x27;const AsyncComp = defineAsyncComponent(() =&gt; &#123; return new Promise((resolve, reject) =&gt; &#123; // ...从服务器获取组件 resolve(/* 获取到的组件 */) &#125;)&#125;) ES 模块动态导入 也会返回一个 Promise，所以多数情况下我们会将它和 defineAsyncComponent 搭配使用。类似 Vite 和 Webpack 这样的构建工具也支持此语法 (并且会将它们作为打包时的代码分割点 分包、性能优化) 12345import &#123; defineAsyncComponent &#125; from &#x27;vue&#x27;const AsyncComp = defineAsyncComponent(() =&gt; import(&#x27;./components/MyComponent.vue&#x27;)) 最后得到的 AsyncComp 是一个外层包装过的组件，仅在页面需要它渲染时 才会调用加载内部实际组件的函数。 顶层 await&lt;script setup&gt; 中可以使用顶层 await。结果代码会被编译成 async setup()： 123&lt;script setup&gt;const post = await fetch(`/api/post/1`).then((r) =&gt; r.json())&lt;/script&gt; 搭配 Suspense 组件使用 定义异步组件 Sync.vue 123456789101112131415&lt;template&gt; &lt;div&gt; Name: &#123;&#123; name &#125;&#125; &lt;/div&gt;&lt;/template&gt;&lt;script setup lang=&#x27;ts&#x27;&gt;import &#123;ref, reactive&#125; from &#x27;vue&#x27;import iTools from &#x27;@/utils/Tools&#x27;const name = ref(&#x27;&#x27;)const &#123; data &#125; = await iTools.Axios.get(&#x27;./sync-data.json&#x27;) // 定义在 public 下的json文件name.value = data.name&lt;/script&gt; 通过 defineAsyncComponent 动态导入 Sync.vue 组件 1const Sync = defineAsyncComponent(() =&gt; import(&#x27;@/components/Sync.vue&#x27;)) 使用 Suspense 内置组件 在请求过程中，会一直显示 loading… 状态，真实项目中我们可以替换成骨架屏。当接口请求成功，才会显示 Sync.vue 的内容。 123456789&lt;Suspense&gt; &lt;template #default&gt; &lt;Sync /&gt; &lt;/template&gt; &lt;template #fallback&gt; Loading... &lt;/template&gt;&lt;/Suspense&gt; 性能优化当我们使用了 defineAsyncComponent 动态导入组件，build 项目时，会单独将 Sync.vue 的 js 包拎出来，不会将其打包到index.js 中，通过拆包的方式，减少入口文件的大小，从而减少白屏的时间。 Teleport 传送门将其插槽内容渲染到 DOM 中的另一个位置。 12345678910111213141516171819interface TeleportProps &#123; /** * 必填项。指定目标容器。 * 可以是选择器或实际元素。 */ to: string | HTMLElement /** * 当值为 `true` 时，内容将保留在其原始位置 * 而不是移动到目标容器中。 * 可以动态更改。 */ disabled?: boolean&#125;// examples&lt;teleport to=&quot;#some-id&quot; /&gt;&lt;teleport to=&quot;.some-class&quot; /&gt;&lt;teleport to=&quot;[data-teleport]&quot; /&gt;&lt;teleport to=&quot;body&quot; /&gt; MittVue 2可以支持$on，$off来实现event bus，但是 Vue3 已经不支持这些属性，不过Vue 3可以支持第三方event bus来实现事件通信， 这里使用 mitt，官方地址：https://github.com/developit/mitt 1234import mitt from &#x27;mitt&#x27;// vue3挂载到全局app.config.globalProperties.$mitt = mitt() tsx 安装插件 npm install @vitejs/plugin-vue-jsx -D 安装如果失败，将 node 版本切换至 v14.16.0 使用插件 123456import vueJsx from &quot;@vitejs/plugin-vue-jsx&quot;;export default defineConfig(&#123; plugins: [vue(), vueJsx()], // ...&#125;) 但是导入 .tsx 文件，TypeScript 会报错： 12345// 找不到模块“@/components/Foo”或其相应的类型声明。import Foo from &#x27;@/components/Foo&#x27; // 省略了 .tsx 后缀// 导入路径不能以“.tsx”扩展名结束。考虑改为导入“@/components/Bar.js”。import Bar from &#x27;@/components/Bar.tsx&#x27; 配置 tsconfig.json: 12345678&#123; &quot;compilerOptions&quot;: &#123; &quot;baseUrl&quot;: &quot;.&quot;, &quot;paths&quot;: &#123; &quot;@/*&quot;: [&quot;src/*&quot;] &#125;, &#125;&#125; 之后我们导入 tsx 类型的组件，就不要带上后缀了。 编写 tsx 组件的3中方式 函数模式 12345export default function() &#123; return ( &lt;h1&gt;TSX componen111t&lt;/h1&gt; )&#125; options API 模式 1234567891011121314import &#123; defineComponent &#125; from &#x27;vue&#x27;export default defineComponent(&#123; data() &#123; return &#123; compname: &#x27;jsx comp&#x27; &#125; &#125;, render() &#123; return ( &lt;div&gt;&#123;this.compname&#125;&lt;/div&gt; ) &#125;&#125;) setup 函数模式 1234567891011121314151617181920interface IProps &#123; name?: string;&#125;export default defineComponent(&#123; props: &#123; name: String, &#125;, emits: [&#x27;on-click&#x27;], setup(props: IProps) &#123; const is = true // 返回渲染函数 return () =&gt; &#123; return ( &lt;h1 v-show=&#123;is&#125;&gt;setup 渲染函数 &#123;props?.name&#125;&lt;/h1&gt; ) &#125; &#125;&#125;) tsx slot 使用12345678910111213141516171819const Foo = (_, &#123; slots &#125;) =&gt; &#123; return (&lt;&gt; &lt;p&gt;&#123; slots?.header?.()&#125;&lt;/p&gt; &lt;h3&gt;slot comp&lt;/h3&gt; &lt;p&gt;&#123; slots.default ? slots.default() : &#x27;默认插槽&#x27; &#125;&lt;/p&gt; &lt;/&gt;)&#125;&lt;Foo v-slots=&#123;&#123; default() &#123; return &#x27;setup default slot&#x27; &#125;, header() &#123; return &#x27;header&#x27; &#125;&#125;&#125; /&gt; 自动引入 安装插件 unplugin-auto-import/vite https://github.com/antfu/unplugin-auto-import 注册完 plugin 之后，不再引入 ref, reactive 等等方法了，直接使用即可。 v-model 官网：https://cn.vuejs.org/guide/components/events.html v-model 在原生元素上的用法：12345678&lt;input v-model=&quot;searchText&quot; /&gt;// 等价于&lt;input :value=&quot;searchText&quot; @input=&quot;searchText = $event.target.value&quot;/&gt; 在自定义组件上使用（Vue2）123456789101112131415161718Vue.component(&#x27;Comp&#x27;, &#123; model: &#123; prop: &#x27;compValue&#x27;, event: &#x27;change&#x27; // event值必须要和 $emit 中的第一个参数相同，不一定非得是 `chagne`，可以随便填 &#125;, props: &#123; compValue: &#123; text: String, default: &#x27;&#x27; &#125; &#125;, template: ` &lt;input :value=&quot;compValue&quot; @input=&quot;$emit(&#x27;change&#x27;, $event.target.value)&quot; /&gt; `&#125;)// 使用&lt;Comp v-model=&quot;compValue&quot; /&gt; 在 Vue2 中，v-model 默认只能双向绑定一个值，如果我们想要绑定多个值，那么就需要使用 .sync 修饰符（Vue3 移除了） 1&lt;comp :value.sync=&quot;value&quot; :value1.sync=&quot;value1&quot; /&gt; comp 组件内部通过 this.$emit(&#39;update:value&#39;, &#39;xxx&#39;) 和 this.$emit(&#39;update:value1&#39;, &#39;xxx&#39;) 来修改 value 的值。 .sync 也只是一个语法糖，我们来看看编译后的结果： 123456789101112131415161718function render() &#123; with(this) &#123; return _c(&#x27;comp&#x27;, &#123; attrs: &#123; &quot;value&quot;: value, &quot;value1&quot;: value1 &#125;, on: &#123; &quot;update:value&quot;: function ($event) &#123; value = $event &#125;, &quot;update:value1&quot;: function ($event) &#123; value1 = $event &#125; &#125; &#125;) &#125;&#125; 相当于给 comp 组件传递了两个属性 value、value1，并且传递了两个事件方法 update:value、update:value1，这也是为什么我们可以直接在 comp 组件内部通过 this.$emit(&#39;update:xxx&#39;) 来更新属性了。 在自定义组件上使用（Vue3）而当 v-model 使用在一个自定义组件上时，v-model 会被展开为如下的形式： 12345678910111213141516// vue3&lt;CustomInput :modelValue=&quot;searchText&quot; @update:modelValue=&quot;newValue =&gt; searchText = newValue&quot;/&gt;// 内部定义 props 和 方法const props = defineProps&lt;&#123; modelValue: boolean&#125;&gt;()const emits = defineEmits([&#x27;update:modelValue&#x27;])// 调用emits(&#x27;update:modelValue&#x27;, !props.modelValue) 当然，我们也可以给 v-model 指定一个参数，不使用默认的 modelValue: 12345&lt;MyComponent v-model:title=&quot;bookTitle&quot; /&gt;// 定义 propsdefineProps([&#x27;title&#x27;])defineEmits([&#x27;update:title&#x27;]) 我们还可以绑定多个 v-model（Vue2中通过 .sync 修饰符绑定多个属性） 1234&lt;UserName v-model:first-name=&quot;first&quot; v-model:last-name=&quot;last&quot;/&gt; $nextTickVue 是异步渲染，data 改变之后，DOM不会立刻渲染 $nextTick 表示在 DOM 渲染之后触发，以获取最新的 DOM 节点。 123this.$nextTick(() =&gt; &#123; // ...&#125;) 自定义指令 https://cn.vuejs.org/guide/reusability/custom-directives.html 12345678910111213141516171819const myDirective = &#123; // 在绑定元素的 attribute 前 // 或事件监听器应用前调用 created(el, binding, vnode, prevVnode) &#123;&#125;, // 在元素被插入到 DOM 前调用 beforeMount(el, binding, vnode, prevVnode) &#123;&#125;, // 在绑定元素的父组件 // 及他自己的所有子节点都挂载完成后调用 mounted(el, binding, vnode, prevVnode) &#123;&#125;, // 绑定元素的父组件更新前调用 beforeUpdate(el, binding, vnode, prevVnode) &#123;&#125;, // 在绑定元素的父组件 // 及他自己的所有子节点都更新后调用 updated(el, binding, vnode, prevVnode) &#123;&#125;, // 绑定元素的父组件卸载前调用 beforeUnmount(el, binding, vnode, prevVnode) &#123;&#125;, // 绑定元素的父组件卸载后调用 unmounted(el, binding, vnode, prevVnode) &#123;&#125;&#125; 123456789&lt;div v-example:foo.bar=&quot;baz&quot;&gt;// binding 参数会是一个这样的对象：&#123; arg: &#x27;foo&#x27;, modifiers: &#123; bar: true &#125;, value: /* `baz` 的值 */, oldValue: /* 上一次更新时 `baz` 的值 */&#125; 全局函数或变量在 Vue2 中，我们经常将全局用到的函数定义在 Vue 的 prototype 上，在 Vue3 中已经不这样使用了: 123456789const app = createApp(App)app.config.globalProperties.$env = &#x27;dev&#x27;app.config.globalProperties.$filters = &#123; format&lt;T&gt;(str: T): string &#123; return str.trim() &#125;&#125; 我们使用的时候，不需要导入什么，直接在 .vue 文件使用即可: 12345678&lt;div&gt;env &#123;&#123;$env&#125;&#125;&lt;/div&gt;&lt;script setup lang=&quot;ts&quot;&gt; const app = getCurrentInstance() console.log(app?.proxy?.$filters.format(&#x27;getCurrentInstance&#x27;))&lt;/script&gt; 在组件中使用全局的变量或者函数时，会出现 ts 报错，这时我们需要去声明它的类型: 12345678declare module &#x27;vue&#x27; &#123; export interface ComponentCustomProperties &#123; $filters: &#123; format&lt;T&gt;(str: T): string, &#125;, $env: string, &#125;&#125; 自定义插件 一个插件可以是一个拥有 install() 方法的对象，也可以直接是一个安装函数本身。 插件没有严格定义的使用范围，但是插件发挥作用的常见场景主要包括以下几种： 通过 app.component() 和 app.directive() 注册一到多个全局组件或自定义指令。 通过 app.provide() 使一个资源可被注入进整个应用。 向 app.config.globalProperties 中添加一些全局实例属性或方法 以一个全局的 Loading 组件为例： 12345678910111213141516171819202122// Loading/index.tsimport type &#123; App, VNode &#125; from &#x27;vue&#x27;import &#123; createVNode, render &#125; from &#x27;vue&#x27;import Loading from &#x27;./index.vue&#x27;export default &#123; install (app: App) &#123; // Loading 需要转成 VNode const VNode: VNode = createVNode(Loading) // 将组件挂在到某个元素下 render(VNode, document.body) // Loading 组件通过 defineExpose 方法，暴露内部方法会在 exposed 字段上 app.config.globalProperties.$loading = &#123; onShow: VNode.component?.exposed?.onShow, onHide: VNode.component?.exposed?.onHide &#125; &#125;&#125; Loading 组件内部实现 1234567891011121314151617181920212223242526272829303132&lt;template&gt; &lt;div class=&quot;loading&quot; v-if=&quot;show&quot; @click=&quot;onHide&quot;&gt; &lt;img src=&quot;../../assets/imgs/loading.gif&quot; alt=&quot;&quot; /&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup lang=&#x27;ts&#x27;&gt;import &#123;ref, reactive&#125; from &#x27;vue&#x27;const show = ref(false)const onShow = () =&gt; show.value = trueconst onHide = () =&gt; show.value = false// 暴露内部方法供外部调用defineExpose(&#123; onShow, onHide,&#125;)&lt;/script&gt;&lt;style scoped lang=&quot;less&quot;&gt;.loading &#123; width: 100%; height: 100%; background-color: #1f2123; position: absolute; top: 0; left: 0; text-align: center;&#125;&lt;/style&gt; 这样我们就可以在任何地方使用 全局 Loading 了。 123456789// setupconst instance = getCurrentInstance()const showLoading = () =&gt; &#123; instance?.proxy?.$loading.onShow()&#125;// or 直接在 template 中使用&lt;button @click=&quot;$loading.onShow&quot;&gt;show loading&lt;/button&gt; 如果调用 $loading 报ts错误，我们可以声明全局类型 12345678declare module &#x27;vue&#x27; &#123; export interface ComponentCustomProperties &#123; $loading: &#123; onShow(): void; onHide(): void; &#125; &#125;&#125; Scoped原理 &amp; 样式穿透 给 HTML DOM节点加一个不重复的 data 属性（形如: data-v-xxxxx），来表示它的唯一性 在每句 CSS 选择器的末尾，加一个当前组件的 data 属性选择器，来私有化样式 如果组件内部包含其他组件，只会给其他组件的最外层标签加上当前组件的 data 属性. 想要直接修改开源组件的样式，大概率是失败的，解决方案就是要使用样式穿透 123456789/deep/ .input &#123; ...&#125;// or:deep(.input) &#123; ...&#125; css新特性插槽选择器我们在使用插槽时，如何在子组件中修改插槽内容的样式 123:slotted(.p-footer) &#123; color: red;&#125; 定义全局样式123:global(div) &#123; color: red;&#125; 动态 css123456789101112// jsconst color = ref(&#x27;red&#x27;)const font = ref(&#123; fontSize: &#x27;24px&#x27;, fontWeight: &#x27;bold&#x27;,&#125;)// css.box &#123; color: v-bind(color); font-size: v-bind(&#x27;font.fontSize&#x27;);&#125; 模块化 css给 style 标签加上 module 属性 123456789101112// template// 如果有多个，就写成数组形式&lt;div :class=&quot;[$style.box]&quot;&gt; 模块 css&lt;/div&gt;// css&lt;style module&gt;.box &#123; color: red&#125;&lt;/style&gt; $style 是固定的写法，如果不想用这个变量，我们可以指定 module=&quot;myStyle&quot; 。 我们还可以通过 useCssModule 获取当前组件下的样式类名 123456// 默认const class = useCssModule()const class = useCssModule(&#x27;$style&#x27;)// 如果指定了 moduleconst class = useCssModule(&#x27;myStyle&#x27;) 集成 Tailwind CSS https://blog.csdn.net/qq1195566313/article/details/124951311?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167109189716782427434983%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=167109189716782427434983&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_ecpm_v1~rank_v31_ecpm-1-124951311-null-null.nonecase&amp;utm_term=tailwind&amp;spm=1018.2226.3001.4450 安装 vscode 提示插件 Tailwind CSS IntelliSense h函数1234567891011import &#123; h &#125; from &#x27;vue&#x27;const Btn = (props, ctx) =&gt; &#123; return h(&#x27;div&#x27;, &#123; class: [...], onClick: () =&gt; &#123; ctx.emit(&#x27;on-click&#x27;, &#x27;hello world&#x27;) &#125;, &#125;, ctx.slots.default())&#125; 参考资料Vue3+Vite+Ts 项目实战 01 Vite 创建项目、ESLint+TS+GitCommit配置、Vue3新特性介绍 ↩","categories":[],"tags":[{"name":"JS,Vue3","slug":"JS-Vue3","permalink":"http://yoursite.com/tags/JS-Vue3/"}]},{"title":"高性能渲染十万条数据(虚拟列表)","slug":"virtual-list","date":"2022-11-23T12:43:13.000Z","updated":"2024-06-11T08:52:17.352Z","comments":true,"path":"/post/virtual-list.html","link":"","permalink":"http://yoursite.com/post/virtual-list.html","excerpt":"使用虚拟列表的方式，来同时加载大量数据。","text":"前言在工作中，有时会遇到需要一些不能使用分页方式来加载列表数据的业务情况，对于此，我们称这种列表叫做长列表。比如，在一些外汇交易系统中，前端会实时的展示用户的持仓情况(收益、亏损、手数等)，此时对于用户的持仓列表一般是不能分页的。 时间分片 提到了可以使用时间分片的方式来对长列表进行渲染，但这种方式更适用于列表项的DOM结构十分简单的情况。本文会介绍使用虚拟列表的方式，来同时加载大量数据。 当我们渲染10w条数据时，其实主要是的时间花费在 Recalculate Style 和 Layout 上 Recalculate Style：样式计算，浏览器根据css选择器计算哪些元素应该应用哪些规则，确定每个元素具体的样式。 Layout：布局，知道元素应用哪些规则之后，浏览器开始计算它要占据的空间大小及其在屏幕的位置。 在实际的工作中，列表项必然不会像例子中仅仅只由一个li标签组成，必然是由复杂DOM节点组成的。 那么可以想象的是，当列表项数过多并且列表项结构复杂的时候，同时渲染时，会在Recalculate Style和Layout阶段消耗大量的时间。 而虚拟列表就是解决这一问题的一种实现。 什么是虚拟列表虚拟列表其实是按需显示的一种实现，即只对可见区域进行渲染，对非可见区域中的数据不渲染或部分渲染的技术，从而达到极高的渲染性能。 假设有1万条记录需要同时渲染，我们屏幕的可见区域的高度为1000px,而列表项的高度为50px，则此时我们在屏幕中最多只能看到20个列表项，那么在首次渲染的时候，我们只需加载20条即可。 说完首次加载，再分析一下当滚动发生时，我们可以通过计算当前滚动值得知此时在屏幕可见区域应该显示的列表项。 假设滚动发生，滚动条距顶部的位置为150px,则我们可得知在可见区域内的列表项为第4项至`第13项。 实现虚拟列表的实现，实际上是在首屏加载的时候，只加载 可视区域 内需要的列表项，当滚动发生时，通过计算动态获得可视区域内的列表项，并将非可视区域内存在的列表项删除。 计算当前可视区域起始数据索引（startIndex） 计算当前可视区域结束数据索引（endIndex） 计算当前可视区域的数据，并渲染到页面中 计算startIndex对应的数据在整个列表中的偏移位置startOffset并设置到列表上 由于只是对可视区域内的列表项进行渲染，所以为了保持列表容器的高度并可正常的触发滚动，将Html结构设计成如下结构： 1234567891011121314151617181920&lt;div ref=&quot;list&quot; class=&quot;infinite-list-container&quot; @scroll=&quot;scrollEvent($event)&quot;&gt; &lt;!-- 所有数据的总高度 --&gt; &lt;div class=&quot;infinite-list-phantom&quot; :style=&quot;&#123; height: listHeight + &#x27;px&#x27; &#125;&quot;&gt;&lt;/div&gt; &lt;!-- 可视区区域，可以当做滑块看待 --&gt; &lt;div class=&quot;infinite-list&quot; :style=&quot;&#123; transform: getTransform &#125;&quot;&gt; &lt;!-- 每一项数据 --&gt; &lt;div ref=&quot;items&quot; class=&quot;infinite-list-item&quot; v-for=&quot;item in visibleData&quot; :key=&quot;item.id&quot; :style=&quot;&#123; height: itemSize + &#x27;px&#x27;, lineHeight: itemSize + &#x27;px&#x27; &#125;&quot; &gt; &#123;&#123; item.value &#125;&#125; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; 接着，监听infinite-list-container的 scroll事件，获取滚动位置 scrollTop。 列表总高度 listHeight = listData.length * itemSize 可显示的列表项数 visibleCount = Math.ceil(screenHeight / itemSize) 数据的起始索引 startIndex = Math.floor(scrollTop / itemSize) 数据的结束索引 endIndex = startIndex + visibleCount 列表显示数据为 visibleData = listData.slice(startIndex,endIndex) 12345678910111213scrollEvent() &#123; //当前滚动位置 let scrollTop = this.$refs.list.scrollTop; //此时的开始索引（向下取整），itemSize 是 100 this.start = Math.floor(scrollTop / this.itemSize); //此时的结束索引 this.end = this.start + this.visibleCount; //此时的偏移量 this.startOffset = scrollTop - (scrollTop % this.itemSize);&#125;, 当滚动后，由于 渲染区域 相对于 可视区域 已经发生了偏移，此时我需要获取一个 偏移量startOffset，通过样式控制将渲染区域偏移至可视区域中，当用户在滑动时，渲染区域就会根据 startOffset 计算出偏移量，渲染区域就会一直在可视区域内呈现。 1234567this.startOffset = scrollTop - (scrollTop % this.itemSize);// computed//偏移量对应的stylegetTransform() &#123; return `translate3d(0,$&#123;this.startOffset&#125;px,0)`;&#125;, 完整代码12345678910111213141516&lt;style&gt; html&#123; height: 100%; &#125; body&#123; height: 100%; margin:0; &#125; #app&#123; height:100%; &#125;&lt;/style&gt;&lt;div id=&quot;app&quot;&gt; &lt;VirtualList :listData=&quot;state.data&quot; :itemSize=&quot;100&quot; /&gt;&lt;/div&gt; VirtualList comp. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125&lt;script&gt;export default &#123; name: &quot;VirtualList&quot;, props: &#123; //所有列表数据 listData: &#123; type: Array, default: () =&gt; [], &#125;, //每项高度 itemSize: &#123; type: Number, default: 200, &#125;, &#125;, computed: &#123; //列表总高度 listHeight() &#123; return this.listData.length * this.itemSize; &#125;, //可显示的列表项数 visibleCount() &#123; // 向上取整: Math.ceil(13.06) =&gt; 14，表示整个屏幕，可以放 14 条数据 return Math.ceil(this.screenHeight / this.itemSize); &#125;, //偏移量对应的style getTransform() &#123; return `translate3d(0,$&#123;this.startOffset&#125;px,0)`; &#125;, //获取真实显示列表数据 visibleData() &#123; return this.listData.slice( this.start, Math.min(this.end, this.listData.length) ); &#125;, &#125;, mounted() &#123; // this.$el 表示当前组件的根节点，这里是 infinite-list-container this.screenHeight = this.$el.clientHeight; this.start = 0; this.end = this.start + this.visibleCount; &#125;, data() &#123; return &#123; //可视区域高度 screenHeight: 0, //偏移量 startOffset: 0, //起始索引 start: 0, //结束索引 end: null, &#125;; &#125;, methods: &#123; scrollEvent() &#123; //当前滚动位置 let scrollTop = this.$refs.list.scrollTop; //此时的开始索引（向下取整），itemSize 是 100 this.start = Math.floor(scrollTop / this.itemSize); //此时的结束索引 this.end = this.start + this.visibleCount; //此时的偏移量 this.startOffset = scrollTop - (scrollTop % this.itemSize); &#125;, &#125;,&#125;;&lt;/script&gt;&lt;template&gt; &lt;div ref=&quot;list&quot; class=&quot;infinite-list-container&quot; @scroll=&quot;scrollEvent($event)&quot;&gt; &lt;!-- 所有数据的总高度 --&gt; &lt;div class=&quot;infinite-list-phantom&quot; :style=&quot;&#123; height: listHeight + &#x27;px&#x27; &#125;&quot;&gt;&lt;/div&gt; &lt;!-- 可视区区域，可以当做滑块看待 --&gt; &lt;div class=&quot;infinite-list&quot; :style=&quot;&#123; transform: getTransform &#125;&quot;&gt; &lt;div ref=&quot;items&quot; class=&quot;infinite-list-item&quot; v-for=&quot;item in visibleData&quot; :key=&quot;item.id&quot; :style=&quot;&#123; height: itemSize + &#x27;px&#x27;, lineHeight: itemSize + &#x27;px&#x27; &#125;&quot; &gt; &#123;&#123; item.value &#125;&#125; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;style scoped&gt;.infinite-list-container &#123; height: 100%; overflow: auto; position: relative; -webkit-overflow-scrolling: touch;&#125;.infinite-list-phantom &#123; position: absolute; left: 0; top: 0; right: 0; z-index: -1;&#125;.infinite-list &#123; left: 0; right: 0; top: 0; position: absolute; text-align: center;&#125;.infinite-list-item &#123; padding: 10px; color: #555; box-sizing: border-box; border-bottom: 1px solid #999;&#125;&lt;/style&gt; 列表项动态高度在之前的实现中，列表项的高度是固定的，因为高度固定，所以可以很轻易的获取列表项的整体高度以及滚动时的显示数据与对应的偏移量。 而实际应用的时候，当列表中包含文本之类的可变内容，会导致 列表项的高度并不相同。 比如这样： 在虚拟列表中应用动态高度的解决方案一般有如下三种： 1.对组件属性itemSize进行扩展，支持传递类型为数字、数组、函数 可以是一个固定值，如 100，此时列表项是固高的 可以是一个包含所有列表项高度的数据，如 [50, 20, 100, 80, …] 可以是一个根据列表项索引返回其高度的函数：(index: number): number 这种方式虽然有比较好的灵活度，但仅适用于可以预先知道或可以通过计算得知列表项高度的情况，依然无法解决列表项高度由内容撑开的情况。 2.将列表项 渲染到屏幕外，对其高度进行测量并缓存，然后再将其渲染至可视区域内。 由于 预先渲染至屏幕外，再渲染至屏幕内，这导致渲染成本增加一倍，这对于数百万用户在低端移动设备上使用的产品来说是不切实际的。 3.以预估高度先行渲染，然后获取真实高度并缓存。 这是可以选择的实现方式，可以避免前两种方案的不足。","categories":[],"tags":[{"name":"JS","slug":"JS","permalink":"http://yoursite.com/tags/JS/"}]},{"title":"高性能渲染十万条数据(时间分片)","slug":"time-fragment","date":"2022-11-23T11:53:52.000Z","updated":"2024-06-11T08:52:17.351Z","comments":true,"path":"/post/time-fragment.html","link":"","permalink":"http://yoursite.com/post/time-fragment.html","excerpt":"渲染大量数据。","text":"最粗暴的做法（一次性渲染JS的运行时间为187ms，还是蛮快的，但是最终渲染完成后的总时间确是2844ms，中间会白屏一段时间。 1234567891011121314151617// 记录任务开始时间let now = Date.now();// 插入十万条数据const total = 100000;// 获取容器let ul = document.getElementById(&#x27;container&#x27;);// 将数据插入容器中for (let i = 0; i &lt; total; i++) &#123; let li = document.createElement(&#x27;li&#x27;); li.innerText = i ul.appendChild(li);&#125;console.log(&#x27;JS运行时间：&#x27;, Date.now() - now);setTimeout(() =&gt; &#123; console.log(&#x27;总运行时间：&#x27;, Date.now() - now);&#125;, 0) 使用定时器页面的卡顿是由于同时渲染大量DOM所引起的，所以考虑将渲染过程分批进行，这里用到的就是 setTimeout。 1234567891011121314151617181920212223242526let ul = document.getElementById(&#x27;container&#x27;);// 插入十万条数据let total = 100000;// 一次插入 20 条let once = 20;//总页数let page = total / once//每条记录的索引let index = 0;//循环加载数据function loop(curTotal, curIndex) &#123; if (curTotal &lt;= 0) &#123; return false; &#125; //每页多少条 let pageCount = Math.min(curTotal, once); setTimeout(() =&gt; &#123; for (let i = 0; i &lt; pageCount; i++) &#123; let li = document.createElement(&#x27;li&#x27;); li.innerText = curIndex + i + &#x27; : &#x27; + ~~(Math.random() * total) ul.appendChild(li) &#125; loop(curTotal - pageCount, curIndex + pageCount) &#125;, 0)&#125;loop(total, index); 页面加载的时间已经非常快了，每次刷新时可以很快的看到第一屏的所有数据，但是当我们快速滚动页面的时候，会发现页面出现闪屏或白屏的现象。 为什么会出现闪屏现象呢首先，理清一些概念。FPS表示的是每秒钟画面更新次数。我们平时所看到的连续画面都是由一幅幅静止画面组成的，每幅画面称为一帧，FPS是描述帧变化速度的物理量。 大多数电脑显示器的刷新频率是60Hz，大概相当于每秒钟重绘60次，FPS为60frame/s，为这个值的设定受屏幕分辨率、屏幕尺寸和显卡的影响。 因此，当你对着电脑屏幕什么也不做的情况下，大多显示器也会以每秒60次的频率正在不断的更新屏幕上的图像。 为什么你感觉不到这个变化？ 那是因为人的眼睛有视觉停留效应，即前一副画面留在大脑的印象还没消失，紧接着后一副画面就跟上来了，这中间只间隔了16.7ms(1000/60≈16.7)，所以会让你误以为屏幕上的图像是静止不动的。 而屏幕给你的这种感觉是对的，试想一下，如果刷新频率变成1次/秒，屏幕上的图像就会出现严重的闪烁，这样就很容易引起眼睛疲劳、酸痛和头晕目眩等症状。 大多数浏览器都会对重绘操作加以限制，不超过显示器的重绘频率，因为即使超过那个频率用户体验也不会有提升。因此，最平滑动画的最佳循环间隔是1000ms/60，约等于16.6ms。 直观感受，不同帧率的体验： 帧率能够达到 50 ～ 60 FPS 的动画将会相当流畅，让人倍感舒适； 帧率在 30 ～ 50 FPS 之间的动画，因各人敏感程度不同，舒适度因人而异； 帧率在 30 FPS 以下的动画，让人感觉到明显的卡顿和不适感； 帧率波动很大的动画，亦会使人感觉到卡顿。 简单聊一下 setTimeout 和闪屏现象 setTimeout的执行时间并不是确定的。在JS中，setTimeout任务被放进事件队列中，只有主线程执行完才会去检查事件队列中的任务是否需要执行，因此setTimeout的实际执行时间可能会比其设定的时间晚一些。 刷新频率受屏幕分辨率和屏幕尺寸的影响，因此不同设备的刷新频率可能会不同，而setTimeout只能设置一个固定时间间隔，这个时间不一定和屏幕的刷新时间相同。 以上两种情况都会导致setTimeout的执行步调和屏幕的刷新步调不一致。 在setTimeout中对dom进行操作，必须要等到屏幕下次绘制时才能更新到屏幕上，如果两者步调不一致，就可能导致中间某一帧的操作被跨越过去，而直接更新下一帧的元素，从而导致丢帧现象。 使用 requestAnimationFrame与setTimeout相比，requestAnimationFrame最大的优势是由系统来决定回调函数的执行时机。 如果屏幕刷新率是60Hz,那么回调函数就每16.7ms被执行一次，如果刷新率是75Hz，那么这个时间间隔就变成了1000/75=13.3ms，换句话说就是，requestAnimationFrame 的步伐跟着系统的刷新步伐走。它能保证回调函数在屏幕每一次的刷新间隔中只被执行一次，这样就不会引起丢帧现象。 将 setTimeout 替换成 requestAnimationFrame: 123456789101112// 其他 ...window.requestAnimationFrame(function()&#123; for(let i = 0; i &lt; pageCount; i++)&#123; let li = document.createElement(&#x27;li&#x27;); li.innerText = curIndex + i + &#x27; : &#x27; + ~~(Math.random() * total) ul.appendChild(li) &#125; loop(curTotal - pageCount,curIndex + pageCount)&#125;)// ... 使用 DocumentFragment DocumentFragment，文档片段接口，表示一个没有父级文件的最小文档对象。它被作为一个轻量版的Document使用，用于存储已排好版的或尚未打理好格式的XML片段。最大的区别是因为DocumentFragment不是真实DOM树的一部分，它的变化不会触发DOM树的（重新渲染) ，且不会导致性能等问题。可以使用document.createDocumentFragment方法或者构造函数来创建一个空的DocumentFragment 从MDN的说明中，我们得知DocumentFragments是DOM节点，但并不是DOM树的一部分，可以认为是存在内存中的，所以将子元素插入到文档片段时不会引起页面回流（什么是回流? 回流是会导致页面重新渲染的一些元素,从而影响性能）。 当append元素到document中时，被append进去的元素的样式表的计算是同步发生的，此时调用 getComputedStyle 可以得到样式的计算值。 而append元素到 documentFragment 中时，是不会计算元素的样式表，所以documentFragment 性能更优。当然现在浏览器的优化已经做的很好了， 当append元素到document中后，没有访问 getComputedStyle 之类的方法时，现代浏览器也可以把样式表的计算推迟到脚本执行之后。 1234567891011121314// 其他 ...window.requestAnimationFrame(function()&#123; const fragment = document.createDocumentFragment() for(let i = 0; i &lt; pageCount; i++)&#123; let li = document.createElement(&#x27;li&#x27;); li.innerText = curIndex + i + &#x27; : &#x27; + ~~(Math.random() * total) fragment.appendChild(li) &#125; ul.appendChild(fragment) loop(curTotal - pageCount,curIndex + pageCount)&#125;)// ...","categories":[],"tags":[{"name":"JS","slug":"JS","permalink":"http://yoursite.com/tags/JS/"}]},{"title":"ES Module / Babel","slug":"ESModule&babel","date":"2022-09-13T09:11:35.000Z","updated":"2024-06-11T08:52:17.162Z","comments":true,"path":"/post/ESModule&babel.html","link":"","permalink":"http://yoursite.com/post/ESModule&babel.html","excerpt":"继 CommonJS、AMD、CMD 几种模块化规范由社区提出后，ES 2015（ES6）在语言层面上实现了模块功能，且实现简单，可以替代CommonJS和AMD规范，成为在服务器和浏览器通用的解决方案。","text":"Module在ES6之前，社区制定了一些模块加载方案，最主要的有CommonJS和AMD两种。前者用于服务器，后者用于浏览器。 ES6在语言规格的层面上实现了模块功能，而且实现得相当简单，完全可以取代现有的CommonJS和AMD规范，成为浏览器和服务器通用的模块解决方案。 stage1 文件划分方式，约定每一个 js 文件就是一个独立的模块 12345678910&lt;script src=&quot;./lib.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;./main.js&quot;&gt;&lt;/script&gt;&lt;script&gt; // 直接使用导入文件中的变量与方法 method1() // 模块成员可以被修改 count = 2&lt;/script&gt; 缺点： 污染全局作用域 命名冲突 无法管理模块间的依赖关系 模块成员可以在外部直接修改 stage2 命名空间，减少命名冲突 每个文件中，通过一个命名对象来包裹所有的变量和方法 123456789// module a 相关的数据和方法const moduleA = &#123; name: &#x27;module a&#x27;, count: 1, incCount() &#123; this.count ++ &#125;&#125; 缺点： 污染全局作用域 无法管理模块间的依赖关系 模块成员可以在外部直接修改 stage3 IIFE（立即执行函数） 1234567891011;(function($)&#123; const name = &#x27;moduleA&#x27; let count = 1 function incCount() &#123; count++ &#125; window.moduleA = &#123; incCount &#125;&#125;)(jQuery) 通过闭包的方式，模块内部的变量只能被模块内部修改，外部无法修改。 通过 IIFE 的传参，我们可以传递一些依赖包给模块使用。 模块化规范 CommonJS（NodeJS） 一个文件就是一个模块 每个模块都有单独的作用域 通过 module.exports 导出成员 通过 require 函数加载成员 以同步的方式加载模块，如果放在浏览器中，那么会出现大量的文件请求，有时候并不是立马就需要的文件也会被加载，从而造成性能问题，不适合在浏览器中使用。 AMD（Asyncronous module definition） 异步的模块定义 12345678910111213141516171819// 定义一个模块// 第二个参数表示当前模块的依赖项define(&#x27;module1&#x27;, [&#x27;lodash&#x27;, &#x27;./module2&#x27;], function(&#x27;lodash&#x27;, &#x27;module2&#x27;) &#123; // 导出成员，外部可以方法 start 方法 return &#123; start:function() &#123; // lodash module2() &#125; &#125;&#125;) // 加载模块 require(&#x27;./module1&#x27;, function(module1) &#123; module1.start() &#125;) CMD规范（类似 CommonJS） ES Modules（浏览器） ES6 模块化12345&lt;script src=&quot;./main.js&quot; type=&quot;module&quot;&gt;&lt;/script&gt;&lt;script type=&quot;module&quot;&gt; console.log(1)&lt;/script&gt; 特性： ES6的模块自动采用严格模式，不管有没有在模块头部加上＂use strict＂。 每个 ES Module 都运行在私有作用域中 ESM 是通过 CORS(跨域) 的方式去请求外部的 JS 资源的。（原 script 标签默认支持跨域） ESM 的 script 标签会延迟执行脚本（类似标签的 defer 属性），等待网页渲染完成后，再执行。123456789// 会比有 type=&quot;module&quot; 的script 先执行&lt;script&gt; alert(&#x27;hello&#x27;)&lt;/script&gt;// 延迟执行&lt;script type=&quot;module&quot;&gt; // 等同于加了 defer 属性 console.log(1)&lt;/script&gt; 严格模式主要有以下限制： 变量必须声明后再使用。 函数的参数不能有同名属性，否则报错。 不能使用with语句。 不能对只读属性赋值，否则报错。 不能使用前缀0表示八进制数，否则报错。 不能删除不可删除的属性，否则报错。 不能删除变量(delete prop)，会报错，只能删除属性(delete global[prop])。 eval不会在其外层作用域引入变量。 eval和arguments不能被重新赋值。 arguments不会自动反映函数参数的变化。 不能使用arguments.callee。 不能使用arguments.caller。 禁止this指向全局对象。 不能使用fn.caller和fn.arguments获取函数调用的堆栈。 增加了保留字（比如protected、static和interface）。 export &amp; import模块功能主要由两个命令构成：export和import。 export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能。一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。 如果希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量。 12345678910111213// test.jsexport const myName = &#x27;Hello_AlexCC&#x27;// 组合导出const myAge = 18const sayMe = function() &#123; console.log(`my name is $&#123;myName&#125;, and I&#x27;m $&#123;myAge&#125; years old!`)&#125;export &#123; myAge, sayMe&#125; 如果在一个模块中先输入后输出同一个模块，import语句可以与export语句写在一起。 123456export &#123; sayName as default&#125; from &#x27;./someModule&#x27;// 等价于import &#123; sayName &#125; from &#x27;./someModule&#x27;export default sayName 另外，ES7有一个提案(https://github.com/leebyron/ecmascript-more-export-from)，简化先输入后输出的写法，拿掉了输出时的大括号。 12345// 提案export v from &#x27;mod&#x27;// 现在export &#123; v &#125; from &#x27;mod&#x27; import语句会执行所加载的模块 1import &#x27;lodash&#x27; 模块整体加载1import * as myModule from &#x27;./myModule&#x27; module 命令module命令可以取代import语句，达到整体输入模块的作用。 123module myModule from &#x27;./myModule&#x27;myModule.sayName() 动态加载模块返回的是 Promise 123import(&#x27;./moduleA.js&#x27;).then(module =&gt; &#123; ...&#125;) ES6模块加载的实质ES6模块加载的机制与CommonJS模块完全不同。 CommonJS模块输出的是一个值的拷贝，而ES6模块输出的是 值的引用。 1234567891011121314// lib.jsexport let count = 1export function incCount() &#123; count++&#125;// main.jsimport &#123; count, incCount &#125; from &#x27;./lib.js&#x27;console.log(count) // 1incCount()console.log(count) // 2 注意加上 type=”module” 1&lt;script src=&quot;./main.js&quot; type=&quot;module&quot;&gt;&lt;/script&gt; ES Module in NodeJS如何在 Nodejs 中使用 ES module! 有两个步骤： .js 后缀都改为 .mjs 执行脚本时，加上 node --experimental-modules main.mjs 12345// node// main.mjsimport fs from &#x27;fs&#x27;import _ from &#x27;lodash&#x27; 注意事项： 在 node 环境中，我们可以使用 ES Module 导入 CommonJS 导出的成员 123456789// commonjs.jsmodule.exports = &#123; foo: &#x27;commonjs exports foo&#x27;&#125;// esmodule.jsimport mod from &#x27;./commonjs.js&#x27;console.log(mod.foo) 在 node 环境中，CommonJS 中不能导入 ES Module 导出的成员 1const mod = require(&#x27;./esmodule.js&#x27;) // 报错 CommonJS 与 ES Module 差异1234567891011// CommonJSrequire // 加载模块函数module // 模块对象exports // 导出对象别名 exports.name = &#x27;hello world&#x27;__filename // 当前文件的绝对路径__dirname // 当前文件所在目录 12345678910// ES Moduleimport.meta.url // 文件路径信息// 可以通过内置模块 url 和 path 处理，拿到 __filename 和 __dirnameimport &#123; fileURLToPath &#125; from &#x27;url&#x27;import &#123; dirname &#125; from &#x27;path&#x27;const __filename = fileURLToPath(import.meta.url)const __dirname = dirname(__filename) 高版本 NodeJS 已支持 ESM (Version &gt; 12.10.0)不需要再写 .mjs 结尾了，直接 .js 1234567// package.json&#123; &quot;type&quot;: &quot;module&quot;&#125;// 执行node --experimental-modules main.js 加上 type module 配置之后，如果我们还想用 CommonJS 规范，发现会报错了。因为我们已经使用了 ESM。 如果继续使用 CommonJS 规范，那么就需要将 .js 改为 .cjs。 ESM in NodeJS （babel 兼容方案） yarn add @babel/node @babel/preset-env –save-dev 12// 通过 babel-node 命令执行脚本yarn babel-node main.js 要注意的是，babel/core 并不会转换我们的代码，转换代码的工作交给 babel 内置的插件去实现的。也就是说，我们需要一个插件，去转换 ES6 中的一个新特性。 而 @bable/preset-env 是插件的集合，所以不需要每个插件都安装一遍。 12// 命令行使用yarn babel-node main.js --presets=@bable/preset-env 结合 babel 配置文件使用 123456// .babelrc&#123; &quot;presets&quot;: [&quot;@babel/presets-env&quot;]&#125;yarn babel-node main.js 既然 @babel/preset-env 是插件的集合，而我不想要那么多，只是想处理 ESM 怎么办呢？ 我们卸载掉 @babel/preset-env，安装 @babel/plugin-transform-modules-commonjs 123456// .babelrc&#123; &quot;presets&quot;: [&quot;@babel/plugin-transform-modules-commonjs&quot;]&#125;yarn babel-node main.js babel 编译器 主要用于将ES6版本的JS代码转换为ES5等向后兼容的JS代码，从而使代码可以运行在低版本浏览器或其他环境中。 npm install –save-dev babel-core babel-preset-es2015 babel-preset-latest –registry=https://registry.npm.taobao.org 配置文件 .babelrc（或者 babel.config.js || .babelrc.js） 1234&#123; &quot;presets&quot;: [&quot;es2015&quot;, &quot;latest&quot;], // 安装包的别名，用来处理最新的 ES6 语法 &quot;plugins&quot;: []&#125; 安装 babel-cli，命令行编译工具，依赖 babel/core 1npm install --save-dev babel-cli 查看 babel 版本（npx 是新版 NodeJS 附带的命令） 123npx babel --version // ===== node_modules/.bin/babel --version // ====&gt; 6.26.0 (babel-core 6.26.3) 到这里，我们就可以使用 babel 来编译js 文件了。创建一个 babel.js 文件，写入一些 es6 的语法。 1234567// babel.jsconst foo = () =&gt; &#123; return 3 * 3&#125;const count = 123 打开命令行工具： 1npx babel babel.js -o compiled.js // 等效 node_modules/.bin/babel babel.js -o compiled.js 转化后的结果： 1234567&quot;use strict&quot;;var foo = function foo() &#123; return 3 * 3;&#125;;var count = 123; PolyfillBabel默认只转换新的JS语法（syntax），而不转换新的API（Promise、Map）。如果只是做语法转换，Promise 是不会被降级的，在低版本的浏览器中可能无法使用。 引入 Polyfill，为当前环境提供一个“垫片”。所谓“垫片”，是指垫平不同浏览器之间差异的东西。polyfill提供了全局的ES6对象及通过修改原型链Array.prototype等来补充对实例的实现。 babel 版本Babel版本主要是Babel 6和Babel 7这两个版本。 提到Babel版本的时候，通常指的是@babel/core这个Babel核心包的版本。 Babel 7的npm包都存放在babel域下，即在安装npm包的时候，我们安装的是名称以@babel/开头的npm包，如@babel/cli、@babel/core等。而在Babel 6中，我们安装的包名是babel-cli、babel-core等以babel-开头的npm包。其实它们本质上是一样的，都是Babel官方提供的cli命令行工具和core核心包。在平时开发和学习的过程中，碰到@babel/和babel-时应该认识到它俩是作用相同、内容接近的包，只是版本不一样而已。 babel 配置文件 指定编译的规则。 1.babelrc || babel.config.js || .babelrc.js || package.json（配置 babel 属性，配置项都是 一样的） 123456789101112// package.json&#123; ... babel: &#123; &quot;presets&quot;: [&quot;es2015&quot;, &quot;react&quot;], &quot;plugin&quot;: [&quot;transform-class-properties&quot;] &#125;, ...&#125; 推荐使用后缀名是js的配置文件来进行配置，因为可以使用该文件做一些逻辑处理，适用性更强。 插件 &amp; 预设plugin代表插件，preset代表预设。通常每个插件或预设都是一个npm包。 Babel的插件实在太多了，假如只配置插件数组，那我们前端工程要把ES2015、ES2016、ES2017……下的所有插件都写到配置项里，这样的Babel配置文件会非常臃肿。 preset预设就是帮我们解决这个问题的。预设是一组Babel插件的集合，通俗的说法就是插件包，例如babel-preset-es2015就是所有处理ES2015的二十多个Babel插件的集合。这样我们就不用写一大堆插件配置项了，只需要用一个预设代替就可以。另外，预设也可以是插件和其他预设的集合。 Babel官方已经针对常用的环境做了如下这些preset包。 1）@babel/preset-env. 2）@babel/preset-react. 3）@babel/preset-typescript. 4）@babel/preset-stage-0. 5）@babel/preset-stage-1. 插件与预设的简称如果插件的npm包名称的前缀为babel-plugin-，则可以省略其前缀。 如果npm包名称的前缀带有npm作用域@，如@org/babel-plugin-xxx，则短名称可以写成@org/xxx。 123456789&#123; &quot;plugins&quot;: [&quot;babel-plugin-transform-decorators-legacy&quot;]&#125;// =====&#123; &quot;plugins&quot;: [&quot;transform-decorators-legacy&quot;]&#125; 预设的短名称规则与插件的类似，预设npm包名称的前缀为babel-preset-或作用域@xxx/babel-preset-xxx的可以省略掉babel-preset-。 插件和预设执行顺序plugins插件数组和presets预设数组是有顺序要求的。如果两个插件或预设都要处理同一个代码片段，那么会根据插件和预设的顺序来执行。规则如下: 1）插件比预设先执行。 2）插件执行顺序是插件数组元素从前向后依次执行。 3）预设执行顺序是预设数组元素从后向前依次执行。 预设的选择babel-preset-latest，在Babel 6时期，是所有年代preset的集合，在Babel 6最后一个版本中，它是babel-preset-es2015、babel-preset-es2016、babel-preset-es2017的集合。 @babel/preset-env包含了babel-preset-latest的功能，并对其进行了增强，现在@babel/preset-env完全可以替代babel-preset-latest。 Babel 6 中是babel-preset-env，Babel 7版本开始，@babel/preset-env。 123456789101112131415// babel 6npm install babel-preset-env --save-dev// .babelrc&#123; &quot;presets&quot;: [&quot;env&quot;]&#125;// babel 7npm install @babel/preset-env --save-dev// .babelrc&#123; &quot;presets&quot;: [&quot;@babel/env&quot;]&#125; 总结起来，Babel官方提供的预设，我们实际会用到的其实就只有四个。 1）@babel/preset-env. 2）@babel/preset-flow. 3）@babel/preset-react. 4）@babel/preset-typescript. 插件的选择Babel 7 官方有九十多个插件，不过其中大多数都已经整合在@babel/preset-env和@babel/preset-react等预设里了，我们在开发的时候直接使用预设就可以。 目前比较常用的插件只有@babel/plugin-transform-runtime。 browserslist在 package.json 中经常遇到这个配置项： 12345678// package.json&#123; &quot;browserslist&quot;: [ &quot;&gt; 1%&quot;, &quot;not ie &lt;= 8&quot; ]&#125; 上面配置的含义是，该项目工程的目标环境是市场份额大于1%的浏览器并且不考虑IE 8及以下的IE浏览器。 browserslist叫作目标环境配置表，除了写在package.json文件里，也可以单独写在工程目录下的.browserslistrc文件里。 我们写一个含有箭头函数的 js 文件，如果我们在browserslist里指定目标环境是Chrome 60浏览器，再来看一下转换结果: 1234// package.json&#123; &quot;browserslist&quot;: [&quot;chrome 60&quot;]&#125; 我们发现转换后的代码仍然是箭头函数，因为Chrome 60浏览器已经实现了箭头函数语法，所以不会转换成ES5的函数定义语法。 @babel/runtime我们写个 js 文件，里面包含 es6 的 class 语法: 12345class Person &#123; sayName() &#123; alert(this.name) &#125;&#125; 然后执行 babel 命令，查看转换后的结果 npx babel babel.js -o compiled.js 1234567891011121314151617181920&quot;use strict&quot;;var _createClass = function () &#123; function defineProperties(target, props) &#123; for (var i = 0; i &lt; props.length; i++) &#123; var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (&quot;value&quot; in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); &#125; &#125; return function (Constructor, protoProps, staticProps) &#123; if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; &#125;; &#125;();function _classCallCheck(instance, Constructor) &#123; if (!(instance instanceof Constructor)) &#123; throw new TypeError(&quot;Cannot call a class as a function&quot;); &#125; &#125;var Person = function () &#123; function Person() &#123; _classCallCheck(this, Person); &#125; _createClass(Person, [&#123; key: &quot;sayName&quot;, value: function sayName() &#123; alert(this.name); &#125; &#125;]); return Person;&#125;(); 可以看到，转换后的代码上部增加了好几个函数声明，这些函数是Babel转码时注入的，我们称之为辅助函数。@babel/preset-env在做语法转换的时候，注入了这些函数声明，以便语法转换后使用。 但这样做存在一个问题。在我们正常地进行前端工程开发的时候，少则有几十个JS文件，多则有上千个。如果每个文件里都使用了class类语法，那么会导致每个转换后的代码上部都会注入这些相同的函数声明。这会导致我们用构建工具打包出来的包体积非常大。 那么应该怎么办呢？一个思路就是，我们把这些函数声明都放在一个npm包里，需要使用的时候直接从这个包里引入我们的文件。这样即使有上千个文件，也会从相同的包里引入这些函数。使用Webpack这一类的构建工具进行打包时，我们只需要引入一次npm包里的函数，这样就做到了复用，减小了包的体积。 @babel/runtime 就是上面说的这个npm包，@babel/runtime把所有语法转换会用到的辅助函数都集中在了一起。 12345// babbel 6npm install babel-runtime --save-dev // /node_modules/babel-runtime/helpers/createClass.js// babel 7npm install @babel/runtime@7.12.5 --save-dev 然后到node_modules目录下看一下这个包的结构，找到 _classCallCheck、_defineProperties与_createClass这三个辅助函数的位置，我们直接引入即可。 这时，我们就可以替换转换后自动创建的方法，而是使用 @babel/runtime/helpers 中已有的方法。 不过，这么多辅助函数要一个个记住并手动引入，是很难做到的。这时Babel插件 @babel/plugin-transform-runtime 就可以用来帮我们解决这个问题。 @babel/plugin-transform-runtime辅助函数的自动引入。 @babel/plugin-transform-runtime有三大作用，其中之一就是自动移除语法转换后内联的辅助函数（inline Babel helpers），而是使用@babel/runtime/helpers里的辅助函数来替代，这样就减少了我们手动引入的麻烦。 12345// babel6npm install babel-plugin-transform-runtime --save-dev// babel 7npm install @babel/plugin-transform-runtime@7.12.10 --save-dev 123&#123; &quot;plugins&quot;: [&quot;@babel/plugin-transform-runtime&quot;] // babel 6: &quot;babel-plugin-transform-runtime&quot;&#125; 还是上面的例子，我们再看看转换后的结果，会发现插件已经自动帮我们处理了。 12345678910111213141516171819202122232425&quot;use strict&quot;;var _classCallCheck2 = require(&quot;babel-runtime/helpers/classCallCheck&quot;);var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);var _createClass2 = require(&quot;babel-runtime/helpers/createClass&quot;);var _createClass3 = _interopRequireDefault(_createClass2);function _interopRequireDefault(obj) &#123; return obj &amp;&amp; obj.__esModule ? obj : &#123; default: obj &#125;; &#125;var Person = function () &#123; function Person() &#123; (0, _classCallCheck3.default)(this, Person); &#125; (0, _createClass3.default)(Person, [&#123; key: &quot;sayName&quot;, value: function sayName() &#123; alert(this.name); &#125; &#125;]); return Person;&#125;(); 实际进行前端开发时，我们除了安装@babel/runtime包，基本也会安装@babel/plugin-transform-runtime这个Babel插件。 Babel 原理与插件开发Babel的转码过程主要由三个阶段组成：解析（parse）、转换（transform）和生成（generate）。这三个阶段分别由@babel/parser、@babel/core和@babel/generator来完成。 解析阶段 该阶段由Babel读取源码并生成抽象语法树（AST），该阶段由两部分组成：词法分析与语法分析。 词法分析会将字符串形式的代码转换成tokens流，语法分析会将tokens流转换成AST。 1const name = &quot;hello AlexCc&quot; AST 1234567891011121314-#1 type: VariableDeclaration declarations #1 type: VariableDeclarator id type: Identifier name: name init type: Literal value: hello AlexCc raw: &quot;hello AlexCc&quot; kind: const 转换阶段 完成了解析工作，生成了AST，AST是一个树状的JSON结构。接下来就可以通过Babel插件对该树状结构执行修改操作，修改完成后就得到了新的AST。 生成阶段 通过转换阶段的工作，我们得到了新的AST。在生成阶段，我们对AST的树状JSON结构进行还原操作，生成新的JS代码，通常这就是我们需要的ES5代码。 Babel 插件开发 babel-handbook https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md 开发Babel转码插件的重点是在第二阶段（转换阶段），在这一阶段我们要从AST上找出需要转换的节点，改成我们需要的形式，最后在生成阶段把AST变回JS代码。 插件模板结构: 123456module.exports = function(&#123; types: t &#125;) &#123; return &#123; name: &#x27;pluginName&#x27;, visitor: &#123;&#125; &#125;&#125; 假设我们有这样一段代码： 1const dog = &#x27;is dog&#x27; 现在我想将 dog 变成喵咪。 12345678910111213module.exports = function(&#123; types: t &#125;) &#123; return &#123; visitor: &#123; Identifier(path, state) &#123; if (path.node.name === &#x27;dog&#x27;) &#123; path.node.name = &#x27;cat&#x27; path.parent.init.value = &#x27;is cat&#x27; &#125; &#125;, var &#125; &#125;&#125; 转换后： 1const cat = &#x27;is cat&#x27;; 我们编写Babel插件的主要工作就是修改visitor对象，该对象是遍历AST各个节点的方法。 在上面的插件里，要把变量名dog修改为cat，于是我们修改了visitor.Identifier方法，那我们如何知道要修改的是Identifier方法呢？ Babel原理里讲过Babel转码的三个阶段：解析阶段、转换阶段和生成阶段，我们编写的Babel插件实际上是在执行第二个阶段（转换阶段）的工作，该工作需要前一个阶段解析工作先完成。在解析阶段，我们得到了转码前代码的AST树状结构信息，该AST上会有Identifier等节点信息，我们编写插件的时候参考该AST的信息即可。 接着看Identifier方法，可以看到它有两个参数path和state，visitor中的每个方法都接收这两个参数，path代表路径。最后我们判断path上节点信息name是不是dog，是的话把它修改为cat即可。 同理，我们也可以修改 const、value： 12345678910111213141516171819module.exports = function(&#123; types: t &#125;) &#123; return &#123; visitor: &#123; Identifier(path, state) &#123; path.node.name = &#x27;cat&#x27; path.parent.init.value = &#x27;is cat&#x27; &#125;, VariableDeclaration(path, state) &#123; if (path.node.kind === &#x27;const&#x27;) &#123; path.node.kind = &#x27;let&#x27; &#125; &#125;, Literal(path, state) &#123; // 修改 value path.node.value = &#x27;is caaat...&#x27; &#125; &#125; &#125;&#125; 插件传参给插件传递参数，注意第一个成员变成了数组，数组的第二项是参数 123456// .babelrc&#123; &quot;plugins&quot;: [[&quot;./plugin.js&quot;, &#123; &quot;ES5&quot;: false &#125;]]&#125; 在插件中，我们可以通过 state.opts 获取到参数： 123456789// plugin.js...VariableDeclaration(path, state) &#123; if (state.opts.ES5 === true &amp;&amp; [&#x27;let&#x27;, &#x27;const&#x27;].includes(path.node.kind)) &#123; path.node.kind = &#x27;var&#x27; &#125;&#125;,...","categories":[],"tags":[{"name":"ESM、babel","slug":"ESM、babel","permalink":"http://yoursite.com/tags/ESM%E3%80%81babel/"}]},{"title":"深入浅出TypeScript","slug":"深入浅出TypeScript","date":"2022-09-09T02:35:36.000Z","updated":"2024-06-11T08:52:17.360Z","comments":true,"path":"/post/深入浅出TypeScript.html","link":"","permalink":"http://yoursite.com/post/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BATypeScript.html","excerpt":"TypeScript","text":"TypeScript.d.ts 和 declare 是干嘛用的如果一个文件有扩展名 .d.ts，则表示它是一个声明文件，可以用来声明全局的类型定义和接口，或者是其它模块。比如： 1234567891011121314151617181920// global.d.ts// 声明接口declare interface Person &#123; name: string; age: number;&#125;// 声明类型 (别名)declare type TName = string;// 声明模块declare module &#x27;*.css&#x27;;declare module &#x27;*.less&#x27;;declare module &#x27;*.png&#x27;;// 拓展 window 属性，在 window 对象上显式设置属性declare interface Window &#123; MyNameSpace: any&#125; 但是也不是说创建了.d.ts文件，里面声明的东西就能生效了，毕竟归根到底也是.ts文件，需要预编译，所以需要在tsconfig.json文件里面的include数组里面添加 global.d.ts 文件。 1&quot;include&quot;: [&quot;src/**/*.ts&quot;, &quot;src/**/*.d.ts&quot;, &quot;src/**/*.tsx&quot;, &quot;src/**/*.vue&quot;] .d.ts 文件中的顶级声明必须以 “declare” 或 “export” 修饰符开头。通过declare声明的类型或者变量或者模块，在include包含的文件范围内，都可以直接引用。 12345// .vue setup / .tsconst me: Person = &#123; name: &#x27;alex.cheng&#x27;, age: 18&#125; 注意.d.ts文件顶级声明declare最好不要跟export同级使用，不然在其他ts文件引用这个.d.ts的内容的时候，就需要手动import导入了。 12345678// global.d.tsexport type TName = string;// 这个时候，外部 ts 就无法直接使用 Person 了，需要引入 import &#123; Person &#125; from &#x27;../global.d.ts&#x27;export declare interface Person &#123; name: string; age: number;&#125; 给对象分配动态（未知）属性1234567891011121314const o: &#123; [key: string]: any &#125; = &#123;&#125;// 使用 ts 内置工具 Record，效果同上const o: Record&lt;string, any&gt; = &#123;&#125;interface IPerson extends Record&lt;string, any&gt; &#123; name: string; age?: number;&#125;const me1: IPerson = &#123; name: &#x27;alex&#x27;, hair: &#x27;black&#x27;&#125; interface 和 type 有什么区别 接口和类型别名都可以用来描述对象的形状或函数签名。 与接口类型不一样的是，类型别名可以用于一些其他类型，比如原始类型、联合类型（|）和元组。 接口和类型别名都能够被扩展，但语法有所不同。此外，接口和类型别名不是互斥的。接口可以扩展类型别名，而反过来是不行的。 interface 扩展（接口、类型）使用 extends 关键字，类型别名扩展（接口、类型）使用的是 交叉类型（&amp;）: 123456789101112131415// 接口扩展interface IPerson &#123; name: string;&#125;interface IMe extends IPerson &#123; age: number;&#125;// 类型扩展type TPerson = &#123; name: string;&#125;type TMe = TPerson &amp; &#123; age: number;&#125; 类可以以相同的方式实现(implements)接口或类型别名，但类不能实现使用类型别名定义的联合类型 12345678910111213// Error:type PartialPoint = &#123; x: number; &#125; | &#123; y: number; &#125;;class SomePartialPoint implements PartialPoint &#123; // 类只能实现具有静态已知成员的对象类型或对象类型的交集。ts(2422) x = 1; y = 2;&#125;// Successtype PartialPoint = &#123; x: number; &#125; &amp; &#123; y: number; &#125;;class SomePartialPoint implements PartialPoint &#123; x = 1; y = 2;&#125; 与类型别名不同，接口可以定义多次，会被自动合并为单个接口。 123456789101112interface IMerge &#123; a: 1;&#125;interface IMerge &#123; b: 2&#125;const ab: IMerge = &#123;&#125;; // 类型“&#123;&#125;”缺少类型“IMerge”中的以下属性: a, bts(2739)// Error: 标识符“TOne”重复。ts(2300)type TOne = string;type TOne = number; 类型保护 typeof instanceof in 参考资料TS 学习指南 ↩深入理解TypeScript ↩","categories":[],"tags":[{"name":"TypeScript TS","slug":"TypeScript-TS","permalink":"http://yoursite.com/tags/TypeScript-TS/"}]},{"title":"React Native","slug":"app-h5","date":"2022-06-09T06:26:40.000Z","updated":"2024-06-11T08:52:17.163Z","comments":true,"path":"/post/app-h5.html","link":"","permalink":"http://yoursite.com/post/app-h5.html","excerpt":"React Native 、H5移动端开发实践","text":"react nativeReact Native 是一个使用React和应用平台的原生功能来构建 Android 和 iOS 应用的开源框架。通过 React Native，您可以使用 JavaScript 来访问移动平台的 API，以及使用 React 组件来描述 UI 的外观和行为：一系列可重用、可嵌套的代码。你可以在下一节了解更多关于 React 的信息。但首先，让我们介绍一下组件在 React Native 中是如何工作的。 react-native-cli方便在命令行执行一些命令 npm install -g react-native-cli react-native run-ios 初始化项目 react-native init project-name npx 1231. npx react-native@latest init AwesomeProject2. npx react-native@X.XX.X init AwesomeProject --version X.XX.X cd AwesomeProject 12345yarn ios// oryarn react-native run-ios Andriod studio启动 andriod Xcode启动 ios 调试 APPCommand + D 打开调试模式，如果无效，也可以通过 Device + Shake 弹出，需要开启的功能如下： remote js debugge enable hot reloading 也可以安装 react native debugger.app 来调试 处理 ios 和 android 兼容性特定平台后缀方式一，创建指定平台的 入口文件 123index.ios.jsindex.android.js 某个组件 12BigButton.ios.jsBigButton.android.js 去掉平台后缀直接引用，React Native 会根据运行平台的不同自动引入正确对应的组件。 1import BigButton from &#x27;./BigButton&#x27;; Platform适用于细粒度控制兼容性 Platform .OS在 iOS 上会返回ios，而在 Android 设备或模拟器上则会返回android。 123import &#123; Platform &#125; from &#x27;react-native&#x27;;Platform.OS === &#x27;ios&#x27; ? ... 还有个实用的方法是 Platform.select()，它可以以 Platform.OS 为 key，从传入的对象中返回对应平台的值 123456789101112131415import &#123;Platform, StyleSheet&#125; from &#x27;react-native&#x27;;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, ...Platform.select(&#123; ios: &#123; backgroundColor: &#x27;red&#x27;, &#125;, android: &#123; backgroundColor: &#x27;blue&#x27;, &#125;, &#125;), &#125;,&#125;); 这一方法可以接受任何合法类型的参数，因此你也可以直接用它针对不同平台返回不同的组件，像下面这样： 1234567// 返回特定平台的 组件const Component = Platform.select(&#123; ios: () =&gt; require(&#x27;ComponentIOS&#x27;), android: () =&gt; require(&#x27;ComponentAndroid&#x27;),&#125;)();&lt;Component /&gt;; WebView https://github.com/UnPourTous/react-native-0.51.0/blob/master/Libraries/Components/WebView/WebView.ios.js#L559 现在 Android App大多嵌入了 Android Webview 组件进行 Hybrid 开发，它具备开发周期短、灵活性好的优点，但是缺点也很明显，加载速度慢 &amp; 消耗流量。引起缺点的主要原因如下： js解析效率，以及手机硬件设备的性能 页面资源的下载（图片、js文件、css文件） 安装 react-native-webviewnpm install --save react-native-webview https://github.com/react-native-webview/react-native-webview/blob/master/docs/Getting-Started.md Hybrid技术原理Hybrid App的本质，其实是在原生的 App 中，使用 WebView 作为容器直接承载 Web页面。因此，最核心的点就是 Native端 与 H5端 之间的双向通讯层，其实这里也可以理解为我们需要一套跨语言通讯方案，来完成 Native(Java/Objective-c/…) 与 JavaScript 的通讯。这个方案就是我们所说的 JSBridge(JS桥接)，而实现的关键，便是作为容器的 WebView，一切的原理都是基于 WebView 的机制。 优势 快速更新 一般来说， App 一个功能的上线需要经过漫长流程，版本的发布存在铺量的问题；而 WebView 加载远端页面的方式，远端页面一经发布，立即全量。所以，页面需要频繁更新时可以考虑 WebView 实现。 缩小 App 安装包大小 H5 页面是远端资源，能有效减少 App 安装包的大小。 页面复用 一次开发，多处运行。新开发的 H5 页面可以在 RN App WebView、微信/QQ的内置浏览器、微信小程序 WebView 等 WebView 组件上运行。页面在 iOS/Android 上都能获得不错表现。 原生组件在 Android 开发中是使用 Kotlin 或 Java 来编写视图； 在 iOS 开发中是使用 Swift 或 Objective-C 来编写视图。 在 React Native 中，则使用 React 组件通过 JavaScript 来调用这些视图。在运行时，React Native 为这些组件创建相应的 Android 和 iOS 视图。 由于 React Native 组件就是对原生视图的封装，因此使用 React Native 编写的应用外观、感觉和性能与其他任何原生应用一样。我们将这些平台支持的组件称为原生组件。 核心组件React Native 具有许多核心组件，从表单控件到活动指示器，应有尽有。 长列表React Native 提供了几个适用于展示长列表数据的组件，一般而言我们会选用FlatList或是SectionList。 FlatList更适于长列表数据，且元素个数可以增删。和ScrollView不同的是，FlatList并不立即渲染所有元素，而是优先渲染屏幕上可见的元素。 FlatList组件必须的两个属性是data和renderItem。data是列表的数据源，而renderItem则从数据源中逐个解析数据，然后返回一个设定好格式的组件来渲染。 123456789101112131415161718192021222324252627282930313233343536import React from &#x27;react&#x27;;import &#123; FlatList, StyleSheet, Text, View &#125; from &#x27;react-native&#x27;;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, paddingTop: 22 &#125;, item: &#123; padding: 10, fontSize: 18, height: 44, &#125;,&#125;);const FlatListBasics = () =&gt; &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;FlatList data=&#123;[ &#123;key: &#x27;Devin&#x27;&#125;, &#123;key: &#x27;Dan&#x27;&#125;, &#123;key: &#x27;Dominic&#x27;&#125;, &#123;key: &#x27;Jackson&#x27;&#125;, &#123;key: &#x27;James&#x27;&#125;, &#123;key: &#x27;Joel&#x27;&#125;, &#123;key: &#x27;John&#x27;&#125;, &#123;key: &#x27;Jillian&#x27;&#125;, &#123;key: &#x27;Jimmy&#x27;&#125;, &#123;key: &#x27;Julie&#x27;&#125;, ]&#125; renderItem=&#123;(&#123;item&#125;) =&gt; &lt;Text style=&#123;styles.item&#125;&gt;&#123;item.key&#125;&lt;/Text&gt;&#125; /&gt; &lt;/View&gt; );&#125; awesome-react-nativehttps://github.com/jondot/awesome-react-native 使用 Expo 创建项目 Expo官网： https://docs.expo.dev/tutorial/create-your-first-app/ 12345npx create-expo-app StickerSmash &amp;&amp; cd StickerSmashyarn installnpx expo install react-dom react-native-web @expo/webpack-config 启动项目123456&quot;scripts&quot;: &#123; &quot;start&quot;: &quot;expo start&quot;, &quot;android&quot;: &quot;expo start --android&quot;, &quot;ios&quot;: &quot;expo start --ios&quot;, &quot;web&quot;: &quot;expo start --web&quot;&#125;, 手机安装 Expo Go，实时预览效果启动项目后，控制台会有个二维码，手机使用相机扫码即可打开 Expo Go App，我们修改的代码，也会实时在手机端更新。 TextnumberOfLines 表示文本需要显示几行，超出的用 省略号表示 onLongPress 长按触发事件 onPress 点击触发事件 1234567891011121314151617181920import &#123; StatusBar &#125; from &#x27;expo-status-bar&#x27;;import &#123; StyleSheet, Text, View &#125; from &#x27;react-native&#x27;;export default function App() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;Text numberOfLines=&#123;1&#125; onLongPress=&#123;() =&gt; alert(1)&#125;&gt;First AppFirst AppFirst AppFirst AppFirst AppFirst AppFirst AppFirst AppFirst AppFirst AppFirst App&lt;/Text&gt; &lt;StatusBar style=&quot;auto&quot; /&gt; &lt;/View&gt; );&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, backgroundColor: &#x27;#fff&#x27;, alignItems: &#x27;center&#x27;, justifyContent: &#x27;center&#x27;, &#125;,&#125;); 如果要渲染的是一组需要分组的数据，也许还带有分组标签的，那么SectionList将是个不错的选择 StatusBar https://docs.expo.dev/versions/latest/sdk/status-bar/ 可以控制 StatusBar 显示隐藏、动画之类的 ActivityIndicator(loading效果)&lt;ActivityIndicator color=&#123;&#39;red&#39;&#125; /&gt; Image Image API 使用图片的三种方式 引用网络图片 通过 import / require 导入本地图片 使用 base64 格式的图片 安装 npx expo install expo-image contentFit 替代了原来的 resizeMode contentFit 确定图像应如何调整大小以适合其容器。这个属性告诉图像以多种方式填充容器，例如“保持纵横比”或“拉伸并尽可能地占用空间”。它反映了 CSS 对象匹配属性。 123456789101112131415161718192021222324252627282930313233import &#123; Image &#125; from &#x27;expo-image&#x27;;import &#123; StyleSheet, View &#125; from &#x27;react-native&#x27;;const blurhash = &#x27;|rF?hV%2WCj[ayj[a|j[az_NaeWBj@ayfRayfQfQM&#123;M|azj[azf6fQfQfQIpWXofj[ayj[j[fQayWCoeoeaya&#125;j[ayfQa&#123;oLj?j[WVj[ayayj[fQoff7azayj[ayj[j[ayofayayayj[fQj[ayayj[ayfjj[j[ayjuayj[&#x27;;export default function App() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;Image style=&#123;styles.image&#125; source=&quot;https://picsum.photos/seed/696/3000/2000&quot; placeholder=&#123;blurhash&#125; contentFit=&quot;cover&quot; transition=&#123;1000&#125; /&gt; &lt;/View&gt; );&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, backgroundColor: &#x27;#fff&#x27;, alignItems: &#x27;center&#x27;, justifyContent: &#x27;center&#x27;, &#125;, image: &#123; flex: 1, width: &#x27;100%&#x27;, backgroundColor: &#x27;#0553&#x27;, &#125;,&#125;); 支持图片加载过程中的几种方法 onLoad onLoadStart onLoadEnd onError ImageBackground背景图的使用 1234567891011121314151617181920212223242526272829import &#123; View, Text, StyleSheet, ImageBackground &#125; from &#x27;react-native&#x27;import &#123; Image &#125; from &#x27;expo-image&#x27;const ImageDemo = () =&gt; &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;ImageBackground style=&#123;styles.image&#125; source=&#123;require(&#x27;../../assets/chrome.jpg&#x27;)&#125; &gt; &lt;Text&gt;Hello ImageBackground&lt;/Text&gt; &lt;/ImageBackground&gt; &lt;/View&gt; )&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, backgroundColor: &#x27;#fff&#x27;, &#125;, image: &#123; flex: 1, width: &#x27;100%&#x27;, backgroundColor: &#x27;#0553&#x27;, &#125;,&#125;)export default ImageDemo ScrollView https://www.reactnative.cn/docs/scrollview 一个封装了平台的 ScrollView（滚动视图）的组件，同时还集成了触摸锁定的“响应者”系统。 记住 ScrollView 必须有一个确定的高度才能正常工作，因为它实际上所做的就是将一系列不确定高度的子组件装进一个确定高度的容器（通过滚动操作）。 一般来说我们会给 ScrollView 设置flex: 1以使其自动填充父容器的空余空间，但前提条件是所有的父容器本身也设置了 flex 或者指定了高度，否则就会导致无法正常滚动，你可以使用元素查看器来查找具体哪一层高度不正确。 ScrollView和FlatList应该如何选择？ScrollView 会简单粗暴地把所有子元素一次性全部渲染出来。其原理浅显易懂，使用上自然也最简单。然而这样简单的渲染逻辑自然带来了性能上的不足。想象一下你有一个特别长的列表需要显示，可能有好几屏的高度。创建和渲染那些屏幕以外的 JS 组件和原生视图，显然对于渲染性能和内存占用都是一种极大的拖累和浪费。 这就是为什么我们还有专门的FlatList组件。FlatList会惰性渲染子元素，只在它们将要出现在屏幕中时开始渲染。这种惰性渲染逻辑要复杂很多，因而 API 在使用上也更为繁琐。除非你要渲染的数据特别少，否则你都应该尽量使用FlatList，哪怕它们用起来更麻烦。 此外FlatList还可以方便地渲染行间分隔线，支持多列布局，无限滚动加载等等。 scrollEventThrottle(节流)这个属性控制在滚动过程中，scroll 事件被调用的频率（单位是 ms，事件触发的间隔时间）。更小的间隔时间能够更及时的跟踪滚动位置，不过可能会带来性能问题，因为更多的信息会通过 bridge 传递。由于 JS 事件循环需要和屏幕刷新率同步，因此设置为 1-16 之间的数值不太可能有实质区别（一般屏幕刷新率为 60 帧，即每帧间隔不低于 16 ms）。默认值为 0，意味着每次视图被滚动，scroll 事件都会被调用。 123456789101112131415161718&lt;ScrollView style=&#123;styles.container&#125; horizontal=&#123;false&#125; // 控制垂直方向滚动、true 表示水平风向滚动 onScroll=&#123;() =&gt; &#123; console.log(&#x27;ScrollView scroll ...&#x27;) &#125;&#125; scrollEventThrottle=&#123;1000&#125;&gt; &#123; new Array(10).fill(&#x27;&#x27;).map((item, idx) =&gt; &#123; return ( &lt;View style=&#123;styles.box&#125;&gt; &lt;Text style=&#123;styles.text&#125;&gt; &#123;idx&#125; &lt;/Text&gt; &lt;/View&gt; ) &#125;) &#125;&lt;/ScrollView&gt; 解决键盘遮挡问题关键组件: KeyboardAvoidingView 本组件用于解决一个常见的尴尬问题：手机上弹出的键盘常常会挡住当前的视图。本组件可以自动根据键盘的高度，调整自身的 height 或底部的 padding，以避免被遮挡。 关键属性: behavior，可选值为 &#39;height&#39;, &#39;position&#39;, &#39;padding&#39; 关键代码 123456import &#123; KeyboardAvoidingView, Platform &#125; from &#x27;react-native&#x27;&lt;KeyboardAvoidingView style=&#123;&#123; flex: 1 &#125;&#125; behavior=&#123;Platform.OS == &quot;ios&quot; ? &quot;padding&quot; : &quot;height&quot;&#125;/&gt; 整体代码如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657import React, &#123; useState &#125; from &#x27;react&#x27;import &#123; Text, StyleSheet, View, TextInput, Switch, Button, KeyboardAvoidingView, Platform&#125; from &#x27;react-native&#x27;import &#123; Image &#125; from &#x27;expo-image&#x27;const index = () =&gt; &#123; const [isEnabled, setIsEnabled] = useState(false); const toggleSwitch = () =&gt; setIsEnabled(previousState =&gt; !previousState); return ( &lt;KeyboardAvoidingView style=&#123;styles.container&#125; behavior=&#123;Platform.OS == &quot;ios&quot; ? &quot;padding&quot; : &quot;height&quot;&#125; &gt; &lt;Image style=&#123;&#123; width: 200, height: 200, alignSelf: &#x27;center&#x27;&#125;&#125; source=&#123;require(&#x27;../../assets/avatar.jpg&#x27;)&#125; /&gt; &lt;TextInput style=&#123;styles.inputStyle&#125; placeholder=&#x27;请输入账号&#x27; /&gt; &lt;TextInput style=&#123;styles.inputStyle&#125; placeholder=&#x27;请输入密码&#x27; /&gt; &lt;Switch title=&#x27;记住密码&#x27; trackColor=&#123;&#123; false: &quot;#767577&quot;, true: &quot;#81b0ff&quot; &#125;&#125; // 卡槽颜色 thumbColor=&#123;isEnabled ? &quot;#f5dd4b&quot; : &quot;#f4f3f4&quot;&#125; // 开关上圆形按钮的背景颜色 onValueChange=&#123;toggleSwitch&#125; value=&#123;isEnabled&#125; /&gt; &lt;Button title=&#x27;登录&#x27; color=&quot;#f194ff&quot;&gt;&lt;/Button&gt; &lt;/KeyboardAvoidingView&gt; )&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, backgroundColor: &#x27;#ccc&#x27;, alignItems: &#x27;center&#x27;, justifyContent: &#x27;center&#x27; &#125;, inputStyle: &#123; height: 40, width: &#x27;100%&#x27;, backgroundColor: &#x27;#fff&#x27;, marginTop: 12 &#125;&#125;)export default index 效果如下 webview webview 官方文档 React Native WebView API Reference 安装npx expo install react-native-webview 使用注意，包裹 WebView 组件的容器，必须使用 flex: 1 12345678910111213141516171819import &#123; StyleSheet, SafeAreaView &#125; from &#x27;react-native&#x27;;import &#123; WebView &#125; from &#x27;react-native-webview&#x27;export default function App() &#123; return ( &lt;SafeAreaView style=&#123;styles.container&#125;&gt; &lt;WebView source=&#123;&#123; uri: &#x27;https://m.baidu.com&#x27; &#125;&#125; /&gt; &lt;/SafeAreaView&gt; );&#125;const styles = StyleSheet.create(&#123; container: &#123; backgroundColor: &#x27;pink&#x27;, flex: 1 &#125;&#125;); 显示 HTML注意：设置 html 源需要原始 WhiteList 属性设置为[’*’]。 1234&lt;WebView source=&#123;&#123; originWhitelist=&#123;[&#x27;*&#x27;]&#125; html: &#x27;&lt;h1&gt;&lt;center&gt;Hello webview&lt;/center&gt;&lt;/h1&gt;&#x27;&#125;&#125; /&gt; 加载本地 HTML 文件 1234567891011121314import React, &#123;Component&#125; from &#x27;react&#x27;;import &#123;View, Text, Alert, TextInput, Button&#125; from &#x27;react-native&#x27;;import &#123; WebView &#125; from &#x27;react-native-webview&#x27;;const localHtmlFile = require(&#x27;../assets/test.html&#x27;);export default class LocalPageLoad extends Component&lt;Props, State&gt; &#123; render() &#123; return ( &lt;View style=&#123;&#123; width: &#x27;100%&#x27;, height: &#x27;100%&#x27; &#125;&#125;&gt; &lt;WebView source=&#123;localHtmlFile&#125;/&gt; &lt;/View&gt; ); &#125; &#125; 获取 webview 实例class 组件 1234567891011class MyWeb extends Component &#123; webview = null; render() &#123; return ( &lt;WebView ref=&#123;(ref) =&gt; (this.webview = ref)&#125; /&gt; ); &#125;&#125; 函数组件 123456789101112131415import &#123;createRef&#125; from &#x27;react&#x27;import &#123; WebView &#125; from &#x27;react-native-webview&#x27;const WebViewDemo = () =&gt; &#123; const webviewRef = createRef() // webviewRef.current.stopLoading 阻止加载 return ( &lt;WebView ref=&#123;webviewRef&#125; /&gt; )&#125;export default WebViewDemo useRef 123456789const webViewRef = useRef(null);if (webViewRef.current) &#123; webViewRef.current.goBack();&#125;&lt;WebView ref=&#123;webViewRef&#125;/&gt; 接入 H5 调试工具 vConsole1&lt;script src=&quot;https://cdn.bootcss.com/vConsole/3.3.0/vconsole.min.js&quot;&gt;&lt;/script&gt; 123&lt;script&gt; const vConsole = new VConsole()&lt;/script&gt; 控制导航状态的更改有时候你想拦截一个用户在你的 webview 中点击一个链接，然后做一些不同于在 webview 中导航的事情。我们可以使用 onNavigationStateChange 方法监听。 12345678910111213141516171819202122232425const WebViewDemo = () =&gt; &#123; const webviewRef = createRef() const onNavigationStateChange = newNavState =&gt; &#123; const &#123; url &#125; = newNavState // 我们可以判断 newNavState.url 中的参数，来决定 webview 的行为 // 比如，webview 中有一个 PDF 连接，点击之后，我们应该显示 PDF if (url.includes(&#x27;.pdf&#x27;)) &#123; this.webview.stopLoading(); // open a modal with the PDF viewer Alert.alert(&#x27;打开 PDF modal&#x27;) &#125; Alert.alert(&#x27;执行其他逻辑!&#x27;) &#125; return ( &lt;WebView ref=&#123;webviewRef&#125; source=&#123;&#123; uri: &#x27;https://reactnative.dev/&#x27; &#125;&#125; onNavigationStateChange=&#123;onNavigationStateChange&#125; /&gt; )&#125; JS（HTML）与本机之间的通信我们需要发送消息到网页浏览加载的网页，也可以接收来自这些网页的消息。 为此，React NativeWebView 公开了三个不同的选项 React Native -&gt; Web: The injectedJavaScript prop React Native -&gt; Web: The injectJavaScript method Web -&gt; React Native: The postMessage method and onMessage prop The injectedJavaScript propinjectedJavaScript 字符串是一个脚本，首次加载网页后立即执行脚本的内容。它只运行一次，即使页面被重新加载或导航离开。 下面的代码中，当 webview 加载了 html 页面，首先会将 body 设置为 粉色，同时在 window 对象上挂在一个方法 sayHello。 html 中，我们可以定义一个按钮，点击按钮后，可以调用 window.sayHello。 注意injectedJavaScript 字符串脚本最后，有一个 true，这是必须的，否则有时候你会无声地失败 123456789101112131415161718192021// rn componentconst injectedJavaScript = ` document.body.style.backgroundColor = &#x27;pink&#x27;; window.sayHello = function() &#123; alert(&#x27;我是 RN 通过 injectedJavaScript 注入的方法&#x27;) &#125;; true;`return ( &lt;WebView source=&#123;localH5&#125; injectedJavaScript=&#123;injectedJavaScript&#125; /&gt;)// h5const button = document.querySelector(&#x27;button&#x27;)button.addEventListener(&#x27;click&#x27;, () =&gt; &#123; if (typeof window.sayHello === &#x27;function&#x27;) &#123; window.sayHello() &#125;&#125;) injectedJavaScriptBeforeContentLoaded prop这是在网页首次加载之前运行的脚本。即使页面重新加载或导航离开，它也只运行一次。 如果您想在执行 Web 代码之前将任何内容注入到窗口、本地存储或文档中，这非常有用。 123456789101112const runFirst = ` window.isNativeApp = true; true; // note: 这是必须的，否则有时候你会无声地失败`;&lt;WebView source=&#123;&#123; uri: &#x27;xxx&#x27;, &#125;&#125; injectedJavaScriptBeforeContentLoaded=&#123;runFirst&#125;/&gt; Warning: On Android, this may work, but it is not 100% reliable (see #1609 and #1099). The injectJavaScript method虽然方便，但是前面提到的 injectedJavaScript prop的缺点是它只运行一次。这就是为什么还在 webview 参考文献中公开了一个名为 injectJavaScript 的方法(注意这个名字稍有不同!). 如下例子，当首次加载 localH5.html 时，背景色是 粉色，三秒过后，我们通过 webview本身提供的 injectJavaScript 方法，将 html 的背景色改为了 橙色 12345678910111213141516171819202122232425const WebViewDemo = () =&gt; &#123; const webviewRef = createRef() const injectedJavaScript = ` document.body.style.backgroundColor = &#x27;pink&#x27;; window.sayHello = function() &#123; alert(&#x27;我是 RN 通过 injectedJavaScript 注入的方法&#x27;) &#125;; true ` // 3s 后，localH5.html 的背景色自动改为 `橙色` setTimeout(() =&gt; &#123; webviewRef.current.injectJavaScript(` document.body.style.backgroundColor = &#x27;orange&#x27;; `) &#125;, 3000) return ( &lt;WebView ref=&#123;webviewRef&#125; source=&#123;localH5&#125; injectedJavaScript=&#123;injectedJavaScript&#125; /&gt; )&#125; 在 iOS 上，injectJavaScript 调用 WebView 的 evaluateJS 在 Android 上，injectJavaScript 调用 Android WebView 的 evaluateJavascriptWithFallback 方法 window.ReactNativeWebView.postMessageweb page 可以给 React Native code 发送消息啦! 你必须设置 webview onMessage 属性，否则window.reactativewebview.postmessage方法将不会被注入到网页中。 window.ReactNativeWebView.postMessage only accepts one argument which must be a string. rn 123456&lt;WebView source=&#123;localH5&#125; onMessage=&#123;event =&gt; &#123; console.log(&#x27;🔥&#x27;, event.nativeEvent.data) // 你好 ReactNativeWebview &#125;&#125;/&gt; localH5.html 12345const button = document.querySelector(&#x27;button&#x27;)button.addEventListener(&#x27;click&#x27;, () =&gt; &#123; // 给 RN 发送消息 window.ReactNativeWebView.postMessage(&#x27;你好 ReactNativeWebview&#x27;)&#125;) 处理 H5 的消息类型WebView onMessage 1234567891011121314151617181920212223242526272829303132333435363738onMessage = (event) =&gt; &#123; const data = JSON.parse(event.nativeEvent.data) const &#123; type &#125; = data switch (type) &#123; case &#x27;route&#x27;: // 路由跳转 break case &#x27;emitCallback&#x27;:// h5触发回调 const routeParams = this.props?.navigation?.state?.params routeParams[callbackName] &amp;&amp; routeParams[callbackName](callbackResult) break case &#x27;tel&#x27;: // 拨打电话 break case &#x27;captureCheck&#x27;: // 检查照相机权限 break case &#x27;msg&#x27;: // 发短信 break case &#x27;upload&#x27;: // 上传图片 this.beforeUpload(data) break case &#x27;eventEmit&#x27;:// 事件监听-触发 key &amp;&amp; RCTDeviceEventEmitter.emit(key, params) break case &#x27;console&#x27;: // 控制台输出信息 const [ tag, ...restVal ] = val if (typeof tag === &#x27;string&#x27; &amp;&amp; tag.startsWith(&#x27;console.&#x27;)) &#123; const type = tag.replace(&#x27;console.&#x27;, &#x27;&#x27;) console[type].call?.(this, ...restVal) &#125; else console.log(...val) break &#125;&#125; 自定义 headers, sessions, and cookiesSetting Custom Headers自定义 headers 12345678&lt;WebView source=&#123;&#123; uri: &#x27;http://example.com&#x27;, headers: &#123; &#x27;my-custom-header-key&#x27;: &#x27;my-custom-header-value&#x27;, &#125;, &#125;&#125;/&gt; 这将在第一次加载时设置标头，但不会在后续页面导航中设置标头。 为了解决这个问题，我们可以跟踪当前的 URL，拦截新的页面加载，然后自己导航到它们(这项技术的原创者是来自 Big Binary 的 Chirag Shah) 解决方法 WebView 提供了onLoadStart属性 ，它接受 WebView 开始加载时调用的函数 我们可以使用此 prop 来了解何时单击链接，然后使用新的 url 重新渲染 WebView 组件。重新渲染 WebView 组件将加载该页面，就好像它是第一页一样，然后将传递请求标头。 我们知道，在 React 中，当组件的任何状态发生变化时，组件都会重新渲染自身。这里唯一改变的是 url，所以让我们将 url 移动到一个状态并将其初始化为欢迎页面，该页面是应用程序的根目录。然后使用onLoadStart属性将 url 状态更改为单击的 url。 webview 的 prop onShouldStartLoadWithRequest，允许自定义处理任何 Web 视图请求的函数。从函数返回 true 以继续加载请求，并返回 false 以停止加载。 webview 代码 1234567891011121314151617181920212223242526272829const CustomHeaderWebView = (props) =&gt; &#123; const &#123; uri, onLoadStart, ...restProps &#125; = props; const [currentURI, setURI] = useState(props.source.uri); const newSource = &#123; ...props.source, uri: currentURI &#125;; return ( &lt;WebView &#123;...restProps&#125; source=&#123;newSource&#125; onShouldStartLoadWithRequest=&#123;(request) =&gt; &#123; // If we&#x27;re loading the current URI, allow it to load if (request.url === currentURI) return true; // We&#x27;re loading a new URL -- change state first setURI(request.url); return false; &#125;&#125; /&gt; );&#125;;&lt;CustomHeaderWebView source=&#123;&#123; uri: &#x27;http://example.com&#x27;, headers: &#123; &#x27;my-custom-header-key&#x27;: &#x27;my-custom-header-value&#x27;, &#125;, &#125;&#125;/&gt;; server 代码，服务端通过 request.headers[&quot;my-custom-header-key&quot;] 获取请求头。 1234567891011121314151617181920212223242526272829var http = require(&quot;http&quot;);var port = 9000;function logRequest(request) &#123; console.log(&quot;Processing request for: &quot;, request.url); console.log(&quot;Custom Header: &quot;, request.headers[&quot;my-custom-header-key&quot;]); console.log(&quot;Request Processed\\n&quot;);&#125;http .createServer(function (request, response) &#123; response.writeHead(200, &#123; &quot;Content-Type&quot;: &quot;text/html&quot; &#125;); switch (request.url) &#123; case &quot;/&quot;: response.write( &quot;&lt;html&gt;&lt;body&gt;Welcome&lt;a href=&#x27;/bye&#x27;&gt;Bye&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;&quot; ); logRequest(request); break; case &quot;/bye&quot;: response.write(&quot;&lt;html&gt;&lt;body&gt;Bye&lt;a href=&#x27;/&#x27;&gt;Welcome&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;&quot;); logRequest(request); break; default: break; &#125; response.end(); &#125;) .listen(port); renderError 渲染错误的 WebView 页面renderError 函数返回一个视图以显示是否存在错误。 注意: 渲染错误的容器 view，样式需要设置 height: &#39;100%&#39;，而不是 flex: 1，否则 错误页面显示不全。 12345678910111213141516171819202122232425262728&lt;WebView originWhitelist=&#123;[ &#x27;*&#x27; ]&#125; source=&#123;&#123; uri: &#x27;http://127.0.0.1:1500/components/webview/h5.html&#x27; &#125;&#125; renderError=&#123;() =&gt; &#123; return ( &lt;TouchableOpacity style=&#123;styles.errorPage&#125;&gt; &lt;Text style=&#123;styles.errorContent&#125;&gt;Error Page&lt;/Text&gt; &lt;/TouchableOpacity&gt; ) &#125;&#125;/&gt;const styles = StyleSheet.create(&#123; errorPage: &#123; height: &#x27;100%&#x27;, // 注意 backgroundColor: &#x27;#333&#x27;, alignItems: &#x27;center&#x27;, justifyContent: &#x27;center&#x27; &#125;, errorContent: &#123; textAlign: &#x27;center&#x27;, fontSize: 24, fontWeight: &#x27;bold&#x27;, color: &#x27;#fff&#x27;, &#125;&#125;) 当出现错误到了错误页面之后，我们可以点击错误页面，刷新 webview 123456789&lt;TouchableOpacity style=&#123;styles.errorPage&#125; onPress=&#123;() =&gt; &#123; // Alert.alert(&#x27;错误啦，刷新下试试&#x27;) webviewRef.current?.reload() &#125;&#125;&gt; &lt;Text style=&#123;styles.errorContent&#125;&gt;Error Page&lt;/Text&gt;&lt;/TouchableOpacity&gt; 我们来给错误页面，加个背景图，并且给背景图设置透明度 123456789101112131415161718192021222324renderError=&#123;() =&gt; &#123; return ( &lt;ImageBackground source=&#123;require(&#x27;../../assets/avatar.jpg&#x27;)&#125; style=&#123;styles.errorPage&#125; contentFit=&#x27;fill&#x27; imageStyle=&#123;&#123; opacity: 0.5, // 背景图片设置透明度 &#125;&#125; &gt; &lt;TouchableOpacity onPress=&#123;() =&gt; &#123; webviewRef.current?.reload() // 或者返回 props.navigation.goBack() &#125;&#125; &gt; &lt;Text style=&#123;styles.errorContent&#125;&gt;Error Page...&lt;/Text&gt; &lt;/TouchableOpacity&gt; &lt;/ImageBackground&gt; )&#125;&#125; 效果如下 Expo Router https://docs.expo.dev/routing/introduction/ React Navigation React Navigation 版本 &gt; 4.x 建立两个组件 Home 和 HomeDetails 12345678import &#123; createAppContainer &#125; from &#x27;react-navigation&#x27;import &#123; createStackNavigator &#125; from &#x27;react-navigation-stack&#x27;const AppNavigator = createStackNavigator(&#123; Home: HomeScreen, HomeDetails: HomeDetailsScreen&#125;)export default createAppContainer(AppNavigator) 跳转路由，可以通过组件 props 上的 this.props.navigation.navigate 方法 123456&lt;Button onPress=&#123;() =&gt; &#123; this.props.navigation.navigate(&#x27;HomeDetails&#x27;) &#125;&#125; title=&#x27;Home Details&#x27;/&gt; 完整示例如下： 123456789101112131415161718192021222324252627282930313233343536373839import React, &#123; Component &#125; from &#x27;react&#x27;import &#123; Text, StyleSheet, View, Button &#125; from &#x27;react-native&#x27;import &#123; createAppContainer &#125; from &#x27;react-navigation&#x27;import &#123; createStackNavigator &#125; from &#x27;react-navigation-stack&#x27;class HomeDetailsScreen extends React.Component &#123; render() &#123; return ( &lt;View style=&#123;&#123; flex: 1, alignItems: &#x27;center&#x27;, justifyContent: &#x27;center&#x27; &#125;&#125;&gt; &lt;Text&gt;Details Screen&lt;/Text&gt; &lt;/View&gt; ); &#125;&#125;class HomeScreen extends Component &#123; render() &#123; return ( &lt;View&gt; &lt;Text&gt; HomeScreen &lt;/Text&gt; &lt;Button onPress=&#123;() =&gt; &#123; this.props.navigation.navigate(&#x27;HomeDetails&#x27;) &#125;&#125; title=&#x27;Home Details&#x27; /&gt; &lt;/View&gt; ) &#125;&#125;const AppNavigator = createStackNavigator(&#123; Home: HomeScreen, HomeDetails: HomeDetailsScreen&#125;)const styles = StyleSheet.create(&#123;&#125;)export default createAppContainer(AppNavigator) 回退 123456789101112&lt;Button onPress=&#123;() =&gt; &#123; this.props.navigation.goBack() &#125;&#125; title=&#x27;Go Back&#x27;/&gt;&lt;Button onPress=&#123;() =&gt; &#123; this.props.navigation.navigate(&#x27;Home&#x27;) &#125;&#125; title=&#x27;Go Home&#x27;/&gt; 路由参数navigate and push accept an optional second argument to let you pass parameters to the route you are navigating to. For example: this.props.navigation.navigate(‘RouteName’, {paramName: ‘value’}). 123456789&lt;Button onPress=&#123;() =&gt; &#123; this.props.navigation.navigate(&#x27;HomeDetails&#x27;, &#123; itemId: 86, otherParam: &#x27;anything you want here&#x27;, &#125;) &#125;&#125; title=&#x27;Home Details&#x27;/&gt; 目标页面，获取路由参数 123456// 方式1const &#123; navigation &#125; = this.props;navigation.getParam(&#x27;otherParam&#x27;, &#x27;default value&#x27;) // 获取路由的单个参数// 方式2this.props.navigation.state.params // 获取路由的所有参数，如果未指定任何参数，则为 null。 设置页面的 Header title123456789101112131415class HomeScreen extends React.Component &#123; static navigationOptions = &#123; title: &#x27;Home&#x27;, &#125;; /* render function, etc */&#125;class DetailsScreen extends React.Component &#123; static navigationOptions = &#123; title: &#x27;Details&#x27;, &#125;; /* render function, etc */&#125; navigationOptions 也可以配置成函数，函数的参数是 navigation，等同于组件内的 this.props.navigation 12345static navigationOptions = (&#123; navigation &#125;) =&gt; &#123; return &#123; title: `首页详情 itemId:$&#123;navigation.getParam(&#x27;itemId&#x27;, &#x27;0&#x27;)&#125;`, &#125;&#125; 我们还可以动态的改变路由参数，路由参数变化，会引起组件的重新渲染。 12345678&lt;Button onPress=&#123;() =&gt; &#123; this.props.navigation.setParams(&#123; itemId: 99 &#125;) &#125;&#125; title=&#x27;更新Params&#x27;/&gt; 调整页面 Header 样式12345678910111213static navigationOptions = (&#123; navigation &#125;) =&gt; &#123; return &#123; title: `首页详情 itemId:$&#123;navigation.getParam(&#x27;itemId&#x27;, &#x27;0&#x27;)&#125;`, headerStyle: &#123; backgroundColor: &#x27;pink&#x27; &#125;, headerTintColor: &#x27;#fff&#x27;, // 文字、返回按钮都会应用此颜色 headerTitleStyle: &#123; fontWeight: &#x27;bold&#x27;, fontSize: 20, &#125;, &#125;&#125; 夸屏幕共享公共的 navigationOptions我们不希望每个 Header 的样式都不一样，我们可以配置通用的 Header Style createStackNavigator 第二个参数，可以配置通用的 Header style 12345678910111213141516171819const AppNavigator = createStackNavigator( &#123; Home: HomeScreen, Details: DetailsScreen, &#125;, &#123; initialRouteName: &#x27;Home&#x27;, /* The header config from HomeScreen is now here */ defaultNavigationOptions: &#123; headerStyle: &#123; backgroundColor: &#x27;#f4511e&#x27;, &#125;, headerTintColor: &#x27;#fff&#x27;, headerTitleStyle: &#123; fontWeight: &#x27;bold&#x27;, &#125;, &#125;, &#125;); 自定义 Header Title123456789101112131415161718const HomeTitle = () =&gt; &#123; return ( &lt;Image source=&#123;require(&#x27;../../assets/icon.png&#x27;)&#125; style=&#123;&#123; width: 50, height: 35 &#125;&#125; /&gt; );&#125;class HomeScreen extends React.Component &#123; static navigationOptions = &#123; // headerTitle instead of title // title: () =&gt; &lt;HomeTitle /&gt;, headerTitle: () =&gt; &lt;HomeTitle /&gt;, &#125;; /* render function, etc */&#125; Header Buttons1234567891011121314151617static navigationOptions = &#123; headerTitle: &lt;HomeTitle /&gt;, headerRight: () =&gt; ( &lt;Button onPress=&#123;() =&gt; alert(&#x27;This is a button!&#x27;)&#125; title=&quot;Info&quot; color=&quot;#000&quot; /&gt; ), headerLeft: () =&gt; ( &lt;Button onPress=&#123;() =&gt; alert(&#x27;This is a button!&#x27;)&#125; title=&quot;返回&quot; color=&quot;#000&quot; /&gt; ),&#125; 跳转到 H5 页面我们先定义好 H5 页面（WebView），如果 H5 页面中，不想要看到 Header，可以单独给 H5Demo 配置 navigationOptions，其中 headerShown 就可以控制 Header 的显示隐藏。 想要返回的话，从屏幕左侧向右滑动即可。 1234567891011121314151617181920import WebviewDemo from &#x27;../webview/webview-demo&#x27;const AppNavigator = createStackNavigator(&#123; Home: HomeScreen, // 首页 HomeDetails: HomeDetailsScreen, // 首页详情 H5Demo: &#123; // H5页面 screen: WebviewDemo, navigationOptions: &#123; headerShown: null, // 不显示 header &#125; &#125;&#125;, &#123; initialRouteName: &#x27;Home&#x27;, defaultNavigationOptions: &#123; headerStyle: &#123; backgroundColor: &#x27;#fff&#x27; &#125;, headerTintColor: &#x27;#000&#x27;, &#125;&#125;) H5如何打开 RN 页面？其实就是 H5 和 RN 通信的逻辑，只不过是在 RN 侧做了路由的处理 首先，我们可以在 injectedJavaScript 向 Web 端window对象注入一个全变量 isRN，在 Web 端通过 window.isRN 判断当前 Web 页面是不是通过 RN 内嵌的。 1234567891011121314151617const injectedJavaScript = ` window.isRN = true; document.body.style.backgroundColor = &#x27;pink&#x27;; window.sayHello = function() &#123; alert(&#x27;我是 RN 通过 injectedJavaScript 注入的方法&#x27;) &#125;; true`&lt;WebView source=&#123;localH5&#125; onMessage=&#123;(event) =&gt; &#123; if (event.nativeEvent.data) &#123; const data = JSON.parse(event.nativeEvent.data) console.log(&#x27;&#x27;, data) &#125; &#125;&#125; injectedJavaScript=&#123;injectedJavaScript&#125;/&gt; localH5.html H5这边通过 window.ReactNativeWebView.postMessage 将路由信息发送到 RN 这边，路由信息比如包括 type: route、path: ComponentName、以及可选的参数 如下示例，表示 H5 页面跳转到 RN 的 HomeDetails 页面。 1234567891011121314goBackBtn.addEventListener(&#x27;click&#x27;, () =&gt; &#123; if (window.isRN) &#123; const routeInfo = &#123; type: &#x27;route&#x27;, path: &#x27;HomeDetails&#x27;, params: &#123; itemId: 11, &#125; &#125; // 注意：传递的参数是 string 类型 window.ReactNativeWebView.postMessage(JSON.stringify(routeInfo)) &#125;&#125;) RN 这边，通过 WebView 的 onMessage 函数接收消息，在函数内部通过判断当前参数是不是路由信息，如果是路由信息，则通过 props 上的 navigation 去操控路由跳转。 123456789101112131415&lt;WebView source=&#123;localH5&#125; onMessage=&#123;(event) =&gt; &#123; if (event.nativeEvent.data) &#123; const data = JSON.parse(event.nativeEvent.data) if (data.type === &#x27;route&#x27;) &#123; props.navigation.navigate(data.path, &#123; itemId: data.query.itemId &#125;) &#125; &#125; &#125;&#125; injectedJavaScript=&#123;injectedJavaScript&#125;/&gt; 参考资料Android Webview H5 秒开方案实现 ↩英文 Expo构建App教程 https://github.com/adrianhajdin/project_react_native_jobs/blob/main/README.md ↩Mosh React Native on Expo ↩","categories":[],"tags":[{"name":"NativeApp webApp HybridApp","slug":"NativeApp-webApp-HybridApp","permalink":"http://yoursite.com/tags/NativeApp-webApp-HybridApp/"}]},{"title":"如何编写高标准的 JavaScript 代码","slug":"js-advice","date":"2022-03-31T02:12:23.000Z","updated":"2024-06-11T08:52:17.343Z","comments":true,"path":"/post/js-advice.html","link":"","permalink":"http://yoursite.com/post/js-advice.html","excerpt":"代码量少，运行速度不一定快；代码量多，运行速度也不一定慢。","text":"概述你是否曾经为了提供一个简单的应用解决方案而彻夜地查看源代码？你是否曾经为了理解某个框架而冥思苦想、阅览群书？你是否曾经为了提升0.1s的DOM性能而对多种实现方案进行严格测试和对比？你是否曾经为了避免兼容问题而遍寻高手共同“诊治”？ 跟我一起，专注高质量 JavaScript 代码，少出 Bug🐛，早下班 ! 期望为读者带来如下帮助 📚： ❑ 能写出简单、清晰、高效的代码。 ❑ 能搭建一个稳定、健壮、快捷的应用框架。 ❑ 能回答一个困扰很多人的技术问题。 ❑ 能修复一个应用开发中遇到的大的Bug。 ❑ 能非常熟悉某个开源产品。 ❑ 能提升客户端应用性能。 JavaScript 基础代码量少，运行速度不一定快；代码量多，运行速度也不一定慢。 减少全局变量 多个全局变量都追加在一个名称空间下，将显著降低与其他应用程序产生冲突的概率 123const namespace = &#123;&#125;namespace.name = &#x27;my namespace&#x27; 使用闭包体将信息隐藏，它是另一种有效减少“全局污染”的方法。 1234567const sayName = function() &#123; const name = &#x27;closure&#x27; return function() &#123; alert(name) &#125;&#125;() 作用域控制着变量与参数的可见性及生命周期。 JavaScript支持函数作用域，定义在函数中的参数和变量在函数外部是不可见的，并且在一个函数中的任何位置定义的变量在该函数中的任何地方都可见。它不仅减少了名称冲突，并且提供了自动内存管理。 ES6 模块化编程中每个 js 文件内部定义的变量，外部无法获取。如果外部需要模块内部变量，通过 export 导出。 1234567891011&lt;script&gt; var windowA = &#x27;window a&#x27; console.log(window.windowA) // 输出 &#x27;window a&#x27;&lt;/script&gt;&lt;script type=&quot;module&quot;&gt; var moduleA = &#x27;module a&#x27; console.log(window.moduleA) // 输出 undefined&lt;/script&gt; 谨慎JS数据类型在自动转换数据类型时，JavaScript一般遵循：如果某个类型的值被用于需要其他类型的值的环境中，JavaScript就自动将这个值转换成所需要的类型。 类型转换慎用JavaScript类型自动转换，注意自动转换规则: 如果把非空对象用在逻辑运算环境中，则对象被转换为true。此时的对象包括所有类型的对象，即使是值为false的包装对象也被转换为true。 果把对象用在数值运算环境中，则对象会被自动转换为数字，如果转换失败，则返回值为NaN。 当数组被用在数值运算环境中时，数组将根据包含的元素来决定转换的值。如果数组为空数组，则被转换为数值0。如果数组仅包含一个数字元素，则被转换为该数字的数值。如果数组包含多个元素，或者仅包含一个非数字元素，则返回NaN。 🌰 123456789101112// 对象const obj = &#123;&#125;obj &amp;&amp; 1 &gt;&gt; 1obj + 1 &gt;&gt; &#x27;[object Object]1&#x27;obj.valueOf = function() &#123; return 99 &#125;obj + 1 &gt;&gt; 100// 数组自动转换规则+[] &gt;&gt; 0+[1] &gt;&gt; 1+[1,2] &gt;&gt; NaN 类型判断 typeof对于任何变量来说，使用typeof运算符总是以字符串的形式返回以下6种类型之一：❑ “number”❑ “string”❑ “boolean”❑ “object”❑ “function”❑ “undefined” 令人疑惑的是，在使用 typeof 检测null值时，返回的是“object”，而不是“null”。 12345typeof null &gt;&gt; &#x27;object&#x27;typeof [] &gt;&gt; &#x27;object&#x27;typeof &#123;&#125; &gt;&gt; &#x27;object&#x27; instanceof instanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。 这个在判断对象时存在一些不确定性，来看下例子： 🌰 123456function Person(name) &#123; this.name = name&#125;const p = new Person(&#x27;hello&#x27;)p instanceof Person &gt;&gt; truep instanceof Object &gt;&gt; true 再看一个🌰: 123456789101112131415function Person(name) &#123; this.name = name&#125;function Child(name) &#123; this.name = name&#125;Child.prototype = Person.prototypeChild.prototype.constructor = Childconst p = new Child(&#x27;hello child&#x27;)p instanceof Person &gt;&gt; truep instanceof Object &gt;&gt; true 如果是判断数组呢? 1234567[] instanceof Array &gt;&gt; true[] instanceof Object &gt;&gt; true// 当然这种方式存在不确定性，我们可以使用 Array.isArray() 方法来判断Array.isArray([]) &gt;&gt; trueArray.isArray(&#123;&#125;) &gt;&gt; false 从上面例子可以看出，使用 instanceof 来判断时存在种种不确定性，只要出现在原型链上的对象都会返回 true，使用的时候还需要着重注意！ 为什么会这样，想必大家应该想起来了！ Object类是所有对象类型的的父类! toString() 方法 每个对象都有一个 toString() 方法，当该对象被表示为一个文本值时，或者一个对象以预期的字符串方式引用时自动调用。默认情况下，toString() 方法被每个 Object 对象继承。如果此方法在自定义对象中未被覆盖，toString() 返回 “[object type]”，其中 type 是对象的类型。 toString() 方法，它定义在 Object 的原型对象上，对象在调用时会返回一个表示该对象的字符串。 使用 toString() 方法检测对象类型是最安全、最准确的。调用toString()方法把对象转换为字符串，然后通过检测字符串中是否包含数组所特有的标志字符可以确定对象的类型。 为什么说 toString 方法用来检测对象类型是最安全、最准确的，我们慢慢来看吧~ 先看看在对象上直接使用 toString会是什么结果： 1234567891011121314const obj = &#123; a: 1 &#125;const arr = [1, 2]obj.toString() &gt;&gt; &#x27;[object Object]&#x27;// 如果是数组的话，则输出字符串arr.toString() &gt;&gt; &#x27;1,2&#x27;// 当然我们可以重写/覆盖原型链上的 toString 方法obj.toString = function() &#123; return &#x27;overwrite&#x27;&#125;obj.toString() &gt;&gt; &#x27;overwrite&#x27; 既然 toString 方法定义在原型对象上，我们看看如果单独调用它，会是什么结果呢? 1Object.prototype.toString() &gt;&gt; &#x27;[object Object]&#x27; 如果通过 call/apply 方法，改变 toString 方法内部的 this 执行，又会是什么结果呢? 看到如下结果，我相信这绝对可以完美 cover 住项目里面所有的类型判断了！所以说它是最安全、最准确的类型判断，没有异议吧😏 12345678910111213141516171819202122Object.prototype.toString.call(&#123;&#125;) &gt;&gt; &#x27;[object Object]&#x27;Object.prototype.toString.call([]) &gt;&gt; &#x27;[object Array]&#x27;Object.prototype.toString.call(function()&#123;&#125;) &gt;&gt; &#x27;[object Function]&#x27;Object.prototype.toString.call(&#x27;&#x27;) &gt;&gt; &#x27;[object String]&#x27;Object.prototype.toString.call(1) &gt;&gt; &#x27;[object Number]&#x27;Object.prototype.toString.call(true) &gt;&gt; &#x27;[object Boolean]&#x27;Object.prototype.toString.call(null) &gt;&gt; &#x27;[object Null]&#x27;Object.prototype.toString.call(undefined) &gt;&gt; &#x27;[object Undefined]&#x27;Object.prototype.toString.call() &gt;&gt; &#x27;[object Undefined]&#x27;Object.prototype.toString.call(new Date()) &gt;&gt; &#x27;[object Date]&#x27;Object.prototype.toString.call(/at/) &gt;&gt; &#x27;[object RegExp]&#x27; 那么它是如何做到的呢，我们来扒一扒它的原理！在 toString 方法被调用时，会执行以下几个操作步骤: 获取this指向的那个对象的[[Class]]属性的值。（call/apply 改变 this 指向） 计算出三个字符串”[object “、 第一步的操作结果、 以及 “]” 连接后的新字符串。 返回第二步的操作结果，也就是类似 &#39;[object Type]&#39; 这种格式字符串。 需要注意的是，对象的[[Class]]属性是无法直接访问的，它一个内部属性，所有的对象(原生对象和宿主对象)都拥有该属性，且不能被任何人修改。在规范中，[[Class]]是这么定义的：内部属性描述。 如果要单独或者对象的 [[Class]]，我们可以这样做: 12const targetObj = []Object.prototype.toString.call(targetObj).slice(8, -1) &gt;&gt; &#x27;Array&#x27; 既然它如此好用，难道就没有缺点吗？ 答案是当然有的，毕竟凡事都不可能那么绝对的嘛！ 那么缺点是什么呢？第一，toString() 会进行装箱操作，产生很多临时对象。（装箱就是将基本类型的数据，通过引用类型包装起来，从而可以使用引用类上的方法） 12345// 你肯定不能这样用1.toString() &gt;&gt; SyntaxError: Invalid or unexpected token// 你必须这样用(1).toString() &gt;&gt; &#x27;1&#x27; 第二，无法区分自定义对象类型，用来判断这类对象时，返回的都是Object，这样我们就需要通过 instanceof 来判断了。 1234function Person()&#123;&#125;const p = new Person()Object.prototype.toString.call(p) &gt;&gt; &#x27;[object Object]&#x27; 字符串JavaScript解释器强制约定字符串在堆区存储的数据是不可变的，也就是说，JavaScript解释器强制约定字符串在堆区存储的数据是不可变的。 参考资料参考资料 ↩参考资料2 ↩","categories":[],"tags":[{"name":"JavaScript, ES6","slug":"JavaScript-ES6","permalink":"http://yoursite.com/tags/JavaScript-ES6/"}]},{"title":"React Hooks","slug":"react-hooks","date":"2022-03-26T10:41:01.000Z","updated":"2024-06-11T08:52:17.350Z","comments":true,"path":"/post/react-hooks.html","link":"","permalink":"http://yoursite.com/post/react-hooks.html","excerpt":"什么是React Hooks，为什么需要它？如何高效的使用React Hooks？如何自定义 Hooks ？如何通过 Hooks 做性能优化？","text":"https://zh-hans.react.dev/reference/react/useCallback Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。 Hook 规则 只在最顶层使用 Hook 只在 React 函数中调用 Hook。（或：在自定义 Hook 中调用其他 Hook） useEffectuseEffect接收一个方法作为第一个参数，该方法会在每次渲染完成之后被调用。 它还会接收一个数组作为第二个参数，这个数组里的每一项内容都会被用来进行渲染前后的对比，如果没有变化，则不会调用该副作用。 useEffect 的依赖如果是个空数组，只会在 DOM 渲染后触发一次，以后都不会触发，相当于 componentDidMount。可以看做是 componentDidMount、componentDidUpdate、componentWillUnmount 三个钩子的组合。 useEffect可以返回一个函数，用于清除副作用的回调。每当组件卸载，或者组件重新render，都会触发这个函数。而且是先执行 return 函数，再执行 useEffect 内部逻辑。 注意事项 对于传入的对象类型，React只会判断引用是否改变，不会判断对象的属性是否改变，所以建议依赖数组中传入的变量都采用基本类型。 useEffect的清除函数在每次重新渲染时都会执行，而不是只在卸载组件的时候执行。 useLayoutEffect在使用方式上，和 useEffect 一样。大部分情况只使用 useEffect 即可，当 useEffect 处理 DOM 相关逻辑时，出现问题了，再使用 useLayoutEffect。 至于出现什么问题，我们先来看一下它俩的执行时机。 组件更新过程浏览器中 JS 线程和渲染线程是互斥的，渲染线程必须等待 JS 线程执行完毕，才开始渲染组件。 而我们的组件从 state 变化到渲染，大概可以分为如下几步： 改变 state，触发更新 state 变量的方法 React 根据组件返回的 vDOM 进行 diff 对比，得到新的 Virtual DOM 将新的 VDom 交给渲染线程处理，绘制到浏览器上 用户看到新的内容 而 useEffect 是在第 3 步之后执行的，也就是在浏览器绘制之后才调用。而且 useEffect 还是异步执行的，所谓异步就是被 requestIdleCallback 封装，只在浏览器空闲时候才会执行，保证了不会阻塞浏览器的渲染过程。 useLayoutEffect 就不一样，它会在第二步之后（diff 出新的 vDOM 之后），第三步之前执行，也就是渲染之前同步执行的，所以会等它执行完再渲染页面到浏览器上。 如果我们要操作 DOM，或者不想出现 内容闪烁 的问题，我们就是用 useLayoutEffect 明显的闪烁问题 1234567891011121314151617useEffect(() =&gt; &#123; async function fn() &#123; if (num === 1) &#123; let count = 0; console.time(); for (let i = 0; i &lt; 99999999; i++) &#123; count++; &#125; console.timeEnd(); setNum(Math.random()); &#125; &#125; fn(); return () =&gt; &#123; console.log(&quot;useEffect tail function&quot;); &#125;;&#125;, [num]); 没有闪烁问题 1234567891011121314151617useLayoutEffect(() =&gt; &#123; async function fn() &#123; if (num === 1) &#123; let count = 0; console.time(); for (let i = 0; i &lt; 99999999; i++) &#123; count++; &#125; console.timeEnd(); setNum(Math.random()); &#125; &#125; fn(); return () =&gt; &#123; console.log(&quot;useLayoutEffect tail function&quot;); &#125;;&#125;, [num]); 总结 优先使用 useEffect，因为它是异步执行的，不会阻塞渲染 会影响到渲染的操作尽量放到 useLayoutEffect中去，避免出现闪烁问题 useLayoutEffect和componentDidMount是等价的，会同步调用，阻塞渲染 在服务端渲染的时候 useLayoutEffect 无效，使用 useEffect 性能优化—— useCallback、useMemo、memo尽可能的保证组件不去发生变化，发生变化的因素有：state、props、context。 那么 React 是如何比较这三者的呢？ 答案是 内存地址。 比如说，对比一个 function，对比的就是这个函数在内存中的地址，通过地址的判断，从而判断 props 是否发生了改变。 React.memo https://react.docschina.org/docs/hooks-faq.html#how-do-i-implement-shouldcomponentupdate React.memo 包裹一个组件，来对它的 props 进行浅比较。等效于 PureComponent，但它只比较 props。（也可以通过第二个参数指定一个自定义的比较函数来比较新旧 props。如果函数返回 true，就会跳过更新。） 123456789101112131415161718192021222324// 不使用 memo，每一次 setCount，都会造成 Child 组件重新 renderconst Child = () =&gt; &#123; console.log(&#x27;Child&#x27;) return ( &lt;&gt;Child component&lt;/&gt; )&#125;const Demo = () =&gt; &#123; const [count, setCount] = useState(0) return ( &lt;&gt; &lt;button onClick=&#123;() =&gt; setCount(count =&gt; count + 1)&#125;&gt;+&lt;/button&gt; &lt;Child /&gt; &lt;/&gt; )&#125;// 通过 memo 包裹后，Child 组件不会再重新 render了。const Child = memo(() =&gt; &#123; console.log(&#x27;Child&#x27;) return ( &lt;&gt;Child component&lt;/&gt; )&#125;) 当 memo 感知 props 没有发生改变时，不会重新 render 组件。如果传入 count 进来，Child组件就会重新 render。 总结： 如果我们将 setCount 当做 prop 传入进来，Child 不会重新render（因为 setCount 在内存中的地址没有发生改变） 如果传入我们自己定义的方法 (fn)进来，Child会重新 render，因为 Demo 组件每次更新 count 后，重新生成了 fn 函数。 只是传了个 fn ，不想让 Child 组件更新怎么办？那就要用到 useCallback 钩子了 useMemo把“创建”函数和依赖项数组作为参数传入 useMemo，它仅会在某个依赖项改变时才重新计算。 1234// 只有当 count 发生变化时，才会重新计算const computedCount = useMemo(() =&gt; &#123; return count * 2&#125;, [count]) useMemo 也允许你跳过一次子节点的昂贵的重新渲染，比如组件初始化时，需要一次大量的计算，后续就不会再改变了： 123456789101112function Parent(&#123; a, b &#125;) &#123; // Only re-rendered if `a` changes: const child1 = useMemo(() =&gt; &lt;Child1 a=&#123;a&#125; /&gt;, [a]); // Only re-rendered if `b` changes: const child2 = useMemo(() =&gt; &lt;Child2 b=&#123;b&#125; /&gt;, [b]); return ( &lt;&gt; &#123;child1&#125; &#123;child2&#125; &lt;/&gt; )&#125; useCallback把内联回调函数及依赖项数组作为参数传入 useCallback，它将返回该回调函数的 memoized 版本，该回调函数仅在某个依赖项改变时才会更新。 下面这个例子，即使我们用 memo 包裹了组件，因为 setCount 每次会引起 Demo 组件重新 render，生成了新的 fn 函数(内存地址发生了变化)，导致 Child 也会重新 render。 123456789101112131415161718192021interface IChild &#123; fn: React.Dispatch&lt;React.SetStateAction&lt;number&gt;&gt;&#125;const Child = memo((props: IChild) =&gt; &#123; console.log(&#x27;Child&#x27;) return ( &lt;&gt;Child component&lt;/&gt; )&#125;)const Demo = () =&gt; &#123; const [count, setCount] = useState(0) const fn = () =&gt; console.log(&#x27;is fn&#x27;) return ( &lt;&gt; &lt;button onClick=&#123;() =&gt; setCount(count =&gt; count + 1)&#125;&gt;+&lt;/button&gt; &lt;Child fn=&#123;fn&#125; /&gt; &lt;/&gt; )&#125; 我们不想让 fn 函数的 内存地址 发生变化，怎么办呢？使用 useCallback 钩子将其包裹起来即可。 注意：useMemo 也可以这样用，缓存 fn，从而使得 Child 组件不会重复 render。 1234567// 省略...const fn = useCallback(() =&gt; &#123; console.log(&#x27;is fn&#x27;)&#125;, [])// 省略... 这样 fn 函数就是一个缓存函数了，即使 count 不停的发生变化，也不会造成 Child 组件重复 render。 总结: 当 Demo 组件内部 state 发生了改变引起 Demo 和 Child 组件重新 render 并且 Child 组件接受了一个来自 Demo 组件自定义的方法（fn） 如果不希望 Child 组件重新 render，那么就需要用 useCallback 钩子将自定义方法 fn 包裹起来 因为 Child 组件 props 里面的 fn 和 useCallback 返回的 fn 指向的是内存中的同一个地址，那么 Child 组件就不会更新 useCallback 返回新函数的条件是：依赖项（第二个参数）发生了改变。 如果说我们的 Child 组件，本身就是需要根据 count 变化而变化，那么就不需要加这个缓存 API了，反而增加其计算负担。 设计组件不要为了使用钩子，过渡的使用钩子，好的页面设计，也许用不上这些钩子。 把不变的组件和变化的组件抽离出来！ 比如可以把 count 相关部分抽离成一个 Count 组件，使其和 Child 组件同层级排列，Count 组件和 Child 组件分开了，也不会引起 Child 组件做多余的 render。 12&lt;Count /&gt;&lt;Child prop=&#123;fn&#125; /&gt; 或者是通过 props.children 渲染 Child，也不会造成 Child 重新 render。 12345678910111213141516171819202122const Count = (props: any) =&gt; &#123; const [count, setCount] = useState(0) return ( &lt;&gt; &lt;button onClick=&#123;() =&gt; setCount(count =&gt; count + 1)&#125;&gt;+&lt;/button&gt; &#123;/* children 不会重新 render */&#125; &#123;props.children&#125; &lt;/&gt; )&#125;const Demo = () =&gt; &#123; // fn 永远不会变化 const fn = () =&gt; &#123;&#125; return ( &lt;&gt; &lt;Count&gt; &lt;Child fn=&#123;fn&#125; /&gt; &lt;/Count&gt; &lt;/&gt; )&#125; useRef / createRef https://zh-hans.react.dev/reference/react/useRef 获取 DOM 元素。 当 React 创建 DOM 节点并将其渲染到屏幕时，React 将会把 DOM 节点设置为你的 ref 对象的 current 属性。 当节点从屏幕上移除时，React 将把 current 属性设回 null。 123456const inputRef = useRef(null) // const inputRef = React.createRef()inputRef.current.focus()// ...return &lt;input ref=&#123;inputRef&#125; /&gt;; 通过使用 ref，你可以确保： 可以在重新渲染之间 存储信息（不像是普通对象，每次渲染都会重置）。 改变它 不会触发重新渲染（不像是 state 变量，会触发重新渲染）。 对于你的组件的每个副本来说，这些信息都是本地的（不像是外面的变量，是共享的）。 注意： 不要在渲染期间写入 或者读取 ref.current。 12345678function MyComponent() &#123; // ... // 🚩 不要在渲染期间写入 ref myRef.current = 123; // ... // 🚩 不要在渲染期间读取 ref return &lt;h1&gt;&#123;myOtherRef.current&#125;&lt;/h1&gt;;&#125; 可以在 事件处理程序或者 effects 中读取和写入 ref。 12345678910111213function MyComponent() &#123; // ... useEffect(() =&gt; &#123; // ✅ 你可以在 effects 中读取和写入 ref myRef.current = 123; &#125;); // ... function handleClick() &#123; // ✅ 你可以在事件处理程序中读取和写入 ref doSomething(myOtherRef.current); &#125; // ...&#125; 编写一个获取 DOM信息的 hook假如我们想要获取一个 dom 的 getBoundingClientRect 信息，我可能这样做： 12345678910111213141516const getHeight = useMemo(() =&gt; &#123; return (node: HTMLObjectElement) =&gt; &#123; if (node) &#123; setHeight(node.getBoundingClientRect().height) &#125; &#125;&#125;, [])// 或者const getHeight = useCallback((node: HTMLObjectElement) =&gt; &#123; if (node) &#123; setHeight(node.getBoundingClientRect().height) &#125;&#125;, []) 但是，获取 DOM 信息的逻辑其实很通用，所以考虑下，将 ref 逻辑抽离成一个 Hook。 1234567891011// hookconst useClientRect = () =&gt; &#123; const [rect, setRect] = useState(null) const ref = useCallback(node =&gt; &#123; if (node) &#123; setRect(node.getBoundingClientRect()) &#125; &#125;, []) return [rect, ref]&#125; 使用 123456const [rect, ref] = useClientRect()&lt;h1 ref=&#123;ref&#125;&gt;是 H1 标签 &#123;count&#125;&lt;/h1&gt;&#123; rect &amp;&amp; &lt;span&gt;&#123;rect.height&#125;&lt;/span&gt;&#125; React.forwardRef https://zh-hans.react.dev/reference/react/forwardRef React.forwardRef 会创建一个React组件，这个组件能够将其接受的 ref 属性转发到其组件树下的另一个组件中。 123456789const FancyInput = forwardRef((props, ref) =&gt; ( &lt;input ref=&#123;inputRef&#125; &#123;...props&#125; /&gt;))// 这样可以拿到 input 元素了const inputEle = React.createRef() // const inputEle = useRef(null)&lt;FancyInput ref=&#123;inputEle&#125; /&gt; useImperativeHandle(ref, createHandle, [deps]) useImperativeHandle 可以让你在使用 ref 时自定义暴露给父组件的实例值。 对上述代码中所涉参数说明如下。 ref：定义current对象的ref属性。 createHandle：这是一个函数，返回值是一个对象，即这个ref的current对象。 [deps]：依赖列表。当监听的依赖发生变化时，useImperativeHandle才会重新将子组件的实例属性输出到父组件ref的current属性上；如果为空数组，则不会重新输出。 1234567891011121314151617181920212223// 注意：该组件接收到的 ref 已不再被转发到 &lt;input&gt; 中。const FancyInput = forwardRef((props, ref) =&gt; &#123; const inputRef = useRef(); useImperativeHandle(ref, () =&gt; (&#123; focus: () =&gt; &#123; inputRef.current.focus(); &#125;, scrollIntoView() &#123; inputRef.current.scrollIntoView(); &#125;, &#125;)); return &lt;input ref=&#123;inputRef&#125; &#123;...props&#125; /&gt;;&#125;)const ref = React.createRef()&lt;FancyInput ref=&#123;ref&#125; /&gt;// 通过 ref 获取到 useImperativeHandle 暴露的方法ref.current.focus()ref.current.scrollIntoView() useReducer &amp; useContext(组件级的状态管理)123456789101112131415161718192021222324252627282930// reducers/app-reducer.jsimport &#123; createContext &#125; from &quot;react&quot;;// 创建上下文export const AppContext = createContext(null);// 定义 app reducerexport const appReducer = (state, action) =&gt; &#123; switch (action.type) &#123; case &quot;UPDATE_AGE&quot;: return &#123; ...state, user: &#123; ...state.user, age: action.payload &#125; &#125;; case &quot;UPDATE_NAME&quot;: return &#123; ...state, user: &#123; ...state.user, name: action.payload &#125; &#125;; default: return state; &#125;&#125;; 使用上下文，可以使用 AppContext.consumer，但是有了 useContext 了就没必要了。 根组件使用 AppContext.Provider 提供状态 initState 123456789101112131415161718import &#123; appReducer, AppContext &#125; from &quot;./reducers/app-reducer.js&quot;;function App() &#123; const initState = &#123; type: &quot;person&quot;, user: &#123; age: 18, name: &quot;alex.cheng&quot; &#125; &#125;; const [state, dispatch] = useReducer(appReducer, initState); return ( &lt;AppContext.Provider value=&#123;state&#125;&gt; &lt;Child1 /&gt; &lt;/AppContext.Provider&gt; );&#125; 子孙子组件通过 useContext(AppContext) 获取上下文提供的状态。 12345678const Child = () =&gt; &#123; const context = useContext(AppContext); return ( &lt;&gt; &lt;p&gt;&#123;JSON.stringify(context)&#125;&lt;/p&gt; &lt;/&gt; );&#125;; 参考资料ahooks 官网 ↩","categories":[],"tags":[{"name":"React，Hooks","slug":"React，Hooks","permalink":"http://yoursite.com/tags/React%EF%BC%8CHooks/"}]},{"title":"Hello_AlexCc","slug":"first-article","date":"2019-07-29T15:37:50.000Z","updated":"2024-06-11T09:01:55.999Z","comments":true,"path":"/post/first-article.html","link":"","permalink":"http://yoursite.com/post/first-article.html","excerpt":"First Article","text":"What This is my first Blog. No.112345if (true) &#123; console.log(&quot;Hello_AlexCc!😊&quot;)&#125;return &quot;ヾ(◍°∇°◍)ﾉﾞ&quot;","categories":[],"tags":[{"name":"One","slug":"One","permalink":"http://yoursite.com/tags/One/"}]}],"categories":[],"tags":[{"name":"axios、fetch、AbortController","slug":"axios、fetch、AbortController","permalink":"http://yoursite.com/tags/axios%E3%80%81fetch%E3%80%81AbortController/"},{"name":"visibilityChange document.visibilityState","slug":"visibilityChange-document-visibilityState","permalink":"http://yoursite.com/tags/visibilityChange-document-visibilityState/"},{"name":"IntersectionObserver","slug":"IntersectionObserver","permalink":"http://yoursite.com/tags/IntersectionObserver/"},{"name":"memory-leak","slug":"memory-leak","permalink":"http://yoursite.com/tags/memory-leak/"},{"name":"Vite","slug":"Vite","permalink":"http://yoursite.com/tags/Vite/"},{"name":"HTTP","slug":"HTTP","permalink":"http://yoursite.com/tags/HTTP/"},{"name":"React","slug":"React","permalink":"http://yoursite.com/tags/React/"},{"name":"Webpack、ESBuild、Rollup、Vite、Parcel","slug":"Webpack、ESBuild、Rollup、Vite、Parcel","permalink":"http://yoursite.com/tags/Webpack%E3%80%81ESBuild%E3%80%81Rollup%E3%80%81Vite%E3%80%81Parcel/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"},{"name":"组件","slug":"组件","permalink":"http://yoursite.com/tags/%E7%BB%84%E4%BB%B6/"},{"name":"微前端","slug":"微前端","permalink":"http://yoursite.com/tags/%E5%BE%AE%E5%89%8D%E7%AB%AF/"},{"name":"工程化,Vue3,通用功能","slug":"工程化-Vue3-通用功能","permalink":"http://yoursite.com/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96-Vue3-%E9%80%9A%E7%94%A8%E5%8A%9F%E8%83%BD/"},{"name":"工程化,Vue3","slug":"工程化-Vue3","permalink":"http://yoursite.com/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96-Vue3/"},{"name":"工程化,Vue3,Config","slug":"工程化-Vue3-Config","permalink":"http://yoursite.com/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96-Vue3-Config/"},{"name":"Reactive,Vue3","slug":"Reactive-Vue3","permalink":"http://yoursite.com/tags/Reactive-Vue3/"},{"name":"Nginx","slug":"Nginx","permalink":"http://yoursite.com/tags/Nginx/"},{"name":"Nodejs","slug":"Nodejs","permalink":"http://yoursite.com/tags/Nodejs/"},{"name":"JS,Vue-Router,Vue3,","slug":"JS-Vue-Router-Vue3","permalink":"http://yoursite.com/tags/JS-Vue-Router-Vue3/"},{"name":"JS,Vue3","slug":"JS-Vue3","permalink":"http://yoursite.com/tags/JS-Vue3/"},{"name":"JS","slug":"JS","permalink":"http://yoursite.com/tags/JS/"},{"name":"ESM、babel","slug":"ESM、babel","permalink":"http://yoursite.com/tags/ESM%E3%80%81babel/"},{"name":"TypeScript TS","slug":"TypeScript-TS","permalink":"http://yoursite.com/tags/TypeScript-TS/"},{"name":"NativeApp webApp HybridApp","slug":"NativeApp-webApp-HybridApp","permalink":"http://yoursite.com/tags/NativeApp-webApp-HybridApp/"},{"name":"JavaScript, ES6","slug":"JavaScript-ES6","permalink":"http://yoursite.com/tags/JavaScript-ES6/"},{"name":"React，Hooks","slug":"React，Hooks","permalink":"http://yoursite.com/tags/React%EF%BC%8CHooks/"},{"name":"One","slug":"One","permalink":"http://yoursite.com/tags/One/"}]}